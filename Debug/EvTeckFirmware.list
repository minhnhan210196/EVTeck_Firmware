
EvTeckFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ea10  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000418c  0801eba0  0801eba0  0002eba0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022d2c  08022d2c  0004ed64  2**0
                  CONTENTS
  4 .ARM          00000008  08022d2c  08022d2c  00032d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022d34  08022d34  0004ed64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08022d34  08022d34  00032d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08022d38  08022d38  00032d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000304  10000000  08022d3c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       0000ea60  10000304  08023040  00040304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000d5bc  20000000  20000000  00050000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000d5bc  2000d5bc  00050000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0004ed64  2**0
                  CONTENTS, READONLY
 13 .debug_info   0005f3f3  00000000  00000000  0004ed94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000b14f  00000000  00000000  000ae187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002e98  00000000  00000000  000b92d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002d30  00000000  00000000  000bc170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00037b69  00000000  00000000  000beea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000483ba  00000000  00000000  000f6a09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f6a11  00000000  00000000  0013edc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  002357d4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000d0f4  00000000  00000000  00235828  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000000 	.word	0x20000000
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801eb88 	.word	0x0801eb88

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000004 	.word	0x20000004
 80001cc:	0801eb88 	.word	0x0801eb88

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
	sprintf(buff_debug,"Task %s over flow hook\r\n",pcTaskName);
 8000f4a:	683a      	ldr	r2, [r7, #0]
 8000f4c:	4903      	ldr	r1, [pc, #12]	; (8000f5c <vApplicationStackOverflowHook+0x1c>)
 8000f4e:	4804      	ldr	r0, [pc, #16]	; (8000f60 <vApplicationStackOverflowHook+0x20>)
 8000f50:	f01b fea8 	bl	801cca4 <siprintf>
}
 8000f54:	bf00      	nop
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	0801eba0 	.word	0x0801eba0
 8000f60:	20001748 	.word	0x20001748

08000f64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f68:	f000 fd78 	bl	8001a5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f6c:	f000 f824 	bl	8000fb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f70:	f000 f986 	bl	8001280 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f74:	f000 f95c 	bl	8001230 <MX_DMA_Init>
  MX_SPI1_Init();
 8000f78:	f000 f888 	bl	800108c <MX_SPI1_Init>
  MX_TIM1_Init();
 8000f7c:	f000 f8bc 	bl	80010f8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f80:	f000 f90a 	bl	8001198 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000f84:	4808      	ldr	r0, [pc, #32]	; (8000fa8 <main+0x44>)
 8000f86:	f003 ffbf 	bl	8004f08 <HAL_TIM_Base_Start>
  board_init();
 8000f8a:	f019 fa77 	bl	801a47c <board_init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f8e:	f005 fa07 	bl	80063a0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f92:	4a06      	ldr	r2, [pc, #24]	; (8000fac <main+0x48>)
 8000f94:	2100      	movs	r1, #0
 8000f96:	4806      	ldr	r0, [pc, #24]	; (8000fb0 <main+0x4c>)
 8000f98:	f005 fa61 	bl	800645e <osThreadNew>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	4a05      	ldr	r2, [pc, #20]	; (8000fb4 <main+0x50>)
 8000fa0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000fa2:	f005 fa21 	bl	80063e8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fa6:	e7fe      	b.n	8000fa6 <main+0x42>
 8000fa8:	2000184c 	.word	0x2000184c
 8000fac:	080226fc 	.word	0x080226fc
 8000fb0:	08001469 	.word	0x08001469
 8000fb4:	20001848 	.word	0x20001848

08000fb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b094      	sub	sp, #80	; 0x50
 8000fbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fbe:	f107 0320 	add.w	r3, r7, #32
 8000fc2:	2230      	movs	r2, #48	; 0x30
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f01a ff1c 	bl	801be04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fcc:	f107 030c 	add.w	r3, r7, #12
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60bb      	str	r3, [r7, #8]
 8000fe0:	4b28      	ldr	r3, [pc, #160]	; (8001084 <SystemClock_Config+0xcc>)
 8000fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe4:	4a27      	ldr	r2, [pc, #156]	; (8001084 <SystemClock_Config+0xcc>)
 8000fe6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fea:	6413      	str	r3, [r2, #64]	; 0x40
 8000fec:	4b25      	ldr	r3, [pc, #148]	; (8001084 <SystemClock_Config+0xcc>)
 8000fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff4:	60bb      	str	r3, [r7, #8]
 8000ff6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	4b22      	ldr	r3, [pc, #136]	; (8001088 <SystemClock_Config+0xd0>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a21      	ldr	r2, [pc, #132]	; (8001088 <SystemClock_Config+0xd0>)
 8001002:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001006:	6013      	str	r3, [r2, #0]
 8001008:	4b1f      	ldr	r3, [pc, #124]	; (8001088 <SystemClock_Config+0xd0>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001010:	607b      	str	r3, [r7, #4]
 8001012:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001014:	2301      	movs	r3, #1
 8001016:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001018:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800101e:	2302      	movs	r3, #2
 8001020:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001022:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001026:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001028:	2304      	movs	r3, #4
 800102a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800102c:	23a8      	movs	r3, #168	; 0xa8
 800102e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001030:	2302      	movs	r3, #2
 8001032:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001034:	2304      	movs	r3, #4
 8001036:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001038:	f107 0320 	add.w	r3, r7, #32
 800103c:	4618      	mov	r0, r3
 800103e:	f002 ff8b 	bl	8003f58 <HAL_RCC_OscConfig>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001048:	f000 fa36 	bl	80014b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800104c:	230f      	movs	r3, #15
 800104e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001050:	2302      	movs	r3, #2
 8001052:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001058:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800105c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800105e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001062:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001064:	f107 030c 	add.w	r3, r7, #12
 8001068:	2105      	movs	r1, #5
 800106a:	4618      	mov	r0, r3
 800106c:	f003 f9ec 	bl	8004448 <HAL_RCC_ClockConfig>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001076:	f000 fa1f 	bl	80014b8 <Error_Handler>
  }
}
 800107a:	bf00      	nop
 800107c:	3750      	adds	r7, #80	; 0x50
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40023800 	.word	0x40023800
 8001088:	40007000 	.word	0x40007000

0800108c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001090:	4b17      	ldr	r3, [pc, #92]	; (80010f0 <MX_SPI1_Init+0x64>)
 8001092:	4a18      	ldr	r2, [pc, #96]	; (80010f4 <MX_SPI1_Init+0x68>)
 8001094:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001096:	4b16      	ldr	r3, [pc, #88]	; (80010f0 <MX_SPI1_Init+0x64>)
 8001098:	f44f 7282 	mov.w	r2, #260	; 0x104
 800109c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800109e:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <MX_SPI1_Init+0x64>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <MX_SPI1_Init+0x64>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010aa:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <MX_SPI1_Init+0x64>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010b0:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <MX_SPI1_Init+0x64>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010b6:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <MX_SPI1_Init+0x64>)
 80010b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010be:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <MX_SPI1_Init+0x64>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010c4:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <MX_SPI1_Init+0x64>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010ca:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <MX_SPI1_Init+0x64>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010d0:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <MX_SPI1_Init+0x64>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010d6:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <MX_SPI1_Init+0x64>)
 80010d8:	220a      	movs	r2, #10
 80010da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010dc:	4804      	ldr	r0, [pc, #16]	; (80010f0 <MX_SPI1_Init+0x64>)
 80010de:	f003 fbcd 	bl	800487c <HAL_SPI_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80010e8:	f000 f9e6 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20001894 	.word	0x20001894
 80010f4:	40013000 	.word	0x40013000

080010f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010fe:	f107 0308 	add.w	r3, r7, #8
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800110c:	463b      	mov	r3, r7
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001114:	4b1e      	ldr	r3, [pc, #120]	; (8001190 <MX_TIM1_Init+0x98>)
 8001116:	4a1f      	ldr	r2, [pc, #124]	; (8001194 <MX_TIM1_Init+0x9c>)
 8001118:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 800111a:	4b1d      	ldr	r3, [pc, #116]	; (8001190 <MX_TIM1_Init+0x98>)
 800111c:	22a7      	movs	r2, #167	; 0xa7
 800111e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001120:	4b1b      	ldr	r3, [pc, #108]	; (8001190 <MX_TIM1_Init+0x98>)
 8001122:	2200      	movs	r2, #0
 8001124:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001126:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <MX_TIM1_Init+0x98>)
 8001128:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800112c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800112e:	4b18      	ldr	r3, [pc, #96]	; (8001190 <MX_TIM1_Init+0x98>)
 8001130:	2200      	movs	r2, #0
 8001132:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001134:	4b16      	ldr	r3, [pc, #88]	; (8001190 <MX_TIM1_Init+0x98>)
 8001136:	2200      	movs	r2, #0
 8001138:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800113a:	4b15      	ldr	r3, [pc, #84]	; (8001190 <MX_TIM1_Init+0x98>)
 800113c:	2200      	movs	r2, #0
 800113e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001140:	4813      	ldr	r0, [pc, #76]	; (8001190 <MX_TIM1_Init+0x98>)
 8001142:	f003 fe91 	bl	8004e68 <HAL_TIM_Base_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800114c:	f000 f9b4 	bl	80014b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001150:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001154:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001156:	f107 0308 	add.w	r3, r7, #8
 800115a:	4619      	mov	r1, r3
 800115c:	480c      	ldr	r0, [pc, #48]	; (8001190 <MX_TIM1_Init+0x98>)
 800115e:	f004 f8b3 	bl	80052c8 <HAL_TIM_ConfigClockSource>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001168:	f000 f9a6 	bl	80014b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800116c:	2300      	movs	r3, #0
 800116e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001170:	2300      	movs	r3, #0
 8001172:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001174:	463b      	mov	r3, r7
 8001176:	4619      	mov	r1, r3
 8001178:	4805      	ldr	r0, [pc, #20]	; (8001190 <MX_TIM1_Init+0x98>)
 800117a:	f004 facf 	bl	800571c <HAL_TIMEx_MasterConfigSynchronization>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001184:	f000 f998 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001188:	bf00      	nop
 800118a:	3718      	adds	r7, #24
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	2000184c 	.word	0x2000184c
 8001194:	40010000 	.word	0x40010000

08001198 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800119e:	f107 0308 	add.w	r3, r7, #8
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]
 80011aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ac:	463b      	mov	r3, r7
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011b4:	4b1d      	ldr	r3, [pc, #116]	; (800122c <MX_TIM2_Init+0x94>)
 80011b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 167;
 80011bc:	4b1b      	ldr	r3, [pc, #108]	; (800122c <MX_TIM2_Init+0x94>)
 80011be:	22a7      	movs	r2, #167	; 0xa7
 80011c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c2:	4b1a      	ldr	r3, [pc, #104]	; (800122c <MX_TIM2_Init+0x94>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80011c8:	4b18      	ldr	r3, [pc, #96]	; (800122c <MX_TIM2_Init+0x94>)
 80011ca:	f04f 32ff 	mov.w	r2, #4294967295
 80011ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d0:	4b16      	ldr	r3, [pc, #88]	; (800122c <MX_TIM2_Init+0x94>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d6:	4b15      	ldr	r3, [pc, #84]	; (800122c <MX_TIM2_Init+0x94>)
 80011d8:	2200      	movs	r2, #0
 80011da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011dc:	4813      	ldr	r0, [pc, #76]	; (800122c <MX_TIM2_Init+0x94>)
 80011de:	f003 fe43 	bl	8004e68 <HAL_TIM_Base_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80011e8:	f000 f966 	bl	80014b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011f2:	f107 0308 	add.w	r3, r7, #8
 80011f6:	4619      	mov	r1, r3
 80011f8:	480c      	ldr	r0, [pc, #48]	; (800122c <MX_TIM2_Init+0x94>)
 80011fa:	f004 f865 	bl	80052c8 <HAL_TIM_ConfigClockSource>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001204:	f000 f958 	bl	80014b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001208:	2300      	movs	r3, #0
 800120a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800120c:	2300      	movs	r3, #0
 800120e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001210:	463b      	mov	r3, r7
 8001212:	4619      	mov	r1, r3
 8001214:	4805      	ldr	r0, [pc, #20]	; (800122c <MX_TIM2_Init+0x94>)
 8001216:	f004 fa81 	bl	800571c <HAL_TIMEx_MasterConfigSynchronization>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001220:	f000 f94a 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001224:	bf00      	nop
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	200018ec 	.word	0x200018ec

08001230 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	607b      	str	r3, [r7, #4]
 800123a:	4b10      	ldr	r3, [pc, #64]	; (800127c <MX_DMA_Init+0x4c>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	4a0f      	ldr	r2, [pc, #60]	; (800127c <MX_DMA_Init+0x4c>)
 8001240:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001244:	6313      	str	r3, [r2, #48]	; 0x30
 8001246:	4b0d      	ldr	r3, [pc, #52]	; (800127c <MX_DMA_Init+0x4c>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800124e:	607b      	str	r3, [r7, #4]
 8001250:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	2105      	movs	r1, #5
 8001256:	2038      	movs	r0, #56	; 0x38
 8001258:	f000 fd1e 	bl	8001c98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800125c:	2038      	movs	r0, #56	; 0x38
 800125e:	f000 fd37 	bl	8001cd0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8001262:	2200      	movs	r2, #0
 8001264:	2105      	movs	r1, #5
 8001266:	203b      	movs	r0, #59	; 0x3b
 8001268:	f000 fd16 	bl	8001c98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800126c:	203b      	movs	r0, #59	; 0x3b
 800126e:	f000 fd2f 	bl	8001cd0 <HAL_NVIC_EnableIRQ>

}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40023800 	.word	0x40023800

08001280 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08e      	sub	sp, #56	; 0x38
 8001284:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001286:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	60da      	str	r2, [r3, #12]
 8001294:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	623b      	str	r3, [r7, #32]
 800129a:	4b6e      	ldr	r3, [pc, #440]	; (8001454 <MX_GPIO_Init+0x1d4>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a6d      	ldr	r2, [pc, #436]	; (8001454 <MX_GPIO_Init+0x1d4>)
 80012a0:	f043 0310 	orr.w	r3, r3, #16
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b6b      	ldr	r3, [pc, #428]	; (8001454 <MX_GPIO_Init+0x1d4>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f003 0310 	and.w	r3, r3, #16
 80012ae:	623b      	str	r3, [r7, #32]
 80012b0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	61fb      	str	r3, [r7, #28]
 80012b6:	4b67      	ldr	r3, [pc, #412]	; (8001454 <MX_GPIO_Init+0x1d4>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a66      	ldr	r2, [pc, #408]	; (8001454 <MX_GPIO_Init+0x1d4>)
 80012bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b64      	ldr	r3, [pc, #400]	; (8001454 <MX_GPIO_Init+0x1d4>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ca:	61fb      	str	r3, [r7, #28]
 80012cc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	61bb      	str	r3, [r7, #24]
 80012d2:	4b60      	ldr	r3, [pc, #384]	; (8001454 <MX_GPIO_Init+0x1d4>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	4a5f      	ldr	r2, [pc, #380]	; (8001454 <MX_GPIO_Init+0x1d4>)
 80012d8:	f043 0304 	orr.w	r3, r3, #4
 80012dc:	6313      	str	r3, [r2, #48]	; 0x30
 80012de:	4b5d      	ldr	r3, [pc, #372]	; (8001454 <MX_GPIO_Init+0x1d4>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	f003 0304 	and.w	r3, r3, #4
 80012e6:	61bb      	str	r3, [r7, #24]
 80012e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]
 80012ee:	4b59      	ldr	r3, [pc, #356]	; (8001454 <MX_GPIO_Init+0x1d4>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a58      	ldr	r2, [pc, #352]	; (8001454 <MX_GPIO_Init+0x1d4>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4b56      	ldr	r3, [pc, #344]	; (8001454 <MX_GPIO_Init+0x1d4>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	617b      	str	r3, [r7, #20]
 8001304:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	613b      	str	r3, [r7, #16]
 800130a:	4b52      	ldr	r3, [pc, #328]	; (8001454 <MX_GPIO_Init+0x1d4>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	4a51      	ldr	r2, [pc, #324]	; (8001454 <MX_GPIO_Init+0x1d4>)
 8001310:	f043 0320 	orr.w	r3, r3, #32
 8001314:	6313      	str	r3, [r2, #48]	; 0x30
 8001316:	4b4f      	ldr	r3, [pc, #316]	; (8001454 <MX_GPIO_Init+0x1d4>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	f003 0320 	and.w	r3, r3, #32
 800131e:	613b      	str	r3, [r7, #16]
 8001320:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	4b4b      	ldr	r3, [pc, #300]	; (8001454 <MX_GPIO_Init+0x1d4>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	4a4a      	ldr	r2, [pc, #296]	; (8001454 <MX_GPIO_Init+0x1d4>)
 800132c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001330:	6313      	str	r3, [r2, #48]	; 0x30
 8001332:	4b48      	ldr	r3, [pc, #288]	; (8001454 <MX_GPIO_Init+0x1d4>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	60bb      	str	r3, [r7, #8]
 8001342:	4b44      	ldr	r3, [pc, #272]	; (8001454 <MX_GPIO_Init+0x1d4>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	4a43      	ldr	r2, [pc, #268]	; (8001454 <MX_GPIO_Init+0x1d4>)
 8001348:	f043 0302 	orr.w	r3, r3, #2
 800134c:	6313      	str	r3, [r2, #48]	; 0x30
 800134e:	4b41      	ldr	r3, [pc, #260]	; (8001454 <MX_GPIO_Init+0x1d4>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	60bb      	str	r3, [r7, #8]
 8001358:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	607b      	str	r3, [r7, #4]
 800135e:	4b3d      	ldr	r3, [pc, #244]	; (8001454 <MX_GPIO_Init+0x1d4>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	4a3c      	ldr	r2, [pc, #240]	; (8001454 <MX_GPIO_Init+0x1d4>)
 8001364:	f043 0308 	orr.w	r3, r3, #8
 8001368:	6313      	str	r3, [r2, #48]	; 0x30
 800136a:	4b3a      	ldr	r3, [pc, #232]	; (8001454 <MX_GPIO_Init+0x1d4>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	f003 0308 	and.w	r3, r3, #8
 8001372:	607b      	str	r3, [r7, #4]
 8001374:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VAL_Pin|MOTOR_Pin|MUX_B3_Pin|MUX_A4_Pin
 8001376:	2200      	movs	r2, #0
 8001378:	f44f 7163 	mov.w	r1, #908	; 0x38c
 800137c:	4836      	ldr	r0, [pc, #216]	; (8001458 <MX_GPIO_Init+0x1d8>)
 800137e:	f002 fdd1 	bl	8003f24 <HAL_GPIO_WritePin>
                          |MUX_B4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, MUX_A1_Pin|MUX_B1_Pin|MUX_A2_Pin, GPIO_PIN_RESET);
 8001382:	2200      	movs	r2, #0
 8001384:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001388:	4834      	ldr	r0, [pc, #208]	; (800145c <MX_GPIO_Init+0x1dc>)
 800138a:	f002 fdcb 	bl	8003f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, MUX_B2_Pin|MUX_A3_Pin|ADC_CNV2_Pin|ADC_RS2_Pin
 800138e:	2200      	movs	r2, #0
 8001390:	2137      	movs	r1, #55	; 0x37
 8001392:	4833      	ldr	r0, [pc, #204]	; (8001460 <MX_GPIO_Init+0x1e0>)
 8001394:	f002 fdc6 	bl	8003f24 <HAL_GPIO_WritePin>
                          |ADC_CS2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ADC_CNV1_Pin|ADC_RS1_Pin|ADC_CS1_Pin, GPIO_PIN_RESET);
 8001398:	2200      	movs	r2, #0
 800139a:	f44f 6150 	mov.w	r1, #3328	; 0xd00
 800139e:	4831      	ldr	r0, [pc, #196]	; (8001464 <MX_GPIO_Init+0x1e4>)
 80013a0:	f002 fdc0 	bl	8003f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : VAL_Pin MOTOR_Pin MUX_B3_Pin MUX_A4_Pin
                           MUX_B4_Pin */
  GPIO_InitStruct.Pin = VAL_Pin|MOTOR_Pin|MUX_B3_Pin|MUX_A4_Pin
 80013a4:	f44f 7363 	mov.w	r3, #908	; 0x38c
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
                          |MUX_B4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013aa:	2301      	movs	r3, #1
 80013ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b2:	2300      	movs	r3, #0
 80013b4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ba:	4619      	mov	r1, r3
 80013bc:	4826      	ldr	r0, [pc, #152]	; (8001458 <MX_GPIO_Init+0x1d8>)
 80013be:	f002 fbfd 	bl	8003bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : MUX_A1_Pin MUX_B1_Pin MUX_A2_Pin */
  GPIO_InitStruct.Pin = MUX_A1_Pin|MUX_B1_Pin|MUX_A2_Pin;
 80013c2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80013c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c8:	2301      	movs	r3, #1
 80013ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d0:	2300      	movs	r3, #0
 80013d2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d8:	4619      	mov	r1, r3
 80013da:	4820      	ldr	r0, [pc, #128]	; (800145c <MX_GPIO_Init+0x1dc>)
 80013dc:	f002 fbee 	bl	8003bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : MUX_B2_Pin MUX_A3_Pin ADC_CNV2_Pin ADC_RS2_Pin
                           ADC_CS2_Pin */
  GPIO_InitStruct.Pin = MUX_B2_Pin|MUX_A3_Pin|ADC_CNV2_Pin|ADC_RS2_Pin
 80013e0:	2337      	movs	r3, #55	; 0x37
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24
                          |ADC_CS2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e4:	2301      	movs	r3, #1
 80013e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ec:	2300      	movs	r3, #0
 80013ee:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f4:	4619      	mov	r1, r3
 80013f6:	481a      	ldr	r0, [pc, #104]	; (8001460 <MX_GPIO_Init+0x1e0>)
 80013f8:	f002 fbe0 	bl	8003bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC_CNV1_Pin ADC_RS1_Pin ADC_CS1_Pin */
  GPIO_InitStruct.Pin = ADC_CNV1_Pin|ADC_RS1_Pin|ADC_CS1_Pin;
 80013fc:	f44f 6350 	mov.w	r3, #3328	; 0xd00
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001402:	2301      	movs	r3, #1
 8001404:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140a:	2300      	movs	r3, #0
 800140c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800140e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001412:	4619      	mov	r1, r3
 8001414:	4813      	ldr	r0, [pc, #76]	; (8001464 <MX_GPIO_Init+0x1e4>)
 8001416:	f002 fbd1 	bl	8003bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_BUSY1_Pin */
  GPIO_InitStruct.Pin = ADC_BUSY1_Pin;
 800141a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800141e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001420:	2300      	movs	r3, #0
 8001422:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ADC_BUSY1_GPIO_Port, &GPIO_InitStruct);
 8001428:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800142c:	4619      	mov	r1, r3
 800142e:	480d      	ldr	r0, [pc, #52]	; (8001464 <MX_GPIO_Init+0x1e4>)
 8001430:	f002 fbc4 	bl	8003bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_BUSY2_Pin */
  GPIO_InitStruct.Pin = ADC_BUSY2_Pin;
 8001434:	2308      	movs	r3, #8
 8001436:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001438:	2300      	movs	r3, #0
 800143a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ADC_BUSY2_GPIO_Port, &GPIO_InitStruct);
 8001440:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001444:	4619      	mov	r1, r3
 8001446:	4806      	ldr	r0, [pc, #24]	; (8001460 <MX_GPIO_Init+0x1e0>)
 8001448:	f002 fbb8 	bl	8003bbc <HAL_GPIO_Init>

}
 800144c:	bf00      	nop
 800144e:	3738      	adds	r7, #56	; 0x38
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40023800 	.word	0x40023800
 8001458:	40021000 	.word	0x40021000
 800145c:	40021400 	.word	0x40021400
 8001460:	40021800 	.word	0x40021800
 8001464:	40020c00 	.word	0x40020c00

08001468 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8001470:	f004 f9e4 	bl	800583c <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  app_init();
 8001474:	f018 f984 	bl	8019780 <app_init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001478:	2001      	movs	r0, #1
 800147a:	f005 f883 	bl	8006584 <osDelay>
 800147e:	e7fb      	b.n	8001478 <StartDefaultTask+0x10>

08001480 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a08      	ldr	r2, [pc, #32]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d101      	bne.n	8001496 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001492:	f000 fb05 	bl	8001aa0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if(htim->Instance == htim2.Instance){
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	429a      	cmp	r2, r3
 80014a0:	d102      	bne.n	80014a8 <HAL_TIM_PeriodElapsedCallback+0x28>
	  app_read_sensor_task((void*)htim);
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f018 fb5f 	bl	8019b66 <app_read_sensor_task>
  }
  /* USER CODE END Callback 1 */
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40001000 	.word	0x40001000
 80014b4:	200018ec 	.word	0x200018ec

080014b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014bc:	b672      	cpsid	i
}
 80014be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014c0:	e7fe      	b.n	80014c0 <Error_Handler+0x8>
	...

080014c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	607b      	str	r3, [r7, #4]
 80014ce:	4b12      	ldr	r3, [pc, #72]	; (8001518 <HAL_MspInit+0x54>)
 80014d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d2:	4a11      	ldr	r2, [pc, #68]	; (8001518 <HAL_MspInit+0x54>)
 80014d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014d8:	6453      	str	r3, [r2, #68]	; 0x44
 80014da:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <HAL_MspInit+0x54>)
 80014dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014e2:	607b      	str	r3, [r7, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	603b      	str	r3, [r7, #0]
 80014ea:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <HAL_MspInit+0x54>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	4a0a      	ldr	r2, [pc, #40]	; (8001518 <HAL_MspInit+0x54>)
 80014f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f4:	6413      	str	r3, [r2, #64]	; 0x40
 80014f6:	4b08      	ldr	r3, [pc, #32]	; (8001518 <HAL_MspInit+0x54>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fe:	603b      	str	r3, [r7, #0]
 8001500:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001502:	2200      	movs	r2, #0
 8001504:	210f      	movs	r1, #15
 8001506:	f06f 0001 	mvn.w	r0, #1
 800150a:	f000 fbc5 	bl	8001c98 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40023800 	.word	0x40023800

0800151c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08a      	sub	sp, #40	; 0x28
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001524:	f107 0314 	add.w	r3, r7, #20
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a48      	ldr	r2, [pc, #288]	; (800165c <HAL_SPI_MspInit+0x140>)
 800153a:	4293      	cmp	r3, r2
 800153c:	f040 808a 	bne.w	8001654 <HAL_SPI_MspInit+0x138>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001540:	2300      	movs	r3, #0
 8001542:	613b      	str	r3, [r7, #16]
 8001544:	4b46      	ldr	r3, [pc, #280]	; (8001660 <HAL_SPI_MspInit+0x144>)
 8001546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001548:	4a45      	ldr	r2, [pc, #276]	; (8001660 <HAL_SPI_MspInit+0x144>)
 800154a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800154e:	6453      	str	r3, [r2, #68]	; 0x44
 8001550:	4b43      	ldr	r3, [pc, #268]	; (8001660 <HAL_SPI_MspInit+0x144>)
 8001552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001554:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001558:	613b      	str	r3, [r7, #16]
 800155a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800155c:	2300      	movs	r3, #0
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	4b3f      	ldr	r3, [pc, #252]	; (8001660 <HAL_SPI_MspInit+0x144>)
 8001562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001564:	4a3e      	ldr	r2, [pc, #248]	; (8001660 <HAL_SPI_MspInit+0x144>)
 8001566:	f043 0302 	orr.w	r3, r3, #2
 800156a:	6313      	str	r3, [r2, #48]	; 0x30
 800156c:	4b3c      	ldr	r3, [pc, #240]	; (8001660 <HAL_SPI_MspInit+0x144>)
 800156e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001570:	f003 0302 	and.w	r3, r3, #2
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001578:	2338      	movs	r3, #56	; 0x38
 800157a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157c:	2302      	movs	r3, #2
 800157e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001584:	2303      	movs	r3, #3
 8001586:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001588:	2305      	movs	r3, #5
 800158a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	4619      	mov	r1, r3
 8001592:	4834      	ldr	r0, [pc, #208]	; (8001664 <HAL_SPI_MspInit+0x148>)
 8001594:	f002 fb12 	bl	8003bbc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001598:	4b33      	ldr	r3, [pc, #204]	; (8001668 <HAL_SPI_MspInit+0x14c>)
 800159a:	4a34      	ldr	r2, [pc, #208]	; (800166c <HAL_SPI_MspInit+0x150>)
 800159c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800159e:	4b32      	ldr	r3, [pc, #200]	; (8001668 <HAL_SPI_MspInit+0x14c>)
 80015a0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80015a4:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015a6:	4b30      	ldr	r3, [pc, #192]	; (8001668 <HAL_SPI_MspInit+0x14c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015ac:	4b2e      	ldr	r3, [pc, #184]	; (8001668 <HAL_SPI_MspInit+0x14c>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015b2:	4b2d      	ldr	r3, [pc, #180]	; (8001668 <HAL_SPI_MspInit+0x14c>)
 80015b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015b8:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015ba:	4b2b      	ldr	r3, [pc, #172]	; (8001668 <HAL_SPI_MspInit+0x14c>)
 80015bc:	2200      	movs	r2, #0
 80015be:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015c0:	4b29      	ldr	r3, [pc, #164]	; (8001668 <HAL_SPI_MspInit+0x14c>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80015c6:	4b28      	ldr	r3, [pc, #160]	; (8001668 <HAL_SPI_MspInit+0x14c>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80015cc:	4b26      	ldr	r3, [pc, #152]	; (8001668 <HAL_SPI_MspInit+0x14c>)
 80015ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015d2:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015d4:	4b24      	ldr	r3, [pc, #144]	; (8001668 <HAL_SPI_MspInit+0x14c>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80015da:	4823      	ldr	r0, [pc, #140]	; (8001668 <HAL_SPI_MspInit+0x14c>)
 80015dc:	f000 fb86 	bl	8001cec <HAL_DMA_Init>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 80015e6:	f7ff ff67 	bl	80014b8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a1e      	ldr	r2, [pc, #120]	; (8001668 <HAL_SPI_MspInit+0x14c>)
 80015ee:	64da      	str	r2, [r3, #76]	; 0x4c
 80015f0:	4a1d      	ldr	r2, [pc, #116]	; (8001668 <HAL_SPI_MspInit+0x14c>)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80015f6:	4b1e      	ldr	r3, [pc, #120]	; (8001670 <HAL_SPI_MspInit+0x154>)
 80015f8:	4a1e      	ldr	r2, [pc, #120]	; (8001674 <HAL_SPI_MspInit+0x158>)
 80015fa:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80015fc:	4b1c      	ldr	r3, [pc, #112]	; (8001670 <HAL_SPI_MspInit+0x154>)
 80015fe:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001602:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001604:	4b1a      	ldr	r3, [pc, #104]	; (8001670 <HAL_SPI_MspInit+0x154>)
 8001606:	2240      	movs	r2, #64	; 0x40
 8001608:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800160a:	4b19      	ldr	r3, [pc, #100]	; (8001670 <HAL_SPI_MspInit+0x154>)
 800160c:	2200      	movs	r2, #0
 800160e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001610:	4b17      	ldr	r3, [pc, #92]	; (8001670 <HAL_SPI_MspInit+0x154>)
 8001612:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001616:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001618:	4b15      	ldr	r3, [pc, #84]	; (8001670 <HAL_SPI_MspInit+0x154>)
 800161a:	2200      	movs	r2, #0
 800161c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800161e:	4b14      	ldr	r3, [pc, #80]	; (8001670 <HAL_SPI_MspInit+0x154>)
 8001620:	2200      	movs	r2, #0
 8001622:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001624:	4b12      	ldr	r3, [pc, #72]	; (8001670 <HAL_SPI_MspInit+0x154>)
 8001626:	2200      	movs	r2, #0
 8001628:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800162a:	4b11      	ldr	r3, [pc, #68]	; (8001670 <HAL_SPI_MspInit+0x154>)
 800162c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001630:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001632:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <HAL_SPI_MspInit+0x154>)
 8001634:	2200      	movs	r2, #0
 8001636:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001638:	480d      	ldr	r0, [pc, #52]	; (8001670 <HAL_SPI_MspInit+0x154>)
 800163a:	f000 fb57 	bl	8001cec <HAL_DMA_Init>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <HAL_SPI_MspInit+0x12c>
    {
      Error_Handler();
 8001644:	f7ff ff38 	bl	80014b8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4a09      	ldr	r2, [pc, #36]	; (8001670 <HAL_SPI_MspInit+0x154>)
 800164c:	649a      	str	r2, [r3, #72]	; 0x48
 800164e:	4a08      	ldr	r2, [pc, #32]	; (8001670 <HAL_SPI_MspInit+0x154>)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001654:	bf00      	nop
 8001656:	3728      	adds	r7, #40	; 0x28
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40013000 	.word	0x40013000
 8001660:	40023800 	.word	0x40023800
 8001664:	40020400 	.word	0x40020400
 8001668:	20001934 	.word	0x20001934
 800166c:	40026410 	.word	0x40026410
 8001670:	20001994 	.word	0x20001994
 8001674:	40026458 	.word	0x40026458

08001678 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a28      	ldr	r2, [pc, #160]	; (8001728 <HAL_TIM_Base_MspInit+0xb0>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d12e      	bne.n	80016e8 <HAL_TIM_Base_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	4b27      	ldr	r3, [pc, #156]	; (800172c <HAL_TIM_Base_MspInit+0xb4>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001692:	4a26      	ldr	r2, [pc, #152]	; (800172c <HAL_TIM_Base_MspInit+0xb4>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	6453      	str	r3, [r2, #68]	; 0x44
 800169a:	4b24      	ldr	r3, [pc, #144]	; (800172c <HAL_TIM_Base_MspInit+0xb4>)
 800169c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 80016a6:	2200      	movs	r2, #0
 80016a8:	2105      	movs	r1, #5
 80016aa:	2018      	movs	r0, #24
 80016ac:	f000 faf4 	bl	8001c98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80016b0:	2018      	movs	r0, #24
 80016b2:	f000 fb0d 	bl	8001cd0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2105      	movs	r1, #5
 80016ba:	2019      	movs	r0, #25
 80016bc:	f000 faec 	bl	8001c98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80016c0:	2019      	movs	r0, #25
 80016c2:	f000 fb05 	bl	8001cd0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 80016c6:	2200      	movs	r2, #0
 80016c8:	2105      	movs	r1, #5
 80016ca:	201a      	movs	r0, #26
 80016cc:	f000 fae4 	bl	8001c98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80016d0:	201a      	movs	r0, #26
 80016d2:	f000 fafd 	bl	8001cd0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2105      	movs	r1, #5
 80016da:	201b      	movs	r0, #27
 80016dc:	f000 fadc 	bl	8001c98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80016e0:	201b      	movs	r0, #27
 80016e2:	f000 faf5 	bl	8001cd0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016e6:	e01a      	b.n	800171e <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM2)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016f0:	d115      	bne.n	800171e <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	4b0d      	ldr	r3, [pc, #52]	; (800172c <HAL_TIM_Base_MspInit+0xb4>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	4a0c      	ldr	r2, [pc, #48]	; (800172c <HAL_TIM_Base_MspInit+0xb4>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6413      	str	r3, [r2, #64]	; 0x40
 8001702:	4b0a      	ldr	r3, [pc, #40]	; (800172c <HAL_TIM_Base_MspInit+0xb4>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	60bb      	str	r3, [r7, #8]
 800170c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800170e:	2200      	movs	r2, #0
 8001710:	2105      	movs	r1, #5
 8001712:	201c      	movs	r0, #28
 8001714:	f000 fac0 	bl	8001c98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001718:	201c      	movs	r0, #28
 800171a:	f000 fad9 	bl	8001cd0 <HAL_NVIC_EnableIRQ>
}
 800171e:	bf00      	nop
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40010000 	.word	0x40010000
 800172c:	40023800 	.word	0x40023800

08001730 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b08c      	sub	sp, #48	; 0x30
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001738:	2300      	movs	r3, #0
 800173a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800173c:	2300      	movs	r3, #0
 800173e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001740:	2200      	movs	r2, #0
 8001742:	6879      	ldr	r1, [r7, #4]
 8001744:	2036      	movs	r0, #54	; 0x36
 8001746:	f000 faa7 	bl	8001c98 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800174a:	2036      	movs	r0, #54	; 0x36
 800174c:	f000 fac0 	bl	8001cd0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001750:	2300      	movs	r3, #0
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	4b1f      	ldr	r3, [pc, #124]	; (80017d4 <HAL_InitTick+0xa4>)
 8001756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001758:	4a1e      	ldr	r2, [pc, #120]	; (80017d4 <HAL_InitTick+0xa4>)
 800175a:	f043 0310 	orr.w	r3, r3, #16
 800175e:	6413      	str	r3, [r2, #64]	; 0x40
 8001760:	4b1c      	ldr	r3, [pc, #112]	; (80017d4 <HAL_InitTick+0xa4>)
 8001762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001764:	f003 0310 	and.w	r3, r3, #16
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800176c:	f107 0210 	add.w	r2, r7, #16
 8001770:	f107 0314 	add.w	r3, r7, #20
 8001774:	4611      	mov	r1, r2
 8001776:	4618      	mov	r0, r3
 8001778:	f003 f84e 	bl	8004818 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800177c:	f003 f838 	bl	80047f0 <HAL_RCC_GetPCLK1Freq>
 8001780:	4603      	mov	r3, r0
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001788:	4a13      	ldr	r2, [pc, #76]	; (80017d8 <HAL_InitTick+0xa8>)
 800178a:	fba2 2303 	umull	r2, r3, r2, r3
 800178e:	0c9b      	lsrs	r3, r3, #18
 8001790:	3b01      	subs	r3, #1
 8001792:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001794:	4b11      	ldr	r3, [pc, #68]	; (80017dc <HAL_InitTick+0xac>)
 8001796:	4a12      	ldr	r2, [pc, #72]	; (80017e0 <HAL_InitTick+0xb0>)
 8001798:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800179a:	4b10      	ldr	r3, [pc, #64]	; (80017dc <HAL_InitTick+0xac>)
 800179c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017a0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80017a2:	4a0e      	ldr	r2, [pc, #56]	; (80017dc <HAL_InitTick+0xac>)
 80017a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017a6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80017a8:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <HAL_InitTick+0xac>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ae:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <HAL_InitTick+0xac>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80017b4:	4809      	ldr	r0, [pc, #36]	; (80017dc <HAL_InitTick+0xac>)
 80017b6:	f003 fb57 	bl	8004e68 <HAL_TIM_Base_Init>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d104      	bne.n	80017ca <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80017c0:	4806      	ldr	r0, [pc, #24]	; (80017dc <HAL_InitTick+0xac>)
 80017c2:	f003 fc09 	bl	8004fd8 <HAL_TIM_Base_Start_IT>
 80017c6:	4603      	mov	r3, r0
 80017c8:	e000      	b.n	80017cc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3730      	adds	r7, #48	; 0x30
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40023800 	.word	0x40023800
 80017d8:	431bde83 	.word	0x431bde83
 80017dc:	200019f4 	.word	0x200019f4
 80017e0:	40001000 	.word	0x40001000

080017e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017e8:	e7fe      	b.n	80017e8 <NMI_Handler+0x4>

080017ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ea:	b480      	push	{r7}
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ee:	e7fe      	b.n	80017ee <HardFault_Handler+0x4>

080017f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f4:	e7fe      	b.n	80017f4 <MemManage_Handler+0x4>

080017f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017fa:	e7fe      	b.n	80017fa <BusFault_Handler+0x4>

080017fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001800:	e7fe      	b.n	8001800 <UsageFault_Handler+0x4>

08001802 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001814:	4802      	ldr	r0, [pc, #8]	; (8001820 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001816:	f003 fc4f 	bl	80050b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	2000184c 	.word	0x2000184c

08001824 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001828:	4802      	ldr	r0, [pc, #8]	; (8001834 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800182a:	f003 fc45 	bl	80050b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	2000184c 	.word	0x2000184c

08001838 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800183c:	4802      	ldr	r0, [pc, #8]	; (8001848 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800183e:	f003 fc3b 	bl	80050b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	2000184c 	.word	0x2000184c

0800184c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001850:	4802      	ldr	r0, [pc, #8]	; (800185c <TIM1_CC_IRQHandler+0x10>)
 8001852:	f003 fc31 	bl	80050b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	2000184c 	.word	0x2000184c

08001860 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001864:	4802      	ldr	r0, [pc, #8]	; (8001870 <TIM2_IRQHandler+0x10>)
 8001866:	f003 fc27 	bl	80050b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	200018ec 	.word	0x200018ec

08001874 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001878:	4802      	ldr	r0, [pc, #8]	; (8001884 <TIM6_DAC_IRQHandler+0x10>)
 800187a:	f003 fc1d 	bl	80050b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	200019f4 	.word	0x200019f4

08001888 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800188c:	4802      	ldr	r0, [pc, #8]	; (8001898 <DMA2_Stream0_IRQHandler+0x10>)
 800188e:	f000 fadb 	bl	8001e48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20001934 	.word	0x20001934

0800189c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80018a0:	4802      	ldr	r0, [pc, #8]	; (80018ac <DMA2_Stream3_IRQHandler+0x10>)
 80018a2:	f000 fad1 	bl	8001e48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20001994 	.word	0x20001994

080018b0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80018b4:	4802      	ldr	r0, [pc, #8]	; (80018c0 <ETH_IRQHandler+0x10>)
 80018b6:	f001 f8e7 	bl	8002a88 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	200033a8 	.word	0x200033a8

080018c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
	return 1;
 80018c8:	2301      	movs	r3, #1
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <_kill>:

int _kill(int pid, int sig)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018de:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <_kill+0x20>)
 80018e0:	2216      	movs	r2, #22
 80018e2:	601a      	str	r2, [r3, #0]
	return -1;
 80018e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	20008334 	.word	0x20008334

080018f8 <_exit>:

void _exit (int status)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001900:	f04f 31ff 	mov.w	r1, #4294967295
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f7ff ffe5 	bl	80018d4 <_kill>
	while (1) {}		/* Make sure we hang here */
 800190a:	e7fe      	b.n	800190a <_exit+0x12>

0800190c <_close>:
	}
	return len;
}

int _close(int file)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
	return -1;
 8001914:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001918:	4618      	mov	r0, r3
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001934:	605a      	str	r2, [r3, #4]
	return 0;
 8001936:	2300      	movs	r3, #0
}
 8001938:	4618      	mov	r0, r3
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <_isatty>:

int _isatty(int file)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
	return 1;
 800194c:	2301      	movs	r3, #1
}
 800194e:	4618      	mov	r0, r3
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800195a:	b480      	push	{r7}
 800195c:	b085      	sub	sp, #20
 800195e:	af00      	add	r7, sp, #0
 8001960:	60f8      	str	r0, [r7, #12]
 8001962:	60b9      	str	r1, [r7, #8]
 8001964:	607a      	str	r2, [r7, #4]
	return 0;
 8001966:	2300      	movs	r3, #0
}
 8001968:	4618      	mov	r0, r3
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001974:	b480      	push	{r7}
 8001976:	b087      	sub	sp, #28
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800197c:	4a14      	ldr	r2, [pc, #80]	; (80019d0 <_sbrk+0x5c>)
 800197e:	4b15      	ldr	r3, [pc, #84]	; (80019d4 <_sbrk+0x60>)
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001988:	4b13      	ldr	r3, [pc, #76]	; (80019d8 <_sbrk+0x64>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d102      	bne.n	8001996 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001990:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <_sbrk+0x64>)
 8001992:	4a12      	ldr	r2, [pc, #72]	; (80019dc <_sbrk+0x68>)
 8001994:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001996:	4b10      	ldr	r3, [pc, #64]	; (80019d8 <_sbrk+0x64>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4413      	add	r3, r2
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d205      	bcs.n	80019b0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80019a4:	4b0e      	ldr	r3, [pc, #56]	; (80019e0 <_sbrk+0x6c>)
 80019a6:	220c      	movs	r2, #12
 80019a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019aa:	f04f 33ff 	mov.w	r3, #4294967295
 80019ae:	e009      	b.n	80019c4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80019b0:	4b09      	ldr	r3, [pc, #36]	; (80019d8 <_sbrk+0x64>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019b6:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <_sbrk+0x64>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4413      	add	r3, r2
 80019be:	4a06      	ldr	r2, [pc, #24]	; (80019d8 <_sbrk+0x64>)
 80019c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019c2:	68fb      	ldr	r3, [r7, #12]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	371c      	adds	r7, #28
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	20020000 	.word	0x20020000
 80019d4:	00000400 	.word	0x00000400
 80019d8:	2000001c 	.word	0x2000001c
 80019dc:	2000d5c0 	.word	0x2000d5c0
 80019e0:	20008334 	.word	0x20008334

080019e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019e8:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <SystemInit+0x20>)
 80019ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ee:	4a05      	ldr	r2, [pc, #20]	; (8001a04 <SystemInit+0x20>)
 80019f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a0c:	480d      	ldr	r0, [pc, #52]	; (8001a44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a0e:	490e      	ldr	r1, [pc, #56]	; (8001a48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a10:	4a0e      	ldr	r2, [pc, #56]	; (8001a4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a14:	e002      	b.n	8001a1c <LoopCopyDataInit>

08001a16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a1a:	3304      	adds	r3, #4

08001a1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a20:	d3f9      	bcc.n	8001a16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a22:	4a0b      	ldr	r2, [pc, #44]	; (8001a50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a24:	4c0b      	ldr	r4, [pc, #44]	; (8001a54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a28:	e001      	b.n	8001a2e <LoopFillZerobss>

08001a2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a2c:	3204      	adds	r2, #4

08001a2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a30:	d3fb      	bcc.n	8001a2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a32:	f7ff ffd7 	bl	80019e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a36:	f01a f977 	bl	801bd28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a3a:	f7ff fa93 	bl	8000f64 <main>
  bx  lr    
 8001a3e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a44:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8001a48:	10000304 	.word	0x10000304
  ldr r2, =_sidata
 8001a4c:	08022d3c 	.word	0x08022d3c
  ldr r2, =_sbss
 8001a50:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8001a54:	2000d5bc 	.word	0x2000d5bc

08001a58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a58:	e7fe      	b.n	8001a58 <ADC_IRQHandler>
	...

08001a5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a60:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <HAL_Init+0x40>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a0d      	ldr	r2, [pc, #52]	; (8001a9c <HAL_Init+0x40>)
 8001a66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a6c:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <HAL_Init+0x40>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a0a      	ldr	r2, [pc, #40]	; (8001a9c <HAL_Init+0x40>)
 8001a72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a78:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <HAL_Init+0x40>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a07      	ldr	r2, [pc, #28]	; (8001a9c <HAL_Init+0x40>)
 8001a7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a84:	2003      	movs	r0, #3
 8001a86:	f000 f8fc 	bl	8001c82 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	f7ff fe50 	bl	8001730 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a90:	f7ff fd18 	bl	80014c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40023c00 	.word	0x40023c00

08001aa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aa4:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <HAL_IncTick+0x20>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <HAL_IncTick+0x24>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4413      	add	r3, r2
 8001ab0:	4a04      	ldr	r2, [pc, #16]	; (8001ac4 <HAL_IncTick+0x24>)
 8001ab2:	6013      	str	r3, [r2, #0]
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	10000008 	.word	0x10000008
 8001ac4:	20001a3c 	.word	0x20001a3c

08001ac8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  return uwTick;
 8001acc:	4b03      	ldr	r3, [pc, #12]	; (8001adc <HAL_GetTick+0x14>)
 8001ace:	681b      	ldr	r3, [r3, #0]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	20001a3c 	.word	0x20001a3c

08001ae0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ae8:	f7ff ffee 	bl	8001ac8 <HAL_GetTick>
 8001aec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af8:	d005      	beq.n	8001b06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001afa:	4b0a      	ldr	r3, [pc, #40]	; (8001b24 <HAL_Delay+0x44>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	461a      	mov	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	4413      	add	r3, r2
 8001b04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b06:	bf00      	nop
 8001b08:	f7ff ffde 	bl	8001ac8 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d8f7      	bhi.n	8001b08 <HAL_Delay+0x28>
  {
  }
}
 8001b18:	bf00      	nop
 8001b1a:	bf00      	nop
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	10000008 	.word	0x10000008

08001b28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b38:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <__NVIC_SetPriorityGrouping+0x44>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b3e:	68ba      	ldr	r2, [r7, #8]
 8001b40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b44:	4013      	ands	r3, r2
 8001b46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b5a:	4a04      	ldr	r2, [pc, #16]	; (8001b6c <__NVIC_SetPriorityGrouping+0x44>)
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	60d3      	str	r3, [r2, #12]
}
 8001b60:	bf00      	nop
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b74:	4b04      	ldr	r3, [pc, #16]	; (8001b88 <__NVIC_GetPriorityGrouping+0x18>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	0a1b      	lsrs	r3, r3, #8
 8001b7a:	f003 0307 	and.w	r3, r3, #7
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	db0b      	blt.n	8001bb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
 8001ba0:	f003 021f 	and.w	r2, r3, #31
 8001ba4:	4907      	ldr	r1, [pc, #28]	; (8001bc4 <__NVIC_EnableIRQ+0x38>)
 8001ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001baa:	095b      	lsrs	r3, r3, #5
 8001bac:	2001      	movs	r0, #1
 8001bae:	fa00 f202 	lsl.w	r2, r0, r2
 8001bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	e000e100 	.word	0xe000e100

08001bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	6039      	str	r1, [r7, #0]
 8001bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	db0a      	blt.n	8001bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	490c      	ldr	r1, [pc, #48]	; (8001c14 <__NVIC_SetPriority+0x4c>)
 8001be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be6:	0112      	lsls	r2, r2, #4
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	440b      	add	r3, r1
 8001bec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bf0:	e00a      	b.n	8001c08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	4908      	ldr	r1, [pc, #32]	; (8001c18 <__NVIC_SetPriority+0x50>)
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	3b04      	subs	r3, #4
 8001c00:	0112      	lsls	r2, r2, #4
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	440b      	add	r3, r1
 8001c06:	761a      	strb	r2, [r3, #24]
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	e000e100 	.word	0xe000e100
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b089      	sub	sp, #36	; 0x24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f1c3 0307 	rsb	r3, r3, #7
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	bf28      	it	cs
 8001c3a:	2304      	movcs	r3, #4
 8001c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	3304      	adds	r3, #4
 8001c42:	2b06      	cmp	r3, #6
 8001c44:	d902      	bls.n	8001c4c <NVIC_EncodePriority+0x30>
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3b03      	subs	r3, #3
 8001c4a:	e000      	b.n	8001c4e <NVIC_EncodePriority+0x32>
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c50:	f04f 32ff 	mov.w	r2, #4294967295
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43da      	mvns	r2, r3
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	401a      	ands	r2, r3
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c64:	f04f 31ff 	mov.w	r1, #4294967295
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6e:	43d9      	mvns	r1, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c74:	4313      	orrs	r3, r2
         );
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3724      	adds	r7, #36	; 0x24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b082      	sub	sp, #8
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f7ff ff4c 	bl	8001b28 <__NVIC_SetPriorityGrouping>
}
 8001c90:	bf00      	nop
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
 8001ca4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001caa:	f7ff ff61 	bl	8001b70 <__NVIC_GetPriorityGrouping>
 8001cae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	68b9      	ldr	r1, [r7, #8]
 8001cb4:	6978      	ldr	r0, [r7, #20]
 8001cb6:	f7ff ffb1 	bl	8001c1c <NVIC_EncodePriority>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cc0:	4611      	mov	r1, r2
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff ff80 	bl	8001bc8 <__NVIC_SetPriority>
}
 8001cc8:	bf00      	nop
 8001cca:	3718      	adds	r7, #24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff ff54 	bl	8001b8c <__NVIC_EnableIRQ>
}
 8001ce4:	bf00      	nop
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001cf8:	f7ff fee6 	bl	8001ac8 <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d101      	bne.n	8001d08 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e099      	b.n	8001e3c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f022 0201 	bic.w	r2, r2, #1
 8001d26:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d28:	e00f      	b.n	8001d4a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d2a:	f7ff fecd 	bl	8001ac8 <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	2b05      	cmp	r3, #5
 8001d36:	d908      	bls.n	8001d4a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2220      	movs	r2, #32
 8001d3c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2203      	movs	r2, #3
 8001d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e078      	b.n	8001e3c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1e8      	bne.n	8001d2a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d60:	697a      	ldr	r2, [r7, #20]
 8001d62:	4b38      	ldr	r3, [pc, #224]	; (8001e44 <HAL_DMA_Init+0x158>)
 8001d64:	4013      	ands	r3, r2
 8001d66:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d76:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a1b      	ldr	r3, [r3, #32]
 8001d94:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d96:	697a      	ldr	r2, [r7, #20]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da0:	2b04      	cmp	r3, #4
 8001da2:	d107      	bne.n	8001db4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dac:	4313      	orrs	r3, r2
 8001dae:	697a      	ldr	r2, [r7, #20]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	697a      	ldr	r2, [r7, #20]
 8001dba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	695b      	ldr	r3, [r3, #20]
 8001dc2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	f023 0307 	bic.w	r3, r3, #7
 8001dca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd0:	697a      	ldr	r2, [r7, #20]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dda:	2b04      	cmp	r3, #4
 8001ddc:	d117      	bne.n	8001e0e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de2:	697a      	ldr	r2, [r7, #20]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d00e      	beq.n	8001e0e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 f9e9 	bl	80021c8 <DMA_CheckFifoParam>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d008      	beq.n	8001e0e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2240      	movs	r2, #64	; 0x40
 8001e00:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2201      	movs	r2, #1
 8001e06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e016      	b.n	8001e3c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	697a      	ldr	r2, [r7, #20]
 8001e14:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f9a0 	bl	800215c <DMA_CalcBaseAndBitshift>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e24:	223f      	movs	r2, #63	; 0x3f
 8001e26:	409a      	lsls	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2201      	movs	r2, #1
 8001e36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e3a:	2300      	movs	r3, #0
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3718      	adds	r7, #24
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	f010803f 	.word	0xf010803f

08001e48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e50:	2300      	movs	r3, #0
 8001e52:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e54:	4b92      	ldr	r3, [pc, #584]	; (80020a0 <HAL_DMA_IRQHandler+0x258>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a92      	ldr	r2, [pc, #584]	; (80020a4 <HAL_DMA_IRQHandler+0x25c>)
 8001e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e5e:	0a9b      	lsrs	r3, r3, #10
 8001e60:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e66:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e72:	2208      	movs	r2, #8
 8001e74:	409a      	lsls	r2, r3
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d01a      	beq.n	8001eb4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0304 	and.w	r3, r3, #4
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d013      	beq.n	8001eb4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f022 0204 	bic.w	r2, r2, #4
 8001e9a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea0:	2208      	movs	r2, #8
 8001ea2:	409a      	lsls	r2, r3
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eac:	f043 0201 	orr.w	r2, r3, #1
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb8:	2201      	movs	r2, #1
 8001eba:	409a      	lsls	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d012      	beq.n	8001eea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00b      	beq.n	8001eea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	409a      	lsls	r2, r3
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ee2:	f043 0202 	orr.w	r2, r3, #2
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eee:	2204      	movs	r2, #4
 8001ef0:	409a      	lsls	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d012      	beq.n	8001f20 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d00b      	beq.n	8001f20 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0c:	2204      	movs	r2, #4
 8001f0e:	409a      	lsls	r2, r3
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f18:	f043 0204 	orr.w	r2, r3, #4
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f24:	2210      	movs	r2, #16
 8001f26:	409a      	lsls	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d043      	beq.n	8001fb8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0308 	and.w	r3, r3, #8
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d03c      	beq.n	8001fb8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f42:	2210      	movs	r2, #16
 8001f44:	409a      	lsls	r2, r3
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d018      	beq.n	8001f8a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d108      	bne.n	8001f78 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d024      	beq.n	8001fb8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	4798      	blx	r3
 8001f76:	e01f      	b.n	8001fb8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d01b      	beq.n	8001fb8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	4798      	blx	r3
 8001f88:	e016      	b.n	8001fb8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d107      	bne.n	8001fa8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 0208 	bic.w	r2, r2, #8
 8001fa6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d003      	beq.n	8001fb8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fbc:	2220      	movs	r2, #32
 8001fbe:	409a      	lsls	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f000 808e 	beq.w	80020e6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0310 	and.w	r3, r3, #16
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f000 8086 	beq.w	80020e6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fde:	2220      	movs	r2, #32
 8001fe0:	409a      	lsls	r2, r3
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b05      	cmp	r3, #5
 8001ff0:	d136      	bne.n	8002060 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f022 0216 	bic.w	r2, r2, #22
 8002000:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	695a      	ldr	r2, [r3, #20]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002010:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	2b00      	cmp	r3, #0
 8002018:	d103      	bne.n	8002022 <HAL_DMA_IRQHandler+0x1da>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800201e:	2b00      	cmp	r3, #0
 8002020:	d007      	beq.n	8002032 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f022 0208 	bic.w	r2, r2, #8
 8002030:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002036:	223f      	movs	r2, #63	; 0x3f
 8002038:	409a      	lsls	r2, r3
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002052:	2b00      	cmp	r3, #0
 8002054:	d07d      	beq.n	8002152 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	4798      	blx	r3
        }
        return;
 800205e:	e078      	b.n	8002152 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d01c      	beq.n	80020a8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d108      	bne.n	800208e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002080:	2b00      	cmp	r3, #0
 8002082:	d030      	beq.n	80020e6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	4798      	blx	r3
 800208c:	e02b      	b.n	80020e6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002092:	2b00      	cmp	r3, #0
 8002094:	d027      	beq.n	80020e6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	4798      	blx	r3
 800209e:	e022      	b.n	80020e6 <HAL_DMA_IRQHandler+0x29e>
 80020a0:	10000000 	.word	0x10000000
 80020a4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d10f      	bne.n	80020d6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f022 0210 	bic.w	r2, r2, #16
 80020c4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2201      	movs	r2, #1
 80020ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d032      	beq.n	8002154 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d022      	beq.n	8002140 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2205      	movs	r2, #5
 80020fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f022 0201 	bic.w	r2, r2, #1
 8002110:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	3301      	adds	r3, #1
 8002116:	60bb      	str	r3, [r7, #8]
 8002118:	697a      	ldr	r2, [r7, #20]
 800211a:	429a      	cmp	r2, r3
 800211c:	d307      	bcc.n	800212e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0301 	and.w	r3, r3, #1
 8002128:	2b00      	cmp	r3, #0
 800212a:	d1f2      	bne.n	8002112 <HAL_DMA_IRQHandler+0x2ca>
 800212c:	e000      	b.n	8002130 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800212e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002144:	2b00      	cmp	r3, #0
 8002146:	d005      	beq.n	8002154 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	4798      	blx	r3
 8002150:	e000      	b.n	8002154 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002152:	bf00      	nop
    }
  }
}
 8002154:	3718      	adds	r7, #24
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop

0800215c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	b2db      	uxtb	r3, r3
 800216a:	3b10      	subs	r3, #16
 800216c:	4a14      	ldr	r2, [pc, #80]	; (80021c0 <DMA_CalcBaseAndBitshift+0x64>)
 800216e:	fba2 2303 	umull	r2, r3, r2, r3
 8002172:	091b      	lsrs	r3, r3, #4
 8002174:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002176:	4a13      	ldr	r2, [pc, #76]	; (80021c4 <DMA_CalcBaseAndBitshift+0x68>)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	4413      	add	r3, r2
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	461a      	mov	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2b03      	cmp	r3, #3
 8002188:	d909      	bls.n	800219e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002192:	f023 0303 	bic.w	r3, r3, #3
 8002196:	1d1a      	adds	r2, r3, #4
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	659a      	str	r2, [r3, #88]	; 0x58
 800219c:	e007      	b.n	80021ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021a6:	f023 0303 	bic.w	r3, r3, #3
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3714      	adds	r7, #20
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	aaaaaaab 	.word	0xaaaaaaab
 80021c4:	08022738 	.word	0x08022738

080021c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021d0:	2300      	movs	r3, #0
 80021d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d11f      	bne.n	8002222 <DMA_CheckFifoParam+0x5a>
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	2b03      	cmp	r3, #3
 80021e6:	d856      	bhi.n	8002296 <DMA_CheckFifoParam+0xce>
 80021e8:	a201      	add	r2, pc, #4	; (adr r2, 80021f0 <DMA_CheckFifoParam+0x28>)
 80021ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ee:	bf00      	nop
 80021f0:	08002201 	.word	0x08002201
 80021f4:	08002213 	.word	0x08002213
 80021f8:	08002201 	.word	0x08002201
 80021fc:	08002297 	.word	0x08002297
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002204:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d046      	beq.n	800229a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002210:	e043      	b.n	800229a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002216:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800221a:	d140      	bne.n	800229e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002220:	e03d      	b.n	800229e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800222a:	d121      	bne.n	8002270 <DMA_CheckFifoParam+0xa8>
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	2b03      	cmp	r3, #3
 8002230:	d837      	bhi.n	80022a2 <DMA_CheckFifoParam+0xda>
 8002232:	a201      	add	r2, pc, #4	; (adr r2, 8002238 <DMA_CheckFifoParam+0x70>)
 8002234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002238:	08002249 	.word	0x08002249
 800223c:	0800224f 	.word	0x0800224f
 8002240:	08002249 	.word	0x08002249
 8002244:	08002261 	.word	0x08002261
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	73fb      	strb	r3, [r7, #15]
      break;
 800224c:	e030      	b.n	80022b0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002252:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d025      	beq.n	80022a6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800225e:	e022      	b.n	80022a6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002264:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002268:	d11f      	bne.n	80022aa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800226e:	e01c      	b.n	80022aa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	2b02      	cmp	r3, #2
 8002274:	d903      	bls.n	800227e <DMA_CheckFifoParam+0xb6>
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	2b03      	cmp	r3, #3
 800227a:	d003      	beq.n	8002284 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800227c:	e018      	b.n	80022b0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	73fb      	strb	r3, [r7, #15]
      break;
 8002282:	e015      	b.n	80022b0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002288:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d00e      	beq.n	80022ae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	73fb      	strb	r3, [r7, #15]
      break;
 8002294:	e00b      	b.n	80022ae <DMA_CheckFifoParam+0xe6>
      break;
 8002296:	bf00      	nop
 8002298:	e00a      	b.n	80022b0 <DMA_CheckFifoParam+0xe8>
      break;
 800229a:	bf00      	nop
 800229c:	e008      	b.n	80022b0 <DMA_CheckFifoParam+0xe8>
      break;
 800229e:	bf00      	nop
 80022a0:	e006      	b.n	80022b0 <DMA_CheckFifoParam+0xe8>
      break;
 80022a2:	bf00      	nop
 80022a4:	e004      	b.n	80022b0 <DMA_CheckFifoParam+0xe8>
      break;
 80022a6:	bf00      	nop
 80022a8:	e002      	b.n	80022b0 <DMA_CheckFifoParam+0xe8>
      break;   
 80022aa:	bf00      	nop
 80022ac:	e000      	b.n	80022b0 <DMA_CheckFifoParam+0xe8>
      break;
 80022ae:	bf00      	nop
    }
  } 
  
  return status; 
 80022b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop

080022c0 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b088      	sub	sp, #32
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80022c8:	2300      	movs	r3, #0
 80022ca:	61fb      	str	r3, [r7, #28]
 80022cc:	2300      	movs	r3, #0
 80022ce:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80022d0:	4baa      	ldr	r3, [pc, #680]	; (800257c <HAL_ETH_Init+0x2bc>)
 80022d2:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80022d4:	2300      	movs	r3, #0
 80022d6:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80022d8:	2300      	movs	r3, #0
 80022da:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e183      	b.n	80025ee <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d106      	bne.n	8002300 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f003 fc00 	bl	8005b00 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002300:	2300      	movs	r3, #0
 8002302:	60bb      	str	r3, [r7, #8]
 8002304:	4b9e      	ldr	r3, [pc, #632]	; (8002580 <HAL_ETH_Init+0x2c0>)
 8002306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002308:	4a9d      	ldr	r2, [pc, #628]	; (8002580 <HAL_ETH_Init+0x2c0>)
 800230a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800230e:	6453      	str	r3, [r2, #68]	; 0x44
 8002310:	4b9b      	ldr	r3, [pc, #620]	; (8002580 <HAL_ETH_Init+0x2c0>)
 8002312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002314:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002318:	60bb      	str	r3, [r7, #8]
 800231a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800231c:	4b99      	ldr	r3, [pc, #612]	; (8002584 <HAL_ETH_Init+0x2c4>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	4a98      	ldr	r2, [pc, #608]	; (8002584 <HAL_ETH_Init+0x2c4>)
 8002322:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002326:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002328:	4b96      	ldr	r3, [pc, #600]	; (8002584 <HAL_ETH_Init+0x2c4>)
 800232a:	685a      	ldr	r2, [r3, #4]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	4994      	ldr	r1, [pc, #592]	; (8002584 <HAL_ETH_Init+0x2c4>)
 8002332:	4313      	orrs	r3, r2
 8002334:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f042 0201 	orr.w	r2, r2, #1
 8002348:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800234c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800234e:	f7ff fbbb 	bl	8001ac8 <HAL_GetTick>
 8002352:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002354:	e011      	b.n	800237a <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8002356:	f7ff fbb7 	bl	8001ac8 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002364:	d909      	bls.n	800237a <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2203      	movs	r2, #3
 800236a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e139      	b.n	80025ee <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1e4      	bne.n	8002356 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	f023 031c 	bic.w	r3, r3, #28
 800239a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800239c:	f002 fa1c 	bl	80047d8 <HAL_RCC_GetHCLKFreq>
 80023a0:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	4a78      	ldr	r2, [pc, #480]	; (8002588 <HAL_ETH_Init+0x2c8>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d908      	bls.n	80023bc <HAL_ETH_Init+0xfc>
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	4a77      	ldr	r2, [pc, #476]	; (800258c <HAL_ETH_Init+0x2cc>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d804      	bhi.n	80023bc <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	f043 0308 	orr.w	r3, r3, #8
 80023b8:	61fb      	str	r3, [r7, #28]
 80023ba:	e027      	b.n	800240c <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	4a73      	ldr	r2, [pc, #460]	; (800258c <HAL_ETH_Init+0x2cc>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d908      	bls.n	80023d6 <HAL_ETH_Init+0x116>
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	4a6d      	ldr	r2, [pc, #436]	; (800257c <HAL_ETH_Init+0x2bc>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d204      	bcs.n	80023d6 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	f043 030c 	orr.w	r3, r3, #12
 80023d2:	61fb      	str	r3, [r7, #28]
 80023d4:	e01a      	b.n	800240c <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	4a68      	ldr	r2, [pc, #416]	; (800257c <HAL_ETH_Init+0x2bc>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d303      	bcc.n	80023e6 <HAL_ETH_Init+0x126>
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	4a6b      	ldr	r2, [pc, #428]	; (8002590 <HAL_ETH_Init+0x2d0>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d911      	bls.n	800240a <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	4a69      	ldr	r2, [pc, #420]	; (8002590 <HAL_ETH_Init+0x2d0>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d908      	bls.n	8002400 <HAL_ETH_Init+0x140>
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	4a68      	ldr	r2, [pc, #416]	; (8002594 <HAL_ETH_Init+0x2d4>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d804      	bhi.n	8002400 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	f043 0304 	orr.w	r3, r3, #4
 80023fc:	61fb      	str	r3, [r7, #28]
 80023fe:	e005      	b.n	800240c <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	f043 0310 	orr.w	r3, r3, #16
 8002406:	61fb      	str	r3, [r7, #28]
 8002408:	e000      	b.n	800240c <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800240a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	69fa      	ldr	r2, [r7, #28]
 8002412:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8002414:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002418:	2100      	movs	r1, #0
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 fc17 	bl	8002c4e <HAL_ETH_WritePHYRegister>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00b      	beq.n	800243e <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800242a:	6939      	ldr	r1, [r7, #16]
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f000 fdcd 	bl	8002fcc <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e0d7      	b.n	80025ee <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800243e:	20ff      	movs	r0, #255	; 0xff
 8002440:	f7ff fb4e 	bl	8001ae0 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 80a5 	beq.w	8002598 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800244e:	f7ff fb3b 	bl	8001ac8 <HAL_GetTick>
 8002452:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002454:	f107 030c 	add.w	r3, r7, #12
 8002458:	461a      	mov	r2, r3
 800245a:	2101      	movs	r1, #1
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f000 fb8e 	bl	8002b7e <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8002462:	f7ff fb31 	bl	8001ac8 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002470:	4293      	cmp	r3, r2
 8002472:	d90f      	bls.n	8002494 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002478:	6939      	ldr	r1, [r7, #16]
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 fda6 	bl	8002fcc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e0ac      	b.n	80025ee <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f003 0304 	and.w	r3, r3, #4
 800249a:	2b00      	cmp	r3, #0
 800249c:	d0da      	beq.n	8002454 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800249e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80024a2:	2100      	movs	r1, #0
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 fbd2 	bl	8002c4e <HAL_ETH_WritePHYRegister>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00b      	beq.n	80024c8 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80024b4:	6939      	ldr	r1, [r7, #16]
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 fd88 	bl	8002fcc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80024c4:	2301      	movs	r3, #1
 80024c6:	e092      	b.n	80025ee <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80024c8:	f7ff fafe 	bl	8001ac8 <HAL_GetTick>
 80024cc:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80024ce:	f107 030c 	add.w	r3, r7, #12
 80024d2:	461a      	mov	r2, r3
 80024d4:	2101      	movs	r1, #1
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 fb51 	bl	8002b7e <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80024dc:	f7ff faf4 	bl	8001ac8 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d90f      	bls.n	800250e <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80024f2:	6939      	ldr	r1, [r7, #16]
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f000 fd69 	bl	8002fcc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e06f      	b.n	80025ee <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f003 0320 	and.w	r3, r3, #32
 8002514:	2b00      	cmp	r3, #0
 8002516:	d0da      	beq.n	80024ce <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8002518:	f107 030c 	add.w	r3, r7, #12
 800251c:	461a      	mov	r2, r3
 800251e:	2110      	movs	r1, #16
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 fb2c 	bl	8002b7e <HAL_ETH_ReadPHYRegister>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00b      	beq.n	8002544 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002530:	6939      	ldr	r1, [r7, #16]
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 fd4a 	bl	8002fcc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002540:	2301      	movs	r3, #1
 8002542:	e054      	b.n	80025ee <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f003 0304 	and.w	r3, r3, #4
 800254a:	2b00      	cmp	r3, #0
 800254c:	d004      	beq.n	8002558 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002554:	60da      	str	r2, [r3, #12]
 8002556:	e002      	b.n	800255e <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d003      	beq.n	8002570 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	609a      	str	r2, [r3, #8]
 800256e:	e035      	b.n	80025dc <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002576:	609a      	str	r2, [r3, #8]
 8002578:	e030      	b.n	80025dc <HAL_ETH_Init+0x31c>
 800257a:	bf00      	nop
 800257c:	03938700 	.word	0x03938700
 8002580:	40023800 	.word	0x40023800
 8002584:	40013800 	.word	0x40013800
 8002588:	01312cff 	.word	0x01312cff
 800258c:	02160ebf 	.word	0x02160ebf
 8002590:	05f5e0ff 	.word	0x05f5e0ff
 8002594:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	08db      	lsrs	r3, r3, #3
 800259e:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	085b      	lsrs	r3, r3, #1
 80025a6:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80025a8:	4313      	orrs	r3, r2
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	461a      	mov	r2, r3
 80025ae:	2100      	movs	r1, #0
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f000 fb4c 	bl	8002c4e <HAL_ETH_WritePHYRegister>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d00b      	beq.n	80025d4 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80025c0:	6939      	ldr	r1, [r7, #16]
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 fd02 	bl	8002fcc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e00c      	b.n	80025ee <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80025d4:	f640 70ff 	movw	r0, #4095	; 0xfff
 80025d8:	f7ff fa82 	bl	8001ae0 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80025dc:	6939      	ldr	r1, [r7, #16]
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 fcf4 	bl	8002fcc <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3720      	adds	r7, #32
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop

080025f8 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b087      	sub	sp, #28
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
 8002604:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8002606:	2300      	movs	r3, #0
 8002608:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002610:	2b01      	cmp	r3, #1
 8002612:	d101      	bne.n	8002618 <HAL_ETH_DMATxDescListInit+0x20>
 8002614:	2302      	movs	r3, #2
 8002616:	e052      	b.n	80026be <HAL_ETH_DMATxDescListInit+0xc6>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2202      	movs	r2, #2
 8002624:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 800262e:	2300      	movs	r3, #0
 8002630:	617b      	str	r3, [r7, #20]
 8002632:	e030      	b.n	8002696 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	015b      	lsls	r3, r3, #5
 8002638:	68ba      	ldr	r2, [r7, #8]
 800263a:	4413      	add	r3, r2
 800263c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002644:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800264c:	fb02 f303 	mul.w	r3, r2, r3
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	4413      	add	r3, r2
 8002654:	461a      	mov	r2, r3
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d105      	bne.n	800266e <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	3b01      	subs	r3, #1
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	429a      	cmp	r2, r3
 8002676:	d208      	bcs.n	800268a <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	3301      	adds	r3, #1
 800267c:	015b      	lsls	r3, r3, #5
 800267e:	68ba      	ldr	r2, [r7, #8]
 8002680:	4413      	add	r3, r2
 8002682:	461a      	mov	r2, r3
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	60da      	str	r2, [r3, #12]
 8002688:	e002      	b.n	8002690 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800268a:	68ba      	ldr	r2, [r7, #8]
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	3301      	adds	r3, #1
 8002694:	617b      	str	r3, [r7, #20]
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	429a      	cmp	r2, r3
 800269c:	d3ca      	bcc.n	8002634 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68ba      	ldr	r2, [r7, #8]
 80026a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026a8:	3310      	adds	r3, #16
 80026aa:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	371c      	adds	r7, #28
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr

080026ca <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80026ca:	b480      	push	{r7}
 80026cc:	b087      	sub	sp, #28
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	60f8      	str	r0, [r7, #12]
 80026d2:	60b9      	str	r1, [r7, #8]
 80026d4:	607a      	str	r2, [r7, #4]
 80026d6:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80026d8:	2300      	movs	r3, #0
 80026da:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d101      	bne.n	80026ea <HAL_ETH_DMARxDescListInit+0x20>
 80026e6:	2302      	movs	r3, #2
 80026e8:	e056      	b.n	8002798 <HAL_ETH_DMARxDescListInit+0xce>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2202      	movs	r2, #2
 80026f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	68ba      	ldr	r2, [r7, #8]
 80026fe:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8002700:	2300      	movs	r3, #0
 8002702:	617b      	str	r3, [r7, #20]
 8002704:	e034      	b.n	8002770 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	015b      	lsls	r3, r3, #5
 800270a:	68ba      	ldr	r2, [r7, #8]
 800270c:	4413      	add	r3, r2
 800270e:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002716:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800271e:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002726:	fb02 f303 	mul.w	r3, r2, r3
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	4413      	add	r3, r2
 800272e:	461a      	mov	r2, r3
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d105      	bne.n	8002748 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	3b01      	subs	r3, #1
 800274c:	697a      	ldr	r2, [r7, #20]
 800274e:	429a      	cmp	r2, r3
 8002750:	d208      	bcs.n	8002764 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	3301      	adds	r3, #1
 8002756:	015b      	lsls	r3, r3, #5
 8002758:	68ba      	ldr	r2, [r7, #8]
 800275a:	4413      	add	r3, r2
 800275c:	461a      	mov	r2, r3
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	60da      	str	r2, [r3, #12]
 8002762:	e002      	b.n	800276a <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8002764:	68ba      	ldr	r2, [r7, #8]
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	3301      	adds	r3, #1
 800276e:	617b      	str	r3, [r7, #20]
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	429a      	cmp	r2, r3
 8002776:	d3c6      	bcc.n	8002706 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68ba      	ldr	r2, [r7, #8]
 800277e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002782:	330c      	adds	r3, #12
 8002784:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	371c      	adds	r7, #28
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b087      	sub	sp, #28
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80027ae:	2300      	movs	r3, #0
 80027b0:	617b      	str	r3, [r7, #20]
 80027b2:	2300      	movs	r3, #0
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	2300      	movs	r3, #0
 80027b8:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d101      	bne.n	80027c8 <HAL_ETH_TransmitFrame+0x24>
 80027c4:	2302      	movs	r3, #2
 80027c6:	e0cd      	b.n	8002964 <HAL_ETH_TransmitFrame+0x1c0>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2202      	movs	r2, #2
 80027d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d109      	bne.n	80027f2 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2201      	movs	r2, #1
 80027e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80027ee:	2301      	movs	r3, #1
 80027f0:	e0b8      	b.n	8002964 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	da09      	bge.n	8002810 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2212      	movs	r2, #18
 8002800:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e0a9      	b.n	8002964 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002816:	4293      	cmp	r3, r2
 8002818:	d915      	bls.n	8002846 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	4a54      	ldr	r2, [pc, #336]	; (8002970 <HAL_ETH_TransmitFrame+0x1cc>)
 800281e:	fba2 2303 	umull	r2, r3, r2, r3
 8002822:	0a9b      	lsrs	r3, r3, #10
 8002824:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8002826:	683a      	ldr	r2, [r7, #0]
 8002828:	4b51      	ldr	r3, [pc, #324]	; (8002970 <HAL_ETH_TransmitFrame+0x1cc>)
 800282a:	fba3 1302 	umull	r1, r3, r3, r2
 800282e:	0a9b      	lsrs	r3, r3, #10
 8002830:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8002834:	fb01 f303 	mul.w	r3, r1, r3
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d005      	beq.n	800284a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	3301      	adds	r3, #1
 8002842:	617b      	str	r3, [r7, #20]
 8002844:	e001      	b.n	800284a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8002846:	2301      	movs	r3, #1
 8002848:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d11c      	bne.n	800288a <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285a:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800285e:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800286a:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002876:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800287a:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	461a      	mov	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	62da      	str	r2, [r3, #44]	; 0x2c
 8002888:	e04b      	b.n	8002922 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 800288a:	2300      	movs	r3, #0
 800288c:	613b      	str	r3, [r7, #16]
 800288e:	e044      	b.n	800291a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800289e:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d107      	bne.n	80028b6 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80028b4:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ba:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80028be:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	3b01      	subs	r3, #1
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d116      	bne.n	80028f8 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80028d8:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	4a25      	ldr	r2, [pc, #148]	; (8002974 <HAL_ETH_TransmitFrame+0x1d0>)
 80028de:	fb02 f203 	mul.w	r2, r2, r3
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	4413      	add	r3, r2
 80028e6:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80028ea:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80028f6:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002902:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002906:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	461a      	mov	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	3301      	adds	r3, #1
 8002918:	613b      	str	r3, [r7, #16]
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	429a      	cmp	r2, r3
 8002920:	d3b6      	bcc.n	8002890 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800292a:	3314      	adds	r3, #20
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0304 	and.w	r3, r3, #4
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00d      	beq.n	8002952 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800293e:	3314      	adds	r3, #20
 8002940:	2204      	movs	r2, #4
 8002942:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800294c:	3304      	adds	r3, #4
 800294e:	2200      	movs	r2, #0
 8002950:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2201      	movs	r2, #1
 8002956:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	371c      	adds	r7, #28
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	ac02b00b 	.word	0xac02b00b
 8002974:	fffffa0c 	.word	0xfffffa0c

08002978 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8002980:	2300      	movs	r3, #0
 8002982:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800298a:	2b01      	cmp	r3, #1
 800298c:	d101      	bne.n	8002992 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 800298e:	2302      	movs	r3, #2
 8002990:	e074      	b.n	8002a7c <HAL_ETH_GetReceivedFrame_IT+0x104>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2202      	movs	r2, #2
 800299e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80029a2:	e05a      	b.n	8002a5a <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	3301      	adds	r3, #1
 80029a8:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029b8:	d10d      	bne.n	80029d6 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	461a      	mov	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	629a      	str	r2, [r3, #40]	; 0x28
 80029d4:	e041      	b.n	8002a5a <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10b      	bne.n	80029fc <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e8:	1c5a      	adds	r2, r3, #1
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	461a      	mov	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	629a      	str	r2, [r3, #40]	; 0x28
 80029fa:	e02e      	b.n	8002a5a <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a08:	1c5a      	adds	r2, r3, #1
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d103      	bne.n	8002a1e <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	0c1b      	lsrs	r3, r3, #16
 8002a26:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002a2a:	1f1a      	subs	r2, r3, #4
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a34:	689a      	ldr	r2, [r3, #8]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	461a      	mov	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8002a56:	2300      	movs	r3, #0
 8002a58:	e010      	b.n	8002a7c <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	db02      	blt.n	8002a6a <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2b03      	cmp	r3, #3
 8002a68:	d99c      	bls.n	80029a4 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3714      	adds	r7, #20
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a98:	3314      	adds	r3, #20
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa0:	2b40      	cmp	r3, #64	; 0x40
 8002aa2:	d112      	bne.n	8002aca <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f003 f8d9 	bl	8005c5c <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ab2:	3314      	adds	r3, #20
 8002ab4:	2240      	movs	r2, #64	; 0x40
 8002ab6:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ac8:	e01b      	b.n	8002b02 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ad2:	3314      	adds	r3, #20
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d111      	bne.n	8002b02 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f839 	bl	8002b56 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002aec:	3314      	adds	r3, #20
 8002aee:	2201      	movs	r2, #1
 8002af0:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b0a:	3314      	adds	r3, #20
 8002b0c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b10:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b1a:	3314      	adds	r3, #20
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b26:	d112      	bne.n	8002b4e <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f000 f81e 	bl	8002b6a <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b36:	3314      	adds	r3, #20
 8002b38:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002b3c:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2201      	movs	r2, #1
 8002b42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8002b4e:	bf00      	nop
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002b56:	b480      	push	{r7}
 8002b58:	b083      	sub	sp, #12
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002b5e:	bf00      	nop
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr

08002b6a <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	b083      	sub	sp, #12
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002b72:	bf00      	nop
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr

08002b7e <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b086      	sub	sp, #24
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	60f8      	str	r0, [r7, #12]
 8002b86:	460b      	mov	r3, r1
 8002b88:	607a      	str	r2, [r7, #4]
 8002b8a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002b90:	2300      	movs	r3, #0
 8002b92:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b82      	cmp	r3, #130	; 0x82
 8002b9e:	d101      	bne.n	8002ba4 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	e050      	b.n	8002c46 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2282      	movs	r2, #130	; 0x82
 8002ba8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	f003 031c 	and.w	r3, r3, #28
 8002bba:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8a1b      	ldrh	r3, [r3, #16]
 8002bc0:	02db      	lsls	r3, r3, #11
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002bca:	897b      	ldrh	r3, [r7, #10]
 8002bcc:	019b      	lsls	r3, r3, #6
 8002bce:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	f023 0302 	bic.w	r3, r3, #2
 8002bde:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	f043 0301 	orr.w	r3, r3, #1
 8002be6:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	697a      	ldr	r2, [r7, #20]
 8002bee:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002bf0:	f7fe ff6a 	bl	8001ac8 <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002bf6:	e015      	b.n	8002c24 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8002bf8:	f7fe ff66 	bl	8001ac8 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c06:	d309      	bcc.n	8002c1c <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e014      	b.n	8002c46 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1e4      	bne.n	8002bf8 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	695b      	ldr	r3, [r3, #20]
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	461a      	mov	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3718      	adds	r7, #24
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b086      	sub	sp, #24
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	60f8      	str	r0, [r7, #12]
 8002c56:	460b      	mov	r3, r1
 8002c58:	607a      	str	r2, [r7, #4]
 8002c5a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b42      	cmp	r3, #66	; 0x42
 8002c6e:	d101      	bne.n	8002c74 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002c70:	2302      	movs	r3, #2
 8002c72:	e04e      	b.n	8002d12 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2242      	movs	r2, #66	; 0x42
 8002c78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	f003 031c 	and.w	r3, r3, #28
 8002c8a:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8a1b      	ldrh	r3, [r3, #16]
 8002c90:	02db      	lsls	r3, r3, #11
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002c9a:	897b      	ldrh	r3, [r7, #10]
 8002c9c:	019b      	lsls	r3, r3, #6
 8002c9e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002ca2:	697a      	ldr	r2, [r7, #20]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	f043 0302 	orr.w	r3, r3, #2
 8002cae:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	f043 0301 	orr.w	r3, r3, #1
 8002cb6:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002cca:	f7fe fefd 	bl	8001ac8 <HAL_GetTick>
 8002cce:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002cd0:	e015      	b.n	8002cfe <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002cd2:	f7fe fef9 	bl	8001ac8 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ce0:	d309      	bcc.n	8002cf6 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e00d      	b.n	8002d12 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1e4      	bne.n	8002cd2 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3718      	adds	r7, #24
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b082      	sub	sp, #8
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d101      	bne.n	8002d30 <HAL_ETH_Start+0x16>
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	e01f      	b.n	8002d70 <HAL_ETH_Start+0x56>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 fb45 	bl	80033d0 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 fb7c 	bl	8003444 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 fc13 	bl	8003578 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 fbb0 	bl	80034b8 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 fbdd 	bl	8003518 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3708      	adds	r7, #8
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d101      	bne.n	8002d8e <HAL_ETH_Stop+0x16>
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	e01f      	b.n	8002dce <HAL_ETH_Stop+0x56>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2202      	movs	r2, #2
 8002d9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 fba2 	bl	80034e8 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 fbcf 	bl	8003548 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 fb67 	bl	800347e <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 fbe1 	bl	8003578 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 fb27 	bl	800340a <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
	...

08002dd8 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8002de2:	2300      	movs	r3, #0
 8002de4:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d101      	bne.n	8002df4 <HAL_ETH_ConfigMAC+0x1c>
 8002df0:	2302      	movs	r3, #2
 8002df2:	e0e4      	b.n	8002fbe <HAL_ETH_ConfigMAC+0x1e6>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2202      	movs	r2, #2
 8002e00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f000 80b1 	beq.w	8002f6e <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	4b6c      	ldr	r3, [pc, #432]	; (8002fc8 <HAL_ETH_ConfigMAC+0x1f0>)
 8002e18:	4013      	ands	r3, r2
 8002e1a:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002e24:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8002e2a:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8002e30:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8002e36:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8002e3c:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8002e42:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8002e48:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8002e4e:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8002e54:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8002e5a:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8002e60:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8002e66:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e7e:	2001      	movs	r0, #1
 8002e80:	f7fe fe2e 	bl	8001ae0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002e94:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8002e9a:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8002ea0:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8002ea6:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8002eac:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8002eb2:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8002ebe:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002ec0:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002eca:	2001      	movs	r0, #1
 8002ecc:	f7fe fe08 	bl	8001ae0 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68fa      	ldr	r2, [r7, #12]
 8002ed6:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002ee0:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002eea:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002efa:	4013      	ands	r3, r2
 8002efc:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f02:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002f08:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8002f0e:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8002f14:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8002f1a:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8002f20:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f38:	2001      	movs	r0, #1
 8002f3a:	f7fe fdd1 	bl	8001ae0 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	430a      	orrs	r2, r1
 8002f54:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	69db      	ldr	r3, [r3, #28]
 8002f5c:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f5e:	2001      	movs	r0, #1
 8002f60:	f7fe fdbe 	bl	8001ae0 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	61da      	str	r2, [r3, #28]
 8002f6c:	e01e      	b.n	8002fac <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002f7c:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689a      	ldr	r2, [r3, #8]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f9e:	2001      	movs	r0, #1
 8002fa0:	f7fe fd9e 	bl	8001ae0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3710      	adds	r7, #16
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	ff20810f 	.word	0xff20810f

08002fcc <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b0b0      	sub	sp, #192	; 0xc0
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d007      	beq.n	8002ff2 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fe8:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ff0:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002ffe:	2300      	movs	r3, #0
 8003000:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8003002:	2300      	movs	r3, #0
 8003004:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8003006:	2300      	movs	r3, #0
 8003008:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	69db      	ldr	r3, [r3, #28]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d103      	bne.n	800301a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8003012:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003016:	663b      	str	r3, [r7, #96]	; 0x60
 8003018:	e001      	b.n	800301e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800301a:	2300      	movs	r3, #0
 800301c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800301e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003022:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8003024:	2300      	movs	r3, #0
 8003026:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003028:	2300      	movs	r3, #0
 800302a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800302c:	2300      	movs	r3, #0
 800302e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8003030:	2300      	movs	r3, #0
 8003032:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8003034:	2300      	movs	r3, #0
 8003036:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8003038:	2340      	movs	r3, #64	; 0x40
 800303a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800303c:	2300      	movs	r3, #0
 800303e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8003042:	2300      	movs	r3, #0
 8003044:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8003048:	2300      	movs	r3, #0
 800304a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800304e:	2300      	movs	r3, #0
 8003050:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8003054:	2300      	movs	r3, #0
 8003056:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 800305a:	2300      	movs	r3, #0
 800305c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8003060:	2300      	movs	r3, #0
 8003062:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8003066:	2300      	movs	r3, #0
 8003068:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800306c:	2380      	movs	r3, #128	; 0x80
 800306e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003072:	2300      	movs	r3, #0
 8003074:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8003078:	2300      	movs	r3, #0
 800307a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800307e:	2300      	movs	r3, #0
 8003080:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8003084:	2300      	movs	r3, #0
 8003086:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800308a:	2300      	movs	r3, #0
 800308c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8003090:	2300      	movs	r3, #0
 8003092:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80030a0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80030a4:	4bac      	ldr	r3, [pc, #688]	; (8003358 <ETH_MACDMAConfig+0x38c>)
 80030a6:	4013      	ands	r3, r2
 80030a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80030ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80030ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80030b0:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80030b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80030b4:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80030b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80030b8:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80030be:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80030c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80030c2:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80030c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80030c6:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80030cc:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80030ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80030d0:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80030d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80030d4:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80030d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80030d8:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80030da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80030dc:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80030de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80030e0:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80030e2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80030e6:	4313      	orrs	r3, r2
 80030e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80030f4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003100:	2001      	movs	r0, #1
 8003102:	f7fe fced 	bl	8001ae0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800310e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003110:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8003112:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003114:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8003116:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8003118:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800311a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800311e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8003120:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8003124:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8003126:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800312a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800312c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8003130:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8003134:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800313c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800313e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800314a:	2001      	movs	r0, #1
 800314c:	f7fe fcc8 	bl	8001ae0 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003158:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003162:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800316c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003178:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800317c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003180:	4013      	ands	r3, r2
 8003182:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003186:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800318a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800318c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003190:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8003192:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8003196:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8003198:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800319c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800319e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80031a2:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80031a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80031a8:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80031aa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80031ae:	4313      	orrs	r3, r2
 80031b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80031bc:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80031c8:	2001      	movs	r0, #1
 80031ca:	f7fe fc89 	bl	8001ae0 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80031d6:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80031d8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80031dc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	430a      	orrs	r2, r1
 80031e6:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	69db      	ldr	r3, [r3, #28]
 80031ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80031f2:	2001      	movs	r0, #1
 80031f4:	f7fe fc74 	bl	8001ae0 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003200:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8003202:	2300      	movs	r3, #0
 8003204:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8003206:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800320a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800320c:	2300      	movs	r3, #0
 800320e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8003210:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003214:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003216:	2300      	movs	r3, #0
 8003218:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800321a:	2300      	movs	r3, #0
 800321c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800321e:	2300      	movs	r3, #0
 8003220:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003222:	2300      	movs	r3, #0
 8003224:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8003226:	2304      	movs	r3, #4
 8003228:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800322a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800322e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8003230:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003234:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003236:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800323a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800323c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003240:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8003242:	2380      	movs	r3, #128	; 0x80
 8003244:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8003246:	2300      	movs	r3, #0
 8003248:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800324a:	2300      	movs	r3, #0
 800324c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003256:	3318      	adds	r3, #24
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800325e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003262:	4b3e      	ldr	r3, [pc, #248]	; (800335c <ETH_MACDMAConfig+0x390>)
 8003264:	4013      	ands	r3, r2
 8003266:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800326a:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800326c:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800326e:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8003270:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8003272:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8003274:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8003276:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8003278:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800327a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800327c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800327e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8003280:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8003282:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8003284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8003286:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8003288:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800328a:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800328c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003290:	4313      	orrs	r3, r2
 8003292:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800329e:	3318      	adds	r3, #24
 80032a0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80032a4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032ae:	3318      	adds	r3, #24
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80032b6:	2001      	movs	r0, #1
 80032b8:	f7fe fc12 	bl	8001ae0 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032c4:	3318      	adds	r3, #24
 80032c6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80032ca:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80032cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80032ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80032d0:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80032d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80032d4:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80032d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80032d8:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80032da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80032dc:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80032de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032e0:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80032e2:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80032e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 80032e6:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80032f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032f4:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003304:	2001      	movs	r0, #1
 8003306:	f7fe fbeb 	bl	8001ae0 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003312:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003316:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d10f      	bne.n	8003340 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003328:	331c      	adds	r3, #28
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003334:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003338:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800333c:	331c      	adds	r3, #28
 800333e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	461a      	mov	r2, r3
 8003346:	2100      	movs	r1, #0
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 f809 	bl	8003360 <ETH_MACAddressConfig>
}
 800334e:	bf00      	nop
 8003350:	37c0      	adds	r7, #192	; 0xc0
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	ff20810f 	.word	0xff20810f
 800335c:	f8de3f23 	.word	0xf8de3f23

08003360 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003360:	b480      	push	{r7}
 8003362:	b087      	sub	sp, #28
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	3305      	adds	r3, #5
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	021b      	lsls	r3, r3, #8
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	3204      	adds	r2, #4
 8003378:	7812      	ldrb	r2, [r2, #0]
 800337a:	4313      	orrs	r3, r2
 800337c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800337e:	68ba      	ldr	r2, [r7, #8]
 8003380:	4b11      	ldr	r3, [pc, #68]	; (80033c8 <ETH_MACAddressConfig+0x68>)
 8003382:	4413      	add	r3, r2
 8003384:	461a      	mov	r2, r3
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	3303      	adds	r3, #3
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	061a      	lsls	r2, r3, #24
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	3302      	adds	r3, #2
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	041b      	lsls	r3, r3, #16
 800339a:	431a      	orrs	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	3301      	adds	r3, #1
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	021b      	lsls	r3, r3, #8
 80033a4:	4313      	orrs	r3, r2
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	7812      	ldrb	r2, [r2, #0]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80033ae:	68ba      	ldr	r2, [r7, #8]
 80033b0:	4b06      	ldr	r3, [pc, #24]	; (80033cc <ETH_MACAddressConfig+0x6c>)
 80033b2:	4413      	add	r3, r2
 80033b4:	461a      	mov	r2, r3
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	6013      	str	r3, [r2, #0]
}
 80033ba:	bf00      	nop
 80033bc:	371c      	adds	r7, #28
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	40028040 	.word	0x40028040
 80033cc:	40028044 	.word	0x40028044

080033d0 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80033d8:	2300      	movs	r3, #0
 80033da:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f042 0208 	orr.w	r2, r2, #8
 80033ea:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80033f4:	2001      	movs	r0, #1
 80033f6:	f000 f8e9 	bl	80035cc <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	601a      	str	r2, [r3, #0]
}
 8003402:	bf00      	nop
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800340a:	b580      	push	{r7, lr}
 800340c:	b084      	sub	sp, #16
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003412:	2300      	movs	r3, #0
 8003414:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 0208 	bic.w	r2, r2, #8
 8003424:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800342e:	2001      	movs	r0, #1
 8003430:	f000 f8cc 	bl	80035cc <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	601a      	str	r2, [r3, #0]
}
 800343c:	bf00      	nop
 800343e:	3710      	adds	r7, #16
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800344c:	2300      	movs	r3, #0
 800344e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f042 0204 	orr.w	r2, r2, #4
 800345e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003468:	2001      	movs	r0, #1
 800346a:	f000 f8af 	bl	80035cc <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	601a      	str	r2, [r3, #0]
}
 8003476:	bf00      	nop
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800347e:	b580      	push	{r7, lr}
 8003480:	b084      	sub	sp, #16
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003486:	2300      	movs	r3, #0
 8003488:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 0204 	bic.w	r2, r2, #4
 8003498:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80034a2:	2001      	movs	r0, #1
 80034a4:	f000 f892 	bl	80035cc <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	601a      	str	r2, [r3, #0]
}
 80034b0:	bf00      	nop
 80034b2:	3710      	adds	r7, #16
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034c8:	3318      	adds	r3, #24
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034d8:	3318      	adds	r3, #24
 80034da:	601a      	str	r2, [r3, #0]
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034f8:	3318      	adds	r3, #24
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003504:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003508:	3318      	adds	r3, #24
 800350a:	601a      	str	r2, [r3, #0]
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003528:	3318      	adds	r3, #24
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f042 0202 	orr.w	r2, r2, #2
 8003534:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003538:	3318      	adds	r3, #24
 800353a:	601a      	str	r2, [r3, #0]
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003558:	3318      	adds	r3, #24
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f022 0202 	bic.w	r2, r2, #2
 8003564:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003568:	3318      	adds	r3, #24
 800356a:	601a      	str	r2, [r3, #0]
}
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003580:	2300      	movs	r3, #0
 8003582:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800358c:	3318      	adds	r3, #24
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003598:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800359c:	3318      	adds	r3, #24
 800359e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035a8:	3318      	adds	r3, #24
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80035ae:	2001      	movs	r0, #1
 80035b0:	f000 f80c 	bl	80035cc <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035be:	3318      	adds	r3, #24
 80035c0:	601a      	str	r2, [r3, #0]
}
 80035c2:	bf00      	nop
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
	...

080035cc <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80035d4:	4b0b      	ldr	r3, [pc, #44]	; (8003604 <ETH_Delay+0x38>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a0b      	ldr	r2, [pc, #44]	; (8003608 <ETH_Delay+0x3c>)
 80035da:	fba2 2303 	umull	r2, r3, r2, r3
 80035de:	0a5b      	lsrs	r3, r3, #9
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	fb02 f303 	mul.w	r3, r2, r3
 80035e6:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 80035e8:	bf00      	nop
  } 
  while (Delay --);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	1e5a      	subs	r2, r3, #1
 80035ee:	60fa      	str	r2, [r7, #12]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d1f9      	bne.n	80035e8 <ETH_Delay+0x1c>
}
 80035f4:	bf00      	nop
 80035f6:	bf00      	nop
 80035f8:	3714      	adds	r7, #20
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	10000000 	.word	0x10000000
 8003608:	10624dd3 	.word	0x10624dd3

0800360c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800361e:	4b23      	ldr	r3, [pc, #140]	; (80036ac <HAL_FLASH_Program+0xa0>)
 8003620:	7e1b      	ldrb	r3, [r3, #24]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d101      	bne.n	800362a <HAL_FLASH_Program+0x1e>
 8003626:	2302      	movs	r3, #2
 8003628:	e03b      	b.n	80036a2 <HAL_FLASH_Program+0x96>
 800362a:	4b20      	ldr	r3, [pc, #128]	; (80036ac <HAL_FLASH_Program+0xa0>)
 800362c:	2201      	movs	r2, #1
 800362e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003630:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003634:	f000 f870 	bl	8003718 <FLASH_WaitForLastOperation>
 8003638:	4603      	mov	r3, r0
 800363a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800363c:	7dfb      	ldrb	r3, [r7, #23]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d12b      	bne.n	800369a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d105      	bne.n	8003654 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8003648:	783b      	ldrb	r3, [r7, #0]
 800364a:	4619      	mov	r1, r3
 800364c:	68b8      	ldr	r0, [r7, #8]
 800364e:	f000 f91b 	bl	8003888 <FLASH_Program_Byte>
 8003652:	e016      	b.n	8003682 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d105      	bne.n	8003666 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800365a:	883b      	ldrh	r3, [r7, #0]
 800365c:	4619      	mov	r1, r3
 800365e:	68b8      	ldr	r0, [r7, #8]
 8003660:	f000 f8ee 	bl	8003840 <FLASH_Program_HalfWord>
 8003664:	e00d      	b.n	8003682 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2b02      	cmp	r3, #2
 800366a:	d105      	bne.n	8003678 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	4619      	mov	r1, r3
 8003670:	68b8      	ldr	r0, [r7, #8]
 8003672:	f000 f8c3 	bl	80037fc <FLASH_Program_Word>
 8003676:	e004      	b.n	8003682 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8003678:	e9d7 2300 	ldrd	r2, r3, [r7]
 800367c:	68b8      	ldr	r0, [r7, #8]
 800367e:	f000 f88b 	bl	8003798 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003682:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003686:	f000 f847 	bl	8003718 <FLASH_WaitForLastOperation>
 800368a:	4603      	mov	r3, r0
 800368c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800368e:	4b08      	ldr	r3, [pc, #32]	; (80036b0 <HAL_FLASH_Program+0xa4>)
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	4a07      	ldr	r2, [pc, #28]	; (80036b0 <HAL_FLASH_Program+0xa4>)
 8003694:	f023 0301 	bic.w	r3, r3, #1
 8003698:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800369a:	4b04      	ldr	r3, [pc, #16]	; (80036ac <HAL_FLASH_Program+0xa0>)
 800369c:	2200      	movs	r2, #0
 800369e:	761a      	strb	r2, [r3, #24]
  
  return status;
 80036a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3718      	adds	r7, #24
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	20001a40 	.word	0x20001a40
 80036b0:	40023c00 	.word	0x40023c00

080036b4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80036ba:	2300      	movs	r3, #0
 80036bc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80036be:	4b0b      	ldr	r3, [pc, #44]	; (80036ec <HAL_FLASH_Unlock+0x38>)
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	da0b      	bge.n	80036de <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80036c6:	4b09      	ldr	r3, [pc, #36]	; (80036ec <HAL_FLASH_Unlock+0x38>)
 80036c8:	4a09      	ldr	r2, [pc, #36]	; (80036f0 <HAL_FLASH_Unlock+0x3c>)
 80036ca:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80036cc:	4b07      	ldr	r3, [pc, #28]	; (80036ec <HAL_FLASH_Unlock+0x38>)
 80036ce:	4a09      	ldr	r2, [pc, #36]	; (80036f4 <HAL_FLASH_Unlock+0x40>)
 80036d0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80036d2:	4b06      	ldr	r3, [pc, #24]	; (80036ec <HAL_FLASH_Unlock+0x38>)
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	da01      	bge.n	80036de <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80036de:	79fb      	ldrb	r3, [r7, #7]
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr
 80036ec:	40023c00 	.word	0x40023c00
 80036f0:	45670123 	.word	0x45670123
 80036f4:	cdef89ab 	.word	0xcdef89ab

080036f8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80036f8:	b480      	push	{r7}
 80036fa:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80036fc:	4b05      	ldr	r3, [pc, #20]	; (8003714 <HAL_FLASH_Lock+0x1c>)
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	4a04      	ldr	r2, [pc, #16]	; (8003714 <HAL_FLASH_Lock+0x1c>)
 8003702:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003706:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr
 8003714:	40023c00 	.word	0x40023c00

08003718 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003720:	2300      	movs	r3, #0
 8003722:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003724:	4b1a      	ldr	r3, [pc, #104]	; (8003790 <FLASH_WaitForLastOperation+0x78>)
 8003726:	2200      	movs	r2, #0
 8003728:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800372a:	f7fe f9cd 	bl	8001ac8 <HAL_GetTick>
 800372e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003730:	e010      	b.n	8003754 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003738:	d00c      	beq.n	8003754 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d007      	beq.n	8003750 <FLASH_WaitForLastOperation+0x38>
 8003740:	f7fe f9c2 	bl	8001ac8 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	429a      	cmp	r2, r3
 800374e:	d201      	bcs.n	8003754 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e019      	b.n	8003788 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003754:	4b0f      	ldr	r3, [pc, #60]	; (8003794 <FLASH_WaitForLastOperation+0x7c>)
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1e8      	bne.n	8003732 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003760:	4b0c      	ldr	r3, [pc, #48]	; (8003794 <FLASH_WaitForLastOperation+0x7c>)
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	f003 0301 	and.w	r3, r3, #1
 8003768:	2b00      	cmp	r3, #0
 800376a:	d002      	beq.n	8003772 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800376c:	4b09      	ldr	r3, [pc, #36]	; (8003794 <FLASH_WaitForLastOperation+0x7c>)
 800376e:	2201      	movs	r2, #1
 8003770:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8003772:	4b08      	ldr	r3, [pc, #32]	; (8003794 <FLASH_WaitForLastOperation+0x7c>)
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800377e:	f000 f8a5 	bl	80038cc <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e000      	b.n	8003788 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8003786:	2300      	movs	r3, #0
  
}  
 8003788:	4618      	mov	r0, r3
 800378a:	3710      	adds	r7, #16
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	20001a40 	.word	0x20001a40
 8003794:	40023c00 	.word	0x40023c00

08003798 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80037a4:	4b14      	ldr	r3, [pc, #80]	; (80037f8 <FLASH_Program_DoubleWord+0x60>)
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	4a13      	ldr	r2, [pc, #76]	; (80037f8 <FLASH_Program_DoubleWord+0x60>)
 80037aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80037b0:	4b11      	ldr	r3, [pc, #68]	; (80037f8 <FLASH_Program_DoubleWord+0x60>)
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	4a10      	ldr	r2, [pc, #64]	; (80037f8 <FLASH_Program_DoubleWord+0x60>)
 80037b6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80037ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80037bc:	4b0e      	ldr	r3, [pc, #56]	; (80037f8 <FLASH_Program_DoubleWord+0x60>)
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	4a0d      	ldr	r2, [pc, #52]	; (80037f8 <FLASH_Program_DoubleWord+0x60>)
 80037c2:	f043 0301 	orr.w	r3, r3, #1
 80037c6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	683a      	ldr	r2, [r7, #0]
 80037cc:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80037ce:	f3bf 8f6f 	isb	sy
}
 80037d2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80037d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80037d8:	f04f 0200 	mov.w	r2, #0
 80037dc:	f04f 0300 	mov.w	r3, #0
 80037e0:	000a      	movs	r2, r1
 80037e2:	2300      	movs	r3, #0
 80037e4:	68f9      	ldr	r1, [r7, #12]
 80037e6:	3104      	adds	r1, #4
 80037e8:	4613      	mov	r3, r2
 80037ea:	600b      	str	r3, [r1, #0]
}
 80037ec:	bf00      	nop
 80037ee:	3714      	adds	r7, #20
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr
 80037f8:	40023c00 	.word	0x40023c00

080037fc <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003806:	4b0d      	ldr	r3, [pc, #52]	; (800383c <FLASH_Program_Word+0x40>)
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	4a0c      	ldr	r2, [pc, #48]	; (800383c <FLASH_Program_Word+0x40>)
 800380c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003810:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8003812:	4b0a      	ldr	r3, [pc, #40]	; (800383c <FLASH_Program_Word+0x40>)
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	4a09      	ldr	r2, [pc, #36]	; (800383c <FLASH_Program_Word+0x40>)
 8003818:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800381c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800381e:	4b07      	ldr	r3, [pc, #28]	; (800383c <FLASH_Program_Word+0x40>)
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	4a06      	ldr	r2, [pc, #24]	; (800383c <FLASH_Program_Word+0x40>)
 8003824:	f043 0301 	orr.w	r3, r3, #1
 8003828:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	601a      	str	r2, [r3, #0]
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr
 800383c:	40023c00 	.word	0x40023c00

08003840 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	460b      	mov	r3, r1
 800384a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800384c:	4b0d      	ldr	r3, [pc, #52]	; (8003884 <FLASH_Program_HalfWord+0x44>)
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	4a0c      	ldr	r2, [pc, #48]	; (8003884 <FLASH_Program_HalfWord+0x44>)
 8003852:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003856:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8003858:	4b0a      	ldr	r3, [pc, #40]	; (8003884 <FLASH_Program_HalfWord+0x44>)
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	4a09      	ldr	r2, [pc, #36]	; (8003884 <FLASH_Program_HalfWord+0x44>)
 800385e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003862:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003864:	4b07      	ldr	r3, [pc, #28]	; (8003884 <FLASH_Program_HalfWord+0x44>)
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	4a06      	ldr	r2, [pc, #24]	; (8003884 <FLASH_Program_HalfWord+0x44>)
 800386a:	f043 0301 	orr.w	r3, r3, #1
 800386e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	887a      	ldrh	r2, [r7, #2]
 8003874:	801a      	strh	r2, [r3, #0]
}
 8003876:	bf00      	nop
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	40023c00 	.word	0x40023c00

08003888 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	460b      	mov	r3, r1
 8003892:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003894:	4b0c      	ldr	r3, [pc, #48]	; (80038c8 <FLASH_Program_Byte+0x40>)
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	4a0b      	ldr	r2, [pc, #44]	; (80038c8 <FLASH_Program_Byte+0x40>)
 800389a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800389e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80038a0:	4b09      	ldr	r3, [pc, #36]	; (80038c8 <FLASH_Program_Byte+0x40>)
 80038a2:	4a09      	ldr	r2, [pc, #36]	; (80038c8 <FLASH_Program_Byte+0x40>)
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80038a8:	4b07      	ldr	r3, [pc, #28]	; (80038c8 <FLASH_Program_Byte+0x40>)
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	4a06      	ldr	r2, [pc, #24]	; (80038c8 <FLASH_Program_Byte+0x40>)
 80038ae:	f043 0301 	orr.w	r3, r3, #1
 80038b2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	78fa      	ldrb	r2, [r7, #3]
 80038b8:	701a      	strb	r2, [r3, #0]
}
 80038ba:	bf00      	nop
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	40023c00 	.word	0x40023c00

080038cc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80038d0:	4b27      	ldr	r3, [pc, #156]	; (8003970 <FLASH_SetErrorCode+0xa4>)
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	f003 0310 	and.w	r3, r3, #16
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d008      	beq.n	80038ee <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80038dc:	4b25      	ldr	r3, [pc, #148]	; (8003974 <FLASH_SetErrorCode+0xa8>)
 80038de:	69db      	ldr	r3, [r3, #28]
 80038e0:	f043 0310 	orr.w	r3, r3, #16
 80038e4:	4a23      	ldr	r2, [pc, #140]	; (8003974 <FLASH_SetErrorCode+0xa8>)
 80038e6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80038e8:	4b21      	ldr	r3, [pc, #132]	; (8003970 <FLASH_SetErrorCode+0xa4>)
 80038ea:	2210      	movs	r2, #16
 80038ec:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80038ee:	4b20      	ldr	r3, [pc, #128]	; (8003970 <FLASH_SetErrorCode+0xa4>)
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	f003 0320 	and.w	r3, r3, #32
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d008      	beq.n	800390c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80038fa:	4b1e      	ldr	r3, [pc, #120]	; (8003974 <FLASH_SetErrorCode+0xa8>)
 80038fc:	69db      	ldr	r3, [r3, #28]
 80038fe:	f043 0308 	orr.w	r3, r3, #8
 8003902:	4a1c      	ldr	r2, [pc, #112]	; (8003974 <FLASH_SetErrorCode+0xa8>)
 8003904:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8003906:	4b1a      	ldr	r3, [pc, #104]	; (8003970 <FLASH_SetErrorCode+0xa4>)
 8003908:	2220      	movs	r2, #32
 800390a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800390c:	4b18      	ldr	r3, [pc, #96]	; (8003970 <FLASH_SetErrorCode+0xa4>)
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003914:	2b00      	cmp	r3, #0
 8003916:	d008      	beq.n	800392a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003918:	4b16      	ldr	r3, [pc, #88]	; (8003974 <FLASH_SetErrorCode+0xa8>)
 800391a:	69db      	ldr	r3, [r3, #28]
 800391c:	f043 0304 	orr.w	r3, r3, #4
 8003920:	4a14      	ldr	r2, [pc, #80]	; (8003974 <FLASH_SetErrorCode+0xa8>)
 8003922:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003924:	4b12      	ldr	r3, [pc, #72]	; (8003970 <FLASH_SetErrorCode+0xa4>)
 8003926:	2240      	movs	r2, #64	; 0x40
 8003928:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800392a:	4b11      	ldr	r3, [pc, #68]	; (8003970 <FLASH_SetErrorCode+0xa4>)
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003932:	2b00      	cmp	r3, #0
 8003934:	d008      	beq.n	8003948 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8003936:	4b0f      	ldr	r3, [pc, #60]	; (8003974 <FLASH_SetErrorCode+0xa8>)
 8003938:	69db      	ldr	r3, [r3, #28]
 800393a:	f043 0302 	orr.w	r3, r3, #2
 800393e:	4a0d      	ldr	r2, [pc, #52]	; (8003974 <FLASH_SetErrorCode+0xa8>)
 8003940:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8003942:	4b0b      	ldr	r3, [pc, #44]	; (8003970 <FLASH_SetErrorCode+0xa4>)
 8003944:	2280      	movs	r2, #128	; 0x80
 8003946:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003948:	4b09      	ldr	r3, [pc, #36]	; (8003970 <FLASH_SetErrorCode+0xa4>)
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	f003 0302 	and.w	r3, r3, #2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d008      	beq.n	8003966 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003954:	4b07      	ldr	r3, [pc, #28]	; (8003974 <FLASH_SetErrorCode+0xa8>)
 8003956:	69db      	ldr	r3, [r3, #28]
 8003958:	f043 0320 	orr.w	r3, r3, #32
 800395c:	4a05      	ldr	r2, [pc, #20]	; (8003974 <FLASH_SetErrorCode+0xa8>)
 800395e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003960:	4b03      	ldr	r3, [pc, #12]	; (8003970 <FLASH_SetErrorCode+0xa4>)
 8003962:	2202      	movs	r2, #2
 8003964:	60da      	str	r2, [r3, #12]
  }
}
 8003966:	bf00      	nop
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr
 8003970:	40023c00 	.word	0x40023c00
 8003974:	20001a40 	.word	0x20001a40

08003978 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8003986:	2300      	movs	r3, #0
 8003988:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800398a:	4b31      	ldr	r3, [pc, #196]	; (8003a50 <HAL_FLASHEx_Erase+0xd8>)
 800398c:	7e1b      	ldrb	r3, [r3, #24]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d101      	bne.n	8003996 <HAL_FLASHEx_Erase+0x1e>
 8003992:	2302      	movs	r3, #2
 8003994:	e058      	b.n	8003a48 <HAL_FLASHEx_Erase+0xd0>
 8003996:	4b2e      	ldr	r3, [pc, #184]	; (8003a50 <HAL_FLASHEx_Erase+0xd8>)
 8003998:	2201      	movs	r2, #1
 800399a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800399c:	f24c 3050 	movw	r0, #50000	; 0xc350
 80039a0:	f7ff feba 	bl	8003718 <FLASH_WaitForLastOperation>
 80039a4:	4603      	mov	r3, r0
 80039a6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80039a8:	7bfb      	ldrb	r3, [r7, #15]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d148      	bne.n	8003a40 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	f04f 32ff 	mov.w	r2, #4294967295
 80039b4:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d115      	bne.n	80039ea <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	b2da      	uxtb	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	4619      	mov	r1, r3
 80039ca:	4610      	mov	r0, r2
 80039cc:	f000 f844 	bl	8003a58 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80039d0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80039d4:	f7ff fea0 	bl	8003718 <FLASH_WaitForLastOperation>
 80039d8:	4603      	mov	r3, r0
 80039da:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80039dc:	4b1d      	ldr	r3, [pc, #116]	; (8003a54 <HAL_FLASHEx_Erase+0xdc>)
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	4a1c      	ldr	r2, [pc, #112]	; (8003a54 <HAL_FLASHEx_Erase+0xdc>)
 80039e2:	f023 0304 	bic.w	r3, r3, #4
 80039e6:	6113      	str	r3, [r2, #16]
 80039e8:	e028      	b.n	8003a3c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	60bb      	str	r3, [r7, #8]
 80039f0:	e01c      	b.n	8003a2c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	4619      	mov	r1, r3
 80039fa:	68b8      	ldr	r0, [r7, #8]
 80039fc:	f000 f850 	bl	8003aa0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003a00:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003a04:	f7ff fe88 	bl	8003718 <FLASH_WaitForLastOperation>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8003a0c:	4b11      	ldr	r3, [pc, #68]	; (8003a54 <HAL_FLASHEx_Erase+0xdc>)
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	4a10      	ldr	r2, [pc, #64]	; (8003a54 <HAL_FLASHEx_Erase+0xdc>)
 8003a12:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8003a16:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8003a18:	7bfb      	ldrb	r3, [r7, #15]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d003      	beq.n	8003a26 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	68ba      	ldr	r2, [r7, #8]
 8003a22:	601a      	str	r2, [r3, #0]
          break;
 8003a24:	e00a      	b.n	8003a3c <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	3301      	adds	r3, #1
 8003a2a:	60bb      	str	r3, [r7, #8]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	68da      	ldr	r2, [r3, #12]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	4413      	add	r3, r2
 8003a36:	68ba      	ldr	r2, [r7, #8]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d3da      	bcc.n	80039f2 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003a3c:	f000 f878 	bl	8003b30 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003a40:	4b03      	ldr	r3, [pc, #12]	; (8003a50 <HAL_FLASHEx_Erase+0xd8>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	761a      	strb	r2, [r3, #24]

  return status;
 8003a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	20001a40 	.word	0x20001a40
 8003a54:	40023c00 	.word	0x40023c00

08003a58 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	4603      	mov	r3, r0
 8003a60:	6039      	str	r1, [r7, #0]
 8003a62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003a64:	4b0d      	ldr	r3, [pc, #52]	; (8003a9c <FLASH_MassErase+0x44>)
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	4a0c      	ldr	r2, [pc, #48]	; (8003a9c <FLASH_MassErase+0x44>)
 8003a6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a6e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8003a70:	4b0a      	ldr	r3, [pc, #40]	; (8003a9c <FLASH_MassErase+0x44>)
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	4a09      	ldr	r2, [pc, #36]	; (8003a9c <FLASH_MassErase+0x44>)
 8003a76:	f043 0304 	orr.w	r3, r3, #4
 8003a7a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8003a7c:	4b07      	ldr	r3, [pc, #28]	; (8003a9c <FLASH_MassErase+0x44>)
 8003a7e:	691a      	ldr	r2, [r3, #16]
 8003a80:	79fb      	ldrb	r3, [r7, #7]
 8003a82:	021b      	lsls	r3, r3, #8
 8003a84:	4313      	orrs	r3, r2
 8003a86:	4a05      	ldr	r2, [pc, #20]	; (8003a9c <FLASH_MassErase+0x44>)
 8003a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a8c:	6113      	str	r3, [r2, #16]
}
 8003a8e:	bf00      	nop
 8003a90:	370c      	adds	r7, #12
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	40023c00 	.word	0x40023c00

08003aa0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b085      	sub	sp, #20
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8003aac:	2300      	movs	r3, #0
 8003aae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8003ab0:	78fb      	ldrb	r3, [r7, #3]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d102      	bne.n	8003abc <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	60fb      	str	r3, [r7, #12]
 8003aba:	e010      	b.n	8003ade <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003abc:	78fb      	ldrb	r3, [r7, #3]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d103      	bne.n	8003aca <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8003ac2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ac6:	60fb      	str	r3, [r7, #12]
 8003ac8:	e009      	b.n	8003ade <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8003aca:	78fb      	ldrb	r3, [r7, #3]
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d103      	bne.n	8003ad8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8003ad0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ad4:	60fb      	str	r3, [r7, #12]
 8003ad6:	e002      	b.n	8003ade <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003ad8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003adc:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003ade:	4b13      	ldr	r3, [pc, #76]	; (8003b2c <FLASH_Erase_Sector+0x8c>)
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	4a12      	ldr	r2, [pc, #72]	; (8003b2c <FLASH_Erase_Sector+0x8c>)
 8003ae4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ae8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8003aea:	4b10      	ldr	r3, [pc, #64]	; (8003b2c <FLASH_Erase_Sector+0x8c>)
 8003aec:	691a      	ldr	r2, [r3, #16]
 8003aee:	490f      	ldr	r1, [pc, #60]	; (8003b2c <FLASH_Erase_Sector+0x8c>)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8003af6:	4b0d      	ldr	r3, [pc, #52]	; (8003b2c <FLASH_Erase_Sector+0x8c>)
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	4a0c      	ldr	r2, [pc, #48]	; (8003b2c <FLASH_Erase_Sector+0x8c>)
 8003afc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003b00:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8003b02:	4b0a      	ldr	r3, [pc, #40]	; (8003b2c <FLASH_Erase_Sector+0x8c>)
 8003b04:	691a      	ldr	r2, [r3, #16]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	00db      	lsls	r3, r3, #3
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	4a07      	ldr	r2, [pc, #28]	; (8003b2c <FLASH_Erase_Sector+0x8c>)
 8003b0e:	f043 0302 	orr.w	r3, r3, #2
 8003b12:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8003b14:	4b05      	ldr	r3, [pc, #20]	; (8003b2c <FLASH_Erase_Sector+0x8c>)
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	4a04      	ldr	r2, [pc, #16]	; (8003b2c <FLASH_Erase_Sector+0x8c>)
 8003b1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b1e:	6113      	str	r3, [r2, #16]
}
 8003b20:	bf00      	nop
 8003b22:	3714      	adds	r7, #20
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr
 8003b2c:	40023c00 	.word	0x40023c00

08003b30 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8003b30:	b480      	push	{r7}
 8003b32:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8003b34:	4b20      	ldr	r3, [pc, #128]	; (8003bb8 <FLASH_FlushCaches+0x88>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d017      	beq.n	8003b70 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003b40:	4b1d      	ldr	r3, [pc, #116]	; (8003bb8 <FLASH_FlushCaches+0x88>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a1c      	ldr	r2, [pc, #112]	; (8003bb8 <FLASH_FlushCaches+0x88>)
 8003b46:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b4a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003b4c:	4b1a      	ldr	r3, [pc, #104]	; (8003bb8 <FLASH_FlushCaches+0x88>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a19      	ldr	r2, [pc, #100]	; (8003bb8 <FLASH_FlushCaches+0x88>)
 8003b52:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003b56:	6013      	str	r3, [r2, #0]
 8003b58:	4b17      	ldr	r3, [pc, #92]	; (8003bb8 <FLASH_FlushCaches+0x88>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a16      	ldr	r2, [pc, #88]	; (8003bb8 <FLASH_FlushCaches+0x88>)
 8003b5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b62:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b64:	4b14      	ldr	r3, [pc, #80]	; (8003bb8 <FLASH_FlushCaches+0x88>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a13      	ldr	r2, [pc, #76]	; (8003bb8 <FLASH_FlushCaches+0x88>)
 8003b6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b6e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8003b70:	4b11      	ldr	r3, [pc, #68]	; (8003bb8 <FLASH_FlushCaches+0x88>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d017      	beq.n	8003bac <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8003b7c:	4b0e      	ldr	r3, [pc, #56]	; (8003bb8 <FLASH_FlushCaches+0x88>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a0d      	ldr	r2, [pc, #52]	; (8003bb8 <FLASH_FlushCaches+0x88>)
 8003b82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b86:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003b88:	4b0b      	ldr	r3, [pc, #44]	; (8003bb8 <FLASH_FlushCaches+0x88>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a0a      	ldr	r2, [pc, #40]	; (8003bb8 <FLASH_FlushCaches+0x88>)
 8003b8e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b92:	6013      	str	r3, [r2, #0]
 8003b94:	4b08      	ldr	r3, [pc, #32]	; (8003bb8 <FLASH_FlushCaches+0x88>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a07      	ldr	r2, [pc, #28]	; (8003bb8 <FLASH_FlushCaches+0x88>)
 8003b9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b9e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ba0:	4b05      	ldr	r3, [pc, #20]	; (8003bb8 <FLASH_FlushCaches+0x88>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a04      	ldr	r2, [pc, #16]	; (8003bb8 <FLASH_FlushCaches+0x88>)
 8003ba6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003baa:	6013      	str	r3, [r2, #0]
  }
}
 8003bac:	bf00      	nop
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	40023c00 	.word	0x40023c00

08003bbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b089      	sub	sp, #36	; 0x24
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	61fb      	str	r3, [r7, #28]
 8003bd6:	e16b      	b.n	8003eb0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003bd8:	2201      	movs	r2, #1
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003be0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	4013      	ands	r3, r2
 8003bea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	f040 815a 	bne.w	8003eaa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f003 0303 	and.w	r3, r3, #3
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d005      	beq.n	8003c0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d130      	bne.n	8003c70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	005b      	lsls	r3, r3, #1
 8003c18:	2203      	movs	r2, #3
 8003c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1e:	43db      	mvns	r3, r3
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	4013      	ands	r3, r2
 8003c24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	68da      	ldr	r2, [r3, #12]
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	005b      	lsls	r3, r3, #1
 8003c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c32:	69ba      	ldr	r2, [r7, #24]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	69ba      	ldr	r2, [r7, #24]
 8003c3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c44:	2201      	movs	r2, #1
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4c:	43db      	mvns	r3, r3
 8003c4e:	69ba      	ldr	r2, [r7, #24]
 8003c50:	4013      	ands	r3, r2
 8003c52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	091b      	lsrs	r3, r3, #4
 8003c5a:	f003 0201 	and.w	r2, r3, #1
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	fa02 f303 	lsl.w	r3, r2, r3
 8003c64:	69ba      	ldr	r2, [r7, #24]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f003 0303 	and.w	r3, r3, #3
 8003c78:	2b03      	cmp	r3, #3
 8003c7a:	d017      	beq.n	8003cac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	2203      	movs	r2, #3
 8003c88:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8c:	43db      	mvns	r3, r3
 8003c8e:	69ba      	ldr	r2, [r7, #24]
 8003c90:	4013      	ands	r3, r2
 8003c92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	689a      	ldr	r2, [r3, #8]
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	005b      	lsls	r3, r3, #1
 8003c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f003 0303 	and.w	r3, r3, #3
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d123      	bne.n	8003d00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	08da      	lsrs	r2, r3, #3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	3208      	adds	r2, #8
 8003cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	f003 0307 	and.w	r3, r3, #7
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	220f      	movs	r2, #15
 8003cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd4:	43db      	mvns	r3, r3
 8003cd6:	69ba      	ldr	r2, [r7, #24]
 8003cd8:	4013      	ands	r3, r2
 8003cda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	691a      	ldr	r2, [r3, #16]
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	f003 0307 	and.w	r3, r3, #7
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	08da      	lsrs	r2, r3, #3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	3208      	adds	r2, #8
 8003cfa:	69b9      	ldr	r1, [r7, #24]
 8003cfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	2203      	movs	r2, #3
 8003d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d10:	43db      	mvns	r3, r3
 8003d12:	69ba      	ldr	r2, [r7, #24]
 8003d14:	4013      	ands	r3, r2
 8003d16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f003 0203 	and.w	r2, r3, #3
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	005b      	lsls	r3, r3, #1
 8003d24:	fa02 f303 	lsl.w	r3, r2, r3
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f000 80b4 	beq.w	8003eaa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d42:	2300      	movs	r3, #0
 8003d44:	60fb      	str	r3, [r7, #12]
 8003d46:	4b60      	ldr	r3, [pc, #384]	; (8003ec8 <HAL_GPIO_Init+0x30c>)
 8003d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4a:	4a5f      	ldr	r2, [pc, #380]	; (8003ec8 <HAL_GPIO_Init+0x30c>)
 8003d4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d50:	6453      	str	r3, [r2, #68]	; 0x44
 8003d52:	4b5d      	ldr	r3, [pc, #372]	; (8003ec8 <HAL_GPIO_Init+0x30c>)
 8003d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d5a:	60fb      	str	r3, [r7, #12]
 8003d5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d5e:	4a5b      	ldr	r2, [pc, #364]	; (8003ecc <HAL_GPIO_Init+0x310>)
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	089b      	lsrs	r3, r3, #2
 8003d64:	3302      	adds	r3, #2
 8003d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	f003 0303 	and.w	r3, r3, #3
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	220f      	movs	r2, #15
 8003d76:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7a:	43db      	mvns	r3, r3
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	4013      	ands	r3, r2
 8003d80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a52      	ldr	r2, [pc, #328]	; (8003ed0 <HAL_GPIO_Init+0x314>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d02b      	beq.n	8003de2 <HAL_GPIO_Init+0x226>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a51      	ldr	r2, [pc, #324]	; (8003ed4 <HAL_GPIO_Init+0x318>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d025      	beq.n	8003dde <HAL_GPIO_Init+0x222>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a50      	ldr	r2, [pc, #320]	; (8003ed8 <HAL_GPIO_Init+0x31c>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d01f      	beq.n	8003dda <HAL_GPIO_Init+0x21e>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a4f      	ldr	r2, [pc, #316]	; (8003edc <HAL_GPIO_Init+0x320>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d019      	beq.n	8003dd6 <HAL_GPIO_Init+0x21a>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a4e      	ldr	r2, [pc, #312]	; (8003ee0 <HAL_GPIO_Init+0x324>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d013      	beq.n	8003dd2 <HAL_GPIO_Init+0x216>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a4d      	ldr	r2, [pc, #308]	; (8003ee4 <HAL_GPIO_Init+0x328>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d00d      	beq.n	8003dce <HAL_GPIO_Init+0x212>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a4c      	ldr	r2, [pc, #304]	; (8003ee8 <HAL_GPIO_Init+0x32c>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d007      	beq.n	8003dca <HAL_GPIO_Init+0x20e>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a4b      	ldr	r2, [pc, #300]	; (8003eec <HAL_GPIO_Init+0x330>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d101      	bne.n	8003dc6 <HAL_GPIO_Init+0x20a>
 8003dc2:	2307      	movs	r3, #7
 8003dc4:	e00e      	b.n	8003de4 <HAL_GPIO_Init+0x228>
 8003dc6:	2308      	movs	r3, #8
 8003dc8:	e00c      	b.n	8003de4 <HAL_GPIO_Init+0x228>
 8003dca:	2306      	movs	r3, #6
 8003dcc:	e00a      	b.n	8003de4 <HAL_GPIO_Init+0x228>
 8003dce:	2305      	movs	r3, #5
 8003dd0:	e008      	b.n	8003de4 <HAL_GPIO_Init+0x228>
 8003dd2:	2304      	movs	r3, #4
 8003dd4:	e006      	b.n	8003de4 <HAL_GPIO_Init+0x228>
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e004      	b.n	8003de4 <HAL_GPIO_Init+0x228>
 8003dda:	2302      	movs	r3, #2
 8003ddc:	e002      	b.n	8003de4 <HAL_GPIO_Init+0x228>
 8003dde:	2301      	movs	r3, #1
 8003de0:	e000      	b.n	8003de4 <HAL_GPIO_Init+0x228>
 8003de2:	2300      	movs	r3, #0
 8003de4:	69fa      	ldr	r2, [r7, #28]
 8003de6:	f002 0203 	and.w	r2, r2, #3
 8003dea:	0092      	lsls	r2, r2, #2
 8003dec:	4093      	lsls	r3, r2
 8003dee:	69ba      	ldr	r2, [r7, #24]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003df4:	4935      	ldr	r1, [pc, #212]	; (8003ecc <HAL_GPIO_Init+0x310>)
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	089b      	lsrs	r3, r3, #2
 8003dfa:	3302      	adds	r3, #2
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e02:	4b3b      	ldr	r3, [pc, #236]	; (8003ef0 <HAL_GPIO_Init+0x334>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	43db      	mvns	r3, r3
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	4013      	ands	r3, r2
 8003e10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d003      	beq.n	8003e26 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003e1e:	69ba      	ldr	r2, [r7, #24]
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e26:	4a32      	ldr	r2, [pc, #200]	; (8003ef0 <HAL_GPIO_Init+0x334>)
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003e2c:	4b30      	ldr	r3, [pc, #192]	; (8003ef0 <HAL_GPIO_Init+0x334>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	43db      	mvns	r3, r3
 8003e36:	69ba      	ldr	r2, [r7, #24]
 8003e38:	4013      	ands	r3, r2
 8003e3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d003      	beq.n	8003e50 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e50:	4a27      	ldr	r2, [pc, #156]	; (8003ef0 <HAL_GPIO_Init+0x334>)
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e56:	4b26      	ldr	r3, [pc, #152]	; (8003ef0 <HAL_GPIO_Init+0x334>)
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	43db      	mvns	r3, r3
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	4013      	ands	r3, r2
 8003e64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d003      	beq.n	8003e7a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003e72:	69ba      	ldr	r2, [r7, #24]
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e7a:	4a1d      	ldr	r2, [pc, #116]	; (8003ef0 <HAL_GPIO_Init+0x334>)
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e80:	4b1b      	ldr	r3, [pc, #108]	; (8003ef0 <HAL_GPIO_Init+0x334>)
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	43db      	mvns	r3, r3
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d003      	beq.n	8003ea4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003e9c:	69ba      	ldr	r2, [r7, #24]
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ea4:	4a12      	ldr	r2, [pc, #72]	; (8003ef0 <HAL_GPIO_Init+0x334>)
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	3301      	adds	r3, #1
 8003eae:	61fb      	str	r3, [r7, #28]
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	2b0f      	cmp	r3, #15
 8003eb4:	f67f ae90 	bls.w	8003bd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003eb8:	bf00      	nop
 8003eba:	bf00      	nop
 8003ebc:	3724      	adds	r7, #36	; 0x24
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	40023800 	.word	0x40023800
 8003ecc:	40013800 	.word	0x40013800
 8003ed0:	40020000 	.word	0x40020000
 8003ed4:	40020400 	.word	0x40020400
 8003ed8:	40020800 	.word	0x40020800
 8003edc:	40020c00 	.word	0x40020c00
 8003ee0:	40021000 	.word	0x40021000
 8003ee4:	40021400 	.word	0x40021400
 8003ee8:	40021800 	.word	0x40021800
 8003eec:	40021c00 	.word	0x40021c00
 8003ef0:	40013c00 	.word	0x40013c00

08003ef4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	460b      	mov	r3, r1
 8003efe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	691a      	ldr	r2, [r3, #16]
 8003f04:	887b      	ldrh	r3, [r7, #2]
 8003f06:	4013      	ands	r3, r2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d002      	beq.n	8003f12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	73fb      	strb	r3, [r7, #15]
 8003f10:	e001      	b.n	8003f16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f12:	2300      	movs	r3, #0
 8003f14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3714      	adds	r7, #20
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	807b      	strh	r3, [r7, #2]
 8003f30:	4613      	mov	r3, r2
 8003f32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f34:	787b      	ldrb	r3, [r7, #1]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d003      	beq.n	8003f42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f3a:	887a      	ldrh	r2, [r7, #2]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f40:	e003      	b.n	8003f4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f42:	887b      	ldrh	r3, [r7, #2]
 8003f44:	041a      	lsls	r2, r3, #16
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	619a      	str	r2, [r3, #24]
}
 8003f4a:	bf00      	nop
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
	...

08003f58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d101      	bne.n	8003f6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e264      	b.n	8004434 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d075      	beq.n	8004062 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f76:	4ba3      	ldr	r3, [pc, #652]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f003 030c 	and.w	r3, r3, #12
 8003f7e:	2b04      	cmp	r3, #4
 8003f80:	d00c      	beq.n	8003f9c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f82:	4ba0      	ldr	r3, [pc, #640]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f8a:	2b08      	cmp	r3, #8
 8003f8c:	d112      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f8e:	4b9d      	ldr	r3, [pc, #628]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f9a:	d10b      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f9c:	4b99      	ldr	r3, [pc, #612]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d05b      	beq.n	8004060 <HAL_RCC_OscConfig+0x108>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d157      	bne.n	8004060 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e23f      	b.n	8004434 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fbc:	d106      	bne.n	8003fcc <HAL_RCC_OscConfig+0x74>
 8003fbe:	4b91      	ldr	r3, [pc, #580]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a90      	ldr	r2, [pc, #576]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 8003fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fc8:	6013      	str	r3, [r2, #0]
 8003fca:	e01d      	b.n	8004008 <HAL_RCC_OscConfig+0xb0>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fd4:	d10c      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x98>
 8003fd6:	4b8b      	ldr	r3, [pc, #556]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a8a      	ldr	r2, [pc, #552]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 8003fdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fe0:	6013      	str	r3, [r2, #0]
 8003fe2:	4b88      	ldr	r3, [pc, #544]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a87      	ldr	r2, [pc, #540]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 8003fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fec:	6013      	str	r3, [r2, #0]
 8003fee:	e00b      	b.n	8004008 <HAL_RCC_OscConfig+0xb0>
 8003ff0:	4b84      	ldr	r3, [pc, #528]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a83      	ldr	r2, [pc, #524]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 8003ff6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ffa:	6013      	str	r3, [r2, #0]
 8003ffc:	4b81      	ldr	r3, [pc, #516]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a80      	ldr	r2, [pc, #512]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 8004002:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004006:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d013      	beq.n	8004038 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004010:	f7fd fd5a 	bl	8001ac8 <HAL_GetTick>
 8004014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004016:	e008      	b.n	800402a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004018:	f7fd fd56 	bl	8001ac8 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b64      	cmp	r3, #100	; 0x64
 8004024:	d901      	bls.n	800402a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e204      	b.n	8004434 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800402a:	4b76      	ldr	r3, [pc, #472]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d0f0      	beq.n	8004018 <HAL_RCC_OscConfig+0xc0>
 8004036:	e014      	b.n	8004062 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004038:	f7fd fd46 	bl	8001ac8 <HAL_GetTick>
 800403c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800403e:	e008      	b.n	8004052 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004040:	f7fd fd42 	bl	8001ac8 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	2b64      	cmp	r3, #100	; 0x64
 800404c:	d901      	bls.n	8004052 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e1f0      	b.n	8004434 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004052:	4b6c      	ldr	r3, [pc, #432]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1f0      	bne.n	8004040 <HAL_RCC_OscConfig+0xe8>
 800405e:	e000      	b.n	8004062 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004060:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d063      	beq.n	8004136 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800406e:	4b65      	ldr	r3, [pc, #404]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f003 030c 	and.w	r3, r3, #12
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00b      	beq.n	8004092 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800407a:	4b62      	ldr	r3, [pc, #392]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004082:	2b08      	cmp	r3, #8
 8004084:	d11c      	bne.n	80040c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004086:	4b5f      	ldr	r3, [pc, #380]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d116      	bne.n	80040c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004092:	4b5c      	ldr	r3, [pc, #368]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	2b00      	cmp	r3, #0
 800409c:	d005      	beq.n	80040aa <HAL_RCC_OscConfig+0x152>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d001      	beq.n	80040aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e1c4      	b.n	8004434 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040aa:	4b56      	ldr	r3, [pc, #344]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	00db      	lsls	r3, r3, #3
 80040b8:	4952      	ldr	r1, [pc, #328]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040be:	e03a      	b.n	8004136 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d020      	beq.n	800410a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040c8:	4b4f      	ldr	r3, [pc, #316]	; (8004208 <HAL_RCC_OscConfig+0x2b0>)
 80040ca:	2201      	movs	r2, #1
 80040cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ce:	f7fd fcfb 	bl	8001ac8 <HAL_GetTick>
 80040d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040d4:	e008      	b.n	80040e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040d6:	f7fd fcf7 	bl	8001ac8 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d901      	bls.n	80040e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e1a5      	b.n	8004434 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040e8:	4b46      	ldr	r3, [pc, #280]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d0f0      	beq.n	80040d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040f4:	4b43      	ldr	r3, [pc, #268]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	00db      	lsls	r3, r3, #3
 8004102:	4940      	ldr	r1, [pc, #256]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 8004104:	4313      	orrs	r3, r2
 8004106:	600b      	str	r3, [r1, #0]
 8004108:	e015      	b.n	8004136 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800410a:	4b3f      	ldr	r3, [pc, #252]	; (8004208 <HAL_RCC_OscConfig+0x2b0>)
 800410c:	2200      	movs	r2, #0
 800410e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004110:	f7fd fcda 	bl	8001ac8 <HAL_GetTick>
 8004114:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004116:	e008      	b.n	800412a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004118:	f7fd fcd6 	bl	8001ac8 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b02      	cmp	r3, #2
 8004124:	d901      	bls.n	800412a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e184      	b.n	8004434 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800412a:	4b36      	ldr	r3, [pc, #216]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1f0      	bne.n	8004118 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0308 	and.w	r3, r3, #8
 800413e:	2b00      	cmp	r3, #0
 8004140:	d030      	beq.n	80041a4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d016      	beq.n	8004178 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800414a:	4b30      	ldr	r3, [pc, #192]	; (800420c <HAL_RCC_OscConfig+0x2b4>)
 800414c:	2201      	movs	r2, #1
 800414e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004150:	f7fd fcba 	bl	8001ac8 <HAL_GetTick>
 8004154:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004156:	e008      	b.n	800416a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004158:	f7fd fcb6 	bl	8001ac8 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b02      	cmp	r3, #2
 8004164:	d901      	bls.n	800416a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e164      	b.n	8004434 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800416a:	4b26      	ldr	r3, [pc, #152]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 800416c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d0f0      	beq.n	8004158 <HAL_RCC_OscConfig+0x200>
 8004176:	e015      	b.n	80041a4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004178:	4b24      	ldr	r3, [pc, #144]	; (800420c <HAL_RCC_OscConfig+0x2b4>)
 800417a:	2200      	movs	r2, #0
 800417c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800417e:	f7fd fca3 	bl	8001ac8 <HAL_GetTick>
 8004182:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004184:	e008      	b.n	8004198 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004186:	f7fd fc9f 	bl	8001ac8 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	2b02      	cmp	r3, #2
 8004192:	d901      	bls.n	8004198 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e14d      	b.n	8004434 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004198:	4b1a      	ldr	r3, [pc, #104]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 800419a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800419c:	f003 0302 	and.w	r3, r3, #2
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1f0      	bne.n	8004186 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0304 	and.w	r3, r3, #4
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f000 80a0 	beq.w	80042f2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041b2:	2300      	movs	r3, #0
 80041b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041b6:	4b13      	ldr	r3, [pc, #76]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 80041b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10f      	bne.n	80041e2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041c2:	2300      	movs	r3, #0
 80041c4:	60bb      	str	r3, [r7, #8]
 80041c6:	4b0f      	ldr	r3, [pc, #60]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 80041c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ca:	4a0e      	ldr	r2, [pc, #56]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 80041cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041d0:	6413      	str	r3, [r2, #64]	; 0x40
 80041d2:	4b0c      	ldr	r3, [pc, #48]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 80041d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041da:	60bb      	str	r3, [r7, #8]
 80041dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041de:	2301      	movs	r3, #1
 80041e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041e2:	4b0b      	ldr	r3, [pc, #44]	; (8004210 <HAL_RCC_OscConfig+0x2b8>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d121      	bne.n	8004232 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041ee:	4b08      	ldr	r3, [pc, #32]	; (8004210 <HAL_RCC_OscConfig+0x2b8>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a07      	ldr	r2, [pc, #28]	; (8004210 <HAL_RCC_OscConfig+0x2b8>)
 80041f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041fa:	f7fd fc65 	bl	8001ac8 <HAL_GetTick>
 80041fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004200:	e011      	b.n	8004226 <HAL_RCC_OscConfig+0x2ce>
 8004202:	bf00      	nop
 8004204:	40023800 	.word	0x40023800
 8004208:	42470000 	.word	0x42470000
 800420c:	42470e80 	.word	0x42470e80
 8004210:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004214:	f7fd fc58 	bl	8001ac8 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b02      	cmp	r3, #2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e106      	b.n	8004434 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004226:	4b85      	ldr	r3, [pc, #532]	; (800443c <HAL_RCC_OscConfig+0x4e4>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800422e:	2b00      	cmp	r3, #0
 8004230:	d0f0      	beq.n	8004214 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	2b01      	cmp	r3, #1
 8004238:	d106      	bne.n	8004248 <HAL_RCC_OscConfig+0x2f0>
 800423a:	4b81      	ldr	r3, [pc, #516]	; (8004440 <HAL_RCC_OscConfig+0x4e8>)
 800423c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800423e:	4a80      	ldr	r2, [pc, #512]	; (8004440 <HAL_RCC_OscConfig+0x4e8>)
 8004240:	f043 0301 	orr.w	r3, r3, #1
 8004244:	6713      	str	r3, [r2, #112]	; 0x70
 8004246:	e01c      	b.n	8004282 <HAL_RCC_OscConfig+0x32a>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	2b05      	cmp	r3, #5
 800424e:	d10c      	bne.n	800426a <HAL_RCC_OscConfig+0x312>
 8004250:	4b7b      	ldr	r3, [pc, #492]	; (8004440 <HAL_RCC_OscConfig+0x4e8>)
 8004252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004254:	4a7a      	ldr	r2, [pc, #488]	; (8004440 <HAL_RCC_OscConfig+0x4e8>)
 8004256:	f043 0304 	orr.w	r3, r3, #4
 800425a:	6713      	str	r3, [r2, #112]	; 0x70
 800425c:	4b78      	ldr	r3, [pc, #480]	; (8004440 <HAL_RCC_OscConfig+0x4e8>)
 800425e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004260:	4a77      	ldr	r2, [pc, #476]	; (8004440 <HAL_RCC_OscConfig+0x4e8>)
 8004262:	f043 0301 	orr.w	r3, r3, #1
 8004266:	6713      	str	r3, [r2, #112]	; 0x70
 8004268:	e00b      	b.n	8004282 <HAL_RCC_OscConfig+0x32a>
 800426a:	4b75      	ldr	r3, [pc, #468]	; (8004440 <HAL_RCC_OscConfig+0x4e8>)
 800426c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426e:	4a74      	ldr	r2, [pc, #464]	; (8004440 <HAL_RCC_OscConfig+0x4e8>)
 8004270:	f023 0301 	bic.w	r3, r3, #1
 8004274:	6713      	str	r3, [r2, #112]	; 0x70
 8004276:	4b72      	ldr	r3, [pc, #456]	; (8004440 <HAL_RCC_OscConfig+0x4e8>)
 8004278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427a:	4a71      	ldr	r2, [pc, #452]	; (8004440 <HAL_RCC_OscConfig+0x4e8>)
 800427c:	f023 0304 	bic.w	r3, r3, #4
 8004280:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d015      	beq.n	80042b6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800428a:	f7fd fc1d 	bl	8001ac8 <HAL_GetTick>
 800428e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004290:	e00a      	b.n	80042a8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004292:	f7fd fc19 	bl	8001ac8 <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	f241 3288 	movw	r2, #5000	; 0x1388
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d901      	bls.n	80042a8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e0c5      	b.n	8004434 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042a8:	4b65      	ldr	r3, [pc, #404]	; (8004440 <HAL_RCC_OscConfig+0x4e8>)
 80042aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d0ee      	beq.n	8004292 <HAL_RCC_OscConfig+0x33a>
 80042b4:	e014      	b.n	80042e0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042b6:	f7fd fc07 	bl	8001ac8 <HAL_GetTick>
 80042ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042bc:	e00a      	b.n	80042d4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042be:	f7fd fc03 	bl	8001ac8 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d901      	bls.n	80042d4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e0af      	b.n	8004434 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042d4:	4b5a      	ldr	r3, [pc, #360]	; (8004440 <HAL_RCC_OscConfig+0x4e8>)
 80042d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1ee      	bne.n	80042be <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042e0:	7dfb      	ldrb	r3, [r7, #23]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d105      	bne.n	80042f2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042e6:	4b56      	ldr	r3, [pc, #344]	; (8004440 <HAL_RCC_OscConfig+0x4e8>)
 80042e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ea:	4a55      	ldr	r2, [pc, #340]	; (8004440 <HAL_RCC_OscConfig+0x4e8>)
 80042ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	699b      	ldr	r3, [r3, #24]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	f000 809b 	beq.w	8004432 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042fc:	4b50      	ldr	r3, [pc, #320]	; (8004440 <HAL_RCC_OscConfig+0x4e8>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f003 030c 	and.w	r3, r3, #12
 8004304:	2b08      	cmp	r3, #8
 8004306:	d05c      	beq.n	80043c2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	2b02      	cmp	r3, #2
 800430e:	d141      	bne.n	8004394 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004310:	4b4c      	ldr	r3, [pc, #304]	; (8004444 <HAL_RCC_OscConfig+0x4ec>)
 8004312:	2200      	movs	r2, #0
 8004314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004316:	f7fd fbd7 	bl	8001ac8 <HAL_GetTick>
 800431a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800431c:	e008      	b.n	8004330 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800431e:	f7fd fbd3 	bl	8001ac8 <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	2b02      	cmp	r3, #2
 800432a:	d901      	bls.n	8004330 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e081      	b.n	8004434 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004330:	4b43      	ldr	r3, [pc, #268]	; (8004440 <HAL_RCC_OscConfig+0x4e8>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1f0      	bne.n	800431e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	69da      	ldr	r2, [r3, #28]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a1b      	ldr	r3, [r3, #32]
 8004344:	431a      	orrs	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434a:	019b      	lsls	r3, r3, #6
 800434c:	431a      	orrs	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004352:	085b      	lsrs	r3, r3, #1
 8004354:	3b01      	subs	r3, #1
 8004356:	041b      	lsls	r3, r3, #16
 8004358:	431a      	orrs	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435e:	061b      	lsls	r3, r3, #24
 8004360:	4937      	ldr	r1, [pc, #220]	; (8004440 <HAL_RCC_OscConfig+0x4e8>)
 8004362:	4313      	orrs	r3, r2
 8004364:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004366:	4b37      	ldr	r3, [pc, #220]	; (8004444 <HAL_RCC_OscConfig+0x4ec>)
 8004368:	2201      	movs	r2, #1
 800436a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800436c:	f7fd fbac 	bl	8001ac8 <HAL_GetTick>
 8004370:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004372:	e008      	b.n	8004386 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004374:	f7fd fba8 	bl	8001ac8 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	2b02      	cmp	r3, #2
 8004380:	d901      	bls.n	8004386 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e056      	b.n	8004434 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004386:	4b2e      	ldr	r3, [pc, #184]	; (8004440 <HAL_RCC_OscConfig+0x4e8>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d0f0      	beq.n	8004374 <HAL_RCC_OscConfig+0x41c>
 8004392:	e04e      	b.n	8004432 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004394:	4b2b      	ldr	r3, [pc, #172]	; (8004444 <HAL_RCC_OscConfig+0x4ec>)
 8004396:	2200      	movs	r2, #0
 8004398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800439a:	f7fd fb95 	bl	8001ac8 <HAL_GetTick>
 800439e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043a0:	e008      	b.n	80043b4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043a2:	f7fd fb91 	bl	8001ac8 <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d901      	bls.n	80043b4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e03f      	b.n	8004434 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043b4:	4b22      	ldr	r3, [pc, #136]	; (8004440 <HAL_RCC_OscConfig+0x4e8>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1f0      	bne.n	80043a2 <HAL_RCC_OscConfig+0x44a>
 80043c0:	e037      	b.n	8004432 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d101      	bne.n	80043ce <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e032      	b.n	8004434 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043ce:	4b1c      	ldr	r3, [pc, #112]	; (8004440 <HAL_RCC_OscConfig+0x4e8>)
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	699b      	ldr	r3, [r3, #24]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d028      	beq.n	800442e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d121      	bne.n	800442e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d11a      	bne.n	800442e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043fe:	4013      	ands	r3, r2
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004404:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004406:	4293      	cmp	r3, r2
 8004408:	d111      	bne.n	800442e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004414:	085b      	lsrs	r3, r3, #1
 8004416:	3b01      	subs	r3, #1
 8004418:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800441a:	429a      	cmp	r2, r3
 800441c:	d107      	bne.n	800442e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004428:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800442a:	429a      	cmp	r2, r3
 800442c:	d001      	beq.n	8004432 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e000      	b.n	8004434 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3718      	adds	r7, #24
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	40007000 	.word	0x40007000
 8004440:	40023800 	.word	0x40023800
 8004444:	42470060 	.word	0x42470060

08004448 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d101      	bne.n	800445c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e0cc      	b.n	80045f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800445c:	4b68      	ldr	r3, [pc, #416]	; (8004600 <HAL_RCC_ClockConfig+0x1b8>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0307 	and.w	r3, r3, #7
 8004464:	683a      	ldr	r2, [r7, #0]
 8004466:	429a      	cmp	r2, r3
 8004468:	d90c      	bls.n	8004484 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800446a:	4b65      	ldr	r3, [pc, #404]	; (8004600 <HAL_RCC_ClockConfig+0x1b8>)
 800446c:	683a      	ldr	r2, [r7, #0]
 800446e:	b2d2      	uxtb	r2, r2
 8004470:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004472:	4b63      	ldr	r3, [pc, #396]	; (8004600 <HAL_RCC_ClockConfig+0x1b8>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0307 	and.w	r3, r3, #7
 800447a:	683a      	ldr	r2, [r7, #0]
 800447c:	429a      	cmp	r2, r3
 800447e:	d001      	beq.n	8004484 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e0b8      	b.n	80045f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b00      	cmp	r3, #0
 800448e:	d020      	beq.n	80044d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0304 	and.w	r3, r3, #4
 8004498:	2b00      	cmp	r3, #0
 800449a:	d005      	beq.n	80044a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800449c:	4b59      	ldr	r3, [pc, #356]	; (8004604 <HAL_RCC_ClockConfig+0x1bc>)
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	4a58      	ldr	r2, [pc, #352]	; (8004604 <HAL_RCC_ClockConfig+0x1bc>)
 80044a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0308 	and.w	r3, r3, #8
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d005      	beq.n	80044c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044b4:	4b53      	ldr	r3, [pc, #332]	; (8004604 <HAL_RCC_ClockConfig+0x1bc>)
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	4a52      	ldr	r2, [pc, #328]	; (8004604 <HAL_RCC_ClockConfig+0x1bc>)
 80044ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044c0:	4b50      	ldr	r3, [pc, #320]	; (8004604 <HAL_RCC_ClockConfig+0x1bc>)
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	494d      	ldr	r1, [pc, #308]	; (8004604 <HAL_RCC_ClockConfig+0x1bc>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d044      	beq.n	8004568 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d107      	bne.n	80044f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044e6:	4b47      	ldr	r3, [pc, #284]	; (8004604 <HAL_RCC_ClockConfig+0x1bc>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d119      	bne.n	8004526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e07f      	b.n	80045f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d003      	beq.n	8004506 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004502:	2b03      	cmp	r3, #3
 8004504:	d107      	bne.n	8004516 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004506:	4b3f      	ldr	r3, [pc, #252]	; (8004604 <HAL_RCC_ClockConfig+0x1bc>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d109      	bne.n	8004526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e06f      	b.n	80045f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004516:	4b3b      	ldr	r3, [pc, #236]	; (8004604 <HAL_RCC_ClockConfig+0x1bc>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e067      	b.n	80045f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004526:	4b37      	ldr	r3, [pc, #220]	; (8004604 <HAL_RCC_ClockConfig+0x1bc>)
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f023 0203 	bic.w	r2, r3, #3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	4934      	ldr	r1, [pc, #208]	; (8004604 <HAL_RCC_ClockConfig+0x1bc>)
 8004534:	4313      	orrs	r3, r2
 8004536:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004538:	f7fd fac6 	bl	8001ac8 <HAL_GetTick>
 800453c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800453e:	e00a      	b.n	8004556 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004540:	f7fd fac2 	bl	8001ac8 <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	f241 3288 	movw	r2, #5000	; 0x1388
 800454e:	4293      	cmp	r3, r2
 8004550:	d901      	bls.n	8004556 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e04f      	b.n	80045f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004556:	4b2b      	ldr	r3, [pc, #172]	; (8004604 <HAL_RCC_ClockConfig+0x1bc>)
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f003 020c 	and.w	r2, r3, #12
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	429a      	cmp	r2, r3
 8004566:	d1eb      	bne.n	8004540 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004568:	4b25      	ldr	r3, [pc, #148]	; (8004600 <HAL_RCC_ClockConfig+0x1b8>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0307 	and.w	r3, r3, #7
 8004570:	683a      	ldr	r2, [r7, #0]
 8004572:	429a      	cmp	r2, r3
 8004574:	d20c      	bcs.n	8004590 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004576:	4b22      	ldr	r3, [pc, #136]	; (8004600 <HAL_RCC_ClockConfig+0x1b8>)
 8004578:	683a      	ldr	r2, [r7, #0]
 800457a:	b2d2      	uxtb	r2, r2
 800457c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800457e:	4b20      	ldr	r3, [pc, #128]	; (8004600 <HAL_RCC_ClockConfig+0x1b8>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0307 	and.w	r3, r3, #7
 8004586:	683a      	ldr	r2, [r7, #0]
 8004588:	429a      	cmp	r2, r3
 800458a:	d001      	beq.n	8004590 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e032      	b.n	80045f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0304 	and.w	r3, r3, #4
 8004598:	2b00      	cmp	r3, #0
 800459a:	d008      	beq.n	80045ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800459c:	4b19      	ldr	r3, [pc, #100]	; (8004604 <HAL_RCC_ClockConfig+0x1bc>)
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	4916      	ldr	r1, [pc, #88]	; (8004604 <HAL_RCC_ClockConfig+0x1bc>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0308 	and.w	r3, r3, #8
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d009      	beq.n	80045ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045ba:	4b12      	ldr	r3, [pc, #72]	; (8004604 <HAL_RCC_ClockConfig+0x1bc>)
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	00db      	lsls	r3, r3, #3
 80045c8:	490e      	ldr	r1, [pc, #56]	; (8004604 <HAL_RCC_ClockConfig+0x1bc>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045ce:	f000 f821 	bl	8004614 <HAL_RCC_GetSysClockFreq>
 80045d2:	4602      	mov	r2, r0
 80045d4:	4b0b      	ldr	r3, [pc, #44]	; (8004604 <HAL_RCC_ClockConfig+0x1bc>)
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	091b      	lsrs	r3, r3, #4
 80045da:	f003 030f 	and.w	r3, r3, #15
 80045de:	490a      	ldr	r1, [pc, #40]	; (8004608 <HAL_RCC_ClockConfig+0x1c0>)
 80045e0:	5ccb      	ldrb	r3, [r1, r3]
 80045e2:	fa22 f303 	lsr.w	r3, r2, r3
 80045e6:	4a09      	ldr	r2, [pc, #36]	; (800460c <HAL_RCC_ClockConfig+0x1c4>)
 80045e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045ea:	4b09      	ldr	r3, [pc, #36]	; (8004610 <HAL_RCC_ClockConfig+0x1c8>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7fd f89e 	bl	8001730 <HAL_InitTick>

  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	40023c00 	.word	0x40023c00
 8004604:	40023800 	.word	0x40023800
 8004608:	08022720 	.word	0x08022720
 800460c:	10000000 	.word	0x10000000
 8004610:	10000004 	.word	0x10000004

08004614 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004614:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004618:	b084      	sub	sp, #16
 800461a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800461c:	2300      	movs	r3, #0
 800461e:	607b      	str	r3, [r7, #4]
 8004620:	2300      	movs	r3, #0
 8004622:	60fb      	str	r3, [r7, #12]
 8004624:	2300      	movs	r3, #0
 8004626:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004628:	2300      	movs	r3, #0
 800462a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800462c:	4b67      	ldr	r3, [pc, #412]	; (80047cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f003 030c 	and.w	r3, r3, #12
 8004634:	2b08      	cmp	r3, #8
 8004636:	d00d      	beq.n	8004654 <HAL_RCC_GetSysClockFreq+0x40>
 8004638:	2b08      	cmp	r3, #8
 800463a:	f200 80bd 	bhi.w	80047b8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800463e:	2b00      	cmp	r3, #0
 8004640:	d002      	beq.n	8004648 <HAL_RCC_GetSysClockFreq+0x34>
 8004642:	2b04      	cmp	r3, #4
 8004644:	d003      	beq.n	800464e <HAL_RCC_GetSysClockFreq+0x3a>
 8004646:	e0b7      	b.n	80047b8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004648:	4b61      	ldr	r3, [pc, #388]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800464a:	60bb      	str	r3, [r7, #8]
       break;
 800464c:	e0b7      	b.n	80047be <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800464e:	4b61      	ldr	r3, [pc, #388]	; (80047d4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004650:	60bb      	str	r3, [r7, #8]
      break;
 8004652:	e0b4      	b.n	80047be <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004654:	4b5d      	ldr	r3, [pc, #372]	; (80047cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800465c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800465e:	4b5b      	ldr	r3, [pc, #364]	; (80047cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d04d      	beq.n	8004706 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800466a:	4b58      	ldr	r3, [pc, #352]	; (80047cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	099b      	lsrs	r3, r3, #6
 8004670:	461a      	mov	r2, r3
 8004672:	f04f 0300 	mov.w	r3, #0
 8004676:	f240 10ff 	movw	r0, #511	; 0x1ff
 800467a:	f04f 0100 	mov.w	r1, #0
 800467e:	ea02 0800 	and.w	r8, r2, r0
 8004682:	ea03 0901 	and.w	r9, r3, r1
 8004686:	4640      	mov	r0, r8
 8004688:	4649      	mov	r1, r9
 800468a:	f04f 0200 	mov.w	r2, #0
 800468e:	f04f 0300 	mov.w	r3, #0
 8004692:	014b      	lsls	r3, r1, #5
 8004694:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004698:	0142      	lsls	r2, r0, #5
 800469a:	4610      	mov	r0, r2
 800469c:	4619      	mov	r1, r3
 800469e:	ebb0 0008 	subs.w	r0, r0, r8
 80046a2:	eb61 0109 	sbc.w	r1, r1, r9
 80046a6:	f04f 0200 	mov.w	r2, #0
 80046aa:	f04f 0300 	mov.w	r3, #0
 80046ae:	018b      	lsls	r3, r1, #6
 80046b0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80046b4:	0182      	lsls	r2, r0, #6
 80046b6:	1a12      	subs	r2, r2, r0
 80046b8:	eb63 0301 	sbc.w	r3, r3, r1
 80046bc:	f04f 0000 	mov.w	r0, #0
 80046c0:	f04f 0100 	mov.w	r1, #0
 80046c4:	00d9      	lsls	r1, r3, #3
 80046c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80046ca:	00d0      	lsls	r0, r2, #3
 80046cc:	4602      	mov	r2, r0
 80046ce:	460b      	mov	r3, r1
 80046d0:	eb12 0208 	adds.w	r2, r2, r8
 80046d4:	eb43 0309 	adc.w	r3, r3, r9
 80046d8:	f04f 0000 	mov.w	r0, #0
 80046dc:	f04f 0100 	mov.w	r1, #0
 80046e0:	0259      	lsls	r1, r3, #9
 80046e2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80046e6:	0250      	lsls	r0, r2, #9
 80046e8:	4602      	mov	r2, r0
 80046ea:	460b      	mov	r3, r1
 80046ec:	4610      	mov	r0, r2
 80046ee:	4619      	mov	r1, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	461a      	mov	r2, r3
 80046f4:	f04f 0300 	mov.w	r3, #0
 80046f8:	f7fc faa6 	bl	8000c48 <__aeabi_uldivmod>
 80046fc:	4602      	mov	r2, r0
 80046fe:	460b      	mov	r3, r1
 8004700:	4613      	mov	r3, r2
 8004702:	60fb      	str	r3, [r7, #12]
 8004704:	e04a      	b.n	800479c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004706:	4b31      	ldr	r3, [pc, #196]	; (80047cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	099b      	lsrs	r3, r3, #6
 800470c:	461a      	mov	r2, r3
 800470e:	f04f 0300 	mov.w	r3, #0
 8004712:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004716:	f04f 0100 	mov.w	r1, #0
 800471a:	ea02 0400 	and.w	r4, r2, r0
 800471e:	ea03 0501 	and.w	r5, r3, r1
 8004722:	4620      	mov	r0, r4
 8004724:	4629      	mov	r1, r5
 8004726:	f04f 0200 	mov.w	r2, #0
 800472a:	f04f 0300 	mov.w	r3, #0
 800472e:	014b      	lsls	r3, r1, #5
 8004730:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004734:	0142      	lsls	r2, r0, #5
 8004736:	4610      	mov	r0, r2
 8004738:	4619      	mov	r1, r3
 800473a:	1b00      	subs	r0, r0, r4
 800473c:	eb61 0105 	sbc.w	r1, r1, r5
 8004740:	f04f 0200 	mov.w	r2, #0
 8004744:	f04f 0300 	mov.w	r3, #0
 8004748:	018b      	lsls	r3, r1, #6
 800474a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800474e:	0182      	lsls	r2, r0, #6
 8004750:	1a12      	subs	r2, r2, r0
 8004752:	eb63 0301 	sbc.w	r3, r3, r1
 8004756:	f04f 0000 	mov.w	r0, #0
 800475a:	f04f 0100 	mov.w	r1, #0
 800475e:	00d9      	lsls	r1, r3, #3
 8004760:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004764:	00d0      	lsls	r0, r2, #3
 8004766:	4602      	mov	r2, r0
 8004768:	460b      	mov	r3, r1
 800476a:	1912      	adds	r2, r2, r4
 800476c:	eb45 0303 	adc.w	r3, r5, r3
 8004770:	f04f 0000 	mov.w	r0, #0
 8004774:	f04f 0100 	mov.w	r1, #0
 8004778:	0299      	lsls	r1, r3, #10
 800477a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800477e:	0290      	lsls	r0, r2, #10
 8004780:	4602      	mov	r2, r0
 8004782:	460b      	mov	r3, r1
 8004784:	4610      	mov	r0, r2
 8004786:	4619      	mov	r1, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	461a      	mov	r2, r3
 800478c:	f04f 0300 	mov.w	r3, #0
 8004790:	f7fc fa5a 	bl	8000c48 <__aeabi_uldivmod>
 8004794:	4602      	mov	r2, r0
 8004796:	460b      	mov	r3, r1
 8004798:	4613      	mov	r3, r2
 800479a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800479c:	4b0b      	ldr	r3, [pc, #44]	; (80047cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	0c1b      	lsrs	r3, r3, #16
 80047a2:	f003 0303 	and.w	r3, r3, #3
 80047a6:	3301      	adds	r3, #1
 80047a8:	005b      	lsls	r3, r3, #1
 80047aa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b4:	60bb      	str	r3, [r7, #8]
      break;
 80047b6:	e002      	b.n	80047be <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047b8:	4b05      	ldr	r3, [pc, #20]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80047ba:	60bb      	str	r3, [r7, #8]
      break;
 80047bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047be:	68bb      	ldr	r3, [r7, #8]
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3710      	adds	r7, #16
 80047c4:	46bd      	mov	sp, r7
 80047c6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80047ca:	bf00      	nop
 80047cc:	40023800 	.word	0x40023800
 80047d0:	00f42400 	.word	0x00f42400
 80047d4:	007a1200 	.word	0x007a1200

080047d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047d8:	b480      	push	{r7}
 80047da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047dc:	4b03      	ldr	r3, [pc, #12]	; (80047ec <HAL_RCC_GetHCLKFreq+0x14>)
 80047de:	681b      	ldr	r3, [r3, #0]
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	10000000 	.word	0x10000000

080047f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047f4:	f7ff fff0 	bl	80047d8 <HAL_RCC_GetHCLKFreq>
 80047f8:	4602      	mov	r2, r0
 80047fa:	4b05      	ldr	r3, [pc, #20]	; (8004810 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	0a9b      	lsrs	r3, r3, #10
 8004800:	f003 0307 	and.w	r3, r3, #7
 8004804:	4903      	ldr	r1, [pc, #12]	; (8004814 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004806:	5ccb      	ldrb	r3, [r1, r3]
 8004808:	fa22 f303 	lsr.w	r3, r2, r3
}
 800480c:	4618      	mov	r0, r3
 800480e:	bd80      	pop	{r7, pc}
 8004810:	40023800 	.word	0x40023800
 8004814:	08022730 	.word	0x08022730

08004818 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	220f      	movs	r2, #15
 8004826:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004828:	4b12      	ldr	r3, [pc, #72]	; (8004874 <HAL_RCC_GetClockConfig+0x5c>)
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f003 0203 	and.w	r2, r3, #3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004834:	4b0f      	ldr	r3, [pc, #60]	; (8004874 <HAL_RCC_GetClockConfig+0x5c>)
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004840:	4b0c      	ldr	r3, [pc, #48]	; (8004874 <HAL_RCC_GetClockConfig+0x5c>)
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800484c:	4b09      	ldr	r3, [pc, #36]	; (8004874 <HAL_RCC_GetClockConfig+0x5c>)
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	08db      	lsrs	r3, r3, #3
 8004852:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800485a:	4b07      	ldr	r3, [pc, #28]	; (8004878 <HAL_RCC_GetClockConfig+0x60>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0207 	and.w	r2, r3, #7
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	601a      	str	r2, [r3, #0]
}
 8004866:	bf00      	nop
 8004868:	370c      	adds	r7, #12
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	40023800 	.word	0x40023800
 8004878:	40023c00 	.word	0x40023c00

0800487c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e07b      	b.n	8004986 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004892:	2b00      	cmp	r3, #0
 8004894:	d108      	bne.n	80048a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800489e:	d009      	beq.n	80048b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	61da      	str	r2, [r3, #28]
 80048a6:	e005      	b.n	80048b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d106      	bne.n	80048d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f7fc fe24 	bl	800151c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2202      	movs	r2, #2
 80048d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80048fc:	431a      	orrs	r2, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004906:	431a      	orrs	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	f003 0302 	and.w	r3, r3, #2
 8004910:	431a      	orrs	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	f003 0301 	and.w	r3, r3, #1
 800491a:	431a      	orrs	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004924:	431a      	orrs	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	69db      	ldr	r3, [r3, #28]
 800492a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800492e:	431a      	orrs	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a1b      	ldr	r3, [r3, #32]
 8004934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004938:	ea42 0103 	orr.w	r1, r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004940:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	430a      	orrs	r2, r1
 800494a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	0c1b      	lsrs	r3, r3, #16
 8004952:	f003 0104 	and.w	r1, r3, #4
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495a:	f003 0210 	and.w	r2, r3, #16
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	430a      	orrs	r2, r1
 8004964:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	69da      	ldr	r2, [r3, #28]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004974:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3708      	adds	r7, #8
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800498e:	b580      	push	{r7, lr}
 8004990:	b08c      	sub	sp, #48	; 0x30
 8004992:	af00      	add	r7, sp, #0
 8004994:	60f8      	str	r0, [r7, #12]
 8004996:	60b9      	str	r1, [r7, #8]
 8004998:	607a      	str	r2, [r7, #4]
 800499a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800499c:	2301      	movs	r3, #1
 800499e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80049a0:	2300      	movs	r3, #0
 80049a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d101      	bne.n	80049b4 <HAL_SPI_TransmitReceive+0x26>
 80049b0:	2302      	movs	r3, #2
 80049b2:	e18a      	b.n	8004cca <HAL_SPI_TransmitReceive+0x33c>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049bc:	f7fd f884 	bl	8001ac8 <HAL_GetTick>
 80049c0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80049d2:	887b      	ldrh	r3, [r7, #2]
 80049d4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80049d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d00f      	beq.n	80049fe <HAL_SPI_TransmitReceive+0x70>
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049e4:	d107      	bne.n	80049f6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d103      	bne.n	80049f6 <HAL_SPI_TransmitReceive+0x68>
 80049ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049f2:	2b04      	cmp	r3, #4
 80049f4:	d003      	beq.n	80049fe <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80049f6:	2302      	movs	r3, #2
 80049f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80049fc:	e15b      	b.n	8004cb6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d005      	beq.n	8004a10 <HAL_SPI_TransmitReceive+0x82>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d002      	beq.n	8004a10 <HAL_SPI_TransmitReceive+0x82>
 8004a0a:	887b      	ldrh	r3, [r7, #2]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d103      	bne.n	8004a18 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004a16:	e14e      	b.n	8004cb6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	2b04      	cmp	r3, #4
 8004a22:	d003      	beq.n	8004a2c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2205      	movs	r2, #5
 8004a28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	887a      	ldrh	r2, [r7, #2]
 8004a3c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	887a      	ldrh	r2, [r7, #2]
 8004a42:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	68ba      	ldr	r2, [r7, #8]
 8004a48:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	887a      	ldrh	r2, [r7, #2]
 8004a4e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	887a      	ldrh	r2, [r7, #2]
 8004a54:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a6c:	2b40      	cmp	r3, #64	; 0x40
 8004a6e:	d007      	beq.n	8004a80 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a88:	d178      	bne.n	8004b7c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d002      	beq.n	8004a98 <HAL_SPI_TransmitReceive+0x10a>
 8004a92:	8b7b      	ldrh	r3, [r7, #26]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d166      	bne.n	8004b66 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a9c:	881a      	ldrh	r2, [r3, #0]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa8:	1c9a      	adds	r2, r3, #2
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004abc:	e053      	b.n	8004b66 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f003 0302 	and.w	r3, r3, #2
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d11b      	bne.n	8004b04 <HAL_SPI_TransmitReceive+0x176>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d016      	beq.n	8004b04 <HAL_SPI_TransmitReceive+0x176>
 8004ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d113      	bne.n	8004b04 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae0:	881a      	ldrh	r2, [r3, #0]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aec:	1c9a      	adds	r2, r3, #2
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	3b01      	subs	r3, #1
 8004afa:	b29a      	uxth	r2, r3
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b00:	2300      	movs	r3, #0
 8004b02:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d119      	bne.n	8004b46 <HAL_SPI_TransmitReceive+0x1b8>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d014      	beq.n	8004b46 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68da      	ldr	r2, [r3, #12]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b26:	b292      	uxth	r2, r2
 8004b28:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2e:	1c9a      	adds	r2, r3, #2
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	b29a      	uxth	r2, r3
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b42:	2301      	movs	r3, #1
 8004b44:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004b46:	f7fc ffbf 	bl	8001ac8 <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d807      	bhi.n	8004b66 <HAL_SPI_TransmitReceive+0x1d8>
 8004b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b5c:	d003      	beq.n	8004b66 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004b64:	e0a7      	b.n	8004cb6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1a6      	bne.n	8004abe <HAL_SPI_TransmitReceive+0x130>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1a1      	bne.n	8004abe <HAL_SPI_TransmitReceive+0x130>
 8004b7a:	e07c      	b.n	8004c76 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d002      	beq.n	8004b8a <HAL_SPI_TransmitReceive+0x1fc>
 8004b84:	8b7b      	ldrh	r3, [r7, #26]
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d16b      	bne.n	8004c62 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	330c      	adds	r3, #12
 8004b94:	7812      	ldrb	r2, [r2, #0]
 8004b96:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9c:	1c5a      	adds	r2, r3, #1
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bb0:	e057      	b.n	8004c62 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	f003 0302 	and.w	r3, r3, #2
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d11c      	bne.n	8004bfa <HAL_SPI_TransmitReceive+0x26c>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d017      	beq.n	8004bfa <HAL_SPI_TransmitReceive+0x26c>
 8004bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d114      	bne.n	8004bfa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	330c      	adds	r3, #12
 8004bda:	7812      	ldrb	r2, [r2, #0]
 8004bdc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be2:	1c5a      	adds	r2, r3, #1
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	3b01      	subs	r3, #1
 8004bf0:	b29a      	uxth	r2, r3
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f003 0301 	and.w	r3, r3, #1
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d119      	bne.n	8004c3c <HAL_SPI_TransmitReceive+0x2ae>
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d014      	beq.n	8004c3c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68da      	ldr	r2, [r3, #12]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1c:	b2d2      	uxtb	r2, r2
 8004c1e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c24:	1c5a      	adds	r2, r3, #1
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	3b01      	subs	r3, #1
 8004c32:	b29a      	uxth	r2, r3
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004c3c:	f7fc ff44 	bl	8001ac8 <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d803      	bhi.n	8004c54 <HAL_SPI_TransmitReceive+0x2c6>
 8004c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c52:	d102      	bne.n	8004c5a <HAL_SPI_TransmitReceive+0x2cc>
 8004c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d103      	bne.n	8004c62 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004c60:	e029      	b.n	8004cb6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1a2      	bne.n	8004bb2 <HAL_SPI_TransmitReceive+0x224>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d19d      	bne.n	8004bb2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	f000 f8b2 	bl	8004de4 <SPI_EndRxTxTransaction>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d006      	beq.n	8004c94 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2220      	movs	r2, #32
 8004c90:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004c92:	e010      	b.n	8004cb6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d10b      	bne.n	8004cb4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	617b      	str	r3, [r7, #20]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	617b      	str	r3, [r7, #20]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	617b      	str	r3, [r7, #20]
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	e000      	b.n	8004cb6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004cb4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004cc6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3730      	adds	r7, #48	; 0x30
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
	...

08004cd4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b088      	sub	sp, #32
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	603b      	str	r3, [r7, #0]
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ce4:	f7fc fef0 	bl	8001ac8 <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cec:	1a9b      	subs	r3, r3, r2
 8004cee:	683a      	ldr	r2, [r7, #0]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004cf4:	f7fc fee8 	bl	8001ac8 <HAL_GetTick>
 8004cf8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004cfa:	4b39      	ldr	r3, [pc, #228]	; (8004de0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	015b      	lsls	r3, r3, #5
 8004d00:	0d1b      	lsrs	r3, r3, #20
 8004d02:	69fa      	ldr	r2, [r7, #28]
 8004d04:	fb02 f303 	mul.w	r3, r2, r3
 8004d08:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d0a:	e054      	b.n	8004db6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d12:	d050      	beq.n	8004db6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d14:	f7fc fed8 	bl	8001ac8 <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	69fa      	ldr	r2, [r7, #28]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d902      	bls.n	8004d2a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d13d      	bne.n	8004da6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	685a      	ldr	r2, [r3, #4]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d42:	d111      	bne.n	8004d68 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d4c:	d004      	beq.n	8004d58 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d56:	d107      	bne.n	8004d68 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d66:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d70:	d10f      	bne.n	8004d92 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d80:	601a      	str	r2, [r3, #0]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e017      	b.n	8004dd6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d101      	bne.n	8004db0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004dac:	2300      	movs	r3, #0
 8004dae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	3b01      	subs	r3, #1
 8004db4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	689a      	ldr	r2, [r3, #8]
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	68ba      	ldr	r2, [r7, #8]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	bf0c      	ite	eq
 8004dc6:	2301      	moveq	r3, #1
 8004dc8:	2300      	movne	r3, #0
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	461a      	mov	r2, r3
 8004dce:	79fb      	ldrb	r3, [r7, #7]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d19b      	bne.n	8004d0c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3720      	adds	r7, #32
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	10000000 	.word	0x10000000

08004de4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b088      	sub	sp, #32
 8004de8:	af02      	add	r7, sp, #8
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004df0:	4b1b      	ldr	r3, [pc, #108]	; (8004e60 <SPI_EndRxTxTransaction+0x7c>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a1b      	ldr	r2, [pc, #108]	; (8004e64 <SPI_EndRxTxTransaction+0x80>)
 8004df6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dfa:	0d5b      	lsrs	r3, r3, #21
 8004dfc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e00:	fb02 f303 	mul.w	r3, r2, r3
 8004e04:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e0e:	d112      	bne.n	8004e36 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	9300      	str	r3, [sp, #0]
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	2200      	movs	r2, #0
 8004e18:	2180      	movs	r1, #128	; 0x80
 8004e1a:	68f8      	ldr	r0, [r7, #12]
 8004e1c:	f7ff ff5a 	bl	8004cd4 <SPI_WaitFlagStateUntilTimeout>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d016      	beq.n	8004e54 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e2a:	f043 0220 	orr.w	r2, r3, #32
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e00f      	b.n	8004e56 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00a      	beq.n	8004e52 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e4c:	2b80      	cmp	r3, #128	; 0x80
 8004e4e:	d0f2      	beq.n	8004e36 <SPI_EndRxTxTransaction+0x52>
 8004e50:	e000      	b.n	8004e54 <SPI_EndRxTxTransaction+0x70>
        break;
 8004e52:	bf00      	nop
  }

  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3718      	adds	r7, #24
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	10000000 	.word	0x10000000
 8004e64:	165e9f81 	.word	0x165e9f81

08004e68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d101      	bne.n	8004e7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e041      	b.n	8004efe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d106      	bne.n	8004e94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f7fc fbf2 	bl	8001678 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2202      	movs	r2, #2
 8004e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	3304      	adds	r3, #4
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	4610      	mov	r0, r2
 8004ea8:	f000 fafe 	bl	80054a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3708      	adds	r7, #8
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
	...

08004f08 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d001      	beq.n	8004f20 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e046      	b.n	8004fae <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2202      	movs	r2, #2
 8004f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a23      	ldr	r2, [pc, #140]	; (8004fbc <HAL_TIM_Base_Start+0xb4>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d022      	beq.n	8004f78 <HAL_TIM_Base_Start+0x70>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f3a:	d01d      	beq.n	8004f78 <HAL_TIM_Base_Start+0x70>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a1f      	ldr	r2, [pc, #124]	; (8004fc0 <HAL_TIM_Base_Start+0xb8>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d018      	beq.n	8004f78 <HAL_TIM_Base_Start+0x70>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a1e      	ldr	r2, [pc, #120]	; (8004fc4 <HAL_TIM_Base_Start+0xbc>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d013      	beq.n	8004f78 <HAL_TIM_Base_Start+0x70>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a1c      	ldr	r2, [pc, #112]	; (8004fc8 <HAL_TIM_Base_Start+0xc0>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d00e      	beq.n	8004f78 <HAL_TIM_Base_Start+0x70>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a1b      	ldr	r2, [pc, #108]	; (8004fcc <HAL_TIM_Base_Start+0xc4>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d009      	beq.n	8004f78 <HAL_TIM_Base_Start+0x70>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a19      	ldr	r2, [pc, #100]	; (8004fd0 <HAL_TIM_Base_Start+0xc8>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d004      	beq.n	8004f78 <HAL_TIM_Base_Start+0x70>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a18      	ldr	r2, [pc, #96]	; (8004fd4 <HAL_TIM_Base_Start+0xcc>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d111      	bne.n	8004f9c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f003 0307 	and.w	r3, r3, #7
 8004f82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2b06      	cmp	r3, #6
 8004f88:	d010      	beq.n	8004fac <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f042 0201 	orr.w	r2, r2, #1
 8004f98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f9a:	e007      	b.n	8004fac <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f042 0201 	orr.w	r2, r2, #1
 8004faa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3714      	adds	r7, #20
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	40010000 	.word	0x40010000
 8004fc0:	40000400 	.word	0x40000400
 8004fc4:	40000800 	.word	0x40000800
 8004fc8:	40000c00 	.word	0x40000c00
 8004fcc:	40010400 	.word	0x40010400
 8004fd0:	40014000 	.word	0x40014000
 8004fd4:	40001800 	.word	0x40001800

08004fd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d001      	beq.n	8004ff0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e04e      	b.n	800508e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2202      	movs	r2, #2
 8004ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68da      	ldr	r2, [r3, #12]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f042 0201 	orr.w	r2, r2, #1
 8005006:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a23      	ldr	r2, [pc, #140]	; (800509c <HAL_TIM_Base_Start_IT+0xc4>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d022      	beq.n	8005058 <HAL_TIM_Base_Start_IT+0x80>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800501a:	d01d      	beq.n	8005058 <HAL_TIM_Base_Start_IT+0x80>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a1f      	ldr	r2, [pc, #124]	; (80050a0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d018      	beq.n	8005058 <HAL_TIM_Base_Start_IT+0x80>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a1e      	ldr	r2, [pc, #120]	; (80050a4 <HAL_TIM_Base_Start_IT+0xcc>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d013      	beq.n	8005058 <HAL_TIM_Base_Start_IT+0x80>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a1c      	ldr	r2, [pc, #112]	; (80050a8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d00e      	beq.n	8005058 <HAL_TIM_Base_Start_IT+0x80>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a1b      	ldr	r2, [pc, #108]	; (80050ac <HAL_TIM_Base_Start_IT+0xd4>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d009      	beq.n	8005058 <HAL_TIM_Base_Start_IT+0x80>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a19      	ldr	r2, [pc, #100]	; (80050b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d004      	beq.n	8005058 <HAL_TIM_Base_Start_IT+0x80>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a18      	ldr	r2, [pc, #96]	; (80050b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d111      	bne.n	800507c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f003 0307 	and.w	r3, r3, #7
 8005062:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2b06      	cmp	r3, #6
 8005068:	d010      	beq.n	800508c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f042 0201 	orr.w	r2, r2, #1
 8005078:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800507a:	e007      	b.n	800508c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f042 0201 	orr.w	r2, r2, #1
 800508a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3714      	adds	r7, #20
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	40010000 	.word	0x40010000
 80050a0:	40000400 	.word	0x40000400
 80050a4:	40000800 	.word	0x40000800
 80050a8:	40000c00 	.word	0x40000c00
 80050ac:	40010400 	.word	0x40010400
 80050b0:	40014000 	.word	0x40014000
 80050b4:	40001800 	.word	0x40001800

080050b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	f003 0302 	and.w	r3, r3, #2
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d122      	bne.n	8005114 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	f003 0302 	and.w	r3, r3, #2
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d11b      	bne.n	8005114 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f06f 0202 	mvn.w	r2, #2
 80050e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2201      	movs	r2, #1
 80050ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	f003 0303 	and.w	r3, r3, #3
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d003      	beq.n	8005102 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 f9b5 	bl	800546a <HAL_TIM_IC_CaptureCallback>
 8005100:	e005      	b.n	800510e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f9a7 	bl	8005456 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f000 f9b8 	bl	800547e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	f003 0304 	and.w	r3, r3, #4
 800511e:	2b04      	cmp	r3, #4
 8005120:	d122      	bne.n	8005168 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	f003 0304 	and.w	r3, r3, #4
 800512c:	2b04      	cmp	r3, #4
 800512e:	d11b      	bne.n	8005168 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f06f 0204 	mvn.w	r2, #4
 8005138:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2202      	movs	r2, #2
 800513e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800514a:	2b00      	cmp	r3, #0
 800514c:	d003      	beq.n	8005156 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 f98b 	bl	800546a <HAL_TIM_IC_CaptureCallback>
 8005154:	e005      	b.n	8005162 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 f97d 	bl	8005456 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 f98e 	bl	800547e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	f003 0308 	and.w	r3, r3, #8
 8005172:	2b08      	cmp	r3, #8
 8005174:	d122      	bne.n	80051bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	f003 0308 	and.w	r3, r3, #8
 8005180:	2b08      	cmp	r3, #8
 8005182:	d11b      	bne.n	80051bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f06f 0208 	mvn.w	r2, #8
 800518c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2204      	movs	r2, #4
 8005192:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	69db      	ldr	r3, [r3, #28]
 800519a:	f003 0303 	and.w	r3, r3, #3
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d003      	beq.n	80051aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 f961 	bl	800546a <HAL_TIM_IC_CaptureCallback>
 80051a8:	e005      	b.n	80051b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f953 	bl	8005456 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f000 f964 	bl	800547e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	f003 0310 	and.w	r3, r3, #16
 80051c6:	2b10      	cmp	r3, #16
 80051c8:	d122      	bne.n	8005210 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	f003 0310 	and.w	r3, r3, #16
 80051d4:	2b10      	cmp	r3, #16
 80051d6:	d11b      	bne.n	8005210 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f06f 0210 	mvn.w	r2, #16
 80051e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2208      	movs	r2, #8
 80051e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	69db      	ldr	r3, [r3, #28]
 80051ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d003      	beq.n	80051fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 f937 	bl	800546a <HAL_TIM_IC_CaptureCallback>
 80051fc:	e005      	b.n	800520a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 f929 	bl	8005456 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 f93a 	bl	800547e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	f003 0301 	and.w	r3, r3, #1
 800521a:	2b01      	cmp	r3, #1
 800521c:	d10e      	bne.n	800523c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	f003 0301 	and.w	r3, r3, #1
 8005228:	2b01      	cmp	r3, #1
 800522a:	d107      	bne.n	800523c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f06f 0201 	mvn.w	r2, #1
 8005234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f7fc f922 	bl	8001480 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005246:	2b80      	cmp	r3, #128	; 0x80
 8005248:	d10e      	bne.n	8005268 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005254:	2b80      	cmp	r3, #128	; 0x80
 8005256:	d107      	bne.n	8005268 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 fae0 	bl	8005828 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005272:	2b40      	cmp	r3, #64	; 0x40
 8005274:	d10e      	bne.n	8005294 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005280:	2b40      	cmp	r3, #64	; 0x40
 8005282:	d107      	bne.n	8005294 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800528c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 f8ff 	bl	8005492 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	f003 0320 	and.w	r3, r3, #32
 800529e:	2b20      	cmp	r3, #32
 80052a0:	d10e      	bne.n	80052c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	f003 0320 	and.w	r3, r3, #32
 80052ac:	2b20      	cmp	r3, #32
 80052ae:	d107      	bne.n	80052c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f06f 0220 	mvn.w	r2, #32
 80052b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 faaa 	bl	8005814 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052c0:	bf00      	nop
 80052c2:	3708      	adds	r7, #8
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052d2:	2300      	movs	r3, #0
 80052d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d101      	bne.n	80052e4 <HAL_TIM_ConfigClockSource+0x1c>
 80052e0:	2302      	movs	r3, #2
 80052e2:	e0b4      	b.n	800544e <HAL_TIM_ConfigClockSource+0x186>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2202      	movs	r2, #2
 80052f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005302:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800530a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68ba      	ldr	r2, [r7, #8]
 8005312:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800531c:	d03e      	beq.n	800539c <HAL_TIM_ConfigClockSource+0xd4>
 800531e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005322:	f200 8087 	bhi.w	8005434 <HAL_TIM_ConfigClockSource+0x16c>
 8005326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800532a:	f000 8086 	beq.w	800543a <HAL_TIM_ConfigClockSource+0x172>
 800532e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005332:	d87f      	bhi.n	8005434 <HAL_TIM_ConfigClockSource+0x16c>
 8005334:	2b70      	cmp	r3, #112	; 0x70
 8005336:	d01a      	beq.n	800536e <HAL_TIM_ConfigClockSource+0xa6>
 8005338:	2b70      	cmp	r3, #112	; 0x70
 800533a:	d87b      	bhi.n	8005434 <HAL_TIM_ConfigClockSource+0x16c>
 800533c:	2b60      	cmp	r3, #96	; 0x60
 800533e:	d050      	beq.n	80053e2 <HAL_TIM_ConfigClockSource+0x11a>
 8005340:	2b60      	cmp	r3, #96	; 0x60
 8005342:	d877      	bhi.n	8005434 <HAL_TIM_ConfigClockSource+0x16c>
 8005344:	2b50      	cmp	r3, #80	; 0x50
 8005346:	d03c      	beq.n	80053c2 <HAL_TIM_ConfigClockSource+0xfa>
 8005348:	2b50      	cmp	r3, #80	; 0x50
 800534a:	d873      	bhi.n	8005434 <HAL_TIM_ConfigClockSource+0x16c>
 800534c:	2b40      	cmp	r3, #64	; 0x40
 800534e:	d058      	beq.n	8005402 <HAL_TIM_ConfigClockSource+0x13a>
 8005350:	2b40      	cmp	r3, #64	; 0x40
 8005352:	d86f      	bhi.n	8005434 <HAL_TIM_ConfigClockSource+0x16c>
 8005354:	2b30      	cmp	r3, #48	; 0x30
 8005356:	d064      	beq.n	8005422 <HAL_TIM_ConfigClockSource+0x15a>
 8005358:	2b30      	cmp	r3, #48	; 0x30
 800535a:	d86b      	bhi.n	8005434 <HAL_TIM_ConfigClockSource+0x16c>
 800535c:	2b20      	cmp	r3, #32
 800535e:	d060      	beq.n	8005422 <HAL_TIM_ConfigClockSource+0x15a>
 8005360:	2b20      	cmp	r3, #32
 8005362:	d867      	bhi.n	8005434 <HAL_TIM_ConfigClockSource+0x16c>
 8005364:	2b00      	cmp	r3, #0
 8005366:	d05c      	beq.n	8005422 <HAL_TIM_ConfigClockSource+0x15a>
 8005368:	2b10      	cmp	r3, #16
 800536a:	d05a      	beq.n	8005422 <HAL_TIM_ConfigClockSource+0x15a>
 800536c:	e062      	b.n	8005434 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6818      	ldr	r0, [r3, #0]
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	6899      	ldr	r1, [r3, #8]
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	685a      	ldr	r2, [r3, #4]
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	f000 f9ad 	bl	80056dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005390:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68ba      	ldr	r2, [r7, #8]
 8005398:	609a      	str	r2, [r3, #8]
      break;
 800539a:	e04f      	b.n	800543c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6818      	ldr	r0, [r3, #0]
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	6899      	ldr	r1, [r3, #8]
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	685a      	ldr	r2, [r3, #4]
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	f000 f996 	bl	80056dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	689a      	ldr	r2, [r3, #8]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053be:	609a      	str	r2, [r3, #8]
      break;
 80053c0:	e03c      	b.n	800543c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6818      	ldr	r0, [r3, #0]
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	6859      	ldr	r1, [r3, #4]
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	461a      	mov	r2, r3
 80053d0:	f000 f90a 	bl	80055e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2150      	movs	r1, #80	; 0x50
 80053da:	4618      	mov	r0, r3
 80053dc:	f000 f963 	bl	80056a6 <TIM_ITRx_SetConfig>
      break;
 80053e0:	e02c      	b.n	800543c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6818      	ldr	r0, [r3, #0]
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	6859      	ldr	r1, [r3, #4]
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	461a      	mov	r2, r3
 80053f0:	f000 f929 	bl	8005646 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2160      	movs	r1, #96	; 0x60
 80053fa:	4618      	mov	r0, r3
 80053fc:	f000 f953 	bl	80056a6 <TIM_ITRx_SetConfig>
      break;
 8005400:	e01c      	b.n	800543c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6818      	ldr	r0, [r3, #0]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	6859      	ldr	r1, [r3, #4]
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	461a      	mov	r2, r3
 8005410:	f000 f8ea 	bl	80055e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2140      	movs	r1, #64	; 0x40
 800541a:	4618      	mov	r0, r3
 800541c:	f000 f943 	bl	80056a6 <TIM_ITRx_SetConfig>
      break;
 8005420:	e00c      	b.n	800543c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4619      	mov	r1, r3
 800542c:	4610      	mov	r0, r2
 800542e:	f000 f93a 	bl	80056a6 <TIM_ITRx_SetConfig>
      break;
 8005432:	e003      	b.n	800543c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	73fb      	strb	r3, [r7, #15]
      break;
 8005438:	e000      	b.n	800543c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800543a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800544c:	7bfb      	ldrb	r3, [r7, #15]
}
 800544e:	4618      	mov	r0, r3
 8005450:	3710      	adds	r7, #16
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}

08005456 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005456:	b480      	push	{r7}
 8005458:	b083      	sub	sp, #12
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800545e:	bf00      	nop
 8005460:	370c      	adds	r7, #12
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr

0800546a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800546a:	b480      	push	{r7}
 800546c:	b083      	sub	sp, #12
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005472:	bf00      	nop
 8005474:	370c      	adds	r7, #12
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr

0800547e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800547e:	b480      	push	{r7}
 8005480:	b083      	sub	sp, #12
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005486:	bf00      	nop
 8005488:	370c      	adds	r7, #12
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr

08005492 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005492:	b480      	push	{r7}
 8005494:	b083      	sub	sp, #12
 8005496:	af00      	add	r7, sp, #0
 8005498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800549a:	bf00      	nop
 800549c:	370c      	adds	r7, #12
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
	...

080054a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a40      	ldr	r2, [pc, #256]	; (80055bc <TIM_Base_SetConfig+0x114>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d013      	beq.n	80054e8 <TIM_Base_SetConfig+0x40>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054c6:	d00f      	beq.n	80054e8 <TIM_Base_SetConfig+0x40>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a3d      	ldr	r2, [pc, #244]	; (80055c0 <TIM_Base_SetConfig+0x118>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d00b      	beq.n	80054e8 <TIM_Base_SetConfig+0x40>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a3c      	ldr	r2, [pc, #240]	; (80055c4 <TIM_Base_SetConfig+0x11c>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d007      	beq.n	80054e8 <TIM_Base_SetConfig+0x40>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a3b      	ldr	r2, [pc, #236]	; (80055c8 <TIM_Base_SetConfig+0x120>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d003      	beq.n	80054e8 <TIM_Base_SetConfig+0x40>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a3a      	ldr	r2, [pc, #232]	; (80055cc <TIM_Base_SetConfig+0x124>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d108      	bne.n	80054fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a2f      	ldr	r2, [pc, #188]	; (80055bc <TIM_Base_SetConfig+0x114>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d02b      	beq.n	800555a <TIM_Base_SetConfig+0xb2>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005508:	d027      	beq.n	800555a <TIM_Base_SetConfig+0xb2>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a2c      	ldr	r2, [pc, #176]	; (80055c0 <TIM_Base_SetConfig+0x118>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d023      	beq.n	800555a <TIM_Base_SetConfig+0xb2>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a2b      	ldr	r2, [pc, #172]	; (80055c4 <TIM_Base_SetConfig+0x11c>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d01f      	beq.n	800555a <TIM_Base_SetConfig+0xb2>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a2a      	ldr	r2, [pc, #168]	; (80055c8 <TIM_Base_SetConfig+0x120>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d01b      	beq.n	800555a <TIM_Base_SetConfig+0xb2>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a29      	ldr	r2, [pc, #164]	; (80055cc <TIM_Base_SetConfig+0x124>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d017      	beq.n	800555a <TIM_Base_SetConfig+0xb2>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a28      	ldr	r2, [pc, #160]	; (80055d0 <TIM_Base_SetConfig+0x128>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d013      	beq.n	800555a <TIM_Base_SetConfig+0xb2>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a27      	ldr	r2, [pc, #156]	; (80055d4 <TIM_Base_SetConfig+0x12c>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d00f      	beq.n	800555a <TIM_Base_SetConfig+0xb2>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a26      	ldr	r2, [pc, #152]	; (80055d8 <TIM_Base_SetConfig+0x130>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d00b      	beq.n	800555a <TIM_Base_SetConfig+0xb2>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a25      	ldr	r2, [pc, #148]	; (80055dc <TIM_Base_SetConfig+0x134>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d007      	beq.n	800555a <TIM_Base_SetConfig+0xb2>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a24      	ldr	r2, [pc, #144]	; (80055e0 <TIM_Base_SetConfig+0x138>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d003      	beq.n	800555a <TIM_Base_SetConfig+0xb2>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a23      	ldr	r2, [pc, #140]	; (80055e4 <TIM_Base_SetConfig+0x13c>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d108      	bne.n	800556c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005560:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	4313      	orrs	r3, r2
 800556a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	695b      	ldr	r3, [r3, #20]
 8005576:	4313      	orrs	r3, r2
 8005578:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	689a      	ldr	r2, [r3, #8]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a0a      	ldr	r2, [pc, #40]	; (80055bc <TIM_Base_SetConfig+0x114>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d003      	beq.n	80055a0 <TIM_Base_SetConfig+0xf8>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a0c      	ldr	r2, [pc, #48]	; (80055cc <TIM_Base_SetConfig+0x124>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d103      	bne.n	80055a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	691a      	ldr	r2, [r3, #16]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	615a      	str	r2, [r3, #20]
}
 80055ae:	bf00      	nop
 80055b0:	3714      	adds	r7, #20
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	40010000 	.word	0x40010000
 80055c0:	40000400 	.word	0x40000400
 80055c4:	40000800 	.word	0x40000800
 80055c8:	40000c00 	.word	0x40000c00
 80055cc:	40010400 	.word	0x40010400
 80055d0:	40014000 	.word	0x40014000
 80055d4:	40014400 	.word	0x40014400
 80055d8:	40014800 	.word	0x40014800
 80055dc:	40001800 	.word	0x40001800
 80055e0:	40001c00 	.word	0x40001c00
 80055e4:	40002000 	.word	0x40002000

080055e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b087      	sub	sp, #28
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6a1b      	ldr	r3, [r3, #32]
 80055f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	f023 0201 	bic.w	r2, r3, #1
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005612:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	011b      	lsls	r3, r3, #4
 8005618:	693a      	ldr	r2, [r7, #16]
 800561a:	4313      	orrs	r3, r2
 800561c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	f023 030a 	bic.w	r3, r3, #10
 8005624:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	4313      	orrs	r3, r2
 800562c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	697a      	ldr	r2, [r7, #20]
 8005638:	621a      	str	r2, [r3, #32]
}
 800563a:	bf00      	nop
 800563c:	371c      	adds	r7, #28
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr

08005646 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005646:	b480      	push	{r7}
 8005648:	b087      	sub	sp, #28
 800564a:	af00      	add	r7, sp, #0
 800564c:	60f8      	str	r0, [r7, #12]
 800564e:	60b9      	str	r1, [r7, #8]
 8005650:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	f023 0210 	bic.w	r2, r3, #16
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6a1b      	ldr	r3, [r3, #32]
 8005668:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005670:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	031b      	lsls	r3, r3, #12
 8005676:	697a      	ldr	r2, [r7, #20]
 8005678:	4313      	orrs	r3, r2
 800567a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005682:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	011b      	lsls	r3, r3, #4
 8005688:	693a      	ldr	r2, [r7, #16]
 800568a:	4313      	orrs	r3, r2
 800568c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	697a      	ldr	r2, [r7, #20]
 8005692:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	693a      	ldr	r2, [r7, #16]
 8005698:	621a      	str	r2, [r3, #32]
}
 800569a:	bf00      	nop
 800569c:	371c      	adds	r7, #28
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr

080056a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056a6:	b480      	push	{r7}
 80056a8:	b085      	sub	sp, #20
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
 80056ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056be:	683a      	ldr	r2, [r7, #0]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	f043 0307 	orr.w	r3, r3, #7
 80056c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	609a      	str	r2, [r3, #8]
}
 80056d0:	bf00      	nop
 80056d2:	3714      	adds	r7, #20
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056dc:	b480      	push	{r7}
 80056de:	b087      	sub	sp, #28
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
 80056e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	021a      	lsls	r2, r3, #8
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	431a      	orrs	r2, r3
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	4313      	orrs	r3, r2
 8005704:	697a      	ldr	r2, [r7, #20]
 8005706:	4313      	orrs	r3, r2
 8005708:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	697a      	ldr	r2, [r7, #20]
 800570e:	609a      	str	r2, [r3, #8]
}
 8005710:	bf00      	nop
 8005712:	371c      	adds	r7, #28
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr

0800571c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800571c:	b480      	push	{r7}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800572c:	2b01      	cmp	r3, #1
 800572e:	d101      	bne.n	8005734 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005730:	2302      	movs	r3, #2
 8005732:	e05a      	b.n	80057ea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2202      	movs	r2, #2
 8005740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800575a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	4313      	orrs	r3, r2
 8005764:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a21      	ldr	r2, [pc, #132]	; (80057f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d022      	beq.n	80057be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005780:	d01d      	beq.n	80057be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a1d      	ldr	r2, [pc, #116]	; (80057fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d018      	beq.n	80057be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a1b      	ldr	r2, [pc, #108]	; (8005800 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d013      	beq.n	80057be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a1a      	ldr	r2, [pc, #104]	; (8005804 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d00e      	beq.n	80057be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a18      	ldr	r2, [pc, #96]	; (8005808 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d009      	beq.n	80057be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a17      	ldr	r2, [pc, #92]	; (800580c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d004      	beq.n	80057be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a15      	ldr	r2, [pc, #84]	; (8005810 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d10c      	bne.n	80057d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	68ba      	ldr	r2, [r7, #8]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	68ba      	ldr	r2, [r7, #8]
 80057d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3714      	adds	r7, #20
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	40010000 	.word	0x40010000
 80057fc:	40000400 	.word	0x40000400
 8005800:	40000800 	.word	0x40000800
 8005804:	40000c00 	.word	0x40000c00
 8005808:	40010400 	.word	0x40010400
 800580c:	40014000 	.word	0x40014000
 8005810:	40001800 	.word	0x40001800

08005814 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800581c:	bf00      	nop
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005830:	bf00      	nop
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8005842:	4ba0      	ldr	r3, [pc, #640]	; (8005ac4 <MX_LWIP_Init+0x288>)
 8005844:	22c0      	movs	r2, #192	; 0xc0
 8005846:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8005848:	4b9e      	ldr	r3, [pc, #632]	; (8005ac4 <MX_LWIP_Init+0x288>)
 800584a:	22a8      	movs	r2, #168	; 0xa8
 800584c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800584e:	4b9d      	ldr	r3, [pc, #628]	; (8005ac4 <MX_LWIP_Init+0x288>)
 8005850:	2201      	movs	r2, #1
 8005852:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 2;
 8005854:	4b9b      	ldr	r3, [pc, #620]	; (8005ac4 <MX_LWIP_Init+0x288>)
 8005856:	2202      	movs	r2, #2
 8005858:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800585a:	4b9b      	ldr	r3, [pc, #620]	; (8005ac8 <MX_LWIP_Init+0x28c>)
 800585c:	22ff      	movs	r2, #255	; 0xff
 800585e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8005860:	4b99      	ldr	r3, [pc, #612]	; (8005ac8 <MX_LWIP_Init+0x28c>)
 8005862:	22ff      	movs	r2, #255	; 0xff
 8005864:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8005866:	4b98      	ldr	r3, [pc, #608]	; (8005ac8 <MX_LWIP_Init+0x28c>)
 8005868:	22ff      	movs	r2, #255	; 0xff
 800586a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800586c:	4b96      	ldr	r3, [pc, #600]	; (8005ac8 <MX_LWIP_Init+0x28c>)
 800586e:	2200      	movs	r2, #0
 8005870:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8005872:	4b96      	ldr	r3, [pc, #600]	; (8005acc <MX_LWIP_Init+0x290>)
 8005874:	22c0      	movs	r2, #192	; 0xc0
 8005876:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8005878:	4b94      	ldr	r3, [pc, #592]	; (8005acc <MX_LWIP_Init+0x290>)
 800587a:	22a8      	movs	r2, #168	; 0xa8
 800587c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800587e:	4b93      	ldr	r3, [pc, #588]	; (8005acc <MX_LWIP_Init+0x290>)
 8005880:	2201      	movs	r2, #1
 8005882:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8005884:	4b91      	ldr	r3, [pc, #580]	; (8005acc <MX_LWIP_Init+0x290>)
 8005886:	2201      	movs	r2, #1
 8005888:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800588a:	2100      	movs	r1, #0
 800588c:	2000      	movs	r0, #0
 800588e:	f008 fc4d 	bl	800e12c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8005892:	4b8c      	ldr	r3, [pc, #560]	; (8005ac4 <MX_LWIP_Init+0x288>)
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	061a      	lsls	r2, r3, #24
 8005898:	4b8a      	ldr	r3, [pc, #552]	; (8005ac4 <MX_LWIP_Init+0x288>)
 800589a:	785b      	ldrb	r3, [r3, #1]
 800589c:	041b      	lsls	r3, r3, #16
 800589e:	431a      	orrs	r2, r3
 80058a0:	4b88      	ldr	r3, [pc, #544]	; (8005ac4 <MX_LWIP_Init+0x288>)
 80058a2:	789b      	ldrb	r3, [r3, #2]
 80058a4:	021b      	lsls	r3, r3, #8
 80058a6:	4313      	orrs	r3, r2
 80058a8:	4a86      	ldr	r2, [pc, #536]	; (8005ac4 <MX_LWIP_Init+0x288>)
 80058aa:	78d2      	ldrb	r2, [r2, #3]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	061a      	lsls	r2, r3, #24
 80058b0:	4b84      	ldr	r3, [pc, #528]	; (8005ac4 <MX_LWIP_Init+0x288>)
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	0619      	lsls	r1, r3, #24
 80058b6:	4b83      	ldr	r3, [pc, #524]	; (8005ac4 <MX_LWIP_Init+0x288>)
 80058b8:	785b      	ldrb	r3, [r3, #1]
 80058ba:	041b      	lsls	r3, r3, #16
 80058bc:	4319      	orrs	r1, r3
 80058be:	4b81      	ldr	r3, [pc, #516]	; (8005ac4 <MX_LWIP_Init+0x288>)
 80058c0:	789b      	ldrb	r3, [r3, #2]
 80058c2:	021b      	lsls	r3, r3, #8
 80058c4:	430b      	orrs	r3, r1
 80058c6:	497f      	ldr	r1, [pc, #508]	; (8005ac4 <MX_LWIP_Init+0x288>)
 80058c8:	78c9      	ldrb	r1, [r1, #3]
 80058ca:	430b      	orrs	r3, r1
 80058cc:	021b      	lsls	r3, r3, #8
 80058ce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80058d2:	431a      	orrs	r2, r3
 80058d4:	4b7b      	ldr	r3, [pc, #492]	; (8005ac4 <MX_LWIP_Init+0x288>)
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	0619      	lsls	r1, r3, #24
 80058da:	4b7a      	ldr	r3, [pc, #488]	; (8005ac4 <MX_LWIP_Init+0x288>)
 80058dc:	785b      	ldrb	r3, [r3, #1]
 80058de:	041b      	lsls	r3, r3, #16
 80058e0:	4319      	orrs	r1, r3
 80058e2:	4b78      	ldr	r3, [pc, #480]	; (8005ac4 <MX_LWIP_Init+0x288>)
 80058e4:	789b      	ldrb	r3, [r3, #2]
 80058e6:	021b      	lsls	r3, r3, #8
 80058e8:	430b      	orrs	r3, r1
 80058ea:	4976      	ldr	r1, [pc, #472]	; (8005ac4 <MX_LWIP_Init+0x288>)
 80058ec:	78c9      	ldrb	r1, [r1, #3]
 80058ee:	430b      	orrs	r3, r1
 80058f0:	0a1b      	lsrs	r3, r3, #8
 80058f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80058f6:	431a      	orrs	r2, r3
 80058f8:	4b72      	ldr	r3, [pc, #456]	; (8005ac4 <MX_LWIP_Init+0x288>)
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	0619      	lsls	r1, r3, #24
 80058fe:	4b71      	ldr	r3, [pc, #452]	; (8005ac4 <MX_LWIP_Init+0x288>)
 8005900:	785b      	ldrb	r3, [r3, #1]
 8005902:	041b      	lsls	r3, r3, #16
 8005904:	4319      	orrs	r1, r3
 8005906:	4b6f      	ldr	r3, [pc, #444]	; (8005ac4 <MX_LWIP_Init+0x288>)
 8005908:	789b      	ldrb	r3, [r3, #2]
 800590a:	021b      	lsls	r3, r3, #8
 800590c:	430b      	orrs	r3, r1
 800590e:	496d      	ldr	r1, [pc, #436]	; (8005ac4 <MX_LWIP_Init+0x288>)
 8005910:	78c9      	ldrb	r1, [r1, #3]
 8005912:	430b      	orrs	r3, r1
 8005914:	0e1b      	lsrs	r3, r3, #24
 8005916:	4313      	orrs	r3, r2
 8005918:	4a6d      	ldr	r2, [pc, #436]	; (8005ad0 <MX_LWIP_Init+0x294>)
 800591a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800591c:	4b6a      	ldr	r3, [pc, #424]	; (8005ac8 <MX_LWIP_Init+0x28c>)
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	061a      	lsls	r2, r3, #24
 8005922:	4b69      	ldr	r3, [pc, #420]	; (8005ac8 <MX_LWIP_Init+0x28c>)
 8005924:	785b      	ldrb	r3, [r3, #1]
 8005926:	041b      	lsls	r3, r3, #16
 8005928:	431a      	orrs	r2, r3
 800592a:	4b67      	ldr	r3, [pc, #412]	; (8005ac8 <MX_LWIP_Init+0x28c>)
 800592c:	789b      	ldrb	r3, [r3, #2]
 800592e:	021b      	lsls	r3, r3, #8
 8005930:	4313      	orrs	r3, r2
 8005932:	4a65      	ldr	r2, [pc, #404]	; (8005ac8 <MX_LWIP_Init+0x28c>)
 8005934:	78d2      	ldrb	r2, [r2, #3]
 8005936:	4313      	orrs	r3, r2
 8005938:	061a      	lsls	r2, r3, #24
 800593a:	4b63      	ldr	r3, [pc, #396]	; (8005ac8 <MX_LWIP_Init+0x28c>)
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	0619      	lsls	r1, r3, #24
 8005940:	4b61      	ldr	r3, [pc, #388]	; (8005ac8 <MX_LWIP_Init+0x28c>)
 8005942:	785b      	ldrb	r3, [r3, #1]
 8005944:	041b      	lsls	r3, r3, #16
 8005946:	4319      	orrs	r1, r3
 8005948:	4b5f      	ldr	r3, [pc, #380]	; (8005ac8 <MX_LWIP_Init+0x28c>)
 800594a:	789b      	ldrb	r3, [r3, #2]
 800594c:	021b      	lsls	r3, r3, #8
 800594e:	430b      	orrs	r3, r1
 8005950:	495d      	ldr	r1, [pc, #372]	; (8005ac8 <MX_LWIP_Init+0x28c>)
 8005952:	78c9      	ldrb	r1, [r1, #3]
 8005954:	430b      	orrs	r3, r1
 8005956:	021b      	lsls	r3, r3, #8
 8005958:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800595c:	431a      	orrs	r2, r3
 800595e:	4b5a      	ldr	r3, [pc, #360]	; (8005ac8 <MX_LWIP_Init+0x28c>)
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	0619      	lsls	r1, r3, #24
 8005964:	4b58      	ldr	r3, [pc, #352]	; (8005ac8 <MX_LWIP_Init+0x28c>)
 8005966:	785b      	ldrb	r3, [r3, #1]
 8005968:	041b      	lsls	r3, r3, #16
 800596a:	4319      	orrs	r1, r3
 800596c:	4b56      	ldr	r3, [pc, #344]	; (8005ac8 <MX_LWIP_Init+0x28c>)
 800596e:	789b      	ldrb	r3, [r3, #2]
 8005970:	021b      	lsls	r3, r3, #8
 8005972:	430b      	orrs	r3, r1
 8005974:	4954      	ldr	r1, [pc, #336]	; (8005ac8 <MX_LWIP_Init+0x28c>)
 8005976:	78c9      	ldrb	r1, [r1, #3]
 8005978:	430b      	orrs	r3, r1
 800597a:	0a1b      	lsrs	r3, r3, #8
 800597c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005980:	431a      	orrs	r2, r3
 8005982:	4b51      	ldr	r3, [pc, #324]	; (8005ac8 <MX_LWIP_Init+0x28c>)
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	0619      	lsls	r1, r3, #24
 8005988:	4b4f      	ldr	r3, [pc, #316]	; (8005ac8 <MX_LWIP_Init+0x28c>)
 800598a:	785b      	ldrb	r3, [r3, #1]
 800598c:	041b      	lsls	r3, r3, #16
 800598e:	4319      	orrs	r1, r3
 8005990:	4b4d      	ldr	r3, [pc, #308]	; (8005ac8 <MX_LWIP_Init+0x28c>)
 8005992:	789b      	ldrb	r3, [r3, #2]
 8005994:	021b      	lsls	r3, r3, #8
 8005996:	430b      	orrs	r3, r1
 8005998:	494b      	ldr	r1, [pc, #300]	; (8005ac8 <MX_LWIP_Init+0x28c>)
 800599a:	78c9      	ldrb	r1, [r1, #3]
 800599c:	430b      	orrs	r3, r1
 800599e:	0e1b      	lsrs	r3, r3, #24
 80059a0:	4313      	orrs	r3, r2
 80059a2:	4a4c      	ldr	r2, [pc, #304]	; (8005ad4 <MX_LWIP_Init+0x298>)
 80059a4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80059a6:	4b49      	ldr	r3, [pc, #292]	; (8005acc <MX_LWIP_Init+0x290>)
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	061a      	lsls	r2, r3, #24
 80059ac:	4b47      	ldr	r3, [pc, #284]	; (8005acc <MX_LWIP_Init+0x290>)
 80059ae:	785b      	ldrb	r3, [r3, #1]
 80059b0:	041b      	lsls	r3, r3, #16
 80059b2:	431a      	orrs	r2, r3
 80059b4:	4b45      	ldr	r3, [pc, #276]	; (8005acc <MX_LWIP_Init+0x290>)
 80059b6:	789b      	ldrb	r3, [r3, #2]
 80059b8:	021b      	lsls	r3, r3, #8
 80059ba:	4313      	orrs	r3, r2
 80059bc:	4a43      	ldr	r2, [pc, #268]	; (8005acc <MX_LWIP_Init+0x290>)
 80059be:	78d2      	ldrb	r2, [r2, #3]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	061a      	lsls	r2, r3, #24
 80059c4:	4b41      	ldr	r3, [pc, #260]	; (8005acc <MX_LWIP_Init+0x290>)
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	0619      	lsls	r1, r3, #24
 80059ca:	4b40      	ldr	r3, [pc, #256]	; (8005acc <MX_LWIP_Init+0x290>)
 80059cc:	785b      	ldrb	r3, [r3, #1]
 80059ce:	041b      	lsls	r3, r3, #16
 80059d0:	4319      	orrs	r1, r3
 80059d2:	4b3e      	ldr	r3, [pc, #248]	; (8005acc <MX_LWIP_Init+0x290>)
 80059d4:	789b      	ldrb	r3, [r3, #2]
 80059d6:	021b      	lsls	r3, r3, #8
 80059d8:	430b      	orrs	r3, r1
 80059da:	493c      	ldr	r1, [pc, #240]	; (8005acc <MX_LWIP_Init+0x290>)
 80059dc:	78c9      	ldrb	r1, [r1, #3]
 80059de:	430b      	orrs	r3, r1
 80059e0:	021b      	lsls	r3, r3, #8
 80059e2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80059e6:	431a      	orrs	r2, r3
 80059e8:	4b38      	ldr	r3, [pc, #224]	; (8005acc <MX_LWIP_Init+0x290>)
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	0619      	lsls	r1, r3, #24
 80059ee:	4b37      	ldr	r3, [pc, #220]	; (8005acc <MX_LWIP_Init+0x290>)
 80059f0:	785b      	ldrb	r3, [r3, #1]
 80059f2:	041b      	lsls	r3, r3, #16
 80059f4:	4319      	orrs	r1, r3
 80059f6:	4b35      	ldr	r3, [pc, #212]	; (8005acc <MX_LWIP_Init+0x290>)
 80059f8:	789b      	ldrb	r3, [r3, #2]
 80059fa:	021b      	lsls	r3, r3, #8
 80059fc:	430b      	orrs	r3, r1
 80059fe:	4933      	ldr	r1, [pc, #204]	; (8005acc <MX_LWIP_Init+0x290>)
 8005a00:	78c9      	ldrb	r1, [r1, #3]
 8005a02:	430b      	orrs	r3, r1
 8005a04:	0a1b      	lsrs	r3, r3, #8
 8005a06:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005a0a:	431a      	orrs	r2, r3
 8005a0c:	4b2f      	ldr	r3, [pc, #188]	; (8005acc <MX_LWIP_Init+0x290>)
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	0619      	lsls	r1, r3, #24
 8005a12:	4b2e      	ldr	r3, [pc, #184]	; (8005acc <MX_LWIP_Init+0x290>)
 8005a14:	785b      	ldrb	r3, [r3, #1]
 8005a16:	041b      	lsls	r3, r3, #16
 8005a18:	4319      	orrs	r1, r3
 8005a1a:	4b2c      	ldr	r3, [pc, #176]	; (8005acc <MX_LWIP_Init+0x290>)
 8005a1c:	789b      	ldrb	r3, [r3, #2]
 8005a1e:	021b      	lsls	r3, r3, #8
 8005a20:	430b      	orrs	r3, r1
 8005a22:	492a      	ldr	r1, [pc, #168]	; (8005acc <MX_LWIP_Init+0x290>)
 8005a24:	78c9      	ldrb	r1, [r1, #3]
 8005a26:	430b      	orrs	r3, r1
 8005a28:	0e1b      	lsrs	r3, r3, #24
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	4a2a      	ldr	r2, [pc, #168]	; (8005ad8 <MX_LWIP_Init+0x29c>)
 8005a2e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8005a30:	4b2a      	ldr	r3, [pc, #168]	; (8005adc <MX_LWIP_Init+0x2a0>)
 8005a32:	9302      	str	r3, [sp, #8]
 8005a34:	4b2a      	ldr	r3, [pc, #168]	; (8005ae0 <MX_LWIP_Init+0x2a4>)
 8005a36:	9301      	str	r3, [sp, #4]
 8005a38:	2300      	movs	r3, #0
 8005a3a:	9300      	str	r3, [sp, #0]
 8005a3c:	4b26      	ldr	r3, [pc, #152]	; (8005ad8 <MX_LWIP_Init+0x29c>)
 8005a3e:	4a25      	ldr	r2, [pc, #148]	; (8005ad4 <MX_LWIP_Init+0x298>)
 8005a40:	4923      	ldr	r1, [pc, #140]	; (8005ad0 <MX_LWIP_Init+0x294>)
 8005a42:	4828      	ldr	r0, [pc, #160]	; (8005ae4 <MX_LWIP_Init+0x2a8>)
 8005a44:	f009 f8f6 	bl	800ec34 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005a48:	4826      	ldr	r0, [pc, #152]	; (8005ae4 <MX_LWIP_Init+0x2a8>)
 8005a4a:	f009 faa5 	bl	800ef98 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8005a4e:	4b25      	ldr	r3, [pc, #148]	; (8005ae4 <MX_LWIP_Init+0x2a8>)
 8005a50:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005a54:	089b      	lsrs	r3, r3, #2
 8005a56:	f003 0301 	and.w	r3, r3, #1
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d003      	beq.n	8005a68 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005a60:	4820      	ldr	r0, [pc, #128]	; (8005ae4 <MX_LWIP_Init+0x2a8>)
 8005a62:	f009 faa9 	bl	800efb8 <netif_set_up>
 8005a66:	e002      	b.n	8005a6e <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8005a68:	481e      	ldr	r0, [pc, #120]	; (8005ae4 <MX_LWIP_Init+0x2a8>)
 8005a6a:	f009 fb11 	bl	800f090 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8005a6e:	491e      	ldr	r1, [pc, #120]	; (8005ae8 <MX_LWIP_Init+0x2ac>)
 8005a70:	481c      	ldr	r0, [pc, #112]	; (8005ae4 <MX_LWIP_Init+0x2a8>)
 8005a72:	f009 fba3 	bl	800f1bc <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 8005a76:	2200      	movs	r2, #0
 8005a78:	2101      	movs	r1, #1
 8005a7a:	2001      	movs	r0, #1
 8005a7c:	f000 feab 	bl	80067d6 <osSemaphoreNew>
 8005a80:	4603      	mov	r3, r0
 8005a82:	4a1a      	ldr	r2, [pc, #104]	; (8005aec <MX_LWIP_Init+0x2b0>)
 8005a84:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 8005a86:	4b1a      	ldr	r3, [pc, #104]	; (8005af0 <MX_LWIP_Init+0x2b4>)
 8005a88:	4a16      	ldr	r2, [pc, #88]	; (8005ae4 <MX_LWIP_Init+0x2a8>)
 8005a8a:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8005a8c:	4b17      	ldr	r3, [pc, #92]	; (8005aec <MX_LWIP_Init+0x2b0>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a17      	ldr	r2, [pc, #92]	; (8005af0 <MX_LWIP_Init+0x2b4>)
 8005a92:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8005a94:	2224      	movs	r2, #36	; 0x24
 8005a96:	2100      	movs	r1, #0
 8005a98:	4816      	ldr	r0, [pc, #88]	; (8005af4 <MX_LWIP_Init+0x2b8>)
 8005a9a:	f016 f9b3 	bl	801be04 <memset>
  attributes.name = "LinkThr";
 8005a9e:	4b15      	ldr	r3, [pc, #84]	; (8005af4 <MX_LWIP_Init+0x2b8>)
 8005aa0:	4a15      	ldr	r2, [pc, #84]	; (8005af8 <MX_LWIP_Init+0x2bc>)
 8005aa2:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8005aa4:	4b13      	ldr	r3, [pc, #76]	; (8005af4 <MX_LWIP_Init+0x2b8>)
 8005aa6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005aaa:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8005aac:	4b11      	ldr	r3, [pc, #68]	; (8005af4 <MX_LWIP_Init+0x2b8>)
 8005aae:	2210      	movs	r2, #16
 8005ab0:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 8005ab2:	4a10      	ldr	r2, [pc, #64]	; (8005af4 <MX_LWIP_Init+0x2b8>)
 8005ab4:	490e      	ldr	r1, [pc, #56]	; (8005af0 <MX_LWIP_Init+0x2b4>)
 8005ab6:	4811      	ldr	r0, [pc, #68]	; (8005afc <MX_LWIP_Init+0x2c0>)
 8005ab8:	f000 fcd1 	bl	800645e <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005abc:	bf00      	nop
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	bf00      	nop
 8005ac4:	20001acc 	.word	0x20001acc
 8005ac8:	20001ac8 	.word	0x20001ac8
 8005acc:	20001a68 	.word	0x20001a68
 8005ad0:	20001ac4 	.word	0x20001ac4
 8005ad4:	20001ad0 	.word	0x20001ad0
 8005ad8:	20001ad4 	.word	0x20001ad4
 8005adc:	0800e03d 	.word	0x0800e03d
 8005ae0:	08006129 	.word	0x08006129
 8005ae4:	20001a90 	.word	0x20001a90
 8005ae8:	0800620d 	.word	0x0800620d
 8005aec:	20000020 	.word	0x20000020
 8005af0:	20001a60 	.word	0x20001a60
 8005af4:	20001a6c 	.word	0x20001a6c
 8005af8:	0801ebc8 	.word	0x0801ebc8
 8005afc:	08006195 	.word	0x08006195

08005b00 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b08e      	sub	sp, #56	; 0x38
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	601a      	str	r2, [r3, #0]
 8005b10:	605a      	str	r2, [r3, #4]
 8005b12:	609a      	str	r2, [r3, #8]
 8005b14:	60da      	str	r2, [r3, #12]
 8005b16:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a4a      	ldr	r2, [pc, #296]	; (8005c48 <HAL_ETH_MspInit+0x148>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	f040 808d 	bne.w	8005c3e <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005b24:	2300      	movs	r3, #0
 8005b26:	623b      	str	r3, [r7, #32]
 8005b28:	4b48      	ldr	r3, [pc, #288]	; (8005c4c <HAL_ETH_MspInit+0x14c>)
 8005b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b2c:	4a47      	ldr	r2, [pc, #284]	; (8005c4c <HAL_ETH_MspInit+0x14c>)
 8005b2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005b32:	6313      	str	r3, [r2, #48]	; 0x30
 8005b34:	4b45      	ldr	r3, [pc, #276]	; (8005c4c <HAL_ETH_MspInit+0x14c>)
 8005b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b3c:	623b      	str	r3, [r7, #32]
 8005b3e:	6a3b      	ldr	r3, [r7, #32]
 8005b40:	2300      	movs	r3, #0
 8005b42:	61fb      	str	r3, [r7, #28]
 8005b44:	4b41      	ldr	r3, [pc, #260]	; (8005c4c <HAL_ETH_MspInit+0x14c>)
 8005b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b48:	4a40      	ldr	r2, [pc, #256]	; (8005c4c <HAL_ETH_MspInit+0x14c>)
 8005b4a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005b4e:	6313      	str	r3, [r2, #48]	; 0x30
 8005b50:	4b3e      	ldr	r3, [pc, #248]	; (8005c4c <HAL_ETH_MspInit+0x14c>)
 8005b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b58:	61fb      	str	r3, [r7, #28]
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	61bb      	str	r3, [r7, #24]
 8005b60:	4b3a      	ldr	r3, [pc, #232]	; (8005c4c <HAL_ETH_MspInit+0x14c>)
 8005b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b64:	4a39      	ldr	r2, [pc, #228]	; (8005c4c <HAL_ETH_MspInit+0x14c>)
 8005b66:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b6a:	6313      	str	r3, [r2, #48]	; 0x30
 8005b6c:	4b37      	ldr	r3, [pc, #220]	; (8005c4c <HAL_ETH_MspInit+0x14c>)
 8005b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b74:	61bb      	str	r3, [r7, #24]
 8005b76:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b78:	2300      	movs	r3, #0
 8005b7a:	617b      	str	r3, [r7, #20]
 8005b7c:	4b33      	ldr	r3, [pc, #204]	; (8005c4c <HAL_ETH_MspInit+0x14c>)
 8005b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b80:	4a32      	ldr	r2, [pc, #200]	; (8005c4c <HAL_ETH_MspInit+0x14c>)
 8005b82:	f043 0304 	orr.w	r3, r3, #4
 8005b86:	6313      	str	r3, [r2, #48]	; 0x30
 8005b88:	4b30      	ldr	r3, [pc, #192]	; (8005c4c <HAL_ETH_MspInit+0x14c>)
 8005b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b8c:	f003 0304 	and.w	r3, r3, #4
 8005b90:	617b      	str	r3, [r7, #20]
 8005b92:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b94:	2300      	movs	r3, #0
 8005b96:	613b      	str	r3, [r7, #16]
 8005b98:	4b2c      	ldr	r3, [pc, #176]	; (8005c4c <HAL_ETH_MspInit+0x14c>)
 8005b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9c:	4a2b      	ldr	r2, [pc, #172]	; (8005c4c <HAL_ETH_MspInit+0x14c>)
 8005b9e:	f043 0301 	orr.w	r3, r3, #1
 8005ba2:	6313      	str	r3, [r2, #48]	; 0x30
 8005ba4:	4b29      	ldr	r3, [pc, #164]	; (8005c4c <HAL_ETH_MspInit+0x14c>)
 8005ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba8:	f003 0301 	and.w	r3, r3, #1
 8005bac:	613b      	str	r3, [r7, #16]
 8005bae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	60fb      	str	r3, [r7, #12]
 8005bb4:	4b25      	ldr	r3, [pc, #148]	; (8005c4c <HAL_ETH_MspInit+0x14c>)
 8005bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb8:	4a24      	ldr	r2, [pc, #144]	; (8005c4c <HAL_ETH_MspInit+0x14c>)
 8005bba:	f043 0302 	orr.w	r3, r3, #2
 8005bbe:	6313      	str	r3, [r2, #48]	; 0x30
 8005bc0:	4b22      	ldr	r3, [pc, #136]	; (8005c4c <HAL_ETH_MspInit+0x14c>)
 8005bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc4:	f003 0302 	and.w	r3, r3, #2
 8005bc8:	60fb      	str	r3, [r7, #12]
 8005bca:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8005bcc:	2332      	movs	r3, #50	; 0x32
 8005bce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bd0:	2302      	movs	r3, #2
 8005bd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005bdc:	230b      	movs	r3, #11
 8005bde:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005be0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005be4:	4619      	mov	r1, r3
 8005be6:	481a      	ldr	r0, [pc, #104]	; (8005c50 <HAL_ETH_MspInit+0x150>)
 8005be8:	f7fd ffe8 	bl	8003bbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8005bec:	2386      	movs	r3, #134	; 0x86
 8005bee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bf0:	2302      	movs	r3, #2
 8005bf2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005bfc:	230b      	movs	r3, #11
 8005bfe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c04:	4619      	mov	r1, r3
 8005c06:	4813      	ldr	r0, [pc, #76]	; (8005c54 <HAL_ETH_MspInit+0x154>)
 8005c08:	f7fd ffd8 	bl	8003bbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8005c0c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8005c10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c12:	2302      	movs	r3, #2
 8005c14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c16:	2300      	movs	r3, #0
 8005c18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005c1e:	230b      	movs	r3, #11
 8005c20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c26:	4619      	mov	r1, r3
 8005c28:	480b      	ldr	r0, [pc, #44]	; (8005c58 <HAL_ETH_MspInit+0x158>)
 8005c2a:	f7fd ffc7 	bl	8003bbc <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8005c2e:	2200      	movs	r2, #0
 8005c30:	2105      	movs	r1, #5
 8005c32:	203d      	movs	r0, #61	; 0x3d
 8005c34:	f7fc f830 	bl	8001c98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8005c38:	203d      	movs	r0, #61	; 0x3d
 8005c3a:	f7fc f849 	bl	8001cd0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005c3e:	bf00      	nop
 8005c40:	3738      	adds	r7, #56	; 0x38
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	40028000 	.word	0x40028000
 8005c4c:	40023800 	.word	0x40023800
 8005c50:	40020800 	.word	0x40020800
 8005c54:	40020000 	.word	0x40020000
 8005c58:	40020400 	.word	0x40020400

08005c5c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8005c64:	4b04      	ldr	r3, [pc, #16]	; (8005c78 <HAL_ETH_RxCpltCallback+0x1c>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f000 fe8f 	bl	800698c <osSemaphoreRelease>
}
 8005c6e:	bf00      	nop
 8005c70:	3708      	adds	r7, #8
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	20000024 	.word	0x20000024

08005c7c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b090      	sub	sp, #64	; 0x40
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8005c84:	2300      	movs	r3, #0
 8005c86:	63bb      	str	r3, [r7, #56]	; 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005c88:	4b5d      	ldr	r3, [pc, #372]	; (8005e00 <low_level_init+0x184>)
 8005c8a:	4a5e      	ldr	r2, [pc, #376]	; (8005e04 <low_level_init+0x188>)
 8005c8c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8005c8e:	4b5c      	ldr	r3, [pc, #368]	; (8005e00 <low_level_init+0x184>)
 8005c90:	2201      	movs	r2, #1
 8005c92:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8005c94:	4b5a      	ldr	r3, [pc, #360]	; (8005e00 <low_level_init+0x184>)
 8005c96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005c9a:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005c9c:	4b58      	ldr	r3, [pc, #352]	; (8005e00 <low_level_init+0x184>)
 8005c9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ca2:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8005ca4:	4b56      	ldr	r3, [pc, #344]	; (8005e00 <low_level_init+0x184>)
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8005caa:	2300      	movs	r3, #0
 8005cac:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 8005cae:	2380      	movs	r3, #128	; 0x80
 8005cb0:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 8005cb2:	23e1      	movs	r3, #225	; 0xe1
 8005cb4:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 8005cc2:	4a4f      	ldr	r2, [pc, #316]	; (8005e00 <low_level_init+0x184>)
 8005cc4:	f107 030c 	add.w	r3, r7, #12
 8005cc8:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8005cca:	4b4d      	ldr	r3, [pc, #308]	; (8005e00 <low_level_init+0x184>)
 8005ccc:	2201      	movs	r2, #1
 8005cce:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8005cd0:	4b4b      	ldr	r3, [pc, #300]	; (8005e00 <low_level_init+0x184>)
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8005cd6:	4b4a      	ldr	r3, [pc, #296]	; (8005e00 <low_level_init+0x184>)
 8005cd8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005cdc:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005cde:	4848      	ldr	r0, [pc, #288]	; (8005e00 <low_level_init+0x184>)
 8005ce0:	f7fc faee 	bl	80022c0 <HAL_ETH_Init>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8005cea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d108      	bne.n	8005d04 <low_level_init+0x88>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005cf8:	f043 0304 	orr.w	r3, r3, #4
 8005cfc:	b2da      	uxtb	r2, r3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8005d04:	2304      	movs	r3, #4
 8005d06:	4a40      	ldr	r2, [pc, #256]	; (8005e08 <low_level_init+0x18c>)
 8005d08:	4940      	ldr	r1, [pc, #256]	; (8005e0c <low_level_init+0x190>)
 8005d0a:	483d      	ldr	r0, [pc, #244]	; (8005e00 <low_level_init+0x184>)
 8005d0c:	f7fc fc74 	bl	80025f8 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8005d10:	2304      	movs	r3, #4
 8005d12:	4a3f      	ldr	r2, [pc, #252]	; (8005e10 <low_level_init+0x194>)
 8005d14:	493f      	ldr	r1, [pc, #252]	; (8005e14 <low_level_init+0x198>)
 8005d16:	483a      	ldr	r0, [pc, #232]	; (8005e00 <low_level_init+0x184>)
 8005d18:	f7fc fcd7 	bl	80026ca <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2206      	movs	r2, #6
 8005d20:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005d24:	4b36      	ldr	r3, [pc, #216]	; (8005e00 <low_level_init+0x184>)
 8005d26:	695b      	ldr	r3, [r3, #20]
 8005d28:	781a      	ldrb	r2, [r3, #0]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005d30:	4b33      	ldr	r3, [pc, #204]	; (8005e00 <low_level_init+0x184>)
 8005d32:	695b      	ldr	r3, [r3, #20]
 8005d34:	785a      	ldrb	r2, [r3, #1]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005d3c:	4b30      	ldr	r3, [pc, #192]	; (8005e00 <low_level_init+0x184>)
 8005d3e:	695b      	ldr	r3, [r3, #20]
 8005d40:	789a      	ldrb	r2, [r3, #2]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005d48:	4b2d      	ldr	r3, [pc, #180]	; (8005e00 <low_level_init+0x184>)
 8005d4a:	695b      	ldr	r3, [r3, #20]
 8005d4c:	78da      	ldrb	r2, [r3, #3]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005d54:	4b2a      	ldr	r3, [pc, #168]	; (8005e00 <low_level_init+0x184>)
 8005d56:	695b      	ldr	r3, [r3, #20]
 8005d58:	791a      	ldrb	r2, [r3, #4]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005d60:	4b27      	ldr	r3, [pc, #156]	; (8005e00 <low_level_init+0x184>)
 8005d62:	695b      	ldr	r3, [r3, #20]
 8005d64:	795a      	ldrb	r2, [r3, #5]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005d72:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005d7a:	f043 030a 	orr.w	r3, r3, #10
 8005d7e:	b2da      	uxtb	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 8005d86:	2200      	movs	r2, #0
 8005d88:	2101      	movs	r1, #1
 8005d8a:	2001      	movs	r0, #1
 8005d8c:	f000 fd23 	bl	80067d6 <osSemaphoreNew>
 8005d90:	4603      	mov	r3, r0
 8005d92:	4a21      	ldr	r2, [pc, #132]	; (8005e18 <low_level_init+0x19c>)
 8005d94:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8005d96:	f107 0314 	add.w	r3, r7, #20
 8005d9a:	2224      	movs	r2, #36	; 0x24
 8005d9c:	2100      	movs	r1, #0
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f016 f830 	bl	801be04 <memset>
  attributes.name = "EthIf";
 8005da4:	4b1d      	ldr	r3, [pc, #116]	; (8005e1c <low_level_init+0x1a0>)
 8005da6:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8005da8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005dac:	62bb      	str	r3, [r7, #40]	; 0x28
  attributes.priority = osPriorityRealtime;
 8005dae:	2330      	movs	r3, #48	; 0x30
 8005db0:	62fb      	str	r3, [r7, #44]	; 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 8005db2:	f107 0314 	add.w	r3, r7, #20
 8005db6:	461a      	mov	r2, r3
 8005db8:	6879      	ldr	r1, [r7, #4]
 8005dba:	4819      	ldr	r0, [pc, #100]	; (8005e20 <low_level_init+0x1a4>)
 8005dbc:	f000 fb4f 	bl	800645e <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8005dc0:	480f      	ldr	r0, [pc, #60]	; (8005e00 <low_level_init+0x184>)
 8005dc2:	f7fc ffaa 	bl	8002d1a <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8005dc6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005dca:	461a      	mov	r2, r3
 8005dcc:	211d      	movs	r1, #29
 8005dce:	480c      	ldr	r0, [pc, #48]	; (8005e00 <low_level_init+0x184>)
 8005dd0:	f7fc fed5 	bl	8002b7e <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8005dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd6:	f043 030b 	orr.w	r3, r3, #11
 8005dda:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8005ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dde:	461a      	mov	r2, r3
 8005de0:	211d      	movs	r1, #29
 8005de2:	4807      	ldr	r0, [pc, #28]	; (8005e00 <low_level_init+0x184>)
 8005de4:	f7fc ff33 	bl	8002c4e <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8005de8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005dec:	461a      	mov	r2, r3
 8005dee:	211d      	movs	r1, #29
 8005df0:	4803      	ldr	r0, [pc, #12]	; (8005e00 <low_level_init+0x184>)
 8005df2:	f7fc fec4 	bl	8002b7e <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8005df6:	bf00      	nop
 8005df8:	3740      	adds	r7, #64	; 0x40
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	200033a8 	.word	0x200033a8
 8005e04:	40028000 	.word	0x40028000
 8005e08:	200033f0 	.word	0x200033f0
 8005e0c:	20001ad8 	.word	0x20001ad8
 8005e10:	20001b58 	.word	0x20001b58
 8005e14:	20003328 	.word	0x20003328
 8005e18:	20000024 	.word	0x20000024
 8005e1c:	0801ebd0 	.word	0x0801ebd0
 8005e20:	080060c9 	.word	0x080060c9

08005e24 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b08a      	sub	sp, #40	; 0x28
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8005e2e:	4b4b      	ldr	r3, [pc, #300]	; (8005f5c <low_level_output+0x138>)
 8005e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8005e36:	2300      	movs	r3, #0
 8005e38:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8005e42:	2300      	movs	r3, #0
 8005e44:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8005e46:	4b45      	ldr	r3, [pc, #276]	; (8005f5c <low_level_output+0x138>)
 8005e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e4a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	623b      	str	r3, [r7, #32]
 8005e54:	e05a      	b.n	8005f0c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	da03      	bge.n	8005e66 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8005e5e:	23f8      	movs	r3, #248	; 0xf8
 8005e60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8005e64:	e05c      	b.n	8005f20 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8005e66:	6a3b      	ldr	r3, [r7, #32]
 8005e68:	895b      	ldrh	r3, [r3, #10]
 8005e6a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005e70:	e02f      	b.n	8005ed2 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8005e72:	69fa      	ldr	r2, [r7, #28]
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	18d0      	adds	r0, r2, r3
 8005e78:	6a3b      	ldr	r3, [r7, #32]
 8005e7a:	685a      	ldr	r2, [r3, #4]
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	18d1      	adds	r1, r2, r3
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8005e86:	3304      	adds	r3, #4
 8005e88:	461a      	mov	r2, r3
 8005e8a:	f015 ff93 	bl	801bdb4 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005e94:	69bb      	ldr	r3, [r7, #24]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	da03      	bge.n	8005ea4 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8005e9c:	23f8      	movs	r3, #248	; 0xf8
 8005e9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8005ea2:	e03d      	b.n	8005f20 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8005eaa:	693a      	ldr	r2, [r7, #16]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	4413      	add	r3, r2
 8005eb0:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8005eb4:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8005eb6:	68ba      	ldr	r2, [r7, #8]
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	1ad3      	subs	r3, r2, r3
 8005ebc:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005ec0:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8005ec2:	697a      	ldr	r2, [r7, #20]
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005ecc:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d8c8      	bhi.n	8005e72 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8005ee0:	69fa      	ldr	r2, [r7, #28]
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	18d0      	adds	r0, r2, r3
 8005ee6:	6a3b      	ldr	r3, [r7, #32]
 8005ee8:	685a      	ldr	r2, [r3, #4]
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	4413      	add	r3, r2
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	f015 ff5f 	bl	801bdb4 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8005ef6:	693a      	ldr	r2, [r7, #16]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	4413      	add	r3, r2
 8005efc:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8005efe:	697a      	ldr	r2, [r7, #20]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	4413      	add	r3, r2
 8005f04:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8005f06:	6a3b      	ldr	r3, [r7, #32]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	623b      	str	r3, [r7, #32]
 8005f0c:	6a3b      	ldr	r3, [r7, #32]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d1a1      	bne.n	8005e56 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8005f12:	6979      	ldr	r1, [r7, #20]
 8005f14:	4811      	ldr	r0, [pc, #68]	; (8005f5c <low_level_output+0x138>)
 8005f16:	f7fc fc45 	bl	80027a4 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8005f20:	4b0e      	ldr	r3, [pc, #56]	; (8005f5c <low_level_output+0x138>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f28:	3314      	adds	r3, #20
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 0320 	and.w	r3, r3, #32
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d00d      	beq.n	8005f50 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8005f34:	4b09      	ldr	r3, [pc, #36]	; (8005f5c <low_level_output+0x138>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f3c:	3314      	adds	r3, #20
 8005f3e:	2220      	movs	r2, #32
 8005f40:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8005f42:	4b06      	ldr	r3, [pc, #24]	; (8005f5c <low_level_output+0x138>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f4a:	3304      	adds	r3, #4
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8005f50:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3728      	adds	r7, #40	; 0x28
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}
 8005f5c:	200033a8 	.word	0x200033a8

08005f60 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b08c      	sub	sp, #48	; 0x30
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8005f70:	2300      	movs	r3, #0
 8005f72:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8005f74:	2300      	movs	r3, #0
 8005f76:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8005f80:	2300      	movs	r3, #0
 8005f82:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8005f84:	484f      	ldr	r0, [pc, #316]	; (80060c4 <low_level_input+0x164>)
 8005f86:	f7fc fcf7 	bl	8002978 <HAL_ETH_GetReceivedFrame_IT>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d001      	beq.n	8005f94 <low_level_input+0x34>

    return NULL;
 8005f90:	2300      	movs	r3, #0
 8005f92:	e092      	b.n	80060ba <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8005f94:	4b4b      	ldr	r3, [pc, #300]	; (80060c4 <low_level_input+0x164>)
 8005f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f98:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8005f9a:	4b4a      	ldr	r3, [pc, #296]	; (80060c4 <low_level_input+0x164>)
 8005f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9e:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8005fa0:	89fb      	ldrh	r3, [r7, #14]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d007      	beq.n	8005fb6 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8005fa6:	89fb      	ldrh	r3, [r7, #14]
 8005fa8:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8005fac:	4619      	mov	r1, r3
 8005fae:	2000      	movs	r0, #0
 8005fb0:	f009 fa06 	bl	800f3c0 <pbuf_alloc>
 8005fb4:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8005fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d04b      	beq.n	8006054 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005fbc:	4b41      	ldr	r3, [pc, #260]	; (80060c4 <low_level_input+0x164>)
 8005fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc0:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8005fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fca:	e040      	b.n	800604e <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8005fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fce:	895b      	ldrh	r3, [r3, #10]
 8005fd0:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005fd6:	e021      	b.n	800601c <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8005fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fda:	685a      	ldr	r2, [r3, #4]
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	18d0      	adds	r0, r2, r3
 8005fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	18d1      	adds	r1, r2, r3
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8005fec:	3304      	adds	r3, #4
 8005fee:	461a      	mov	r2, r3
 8005ff0:	f015 fee0 	bl	801bdb4 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005ff4:	6a3b      	ldr	r3, [r7, #32]
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8005ffa:	6a3b      	ldr	r3, [r7, #32]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8006000:	69fa      	ldr	r2, [r7, #28]
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	4413      	add	r3, r2
 8006006:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800600a:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800600c:	69ba      	ldr	r2, [r7, #24]
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	1ad3      	subs	r3, r2, r3
 8006012:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8006016:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8006018:	2300      	movs	r3, #0
 800601a:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800601c:	697a      	ldr	r2, [r7, #20]
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	4413      	add	r3, r2
 8006022:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006026:	4293      	cmp	r3, r2
 8006028:	d8d6      	bhi.n	8005fd8 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800602a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800602c:	685a      	ldr	r2, [r3, #4]
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	18d0      	adds	r0, r2, r3
 8006032:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	4413      	add	r3, r2
 8006038:	697a      	ldr	r2, [r7, #20]
 800603a:	4619      	mov	r1, r3
 800603c:	f015 feba 	bl	801bdb4 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8006040:	69fa      	ldr	r2, [r7, #28]
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	4413      	add	r3, r2
 8006046:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8006048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	62bb      	str	r3, [r7, #40]	; 0x28
 800604e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006050:	2b00      	cmp	r3, #0
 8006052:	d1bb      	bne.n	8005fcc <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8006054:	4b1b      	ldr	r3, [pc, #108]	; (80060c4 <low_level_input+0x164>)
 8006056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006058:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800605a:	2300      	movs	r3, #0
 800605c:	613b      	str	r3, [r7, #16]
 800605e:	e00b      	b.n	8006078 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8006060:	6a3b      	ldr	r3, [r7, #32]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006068:	6a3b      	ldr	r3, [r7, #32]
 800606a:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800606c:	6a3b      	ldr	r3, [r7, #32]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	3301      	adds	r3, #1
 8006076:	613b      	str	r3, [r7, #16]
 8006078:	4b12      	ldr	r3, [pc, #72]	; (80060c4 <low_level_input+0x164>)
 800607a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800607c:	693a      	ldr	r2, [r7, #16]
 800607e:	429a      	cmp	r2, r3
 8006080:	d3ee      	bcc.n	8006060 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8006082:	4b10      	ldr	r3, [pc, #64]	; (80060c4 <low_level_input+0x164>)
 8006084:	2200      	movs	r2, #0
 8006086:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8006088:	4b0e      	ldr	r3, [pc, #56]	; (80060c4 <low_level_input+0x164>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006090:	3314      	adds	r3, #20
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006098:	2b00      	cmp	r3, #0
 800609a:	d00d      	beq.n	80060b8 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800609c:	4b09      	ldr	r3, [pc, #36]	; (80060c4 <low_level_input+0x164>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060a4:	3314      	adds	r3, #20
 80060a6:	2280      	movs	r2, #128	; 0x80
 80060a8:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80060aa:	4b06      	ldr	r3, [pc, #24]	; (80060c4 <low_level_input+0x164>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060b2:	3308      	adds	r3, #8
 80060b4:	2200      	movs	r2, #0
 80060b6:	601a      	str	r2, [r3, #0]
  }
  return p;
 80060b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3730      	adds	r7, #48	; 0x30
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	200033a8 	.word	0x200033a8

080060c8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80060d4:	4b12      	ldr	r3, [pc, #72]	; (8006120 <ethernetif_input+0x58>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f04f 31ff 	mov.w	r1, #4294967295
 80060dc:	4618      	mov	r0, r3
 80060de:	f000 fc03 	bl	80068e8 <osSemaphoreAcquire>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d1f5      	bne.n	80060d4 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 80060e8:	480e      	ldr	r0, [pc, #56]	; (8006124 <ethernetif_input+0x5c>)
 80060ea:	f013 fae1 	bl	80196b0 <sys_mutex_lock>
        p = low_level_input( netif );
 80060ee:	68f8      	ldr	r0, [r7, #12]
 80060f0:	f7ff ff36 	bl	8005f60 <low_level_input>
 80060f4:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d00a      	beq.n	8006112 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	68f9      	ldr	r1, [r7, #12]
 8006102:	68b8      	ldr	r0, [r7, #8]
 8006104:	4798      	blx	r3
 8006106:	4603      	mov	r3, r0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d002      	beq.n	8006112 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 800610c:	68b8      	ldr	r0, [r7, #8]
 800610e:	f009 fc6d 	bl	800f9ec <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8006112:	4804      	ldr	r0, [pc, #16]	; (8006124 <ethernetif_input+0x5c>)
 8006114:	f013 fadb 	bl	80196ce <sys_mutex_unlock>
      } while(p!=NULL);
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d1e4      	bne.n	80060e8 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800611e:	e7d9      	b.n	80060d4 <ethernetif_input+0xc>
 8006120:	20000024 	.word	0x20000024
 8006124:	20004c00 	.word	0x20004c00

08006128 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b082      	sub	sp, #8
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d106      	bne.n	8006144 <ethernetif_init+0x1c>
 8006136:	4b0e      	ldr	r3, [pc, #56]	; (8006170 <ethernetif_init+0x48>)
 8006138:	f44f 720c 	mov.w	r2, #560	; 0x230
 800613c:	490d      	ldr	r1, [pc, #52]	; (8006174 <ethernetif_init+0x4c>)
 800613e:	480e      	ldr	r0, [pc, #56]	; (8006178 <ethernetif_init+0x50>)
 8006140:	f016 fcd6 	bl	801caf0 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2273      	movs	r2, #115	; 0x73
 8006148:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2274      	movs	r2, #116	; 0x74
 8006150:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a09      	ldr	r2, [pc, #36]	; (800617c <ethernetif_init+0x54>)
 8006158:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a08      	ldr	r2, [pc, #32]	; (8006180 <ethernetif_init+0x58>)
 800615e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f7ff fd8b 	bl	8005c7c <low_level_init>

  return ERR_OK;
 8006166:	2300      	movs	r3, #0
}
 8006168:	4618      	mov	r0, r3
 800616a:	3708      	adds	r7, #8
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}
 8006170:	0801ebd8 	.word	0x0801ebd8
 8006174:	0801ebf4 	.word	0x0801ebf4
 8006178:	0801ec04 	.word	0x0801ec04
 800617c:	0801760d 	.word	0x0801760d
 8006180:	08005e25 	.word	0x08005e25

08006184 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006188:	f7fb fc9e 	bl	8001ac8 <HAL_GetTick>
 800618c:	4603      	mov	r3, r0
}
 800618e:	4618      	mov	r0, r3
 8006190:	bd80      	pop	{r7, pc}
	...

08006194 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800619c:	2300      	movs	r3, #0
 800619e:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80061a4:	f107 0308 	add.w	r3, r7, #8
 80061a8:	461a      	mov	r2, r3
 80061aa:	2101      	movs	r1, #1
 80061ac:	4816      	ldr	r0, [pc, #88]	; (8006208 <ethernetif_set_link+0x74>)
 80061ae:	f7fc fce6 	bl	8002b7e <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	f003 0304 	and.w	r3, r3, #4
 80061b8:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80061c2:	f003 0304 	and.w	r3, r3, #4
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d108      	bne.n	80061dc <ethernetif_set_link+0x48>
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d005      	beq.n	80061dc <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4618      	mov	r0, r3
 80061d6:	f008 ff8d 	bl	800f0f4 <netif_set_link_up>
 80061da:	e011      	b.n	8006200 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80061e4:	089b      	lsrs	r3, r3, #2
 80061e6:	f003 0301 	and.w	r3, r3, #1
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d007      	beq.n	8006200 <ethernetif_set_link+0x6c>
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d104      	bne.n	8006200 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4618      	mov	r0, r3
 80061fc:	f008 ffae 	bl	800f15c <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8006200:	20c8      	movs	r0, #200	; 0xc8
 8006202:	f000 f9bf 	bl	8006584 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8006206:	e7cd      	b.n	80061a4 <ethernetif_set_link+0x10>
 8006208:	200033a8 	.word	0x200033a8

0800620c <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8006214:	2300      	movs	r3, #0
 8006216:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8006218:	2300      	movs	r3, #0
 800621a:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006222:	089b      	lsrs	r3, r3, #2
 8006224:	f003 0301 	and.w	r3, r3, #1
 8006228:	b2db      	uxtb	r3, r3
 800622a:	2b00      	cmp	r3, #0
 800622c:	d05d      	beq.n	80062ea <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800622e:	4b34      	ldr	r3, [pc, #208]	; (8006300 <ethernetif_update_config+0xf4>)
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d03f      	beq.n	80062b6 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8006236:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800623a:	2100      	movs	r1, #0
 800623c:	4830      	ldr	r0, [pc, #192]	; (8006300 <ethernetif_update_config+0xf4>)
 800623e:	f7fc fd06 	bl	8002c4e <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8006242:	f7fb fc41 	bl	8001ac8 <HAL_GetTick>
 8006246:	4603      	mov	r3, r0
 8006248:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800624a:	f107 0308 	add.w	r3, r7, #8
 800624e:	461a      	mov	r2, r3
 8006250:	2101      	movs	r1, #1
 8006252:	482b      	ldr	r0, [pc, #172]	; (8006300 <ethernetif_update_config+0xf4>)
 8006254:	f7fc fc93 	bl	8002b7e <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8006258:	f7fb fc36 	bl	8001ac8 <HAL_GetTick>
 800625c:	4602      	mov	r2, r0
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006266:	d828      	bhi.n	80062ba <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	f003 0320 	and.w	r3, r3, #32
 800626e:	2b00      	cmp	r3, #0
 8006270:	d0eb      	beq.n	800624a <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8006272:	f107 0308 	add.w	r3, r7, #8
 8006276:	461a      	mov	r2, r3
 8006278:	2110      	movs	r1, #16
 800627a:	4821      	ldr	r0, [pc, #132]	; (8006300 <ethernetif_update_config+0xf4>)
 800627c:	f7fc fc7f 	bl	8002b7e <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	f003 0304 	and.w	r3, r3, #4
 8006286:	2b00      	cmp	r3, #0
 8006288:	d004      	beq.n	8006294 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800628a:	4b1d      	ldr	r3, [pc, #116]	; (8006300 <ethernetif_update_config+0xf4>)
 800628c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006290:	60da      	str	r2, [r3, #12]
 8006292:	e002      	b.n	800629a <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8006294:	4b1a      	ldr	r3, [pc, #104]	; (8006300 <ethernetif_update_config+0xf4>)
 8006296:	2200      	movs	r2, #0
 8006298:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	f003 0302 	and.w	r3, r3, #2
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d003      	beq.n	80062ac <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 80062a4:	4b16      	ldr	r3, [pc, #88]	; (8006300 <ethernetif_update_config+0xf4>)
 80062a6:	2200      	movs	r2, #0
 80062a8:	609a      	str	r2, [r3, #8]
 80062aa:	e016      	b.n	80062da <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 80062ac:	4b14      	ldr	r3, [pc, #80]	; (8006300 <ethernetif_update_config+0xf4>)
 80062ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80062b2:	609a      	str	r2, [r3, #8]
 80062b4:	e011      	b.n	80062da <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 80062b6:	bf00      	nop
 80062b8:	e000      	b.n	80062bc <ethernetif_update_config+0xb0>
          goto error;
 80062ba:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80062bc:	4b10      	ldr	r3, [pc, #64]	; (8006300 <ethernetif_update_config+0xf4>)
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	08db      	lsrs	r3, r3, #3
 80062c2:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 80062c4:	4b0e      	ldr	r3, [pc, #56]	; (8006300 <ethernetif_update_config+0xf4>)
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	085b      	lsrs	r3, r3, #1
 80062ca:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80062cc:	4313      	orrs	r3, r2
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	461a      	mov	r2, r3
 80062d2:	2100      	movs	r1, #0
 80062d4:	480a      	ldr	r0, [pc, #40]	; (8006300 <ethernetif_update_config+0xf4>)
 80062d6:	f7fc fcba 	bl	8002c4e <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 80062da:	2100      	movs	r1, #0
 80062dc:	4808      	ldr	r0, [pc, #32]	; (8006300 <ethernetif_update_config+0xf4>)
 80062de:	f7fc fd7b 	bl	8002dd8 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 80062e2:	4807      	ldr	r0, [pc, #28]	; (8006300 <ethernetif_update_config+0xf4>)
 80062e4:	f7fc fd19 	bl	8002d1a <HAL_ETH_Start>
 80062e8:	e002      	b.n	80062f0 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 80062ea:	4805      	ldr	r0, [pc, #20]	; (8006300 <ethernetif_update_config+0xf4>)
 80062ec:	f7fc fd44 	bl	8002d78 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f000 f807 	bl	8006304 <ethernetif_notify_conn_changed>
}
 80062f6:	bf00      	nop
 80062f8:	3710      	adds	r7, #16
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	200033a8 	.word	0x200033a8

08006304 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800630c:	bf00      	nop
 800630e:	370c      	adds	r7, #12
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <__NVIC_SetPriority>:
{
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
 800631e:	4603      	mov	r3, r0
 8006320:	6039      	str	r1, [r7, #0]
 8006322:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006328:	2b00      	cmp	r3, #0
 800632a:	db0a      	blt.n	8006342 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	b2da      	uxtb	r2, r3
 8006330:	490c      	ldr	r1, [pc, #48]	; (8006364 <__NVIC_SetPriority+0x4c>)
 8006332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006336:	0112      	lsls	r2, r2, #4
 8006338:	b2d2      	uxtb	r2, r2
 800633a:	440b      	add	r3, r1
 800633c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006340:	e00a      	b.n	8006358 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	b2da      	uxtb	r2, r3
 8006346:	4908      	ldr	r1, [pc, #32]	; (8006368 <__NVIC_SetPriority+0x50>)
 8006348:	79fb      	ldrb	r3, [r7, #7]
 800634a:	f003 030f 	and.w	r3, r3, #15
 800634e:	3b04      	subs	r3, #4
 8006350:	0112      	lsls	r2, r2, #4
 8006352:	b2d2      	uxtb	r2, r2
 8006354:	440b      	add	r3, r1
 8006356:	761a      	strb	r2, [r3, #24]
}
 8006358:	bf00      	nop
 800635a:	370c      	adds	r7, #12
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr
 8006364:	e000e100 	.word	0xe000e100
 8006368:	e000ed00 	.word	0xe000ed00

0800636c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800636c:	b580      	push	{r7, lr}
 800636e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006370:	4b05      	ldr	r3, [pc, #20]	; (8006388 <SysTick_Handler+0x1c>)
 8006372:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006374:	f002 fdbc 	bl	8008ef0 <xTaskGetSchedulerState>
 8006378:	4603      	mov	r3, r0
 800637a:	2b01      	cmp	r3, #1
 800637c:	d001      	beq.n	8006382 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800637e:	f003 fca3 	bl	8009cc8 <xPortSysTickHandler>
  }
}
 8006382:	bf00      	nop
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	e000e010 	.word	0xe000e010

0800638c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800638c:	b580      	push	{r7, lr}
 800638e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006390:	2100      	movs	r1, #0
 8006392:	f06f 0004 	mvn.w	r0, #4
 8006396:	f7ff ffbf 	bl	8006318 <__NVIC_SetPriority>
#endif
}
 800639a:	bf00      	nop
 800639c:	bd80      	pop	{r7, pc}
	...

080063a0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063a6:	f3ef 8305 	mrs	r3, IPSR
 80063aa:	603b      	str	r3, [r7, #0]
  return(result);
 80063ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d003      	beq.n	80063ba <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80063b2:	f06f 0305 	mvn.w	r3, #5
 80063b6:	607b      	str	r3, [r7, #4]
 80063b8:	e00c      	b.n	80063d4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80063ba:	4b0a      	ldr	r3, [pc, #40]	; (80063e4 <osKernelInitialize+0x44>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d105      	bne.n	80063ce <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80063c2:	4b08      	ldr	r3, [pc, #32]	; (80063e4 <osKernelInitialize+0x44>)
 80063c4:	2201      	movs	r2, #1
 80063c6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80063c8:	2300      	movs	r3, #0
 80063ca:	607b      	str	r3, [r7, #4]
 80063cc:	e002      	b.n	80063d4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80063ce:	f04f 33ff 	mov.w	r3, #4294967295
 80063d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80063d4:	687b      	ldr	r3, [r7, #4]
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	370c      	adds	r7, #12
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr
 80063e2:	bf00      	nop
 80063e4:	20000028 	.word	0x20000028

080063e8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063ee:	f3ef 8305 	mrs	r3, IPSR
 80063f2:	603b      	str	r3, [r7, #0]
  return(result);
 80063f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d003      	beq.n	8006402 <osKernelStart+0x1a>
    stat = osErrorISR;
 80063fa:	f06f 0305 	mvn.w	r3, #5
 80063fe:	607b      	str	r3, [r7, #4]
 8006400:	e010      	b.n	8006424 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006402:	4b0b      	ldr	r3, [pc, #44]	; (8006430 <osKernelStart+0x48>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	2b01      	cmp	r3, #1
 8006408:	d109      	bne.n	800641e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800640a:	f7ff ffbf 	bl	800638c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800640e:	4b08      	ldr	r3, [pc, #32]	; (8006430 <osKernelStart+0x48>)
 8006410:	2202      	movs	r2, #2
 8006412:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006414:	f002 f8de 	bl	80085d4 <vTaskStartScheduler>
      stat = osOK;
 8006418:	2300      	movs	r3, #0
 800641a:	607b      	str	r3, [r7, #4]
 800641c:	e002      	b.n	8006424 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800641e:	f04f 33ff 	mov.w	r3, #4294967295
 8006422:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006424:	687b      	ldr	r3, [r7, #4]
}
 8006426:	4618      	mov	r0, r3
 8006428:	3708      	adds	r7, #8
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	20000028 	.word	0x20000028

08006434 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800643a:	f3ef 8305 	mrs	r3, IPSR
 800643e:	603b      	str	r3, [r7, #0]
  return(result);
 8006440:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8006442:	2b00      	cmp	r3, #0
 8006444:	d003      	beq.n	800644e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8006446:	f002 f9f1 	bl	800882c <xTaskGetTickCountFromISR>
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	e002      	b.n	8006454 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800644e:	f002 f9dd 	bl	800880c <xTaskGetTickCount>
 8006452:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8006454:	687b      	ldr	r3, [r7, #4]
}
 8006456:	4618      	mov	r0, r3
 8006458:	3708      	adds	r7, #8
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}

0800645e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800645e:	b580      	push	{r7, lr}
 8006460:	b08e      	sub	sp, #56	; 0x38
 8006462:	af04      	add	r7, sp, #16
 8006464:	60f8      	str	r0, [r7, #12]
 8006466:	60b9      	str	r1, [r7, #8]
 8006468:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800646a:	2300      	movs	r3, #0
 800646c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800646e:	f3ef 8305 	mrs	r3, IPSR
 8006472:	617b      	str	r3, [r7, #20]
  return(result);
 8006474:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006476:	2b00      	cmp	r3, #0
 8006478:	d17f      	bne.n	800657a <osThreadNew+0x11c>
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d07c      	beq.n	800657a <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8006480:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006484:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006486:	2318      	movs	r3, #24
 8006488:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800648a:	2300      	movs	r3, #0
 800648c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800648e:	f04f 33ff 	mov.w	r3, #4294967295
 8006492:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d045      	beq.n	8006526 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d002      	beq.n	80064a8 <osThreadNew+0x4a>
        name = attr->name;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	699b      	ldr	r3, [r3, #24]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d002      	beq.n	80064b6 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	699b      	ldr	r3, [r3, #24]
 80064b4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d008      	beq.n	80064ce <osThreadNew+0x70>
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	2b38      	cmp	r3, #56	; 0x38
 80064c0:	d805      	bhi.n	80064ce <osThreadNew+0x70>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	f003 0301 	and.w	r3, r3, #1
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d001      	beq.n	80064d2 <osThreadNew+0x74>
        return (NULL);
 80064ce:	2300      	movs	r3, #0
 80064d0:	e054      	b.n	800657c <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	695b      	ldr	r3, [r3, #20]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d003      	beq.n	80064e2 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	695b      	ldr	r3, [r3, #20]
 80064de:	089b      	lsrs	r3, r3, #2
 80064e0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d00e      	beq.n	8006508 <osThreadNew+0xaa>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	2bbb      	cmp	r3, #187	; 0xbb
 80064f0:	d90a      	bls.n	8006508 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d006      	beq.n	8006508 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	695b      	ldr	r3, [r3, #20]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d002      	beq.n	8006508 <osThreadNew+0xaa>
        mem = 1;
 8006502:	2301      	movs	r3, #1
 8006504:	61bb      	str	r3, [r7, #24]
 8006506:	e010      	b.n	800652a <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d10c      	bne.n	800652a <osThreadNew+0xcc>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d108      	bne.n	800652a <osThreadNew+0xcc>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	691b      	ldr	r3, [r3, #16]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d104      	bne.n	800652a <osThreadNew+0xcc>
          mem = 0;
 8006520:	2300      	movs	r3, #0
 8006522:	61bb      	str	r3, [r7, #24]
 8006524:	e001      	b.n	800652a <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8006526:	2300      	movs	r3, #0
 8006528:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	2b01      	cmp	r3, #1
 800652e:	d110      	bne.n	8006552 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006538:	9202      	str	r2, [sp, #8]
 800653a:	9301      	str	r3, [sp, #4]
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	9300      	str	r3, [sp, #0]
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	6a3a      	ldr	r2, [r7, #32]
 8006544:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006546:	68f8      	ldr	r0, [r7, #12]
 8006548:	f001 fde6 	bl	8008118 <xTaskCreateStatic>
 800654c:	4603      	mov	r3, r0
 800654e:	613b      	str	r3, [r7, #16]
 8006550:	e013      	b.n	800657a <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 8006552:	69bb      	ldr	r3, [r7, #24]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d110      	bne.n	800657a <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006558:	6a3b      	ldr	r3, [r7, #32]
 800655a:	b29a      	uxth	r2, r3
 800655c:	f107 0310 	add.w	r3, r7, #16
 8006560:	9301      	str	r3, [sp, #4]
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	9300      	str	r3, [sp, #0]
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800656a:	68f8      	ldr	r0, [r7, #12]
 800656c:	f001 fe31 	bl	80081d2 <xTaskCreate>
 8006570:	4603      	mov	r3, r0
 8006572:	2b01      	cmp	r3, #1
 8006574:	d001      	beq.n	800657a <osThreadNew+0x11c>
            hTask = NULL;
 8006576:	2300      	movs	r3, #0
 8006578:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800657a:	693b      	ldr	r3, [r7, #16]
}
 800657c:	4618      	mov	r0, r3
 800657e:	3728      	adds	r7, #40	; 0x28
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800658c:	f3ef 8305 	mrs	r3, IPSR
 8006590:	60bb      	str	r3, [r7, #8]
  return(result);
 8006592:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006594:	2b00      	cmp	r3, #0
 8006596:	d003      	beq.n	80065a0 <osDelay+0x1c>
    stat = osErrorISR;
 8006598:	f06f 0305 	mvn.w	r3, #5
 800659c:	60fb      	str	r3, [r7, #12]
 800659e:	e007      	b.n	80065b0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80065a0:	2300      	movs	r3, #0
 80065a2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d002      	beq.n	80065b0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f001 ffde 	bl	800856c <vTaskDelay>
    }
  }

  return (stat);
 80065b0:	68fb      	ldr	r3, [r7, #12]
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3710      	adds	r7, #16
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}

080065ba <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80065ba:	b580      	push	{r7, lr}
 80065bc:	b088      	sub	sp, #32
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80065c2:	2300      	movs	r3, #0
 80065c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065c6:	f3ef 8305 	mrs	r3, IPSR
 80065ca:	60bb      	str	r3, [r7, #8]
  return(result);
 80065cc:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d174      	bne.n	80066bc <osMutexNew+0x102>
    if (attr != NULL) {
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d003      	beq.n	80065e0 <osMutexNew+0x26>
      type = attr->attr_bits;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	61bb      	str	r3, [r7, #24]
 80065de:	e001      	b.n	80065e4 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80065e0:	2300      	movs	r3, #0
 80065e2:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	f003 0301 	and.w	r3, r3, #1
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d002      	beq.n	80065f4 <osMutexNew+0x3a>
      rmtx = 1U;
 80065ee:	2301      	movs	r3, #1
 80065f0:	617b      	str	r3, [r7, #20]
 80065f2:	e001      	b.n	80065f8 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80065f4:	2300      	movs	r3, #0
 80065f6:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	f003 0308 	and.w	r3, r3, #8
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d15c      	bne.n	80066bc <osMutexNew+0x102>
      mem = -1;
 8006602:	f04f 33ff 	mov.w	r3, #4294967295
 8006606:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d015      	beq.n	800663a <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d006      	beq.n	8006624 <osMutexNew+0x6a>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	2b4f      	cmp	r3, #79	; 0x4f
 800661c:	d902      	bls.n	8006624 <osMutexNew+0x6a>
          mem = 1;
 800661e:	2301      	movs	r3, #1
 8006620:	613b      	str	r3, [r7, #16]
 8006622:	e00c      	b.n	800663e <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d108      	bne.n	800663e <osMutexNew+0x84>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d104      	bne.n	800663e <osMutexNew+0x84>
            mem = 0;
 8006634:	2300      	movs	r3, #0
 8006636:	613b      	str	r3, [r7, #16]
 8006638:	e001      	b.n	800663e <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800663a:	2300      	movs	r3, #0
 800663c:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	2b01      	cmp	r3, #1
 8006642:	d112      	bne.n	800666a <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d007      	beq.n	800665a <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	4619      	mov	r1, r3
 8006650:	2004      	movs	r0, #4
 8006652:	f000 fdd0 	bl	80071f6 <xQueueCreateMutexStatic>
 8006656:	61f8      	str	r0, [r7, #28]
 8006658:	e016      	b.n	8006688 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	4619      	mov	r1, r3
 8006660:	2001      	movs	r0, #1
 8006662:	f000 fdc8 	bl	80071f6 <xQueueCreateMutexStatic>
 8006666:	61f8      	str	r0, [r7, #28]
 8006668:	e00e      	b.n	8006688 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d10b      	bne.n	8006688 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d004      	beq.n	8006680 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8006676:	2004      	movs	r0, #4
 8006678:	f000 fda5 	bl	80071c6 <xQueueCreateMutex>
 800667c:	61f8      	str	r0, [r7, #28]
 800667e:	e003      	b.n	8006688 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8006680:	2001      	movs	r0, #1
 8006682:	f000 fda0 	bl	80071c6 <xQueueCreateMutex>
 8006686:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d00c      	beq.n	80066a8 <osMutexNew+0xee>
        if (attr != NULL) {
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d003      	beq.n	800669c <osMutexNew+0xe2>
          name = attr->name;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	60fb      	str	r3, [r7, #12]
 800669a:	e001      	b.n	80066a0 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800669c:	2300      	movs	r3, #0
 800669e:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80066a0:	68f9      	ldr	r1, [r7, #12]
 80066a2:	69f8      	ldr	r0, [r7, #28]
 80066a4:	f001 fcb0 	bl	8008008 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d006      	beq.n	80066bc <osMutexNew+0x102>
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d003      	beq.n	80066bc <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	f043 0301 	orr.w	r3, r3, #1
 80066ba:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80066bc:	69fb      	ldr	r3, [r7, #28]
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3720      	adds	r7, #32
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}

080066c6 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80066c6:	b580      	push	{r7, lr}
 80066c8:	b086      	sub	sp, #24
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
 80066ce:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f023 0301 	bic.w	r3, r3, #1
 80066d6:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f003 0301 	and.w	r3, r3, #1
 80066de:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80066e0:	2300      	movs	r3, #0
 80066e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066e4:	f3ef 8305 	mrs	r3, IPSR
 80066e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80066ea:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d003      	beq.n	80066f8 <osMutexAcquire+0x32>
    stat = osErrorISR;
 80066f0:	f06f 0305 	mvn.w	r3, #5
 80066f4:	617b      	str	r3, [r7, #20]
 80066f6:	e02c      	b.n	8006752 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d103      	bne.n	8006706 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80066fe:	f06f 0303 	mvn.w	r3, #3
 8006702:	617b      	str	r3, [r7, #20]
 8006704:	e025      	b.n	8006752 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d011      	beq.n	8006730 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800670c:	6839      	ldr	r1, [r7, #0]
 800670e:	6938      	ldr	r0, [r7, #16]
 8006710:	f000 fdc0 	bl	8007294 <xQueueTakeMutexRecursive>
 8006714:	4603      	mov	r3, r0
 8006716:	2b01      	cmp	r3, #1
 8006718:	d01b      	beq.n	8006752 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d003      	beq.n	8006728 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8006720:	f06f 0301 	mvn.w	r3, #1
 8006724:	617b      	str	r3, [r7, #20]
 8006726:	e014      	b.n	8006752 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006728:	f06f 0302 	mvn.w	r3, #2
 800672c:	617b      	str	r3, [r7, #20]
 800672e:	e010      	b.n	8006752 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006730:	6839      	ldr	r1, [r7, #0]
 8006732:	6938      	ldr	r0, [r7, #16]
 8006734:	f001 f954 	bl	80079e0 <xQueueSemaphoreTake>
 8006738:	4603      	mov	r3, r0
 800673a:	2b01      	cmp	r3, #1
 800673c:	d009      	beq.n	8006752 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d003      	beq.n	800674c <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8006744:	f06f 0301 	mvn.w	r3, #1
 8006748:	617b      	str	r3, [r7, #20]
 800674a:	e002      	b.n	8006752 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800674c:	f06f 0302 	mvn.w	r3, #2
 8006750:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8006752:	697b      	ldr	r3, [r7, #20]
}
 8006754:	4618      	mov	r0, r3
 8006756:	3718      	adds	r7, #24
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800675c:	b580      	push	{r7, lr}
 800675e:	b086      	sub	sp, #24
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f023 0301 	bic.w	r3, r3, #1
 800676a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f003 0301 	and.w	r3, r3, #1
 8006772:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006774:	2300      	movs	r3, #0
 8006776:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006778:	f3ef 8305 	mrs	r3, IPSR
 800677c:	60bb      	str	r3, [r7, #8]
  return(result);
 800677e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006780:	2b00      	cmp	r3, #0
 8006782:	d003      	beq.n	800678c <osMutexRelease+0x30>
    stat = osErrorISR;
 8006784:	f06f 0305 	mvn.w	r3, #5
 8006788:	617b      	str	r3, [r7, #20]
 800678a:	e01f      	b.n	80067cc <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d103      	bne.n	800679a <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8006792:	f06f 0303 	mvn.w	r3, #3
 8006796:	617b      	str	r3, [r7, #20]
 8006798:	e018      	b.n	80067cc <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d009      	beq.n	80067b4 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80067a0:	6938      	ldr	r0, [r7, #16]
 80067a2:	f000 fd43 	bl	800722c <xQueueGiveMutexRecursive>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d00f      	beq.n	80067cc <osMutexRelease+0x70>
        stat = osErrorResource;
 80067ac:	f06f 0302 	mvn.w	r3, #2
 80067b0:	617b      	str	r3, [r7, #20]
 80067b2:	e00b      	b.n	80067cc <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80067b4:	2300      	movs	r3, #0
 80067b6:	2200      	movs	r2, #0
 80067b8:	2100      	movs	r1, #0
 80067ba:	6938      	ldr	r0, [r7, #16]
 80067bc:	f000 fe0a 	bl	80073d4 <xQueueGenericSend>
 80067c0:	4603      	mov	r3, r0
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d002      	beq.n	80067cc <osMutexRelease+0x70>
        stat = osErrorResource;
 80067c6:	f06f 0302 	mvn.w	r3, #2
 80067ca:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80067cc:	697b      	ldr	r3, [r7, #20]
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3718      	adds	r7, #24
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}

080067d6 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80067d6:	b580      	push	{r7, lr}
 80067d8:	b08a      	sub	sp, #40	; 0x28
 80067da:	af02      	add	r7, sp, #8
 80067dc:	60f8      	str	r0, [r7, #12]
 80067de:	60b9      	str	r1, [r7, #8]
 80067e0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80067e2:	2300      	movs	r3, #0
 80067e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067e6:	f3ef 8305 	mrs	r3, IPSR
 80067ea:	613b      	str	r3, [r7, #16]
  return(result);
 80067ec:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d175      	bne.n	80068de <osSemaphoreNew+0x108>
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d072      	beq.n	80068de <osSemaphoreNew+0x108>
 80067f8:	68ba      	ldr	r2, [r7, #8]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d86e      	bhi.n	80068de <osSemaphoreNew+0x108>
    mem = -1;
 8006800:	f04f 33ff 	mov.w	r3, #4294967295
 8006804:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d015      	beq.n	8006838 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d006      	beq.n	8006822 <osSemaphoreNew+0x4c>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	2b4f      	cmp	r3, #79	; 0x4f
 800681a:	d902      	bls.n	8006822 <osSemaphoreNew+0x4c>
        mem = 1;
 800681c:	2301      	movs	r3, #1
 800681e:	61bb      	str	r3, [r7, #24]
 8006820:	e00c      	b.n	800683c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d108      	bne.n	800683c <osSemaphoreNew+0x66>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d104      	bne.n	800683c <osSemaphoreNew+0x66>
          mem = 0;
 8006832:	2300      	movs	r3, #0
 8006834:	61bb      	str	r3, [r7, #24]
 8006836:	e001      	b.n	800683c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8006838:	2300      	movs	r3, #0
 800683a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006842:	d04c      	beq.n	80068de <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2b01      	cmp	r3, #1
 8006848:	d128      	bne.n	800689c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	2b01      	cmp	r3, #1
 800684e:	d10a      	bne.n	8006866 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	2203      	movs	r2, #3
 8006856:	9200      	str	r2, [sp, #0]
 8006858:	2200      	movs	r2, #0
 800685a:	2100      	movs	r1, #0
 800685c:	2001      	movs	r0, #1
 800685e:	f000 fbc3 	bl	8006fe8 <xQueueGenericCreateStatic>
 8006862:	61f8      	str	r0, [r7, #28]
 8006864:	e005      	b.n	8006872 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8006866:	2203      	movs	r2, #3
 8006868:	2100      	movs	r1, #0
 800686a:	2001      	movs	r0, #1
 800686c:	f000 fc34 	bl	80070d8 <xQueueGenericCreate>
 8006870:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d022      	beq.n	80068be <osSemaphoreNew+0xe8>
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d01f      	beq.n	80068be <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800687e:	2300      	movs	r3, #0
 8006880:	2200      	movs	r2, #0
 8006882:	2100      	movs	r1, #0
 8006884:	69f8      	ldr	r0, [r7, #28]
 8006886:	f000 fda5 	bl	80073d4 <xQueueGenericSend>
 800688a:	4603      	mov	r3, r0
 800688c:	2b01      	cmp	r3, #1
 800688e:	d016      	beq.n	80068be <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8006890:	69f8      	ldr	r0, [r7, #28]
 8006892:	f001 fa6d 	bl	8007d70 <vQueueDelete>
            hSemaphore = NULL;
 8006896:	2300      	movs	r3, #0
 8006898:	61fb      	str	r3, [r7, #28]
 800689a:	e010      	b.n	80068be <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800689c:	69bb      	ldr	r3, [r7, #24]
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d108      	bne.n	80068b4 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	461a      	mov	r2, r3
 80068a8:	68b9      	ldr	r1, [r7, #8]
 80068aa:	68f8      	ldr	r0, [r7, #12]
 80068ac:	f000 fd28 	bl	8007300 <xQueueCreateCountingSemaphoreStatic>
 80068b0:	61f8      	str	r0, [r7, #28]
 80068b2:	e004      	b.n	80068be <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80068b4:	68b9      	ldr	r1, [r7, #8]
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	f000 fd59 	bl	800736e <xQueueCreateCountingSemaphore>
 80068bc:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80068be:	69fb      	ldr	r3, [r7, #28]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d00c      	beq.n	80068de <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d003      	beq.n	80068d2 <osSemaphoreNew+0xfc>
          name = attr->name;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	617b      	str	r3, [r7, #20]
 80068d0:	e001      	b.n	80068d6 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80068d2:	2300      	movs	r3, #0
 80068d4:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80068d6:	6979      	ldr	r1, [r7, #20]
 80068d8:	69f8      	ldr	r0, [r7, #28]
 80068da:	f001 fb95 	bl	8008008 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80068de:	69fb      	ldr	r3, [r7, #28]
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3720      	adds	r7, #32
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b086      	sub	sp, #24
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80068f6:	2300      	movs	r3, #0
 80068f8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d103      	bne.n	8006908 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006900:	f06f 0303 	mvn.w	r3, #3
 8006904:	617b      	str	r3, [r7, #20]
 8006906:	e039      	b.n	800697c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006908:	f3ef 8305 	mrs	r3, IPSR
 800690c:	60fb      	str	r3, [r7, #12]
  return(result);
 800690e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006910:	2b00      	cmp	r3, #0
 8006912:	d022      	beq.n	800695a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d003      	beq.n	8006922 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800691a:	f06f 0303 	mvn.w	r3, #3
 800691e:	617b      	str	r3, [r7, #20]
 8006920:	e02c      	b.n	800697c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8006922:	2300      	movs	r3, #0
 8006924:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006926:	f107 0308 	add.w	r3, r7, #8
 800692a:	461a      	mov	r2, r3
 800692c:	2100      	movs	r1, #0
 800692e:	6938      	ldr	r0, [r7, #16]
 8006930:	f001 f962 	bl	8007bf8 <xQueueReceiveFromISR>
 8006934:	4603      	mov	r3, r0
 8006936:	2b01      	cmp	r3, #1
 8006938:	d003      	beq.n	8006942 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800693a:	f06f 0302 	mvn.w	r3, #2
 800693e:	617b      	str	r3, [r7, #20]
 8006940:	e01c      	b.n	800697c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d019      	beq.n	800697c <osSemaphoreAcquire+0x94>
 8006948:	4b0f      	ldr	r3, [pc, #60]	; (8006988 <osSemaphoreAcquire+0xa0>)
 800694a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800694e:	601a      	str	r2, [r3, #0]
 8006950:	f3bf 8f4f 	dsb	sy
 8006954:	f3bf 8f6f 	isb	sy
 8006958:	e010      	b.n	800697c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800695a:	6839      	ldr	r1, [r7, #0]
 800695c:	6938      	ldr	r0, [r7, #16]
 800695e:	f001 f83f 	bl	80079e0 <xQueueSemaphoreTake>
 8006962:	4603      	mov	r3, r0
 8006964:	2b01      	cmp	r3, #1
 8006966:	d009      	beq.n	800697c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d003      	beq.n	8006976 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800696e:	f06f 0301 	mvn.w	r3, #1
 8006972:	617b      	str	r3, [r7, #20]
 8006974:	e002      	b.n	800697c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8006976:	f06f 0302 	mvn.w	r3, #2
 800697a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800697c:	697b      	ldr	r3, [r7, #20]
}
 800697e:	4618      	mov	r0, r3
 8006980:	3718      	adds	r7, #24
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	e000ed04 	.word	0xe000ed04

0800698c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800698c:	b580      	push	{r7, lr}
 800698e:	b086      	sub	sp, #24
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006998:	2300      	movs	r3, #0
 800699a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d103      	bne.n	80069aa <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80069a2:	f06f 0303 	mvn.w	r3, #3
 80069a6:	617b      	str	r3, [r7, #20]
 80069a8:	e02c      	b.n	8006a04 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069aa:	f3ef 8305 	mrs	r3, IPSR
 80069ae:	60fb      	str	r3, [r7, #12]
  return(result);
 80069b0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d01a      	beq.n	80069ec <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80069b6:	2300      	movs	r3, #0
 80069b8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80069ba:	f107 0308 	add.w	r3, r7, #8
 80069be:	4619      	mov	r1, r3
 80069c0:	6938      	ldr	r0, [r7, #16]
 80069c2:	f000 fea0 	bl	8007706 <xQueueGiveFromISR>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d003      	beq.n	80069d4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80069cc:	f06f 0302 	mvn.w	r3, #2
 80069d0:	617b      	str	r3, [r7, #20]
 80069d2:	e017      	b.n	8006a04 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d014      	beq.n	8006a04 <osSemaphoreRelease+0x78>
 80069da:	4b0d      	ldr	r3, [pc, #52]	; (8006a10 <osSemaphoreRelease+0x84>)
 80069dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069e0:	601a      	str	r2, [r3, #0]
 80069e2:	f3bf 8f4f 	dsb	sy
 80069e6:	f3bf 8f6f 	isb	sy
 80069ea:	e00b      	b.n	8006a04 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80069ec:	2300      	movs	r3, #0
 80069ee:	2200      	movs	r2, #0
 80069f0:	2100      	movs	r1, #0
 80069f2:	6938      	ldr	r0, [r7, #16]
 80069f4:	f000 fcee 	bl	80073d4 <xQueueGenericSend>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d002      	beq.n	8006a04 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80069fe:	f06f 0302 	mvn.w	r3, #2
 8006a02:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006a04:	697b      	ldr	r3, [r7, #20]
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3718      	adds	r7, #24
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	e000ed04 	.word	0xe000ed04

08006a14 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b086      	sub	sp, #24
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a20:	f3ef 8305 	mrs	r3, IPSR
 8006a24:	60fb      	str	r3, [r7, #12]
  return(result);
 8006a26:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d003      	beq.n	8006a34 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8006a2c:	f06f 0305 	mvn.w	r3, #5
 8006a30:	617b      	str	r3, [r7, #20]
 8006a32:	e00e      	b.n	8006a52 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d103      	bne.n	8006a42 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8006a3a:	f06f 0303 	mvn.w	r3, #3
 8006a3e:	617b      	str	r3, [r7, #20]
 8006a40:	e007      	b.n	8006a52 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8006a42:	6938      	ldr	r0, [r7, #16]
 8006a44:	f001 fb0a 	bl	800805c <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8006a4c:	6938      	ldr	r0, [r7, #16]
 8006a4e:	f001 f98f 	bl	8007d70 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8006a52:	697b      	ldr	r3, [r7, #20]
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3718      	adds	r7, #24
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b08a      	sub	sp, #40	; 0x28
 8006a60:	af02      	add	r7, sp, #8
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a6c:	f3ef 8305 	mrs	r3, IPSR
 8006a70:	613b      	str	r3, [r7, #16]
  return(result);
 8006a72:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d15f      	bne.n	8006b38 <osMessageQueueNew+0xdc>
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d05c      	beq.n	8006b38 <osMessageQueueNew+0xdc>
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d059      	beq.n	8006b38 <osMessageQueueNew+0xdc>
    mem = -1;
 8006a84:	f04f 33ff 	mov.w	r3, #4294967295
 8006a88:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d029      	beq.n	8006ae4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d012      	beq.n	8006abe <osMessageQueueNew+0x62>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	2b4f      	cmp	r3, #79	; 0x4f
 8006a9e:	d90e      	bls.n	8006abe <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00a      	beq.n	8006abe <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	695a      	ldr	r2, [r3, #20]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	68b9      	ldr	r1, [r7, #8]
 8006ab0:	fb01 f303 	mul.w	r3, r1, r3
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d302      	bcc.n	8006abe <osMessageQueueNew+0x62>
        mem = 1;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	61bb      	str	r3, [r7, #24]
 8006abc:	e014      	b.n	8006ae8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d110      	bne.n	8006ae8 <osMessageQueueNew+0x8c>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d10c      	bne.n	8006ae8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d108      	bne.n	8006ae8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	695b      	ldr	r3, [r3, #20]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d104      	bne.n	8006ae8 <osMessageQueueNew+0x8c>
          mem = 0;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	61bb      	str	r3, [r7, #24]
 8006ae2:	e001      	b.n	8006ae8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006ae8:	69bb      	ldr	r3, [r7, #24]
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d10b      	bne.n	8006b06 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	691a      	ldr	r2, [r3, #16]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	2100      	movs	r1, #0
 8006af8:	9100      	str	r1, [sp, #0]
 8006afa:	68b9      	ldr	r1, [r7, #8]
 8006afc:	68f8      	ldr	r0, [r7, #12]
 8006afe:	f000 fa73 	bl	8006fe8 <xQueueGenericCreateStatic>
 8006b02:	61f8      	str	r0, [r7, #28]
 8006b04:	e008      	b.n	8006b18 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d105      	bne.n	8006b18 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	68b9      	ldr	r1, [r7, #8]
 8006b10:	68f8      	ldr	r0, [r7, #12]
 8006b12:	f000 fae1 	bl	80070d8 <xQueueGenericCreate>
 8006b16:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d00c      	beq.n	8006b38 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d003      	beq.n	8006b2c <osMessageQueueNew+0xd0>
        name = attr->name;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	617b      	str	r3, [r7, #20]
 8006b2a:	e001      	b.n	8006b30 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006b30:	6979      	ldr	r1, [r7, #20]
 8006b32:	69f8      	ldr	r0, [r7, #28]
 8006b34:	f001 fa68 	bl	8008008 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006b38:	69fb      	ldr	r3, [r7, #28]
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3720      	adds	r7, #32
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
	...

08006b44 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b088      	sub	sp, #32
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	60f8      	str	r0, [r7, #12]
 8006b4c:	60b9      	str	r1, [r7, #8]
 8006b4e:	603b      	str	r3, [r7, #0]
 8006b50:	4613      	mov	r3, r2
 8006b52:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b5c:	f3ef 8305 	mrs	r3, IPSR
 8006b60:	617b      	str	r3, [r7, #20]
  return(result);
 8006b62:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d028      	beq.n	8006bba <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d005      	beq.n	8006b7a <osMessageQueuePut+0x36>
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d002      	beq.n	8006b7a <osMessageQueuePut+0x36>
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d003      	beq.n	8006b82 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8006b7a:	f06f 0303 	mvn.w	r3, #3
 8006b7e:	61fb      	str	r3, [r7, #28]
 8006b80:	e038      	b.n	8006bf4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8006b82:	2300      	movs	r3, #0
 8006b84:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006b86:	f107 0210 	add.w	r2, r7, #16
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	68b9      	ldr	r1, [r7, #8]
 8006b8e:	69b8      	ldr	r0, [r7, #24]
 8006b90:	f000 fd1e 	bl	80075d0 <xQueueGenericSendFromISR>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d003      	beq.n	8006ba2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8006b9a:	f06f 0302 	mvn.w	r3, #2
 8006b9e:	61fb      	str	r3, [r7, #28]
 8006ba0:	e028      	b.n	8006bf4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d025      	beq.n	8006bf4 <osMessageQueuePut+0xb0>
 8006ba8:	4b15      	ldr	r3, [pc, #84]	; (8006c00 <osMessageQueuePut+0xbc>)
 8006baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bae:	601a      	str	r2, [r3, #0]
 8006bb0:	f3bf 8f4f 	dsb	sy
 8006bb4:	f3bf 8f6f 	isb	sy
 8006bb8:	e01c      	b.n	8006bf4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d002      	beq.n	8006bc6 <osMessageQueuePut+0x82>
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d103      	bne.n	8006bce <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8006bc6:	f06f 0303 	mvn.w	r3, #3
 8006bca:	61fb      	str	r3, [r7, #28]
 8006bcc:	e012      	b.n	8006bf4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006bce:	2300      	movs	r3, #0
 8006bd0:	683a      	ldr	r2, [r7, #0]
 8006bd2:	68b9      	ldr	r1, [r7, #8]
 8006bd4:	69b8      	ldr	r0, [r7, #24]
 8006bd6:	f000 fbfd 	bl	80073d4 <xQueueGenericSend>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d009      	beq.n	8006bf4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d003      	beq.n	8006bee <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8006be6:	f06f 0301 	mvn.w	r3, #1
 8006bea:	61fb      	str	r3, [r7, #28]
 8006bec:	e002      	b.n	8006bf4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8006bee:	f06f 0302 	mvn.w	r3, #2
 8006bf2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006bf4:	69fb      	ldr	r3, [r7, #28]
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3720      	adds	r7, #32
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	e000ed04 	.word	0xe000ed04

08006c04 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b088      	sub	sp, #32
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	60b9      	str	r1, [r7, #8]
 8006c0e:	607a      	str	r2, [r7, #4]
 8006c10:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006c16:	2300      	movs	r3, #0
 8006c18:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c1a:	f3ef 8305 	mrs	r3, IPSR
 8006c1e:	617b      	str	r3, [r7, #20]
  return(result);
 8006c20:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d028      	beq.n	8006c78 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d005      	beq.n	8006c38 <osMessageQueueGet+0x34>
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d002      	beq.n	8006c38 <osMessageQueueGet+0x34>
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d003      	beq.n	8006c40 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006c38:	f06f 0303 	mvn.w	r3, #3
 8006c3c:	61fb      	str	r3, [r7, #28]
 8006c3e:	e037      	b.n	8006cb0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006c40:	2300      	movs	r3, #0
 8006c42:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006c44:	f107 0310 	add.w	r3, r7, #16
 8006c48:	461a      	mov	r2, r3
 8006c4a:	68b9      	ldr	r1, [r7, #8]
 8006c4c:	69b8      	ldr	r0, [r7, #24]
 8006c4e:	f000 ffd3 	bl	8007bf8 <xQueueReceiveFromISR>
 8006c52:	4603      	mov	r3, r0
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d003      	beq.n	8006c60 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8006c58:	f06f 0302 	mvn.w	r3, #2
 8006c5c:	61fb      	str	r3, [r7, #28]
 8006c5e:	e027      	b.n	8006cb0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d024      	beq.n	8006cb0 <osMessageQueueGet+0xac>
 8006c66:	4b15      	ldr	r3, [pc, #84]	; (8006cbc <osMessageQueueGet+0xb8>)
 8006c68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c6c:	601a      	str	r2, [r3, #0]
 8006c6e:	f3bf 8f4f 	dsb	sy
 8006c72:	f3bf 8f6f 	isb	sy
 8006c76:	e01b      	b.n	8006cb0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006c78:	69bb      	ldr	r3, [r7, #24]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d002      	beq.n	8006c84 <osMessageQueueGet+0x80>
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d103      	bne.n	8006c8c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8006c84:	f06f 0303 	mvn.w	r3, #3
 8006c88:	61fb      	str	r3, [r7, #28]
 8006c8a:	e011      	b.n	8006cb0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006c8c:	683a      	ldr	r2, [r7, #0]
 8006c8e:	68b9      	ldr	r1, [r7, #8]
 8006c90:	69b8      	ldr	r0, [r7, #24]
 8006c92:	f000 fdc5 	bl	8007820 <xQueueReceive>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d009      	beq.n	8006cb0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d003      	beq.n	8006caa <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8006ca2:	f06f 0301 	mvn.w	r3, #1
 8006ca6:	61fb      	str	r3, [r7, #28]
 8006ca8:	e002      	b.n	8006cb0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8006caa:	f06f 0302 	mvn.w	r3, #2
 8006cae:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006cb0:	69fb      	ldr	r3, [r7, #28]
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3720      	adds	r7, #32
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	e000ed04 	.word	0xe000ed04

08006cc0 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b086      	sub	sp, #24
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d102      	bne.n	8006cd8 <osMessageQueueGetCount+0x18>
    count = 0U;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	617b      	str	r3, [r7, #20]
 8006cd6:	e00e      	b.n	8006cf6 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006cd8:	f3ef 8305 	mrs	r3, IPSR
 8006cdc:	60fb      	str	r3, [r7, #12]
  return(result);
 8006cde:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d004      	beq.n	8006cee <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8006ce4:	6938      	ldr	r0, [r7, #16]
 8006ce6:	f001 f825 	bl	8007d34 <uxQueueMessagesWaitingFromISR>
 8006cea:	6178      	str	r0, [r7, #20]
 8006cec:	e003      	b.n	8006cf6 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8006cee:	6938      	ldr	r0, [r7, #16]
 8006cf0:	f001 f802 	bl	8007cf8 <uxQueueMessagesWaiting>
 8006cf4:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8006cf6:	697b      	ldr	r3, [r7, #20]
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3718      	adds	r7, #24
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b086      	sub	sp, #24
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d0c:	f3ef 8305 	mrs	r3, IPSR
 8006d10:	60fb      	str	r3, [r7, #12]
  return(result);
 8006d12:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d003      	beq.n	8006d20 <osMessageQueueDelete+0x20>
    stat = osErrorISR;
 8006d18:	f06f 0305 	mvn.w	r3, #5
 8006d1c:	617b      	str	r3, [r7, #20]
 8006d1e:	e00e      	b.n	8006d3e <osMessageQueueDelete+0x3e>
  }
  else if (hQueue == NULL) {
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d103      	bne.n	8006d2e <osMessageQueueDelete+0x2e>
    stat = osErrorParameter;
 8006d26:	f06f 0303 	mvn.w	r3, #3
 8006d2a:	617b      	str	r3, [r7, #20]
 8006d2c:	e007      	b.n	8006d3e <osMessageQueueDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 8006d2e:	6938      	ldr	r0, [r7, #16]
 8006d30:	f001 f994 	bl	800805c <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8006d34:	2300      	movs	r3, #0
 8006d36:	617b      	str	r3, [r7, #20]
    vQueueDelete (hQueue);
 8006d38:	6938      	ldr	r0, [r7, #16]
 8006d3a:	f001 f819 	bl	8007d70 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8006d3e:	697b      	ldr	r3, [r7, #20]
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3718      	adds	r7, #24
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006d48:	b480      	push	{r7}
 8006d4a:	b085      	sub	sp, #20
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	60b9      	str	r1, [r7, #8]
 8006d52:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	4a07      	ldr	r2, [pc, #28]	; (8006d74 <vApplicationGetIdleTaskMemory+0x2c>)
 8006d58:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	4a06      	ldr	r2, [pc, #24]	; (8006d78 <vApplicationGetIdleTaskMemory+0x30>)
 8006d5e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d66:	601a      	str	r2, [r3, #0]
}
 8006d68:	bf00      	nop
 8006d6a:	3714      	adds	r7, #20
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr
 8006d74:	2000002c 	.word	0x2000002c
 8006d78:	200000e8 	.word	0x200000e8

08006d7c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006d7c:	b480      	push	{r7}
 8006d7e:	b085      	sub	sp, #20
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	4a07      	ldr	r2, [pc, #28]	; (8006da8 <vApplicationGetTimerTaskMemory+0x2c>)
 8006d8c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	4a06      	ldr	r2, [pc, #24]	; (8006dac <vApplicationGetTimerTaskMemory+0x30>)
 8006d92:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d9a:	601a      	str	r2, [r3, #0]
}
 8006d9c:	bf00      	nop
 8006d9e:	3714      	adds	r7, #20
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr
 8006da8:	200004e8 	.word	0x200004e8
 8006dac:	200005a4 	.word	0x200005a4

08006db0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f103 0208 	add.w	r2, r3, #8
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8006dc8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f103 0208 	add.w	r2, r3, #8
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f103 0208 	add.w	r2, r3, #8
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006de4:	bf00      	nop
 8006de6:	370c      	adds	r7, #12
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006df0:	b480      	push	{r7}
 8006df2:	b083      	sub	sp, #12
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006dfe:	bf00      	nop
 8006e00:	370c      	adds	r7, #12
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr

08006e0a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006e0a:	b480      	push	{r7}
 8006e0c:	b085      	sub	sp, #20
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
 8006e12:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	68fa      	ldr	r2, [r7, #12]
 8006e1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	689a      	ldr	r2, [r3, #8]
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	683a      	ldr	r2, [r7, #0]
 8006e2e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	683a      	ldr	r2, [r7, #0]
 8006e34:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	1c5a      	adds	r2, r3, #1
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	601a      	str	r2, [r3, #0]
}
 8006e46:	bf00      	nop
 8006e48:	3714      	adds	r7, #20
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr

08006e52 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006e52:	b480      	push	{r7}
 8006e54:	b085      	sub	sp, #20
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
 8006e5a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e68:	d103      	bne.n	8006e72 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	691b      	ldr	r3, [r3, #16]
 8006e6e:	60fb      	str	r3, [r7, #12]
 8006e70:	e00c      	b.n	8006e8c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	3308      	adds	r3, #8
 8006e76:	60fb      	str	r3, [r7, #12]
 8006e78:	e002      	b.n	8006e80 <vListInsert+0x2e>
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	60fb      	str	r3, [r7, #12]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	68ba      	ldr	r2, [r7, #8]
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d2f6      	bcs.n	8006e7a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	685a      	ldr	r2, [r3, #4]
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	683a      	ldr	r2, [r7, #0]
 8006e9a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	68fa      	ldr	r2, [r7, #12]
 8006ea0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	683a      	ldr	r2, [r7, #0]
 8006ea6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	1c5a      	adds	r2, r3, #1
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	601a      	str	r2, [r3, #0]
}
 8006eb8:	bf00      	nop
 8006eba:	3714      	adds	r7, #20
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b085      	sub	sp, #20
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	6892      	ldr	r2, [r2, #8]
 8006eda:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	6852      	ldr	r2, [r2, #4]
 8006ee4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d103      	bne.n	8006ef8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	689a      	ldr	r2, [r3, #8]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	1e5a      	subs	r2, r3, #1
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3714      	adds	r7, #20
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d10a      	bne.n	8006f42 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f30:	f383 8811 	msr	BASEPRI, r3
 8006f34:	f3bf 8f6f 	isb	sy
 8006f38:	f3bf 8f4f 	dsb	sy
 8006f3c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006f3e:	bf00      	nop
 8006f40:	e7fe      	b.n	8006f40 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006f42:	f002 fe2f 	bl	8009ba4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f4e:	68f9      	ldr	r1, [r7, #12]
 8006f50:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006f52:	fb01 f303 	mul.w	r3, r1, r3
 8006f56:	441a      	add	r2, r3
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f72:	3b01      	subs	r3, #1
 8006f74:	68f9      	ldr	r1, [r7, #12]
 8006f76:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006f78:	fb01 f303 	mul.w	r3, r1, r3
 8006f7c:	441a      	add	r2, r3
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	22ff      	movs	r2, #255	; 0xff
 8006f86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	22ff      	movs	r2, #255	; 0xff
 8006f8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d114      	bne.n	8006fc2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	691b      	ldr	r3, [r3, #16]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d01a      	beq.n	8006fd6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	3310      	adds	r3, #16
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f001 fdd1 	bl	8008b4c <xTaskRemoveFromEventList>
 8006faa:	4603      	mov	r3, r0
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d012      	beq.n	8006fd6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006fb0:	4b0c      	ldr	r3, [pc, #48]	; (8006fe4 <xQueueGenericReset+0xcc>)
 8006fb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fb6:	601a      	str	r2, [r3, #0]
 8006fb8:	f3bf 8f4f 	dsb	sy
 8006fbc:	f3bf 8f6f 	isb	sy
 8006fc0:	e009      	b.n	8006fd6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	3310      	adds	r3, #16
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f7ff fef2 	bl	8006db0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	3324      	adds	r3, #36	; 0x24
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f7ff feed 	bl	8006db0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006fd6:	f002 fe15 	bl	8009c04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006fda:	2301      	movs	r3, #1
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3710      	adds	r7, #16
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}
 8006fe4:	e000ed04 	.word	0xe000ed04

08006fe8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b08e      	sub	sp, #56	; 0x38
 8006fec:	af02      	add	r7, sp, #8
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	607a      	str	r2, [r7, #4]
 8006ff4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d10a      	bne.n	8007012 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007000:	f383 8811 	msr	BASEPRI, r3
 8007004:	f3bf 8f6f 	isb	sy
 8007008:	f3bf 8f4f 	dsb	sy
 800700c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800700e:	bf00      	nop
 8007010:	e7fe      	b.n	8007010 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d10a      	bne.n	800702e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800701c:	f383 8811 	msr	BASEPRI, r3
 8007020:	f3bf 8f6f 	isb	sy
 8007024:	f3bf 8f4f 	dsb	sy
 8007028:	627b      	str	r3, [r7, #36]	; 0x24
}
 800702a:	bf00      	nop
 800702c:	e7fe      	b.n	800702c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d002      	beq.n	800703a <xQueueGenericCreateStatic+0x52>
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d001      	beq.n	800703e <xQueueGenericCreateStatic+0x56>
 800703a:	2301      	movs	r3, #1
 800703c:	e000      	b.n	8007040 <xQueueGenericCreateStatic+0x58>
 800703e:	2300      	movs	r3, #0
 8007040:	2b00      	cmp	r3, #0
 8007042:	d10a      	bne.n	800705a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007048:	f383 8811 	msr	BASEPRI, r3
 800704c:	f3bf 8f6f 	isb	sy
 8007050:	f3bf 8f4f 	dsb	sy
 8007054:	623b      	str	r3, [r7, #32]
}
 8007056:	bf00      	nop
 8007058:	e7fe      	b.n	8007058 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d102      	bne.n	8007066 <xQueueGenericCreateStatic+0x7e>
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d101      	bne.n	800706a <xQueueGenericCreateStatic+0x82>
 8007066:	2301      	movs	r3, #1
 8007068:	e000      	b.n	800706c <xQueueGenericCreateStatic+0x84>
 800706a:	2300      	movs	r3, #0
 800706c:	2b00      	cmp	r3, #0
 800706e:	d10a      	bne.n	8007086 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007074:	f383 8811 	msr	BASEPRI, r3
 8007078:	f3bf 8f6f 	isb	sy
 800707c:	f3bf 8f4f 	dsb	sy
 8007080:	61fb      	str	r3, [r7, #28]
}
 8007082:	bf00      	nop
 8007084:	e7fe      	b.n	8007084 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007086:	2350      	movs	r3, #80	; 0x50
 8007088:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	2b50      	cmp	r3, #80	; 0x50
 800708e:	d00a      	beq.n	80070a6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007094:	f383 8811 	msr	BASEPRI, r3
 8007098:	f3bf 8f6f 	isb	sy
 800709c:	f3bf 8f4f 	dsb	sy
 80070a0:	61bb      	str	r3, [r7, #24]
}
 80070a2:	bf00      	nop
 80070a4:	e7fe      	b.n	80070a4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80070a6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80070ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00d      	beq.n	80070ce <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80070b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b4:	2201      	movs	r2, #1
 80070b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80070ba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80070be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c0:	9300      	str	r3, [sp, #0]
 80070c2:	4613      	mov	r3, r2
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	68b9      	ldr	r1, [r7, #8]
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f000 f83f 	bl	800714c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80070ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3730      	adds	r7, #48	; 0x30
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b08a      	sub	sp, #40	; 0x28
 80070dc:	af02      	add	r7, sp, #8
 80070de:	60f8      	str	r0, [r7, #12]
 80070e0:	60b9      	str	r1, [r7, #8]
 80070e2:	4613      	mov	r3, r2
 80070e4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d10a      	bne.n	8007102 <xQueueGenericCreate+0x2a>
	__asm volatile
 80070ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f0:	f383 8811 	msr	BASEPRI, r3
 80070f4:	f3bf 8f6f 	isb	sy
 80070f8:	f3bf 8f4f 	dsb	sy
 80070fc:	613b      	str	r3, [r7, #16]
}
 80070fe:	bf00      	nop
 8007100:	e7fe      	b.n	8007100 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	68ba      	ldr	r2, [r7, #8]
 8007106:	fb02 f303 	mul.w	r3, r2, r3
 800710a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800710c:	69fb      	ldr	r3, [r7, #28]
 800710e:	3350      	adds	r3, #80	; 0x50
 8007110:	4618      	mov	r0, r3
 8007112:	f002 fe69 	bl	8009de8 <pvPortMalloc>
 8007116:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007118:	69bb      	ldr	r3, [r7, #24]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d011      	beq.n	8007142 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	3350      	adds	r3, #80	; 0x50
 8007126:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007128:	69bb      	ldr	r3, [r7, #24]
 800712a:	2200      	movs	r2, #0
 800712c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007130:	79fa      	ldrb	r2, [r7, #7]
 8007132:	69bb      	ldr	r3, [r7, #24]
 8007134:	9300      	str	r3, [sp, #0]
 8007136:	4613      	mov	r3, r2
 8007138:	697a      	ldr	r2, [r7, #20]
 800713a:	68b9      	ldr	r1, [r7, #8]
 800713c:	68f8      	ldr	r0, [r7, #12]
 800713e:	f000 f805 	bl	800714c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007142:	69bb      	ldr	r3, [r7, #24]
	}
 8007144:	4618      	mov	r0, r3
 8007146:	3720      	adds	r7, #32
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	607a      	str	r2, [r7, #4]
 8007158:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d103      	bne.n	8007168 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007160:	69bb      	ldr	r3, [r7, #24]
 8007162:	69ba      	ldr	r2, [r7, #24]
 8007164:	601a      	str	r2, [r3, #0]
 8007166:	e002      	b.n	800716e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007168:	69bb      	ldr	r3, [r7, #24]
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800716e:	69bb      	ldr	r3, [r7, #24]
 8007170:	68fa      	ldr	r2, [r7, #12]
 8007172:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007174:	69bb      	ldr	r3, [r7, #24]
 8007176:	68ba      	ldr	r2, [r7, #8]
 8007178:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800717a:	2101      	movs	r1, #1
 800717c:	69b8      	ldr	r0, [r7, #24]
 800717e:	f7ff fecb 	bl	8006f18 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007182:	69bb      	ldr	r3, [r7, #24]
 8007184:	78fa      	ldrb	r2, [r7, #3]
 8007186:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800718a:	bf00      	nop
 800718c:	3710      	adds	r7, #16
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}

08007192 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007192:	b580      	push	{r7, lr}
 8007194:	b082      	sub	sp, #8
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d00e      	beq.n	80071be <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80071b2:	2300      	movs	r3, #0
 80071b4:	2200      	movs	r2, #0
 80071b6:	2100      	movs	r1, #0
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 f90b 	bl	80073d4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80071be:	bf00      	nop
 80071c0:	3708      	adds	r7, #8
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}

080071c6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80071c6:	b580      	push	{r7, lr}
 80071c8:	b086      	sub	sp, #24
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	4603      	mov	r3, r0
 80071ce:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80071d0:	2301      	movs	r3, #1
 80071d2:	617b      	str	r3, [r7, #20]
 80071d4:	2300      	movs	r3, #0
 80071d6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80071d8:	79fb      	ldrb	r3, [r7, #7]
 80071da:	461a      	mov	r2, r3
 80071dc:	6939      	ldr	r1, [r7, #16]
 80071de:	6978      	ldr	r0, [r7, #20]
 80071e0:	f7ff ff7a 	bl	80070d8 <xQueueGenericCreate>
 80071e4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80071e6:	68f8      	ldr	r0, [r7, #12]
 80071e8:	f7ff ffd3 	bl	8007192 <prvInitialiseMutex>

		return xNewQueue;
 80071ec:	68fb      	ldr	r3, [r7, #12]
	}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3718      	adds	r7, #24
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}

080071f6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80071f6:	b580      	push	{r7, lr}
 80071f8:	b088      	sub	sp, #32
 80071fa:	af02      	add	r7, sp, #8
 80071fc:	4603      	mov	r3, r0
 80071fe:	6039      	str	r1, [r7, #0]
 8007200:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007202:	2301      	movs	r3, #1
 8007204:	617b      	str	r3, [r7, #20]
 8007206:	2300      	movs	r3, #0
 8007208:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800720a:	79fb      	ldrb	r3, [r7, #7]
 800720c:	9300      	str	r3, [sp, #0]
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	2200      	movs	r2, #0
 8007212:	6939      	ldr	r1, [r7, #16]
 8007214:	6978      	ldr	r0, [r7, #20]
 8007216:	f7ff fee7 	bl	8006fe8 <xQueueGenericCreateStatic>
 800721a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800721c:	68f8      	ldr	r0, [r7, #12]
 800721e:	f7ff ffb8 	bl	8007192 <prvInitialiseMutex>

		return xNewQueue;
 8007222:	68fb      	ldr	r3, [r7, #12]
	}
 8007224:	4618      	mov	r0, r3
 8007226:	3718      	adds	r7, #24
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800722c:	b590      	push	{r4, r7, lr}
 800722e:	b087      	sub	sp, #28
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d10a      	bne.n	8007254 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800723e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007242:	f383 8811 	msr	BASEPRI, r3
 8007246:	f3bf 8f6f 	isb	sy
 800724a:	f3bf 8f4f 	dsb	sy
 800724e:	60fb      	str	r3, [r7, #12]
}
 8007250:	bf00      	nop
 8007252:	e7fe      	b.n	8007252 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	689c      	ldr	r4, [r3, #8]
 8007258:	f001 fe3a 	bl	8008ed0 <xTaskGetCurrentTaskHandle>
 800725c:	4603      	mov	r3, r0
 800725e:	429c      	cmp	r4, r3
 8007260:	d111      	bne.n	8007286 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	1e5a      	subs	r2, r3, #1
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d105      	bne.n	8007280 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007274:	2300      	movs	r3, #0
 8007276:	2200      	movs	r2, #0
 8007278:	2100      	movs	r1, #0
 800727a:	6938      	ldr	r0, [r7, #16]
 800727c:	f000 f8aa 	bl	80073d4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007280:	2301      	movs	r3, #1
 8007282:	617b      	str	r3, [r7, #20]
 8007284:	e001      	b.n	800728a <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8007286:	2300      	movs	r3, #0
 8007288:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800728a:	697b      	ldr	r3, [r7, #20]
	}
 800728c:	4618      	mov	r0, r3
 800728e:	371c      	adds	r7, #28
 8007290:	46bd      	mov	sp, r7
 8007292:	bd90      	pop	{r4, r7, pc}

08007294 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8007294:	b590      	push	{r4, r7, lr}
 8007296:	b087      	sub	sp, #28
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d10a      	bne.n	80072be <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 80072a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ac:	f383 8811 	msr	BASEPRI, r3
 80072b0:	f3bf 8f6f 	isb	sy
 80072b4:	f3bf 8f4f 	dsb	sy
 80072b8:	60fb      	str	r3, [r7, #12]
}
 80072ba:	bf00      	nop
 80072bc:	e7fe      	b.n	80072bc <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	689c      	ldr	r4, [r3, #8]
 80072c2:	f001 fe05 	bl	8008ed0 <xTaskGetCurrentTaskHandle>
 80072c6:	4603      	mov	r3, r0
 80072c8:	429c      	cmp	r4, r3
 80072ca:	d107      	bne.n	80072dc <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	1c5a      	adds	r2, r3, #1
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80072d6:	2301      	movs	r3, #1
 80072d8:	617b      	str	r3, [r7, #20]
 80072da:	e00c      	b.n	80072f6 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80072dc:	6839      	ldr	r1, [r7, #0]
 80072de:	6938      	ldr	r0, [r7, #16]
 80072e0:	f000 fb7e 	bl	80079e0 <xQueueSemaphoreTake>
 80072e4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d004      	beq.n	80072f6 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	1c5a      	adds	r2, r3, #1
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80072f6:	697b      	ldr	r3, [r7, #20]
	}
 80072f8:	4618      	mov	r0, r3
 80072fa:	371c      	adds	r7, #28
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd90      	pop	{r4, r7, pc}

08007300 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007300:	b580      	push	{r7, lr}
 8007302:	b08a      	sub	sp, #40	; 0x28
 8007304:	af02      	add	r7, sp, #8
 8007306:	60f8      	str	r0, [r7, #12]
 8007308:	60b9      	str	r1, [r7, #8]
 800730a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d10a      	bne.n	8007328 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8007312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007316:	f383 8811 	msr	BASEPRI, r3
 800731a:	f3bf 8f6f 	isb	sy
 800731e:	f3bf 8f4f 	dsb	sy
 8007322:	61bb      	str	r3, [r7, #24]
}
 8007324:	bf00      	nop
 8007326:	e7fe      	b.n	8007326 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007328:	68ba      	ldr	r2, [r7, #8]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	429a      	cmp	r2, r3
 800732e:	d90a      	bls.n	8007346 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8007330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007334:	f383 8811 	msr	BASEPRI, r3
 8007338:	f3bf 8f6f 	isb	sy
 800733c:	f3bf 8f4f 	dsb	sy
 8007340:	617b      	str	r3, [r7, #20]
}
 8007342:	bf00      	nop
 8007344:	e7fe      	b.n	8007344 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007346:	2302      	movs	r3, #2
 8007348:	9300      	str	r3, [sp, #0]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	2100      	movs	r1, #0
 8007350:	68f8      	ldr	r0, [r7, #12]
 8007352:	f7ff fe49 	bl	8006fe8 <xQueueGenericCreateStatic>
 8007356:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d002      	beq.n	8007364 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800735e:	69fb      	ldr	r3, [r7, #28]
 8007360:	68ba      	ldr	r2, [r7, #8]
 8007362:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007364:	69fb      	ldr	r3, [r7, #28]
	}
 8007366:	4618      	mov	r0, r3
 8007368:	3720      	adds	r7, #32
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800736e:	b580      	push	{r7, lr}
 8007370:	b086      	sub	sp, #24
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
 8007376:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d10a      	bne.n	8007394 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800737e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007382:	f383 8811 	msr	BASEPRI, r3
 8007386:	f3bf 8f6f 	isb	sy
 800738a:	f3bf 8f4f 	dsb	sy
 800738e:	613b      	str	r3, [r7, #16]
}
 8007390:	bf00      	nop
 8007392:	e7fe      	b.n	8007392 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007394:	683a      	ldr	r2, [r7, #0]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	429a      	cmp	r2, r3
 800739a:	d90a      	bls.n	80073b2 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800739c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a0:	f383 8811 	msr	BASEPRI, r3
 80073a4:	f3bf 8f6f 	isb	sy
 80073a8:	f3bf 8f4f 	dsb	sy
 80073ac:	60fb      	str	r3, [r7, #12]
}
 80073ae:	bf00      	nop
 80073b0:	e7fe      	b.n	80073b0 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80073b2:	2202      	movs	r2, #2
 80073b4:	2100      	movs	r1, #0
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f7ff fe8e 	bl	80070d8 <xQueueGenericCreate>
 80073bc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d002      	beq.n	80073ca <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	683a      	ldr	r2, [r7, #0]
 80073c8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80073ca:	697b      	ldr	r3, [r7, #20]
	}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3718      	adds	r7, #24
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b08e      	sub	sp, #56	; 0x38
 80073d8:	af00      	add	r7, sp, #0
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	60b9      	str	r1, [r7, #8]
 80073de:	607a      	str	r2, [r7, #4]
 80073e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80073e2:	2300      	movs	r3, #0
 80073e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80073ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d10a      	bne.n	8007406 <xQueueGenericSend+0x32>
	__asm volatile
 80073f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f4:	f383 8811 	msr	BASEPRI, r3
 80073f8:	f3bf 8f6f 	isb	sy
 80073fc:	f3bf 8f4f 	dsb	sy
 8007400:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007402:	bf00      	nop
 8007404:	e7fe      	b.n	8007404 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d103      	bne.n	8007414 <xQueueGenericSend+0x40>
 800740c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007410:	2b00      	cmp	r3, #0
 8007412:	d101      	bne.n	8007418 <xQueueGenericSend+0x44>
 8007414:	2301      	movs	r3, #1
 8007416:	e000      	b.n	800741a <xQueueGenericSend+0x46>
 8007418:	2300      	movs	r3, #0
 800741a:	2b00      	cmp	r3, #0
 800741c:	d10a      	bne.n	8007434 <xQueueGenericSend+0x60>
	__asm volatile
 800741e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007422:	f383 8811 	msr	BASEPRI, r3
 8007426:	f3bf 8f6f 	isb	sy
 800742a:	f3bf 8f4f 	dsb	sy
 800742e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007430:	bf00      	nop
 8007432:	e7fe      	b.n	8007432 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	2b02      	cmp	r3, #2
 8007438:	d103      	bne.n	8007442 <xQueueGenericSend+0x6e>
 800743a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800743e:	2b01      	cmp	r3, #1
 8007440:	d101      	bne.n	8007446 <xQueueGenericSend+0x72>
 8007442:	2301      	movs	r3, #1
 8007444:	e000      	b.n	8007448 <xQueueGenericSend+0x74>
 8007446:	2300      	movs	r3, #0
 8007448:	2b00      	cmp	r3, #0
 800744a:	d10a      	bne.n	8007462 <xQueueGenericSend+0x8e>
	__asm volatile
 800744c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007450:	f383 8811 	msr	BASEPRI, r3
 8007454:	f3bf 8f6f 	isb	sy
 8007458:	f3bf 8f4f 	dsb	sy
 800745c:	623b      	str	r3, [r7, #32]
}
 800745e:	bf00      	nop
 8007460:	e7fe      	b.n	8007460 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007462:	f001 fd45 	bl	8008ef0 <xTaskGetSchedulerState>
 8007466:	4603      	mov	r3, r0
 8007468:	2b00      	cmp	r3, #0
 800746a:	d102      	bne.n	8007472 <xQueueGenericSend+0x9e>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d101      	bne.n	8007476 <xQueueGenericSend+0xa2>
 8007472:	2301      	movs	r3, #1
 8007474:	e000      	b.n	8007478 <xQueueGenericSend+0xa4>
 8007476:	2300      	movs	r3, #0
 8007478:	2b00      	cmp	r3, #0
 800747a:	d10a      	bne.n	8007492 <xQueueGenericSend+0xbe>
	__asm volatile
 800747c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007480:	f383 8811 	msr	BASEPRI, r3
 8007484:	f3bf 8f6f 	isb	sy
 8007488:	f3bf 8f4f 	dsb	sy
 800748c:	61fb      	str	r3, [r7, #28]
}
 800748e:	bf00      	nop
 8007490:	e7fe      	b.n	8007490 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007492:	f002 fb87 	bl	8009ba4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007498:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800749a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800749c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800749e:	429a      	cmp	r2, r3
 80074a0:	d302      	bcc.n	80074a8 <xQueueGenericSend+0xd4>
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	2b02      	cmp	r3, #2
 80074a6:	d129      	bne.n	80074fc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80074a8:	683a      	ldr	r2, [r7, #0]
 80074aa:	68b9      	ldr	r1, [r7, #8]
 80074ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074ae:	f000 fc9a 	bl	8007de6 <prvCopyDataToQueue>
 80074b2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80074b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d010      	beq.n	80074de <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074be:	3324      	adds	r3, #36	; 0x24
 80074c0:	4618      	mov	r0, r3
 80074c2:	f001 fb43 	bl	8008b4c <xTaskRemoveFromEventList>
 80074c6:	4603      	mov	r3, r0
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d013      	beq.n	80074f4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80074cc:	4b3f      	ldr	r3, [pc, #252]	; (80075cc <xQueueGenericSend+0x1f8>)
 80074ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074d2:	601a      	str	r2, [r3, #0]
 80074d4:	f3bf 8f4f 	dsb	sy
 80074d8:	f3bf 8f6f 	isb	sy
 80074dc:	e00a      	b.n	80074f4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80074de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d007      	beq.n	80074f4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80074e4:	4b39      	ldr	r3, [pc, #228]	; (80075cc <xQueueGenericSend+0x1f8>)
 80074e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074ea:	601a      	str	r2, [r3, #0]
 80074ec:	f3bf 8f4f 	dsb	sy
 80074f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80074f4:	f002 fb86 	bl	8009c04 <vPortExitCritical>
				return pdPASS;
 80074f8:	2301      	movs	r3, #1
 80074fa:	e063      	b.n	80075c4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d103      	bne.n	800750a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007502:	f002 fb7f 	bl	8009c04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007506:	2300      	movs	r3, #0
 8007508:	e05c      	b.n	80075c4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800750a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800750c:	2b00      	cmp	r3, #0
 800750e:	d106      	bne.n	800751e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007510:	f107 0314 	add.w	r3, r7, #20
 8007514:	4618      	mov	r0, r3
 8007516:	f001 fb7d 	bl	8008c14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800751a:	2301      	movs	r3, #1
 800751c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800751e:	f002 fb71 	bl	8009c04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007522:	f001 f8c7 	bl	80086b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007526:	f002 fb3d 	bl	8009ba4 <vPortEnterCritical>
 800752a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800752c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007530:	b25b      	sxtb	r3, r3
 8007532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007536:	d103      	bne.n	8007540 <xQueueGenericSend+0x16c>
 8007538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800753a:	2200      	movs	r2, #0
 800753c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007542:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007546:	b25b      	sxtb	r3, r3
 8007548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800754c:	d103      	bne.n	8007556 <xQueueGenericSend+0x182>
 800754e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007550:	2200      	movs	r2, #0
 8007552:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007556:	f002 fb55 	bl	8009c04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800755a:	1d3a      	adds	r2, r7, #4
 800755c:	f107 0314 	add.w	r3, r7, #20
 8007560:	4611      	mov	r1, r2
 8007562:	4618      	mov	r0, r3
 8007564:	f001 fb6c 	bl	8008c40 <xTaskCheckForTimeOut>
 8007568:	4603      	mov	r3, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	d124      	bne.n	80075b8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800756e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007570:	f000 fd31 	bl	8007fd6 <prvIsQueueFull>
 8007574:	4603      	mov	r3, r0
 8007576:	2b00      	cmp	r3, #0
 8007578:	d018      	beq.n	80075ac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800757a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757c:	3310      	adds	r3, #16
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	4611      	mov	r1, r2
 8007582:	4618      	mov	r0, r3
 8007584:	f001 fa92 	bl	8008aac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007588:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800758a:	f000 fcbc 	bl	8007f06 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800758e:	f001 f89f 	bl	80086d0 <xTaskResumeAll>
 8007592:	4603      	mov	r3, r0
 8007594:	2b00      	cmp	r3, #0
 8007596:	f47f af7c 	bne.w	8007492 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800759a:	4b0c      	ldr	r3, [pc, #48]	; (80075cc <xQueueGenericSend+0x1f8>)
 800759c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075a0:	601a      	str	r2, [r3, #0]
 80075a2:	f3bf 8f4f 	dsb	sy
 80075a6:	f3bf 8f6f 	isb	sy
 80075aa:	e772      	b.n	8007492 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80075ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075ae:	f000 fcaa 	bl	8007f06 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80075b2:	f001 f88d 	bl	80086d0 <xTaskResumeAll>
 80075b6:	e76c      	b.n	8007492 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80075b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075ba:	f000 fca4 	bl	8007f06 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80075be:	f001 f887 	bl	80086d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80075c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3738      	adds	r7, #56	; 0x38
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}
 80075cc:	e000ed04 	.word	0xe000ed04

080075d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b090      	sub	sp, #64	; 0x40
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	607a      	str	r2, [r7, #4]
 80075dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80075e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d10a      	bne.n	80075fe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80075e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ec:	f383 8811 	msr	BASEPRI, r3
 80075f0:	f3bf 8f6f 	isb	sy
 80075f4:	f3bf 8f4f 	dsb	sy
 80075f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80075fa:	bf00      	nop
 80075fc:	e7fe      	b.n	80075fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d103      	bne.n	800760c <xQueueGenericSendFromISR+0x3c>
 8007604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007608:	2b00      	cmp	r3, #0
 800760a:	d101      	bne.n	8007610 <xQueueGenericSendFromISR+0x40>
 800760c:	2301      	movs	r3, #1
 800760e:	e000      	b.n	8007612 <xQueueGenericSendFromISR+0x42>
 8007610:	2300      	movs	r3, #0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d10a      	bne.n	800762c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800761a:	f383 8811 	msr	BASEPRI, r3
 800761e:	f3bf 8f6f 	isb	sy
 8007622:	f3bf 8f4f 	dsb	sy
 8007626:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007628:	bf00      	nop
 800762a:	e7fe      	b.n	800762a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	2b02      	cmp	r3, #2
 8007630:	d103      	bne.n	800763a <xQueueGenericSendFromISR+0x6a>
 8007632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007636:	2b01      	cmp	r3, #1
 8007638:	d101      	bne.n	800763e <xQueueGenericSendFromISR+0x6e>
 800763a:	2301      	movs	r3, #1
 800763c:	e000      	b.n	8007640 <xQueueGenericSendFromISR+0x70>
 800763e:	2300      	movs	r3, #0
 8007640:	2b00      	cmp	r3, #0
 8007642:	d10a      	bne.n	800765a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007648:	f383 8811 	msr	BASEPRI, r3
 800764c:	f3bf 8f6f 	isb	sy
 8007650:	f3bf 8f4f 	dsb	sy
 8007654:	623b      	str	r3, [r7, #32]
}
 8007656:	bf00      	nop
 8007658:	e7fe      	b.n	8007658 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800765a:	f002 fb85 	bl	8009d68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800765e:	f3ef 8211 	mrs	r2, BASEPRI
 8007662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007666:	f383 8811 	msr	BASEPRI, r3
 800766a:	f3bf 8f6f 	isb	sy
 800766e:	f3bf 8f4f 	dsb	sy
 8007672:	61fa      	str	r2, [r7, #28]
 8007674:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007676:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007678:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800767a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800767c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800767e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007682:	429a      	cmp	r2, r3
 8007684:	d302      	bcc.n	800768c <xQueueGenericSendFromISR+0xbc>
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	2b02      	cmp	r3, #2
 800768a:	d12f      	bne.n	80076ec <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800768c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800768e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007692:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800769a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800769c:	683a      	ldr	r2, [r7, #0]
 800769e:	68b9      	ldr	r1, [r7, #8]
 80076a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80076a2:	f000 fba0 	bl	8007de6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80076a6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80076aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ae:	d112      	bne.n	80076d6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d016      	beq.n	80076e6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ba:	3324      	adds	r3, #36	; 0x24
 80076bc:	4618      	mov	r0, r3
 80076be:	f001 fa45 	bl	8008b4c <xTaskRemoveFromEventList>
 80076c2:	4603      	mov	r3, r0
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d00e      	beq.n	80076e6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d00b      	beq.n	80076e6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2201      	movs	r2, #1
 80076d2:	601a      	str	r2, [r3, #0]
 80076d4:	e007      	b.n	80076e6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80076d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80076da:	3301      	adds	r3, #1
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	b25a      	sxtb	r2, r3
 80076e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80076e6:	2301      	movs	r3, #1
 80076e8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80076ea:	e001      	b.n	80076f0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80076ec:	2300      	movs	r3, #0
 80076ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076f2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80076fa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80076fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3740      	adds	r7, #64	; 0x40
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}

08007706 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007706:	b580      	push	{r7, lr}
 8007708:	b08e      	sub	sp, #56	; 0x38
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
 800770e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007716:	2b00      	cmp	r3, #0
 8007718:	d10a      	bne.n	8007730 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800771a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800771e:	f383 8811 	msr	BASEPRI, r3
 8007722:	f3bf 8f6f 	isb	sy
 8007726:	f3bf 8f4f 	dsb	sy
 800772a:	623b      	str	r3, [r7, #32]
}
 800772c:	bf00      	nop
 800772e:	e7fe      	b.n	800772e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007734:	2b00      	cmp	r3, #0
 8007736:	d00a      	beq.n	800774e <xQueueGiveFromISR+0x48>
	__asm volatile
 8007738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800773c:	f383 8811 	msr	BASEPRI, r3
 8007740:	f3bf 8f6f 	isb	sy
 8007744:	f3bf 8f4f 	dsb	sy
 8007748:	61fb      	str	r3, [r7, #28]
}
 800774a:	bf00      	nop
 800774c:	e7fe      	b.n	800774c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800774e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d103      	bne.n	800775e <xQueueGiveFromISR+0x58>
 8007756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d101      	bne.n	8007762 <xQueueGiveFromISR+0x5c>
 800775e:	2301      	movs	r3, #1
 8007760:	e000      	b.n	8007764 <xQueueGiveFromISR+0x5e>
 8007762:	2300      	movs	r3, #0
 8007764:	2b00      	cmp	r3, #0
 8007766:	d10a      	bne.n	800777e <xQueueGiveFromISR+0x78>
	__asm volatile
 8007768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800776c:	f383 8811 	msr	BASEPRI, r3
 8007770:	f3bf 8f6f 	isb	sy
 8007774:	f3bf 8f4f 	dsb	sy
 8007778:	61bb      	str	r3, [r7, #24]
}
 800777a:	bf00      	nop
 800777c:	e7fe      	b.n	800777c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800777e:	f002 faf3 	bl	8009d68 <vPortValidateInterruptPriority>
	__asm volatile
 8007782:	f3ef 8211 	mrs	r2, BASEPRI
 8007786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800778a:	f383 8811 	msr	BASEPRI, r3
 800778e:	f3bf 8f6f 	isb	sy
 8007792:	f3bf 8f4f 	dsb	sy
 8007796:	617a      	str	r2, [r7, #20]
 8007798:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800779a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800779c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800779e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80077a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d22b      	bcs.n	8007806 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80077ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80077b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ba:	1c5a      	adds	r2, r3, #1
 80077bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077be:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80077c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80077c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077c8:	d112      	bne.n	80077f0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80077ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d016      	beq.n	8007800 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80077d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d4:	3324      	adds	r3, #36	; 0x24
 80077d6:	4618      	mov	r0, r3
 80077d8:	f001 f9b8 	bl	8008b4c <xTaskRemoveFromEventList>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d00e      	beq.n	8007800 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d00b      	beq.n	8007800 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	2201      	movs	r2, #1
 80077ec:	601a      	str	r2, [r3, #0]
 80077ee:	e007      	b.n	8007800 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80077f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80077f4:	3301      	adds	r3, #1
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	b25a      	sxtb	r2, r3
 80077fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007800:	2301      	movs	r3, #1
 8007802:	637b      	str	r3, [r7, #52]	; 0x34
 8007804:	e001      	b.n	800780a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007806:	2300      	movs	r3, #0
 8007808:	637b      	str	r3, [r7, #52]	; 0x34
 800780a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800780c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f383 8811 	msr	BASEPRI, r3
}
 8007814:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007818:	4618      	mov	r0, r3
 800781a:	3738      	adds	r7, #56	; 0x38
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b08c      	sub	sp, #48	; 0x30
 8007824:	af00      	add	r7, sp, #0
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800782c:	2300      	movs	r3, #0
 800782e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007836:	2b00      	cmp	r3, #0
 8007838:	d10a      	bne.n	8007850 <xQueueReceive+0x30>
	__asm volatile
 800783a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800783e:	f383 8811 	msr	BASEPRI, r3
 8007842:	f3bf 8f6f 	isb	sy
 8007846:	f3bf 8f4f 	dsb	sy
 800784a:	623b      	str	r3, [r7, #32]
}
 800784c:	bf00      	nop
 800784e:	e7fe      	b.n	800784e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d103      	bne.n	800785e <xQueueReceive+0x3e>
 8007856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800785a:	2b00      	cmp	r3, #0
 800785c:	d101      	bne.n	8007862 <xQueueReceive+0x42>
 800785e:	2301      	movs	r3, #1
 8007860:	e000      	b.n	8007864 <xQueueReceive+0x44>
 8007862:	2300      	movs	r3, #0
 8007864:	2b00      	cmp	r3, #0
 8007866:	d10a      	bne.n	800787e <xQueueReceive+0x5e>
	__asm volatile
 8007868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800786c:	f383 8811 	msr	BASEPRI, r3
 8007870:	f3bf 8f6f 	isb	sy
 8007874:	f3bf 8f4f 	dsb	sy
 8007878:	61fb      	str	r3, [r7, #28]
}
 800787a:	bf00      	nop
 800787c:	e7fe      	b.n	800787c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800787e:	f001 fb37 	bl	8008ef0 <xTaskGetSchedulerState>
 8007882:	4603      	mov	r3, r0
 8007884:	2b00      	cmp	r3, #0
 8007886:	d102      	bne.n	800788e <xQueueReceive+0x6e>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d101      	bne.n	8007892 <xQueueReceive+0x72>
 800788e:	2301      	movs	r3, #1
 8007890:	e000      	b.n	8007894 <xQueueReceive+0x74>
 8007892:	2300      	movs	r3, #0
 8007894:	2b00      	cmp	r3, #0
 8007896:	d10a      	bne.n	80078ae <xQueueReceive+0x8e>
	__asm volatile
 8007898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800789c:	f383 8811 	msr	BASEPRI, r3
 80078a0:	f3bf 8f6f 	isb	sy
 80078a4:	f3bf 8f4f 	dsb	sy
 80078a8:	61bb      	str	r3, [r7, #24]
}
 80078aa:	bf00      	nop
 80078ac:	e7fe      	b.n	80078ac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80078ae:	f002 f979 	bl	8009ba4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80078b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80078b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d01f      	beq.n	80078fe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80078be:	68b9      	ldr	r1, [r7, #8]
 80078c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078c2:	f000 fafa 	bl	8007eba <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80078c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c8:	1e5a      	subs	r2, r3, #1
 80078ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078cc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80078ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d0:	691b      	ldr	r3, [r3, #16]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d00f      	beq.n	80078f6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80078d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d8:	3310      	adds	r3, #16
 80078da:	4618      	mov	r0, r3
 80078dc:	f001 f936 	bl	8008b4c <xTaskRemoveFromEventList>
 80078e0:	4603      	mov	r3, r0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d007      	beq.n	80078f6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80078e6:	4b3d      	ldr	r3, [pc, #244]	; (80079dc <xQueueReceive+0x1bc>)
 80078e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078ec:	601a      	str	r2, [r3, #0]
 80078ee:	f3bf 8f4f 	dsb	sy
 80078f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80078f6:	f002 f985 	bl	8009c04 <vPortExitCritical>
				return pdPASS;
 80078fa:	2301      	movs	r3, #1
 80078fc:	e069      	b.n	80079d2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d103      	bne.n	800790c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007904:	f002 f97e 	bl	8009c04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007908:	2300      	movs	r3, #0
 800790a:	e062      	b.n	80079d2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800790c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800790e:	2b00      	cmp	r3, #0
 8007910:	d106      	bne.n	8007920 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007912:	f107 0310 	add.w	r3, r7, #16
 8007916:	4618      	mov	r0, r3
 8007918:	f001 f97c 	bl	8008c14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800791c:	2301      	movs	r3, #1
 800791e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007920:	f002 f970 	bl	8009c04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007924:	f000 fec6 	bl	80086b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007928:	f002 f93c 	bl	8009ba4 <vPortEnterCritical>
 800792c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800792e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007932:	b25b      	sxtb	r3, r3
 8007934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007938:	d103      	bne.n	8007942 <xQueueReceive+0x122>
 800793a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800793c:	2200      	movs	r2, #0
 800793e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007944:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007948:	b25b      	sxtb	r3, r3
 800794a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800794e:	d103      	bne.n	8007958 <xQueueReceive+0x138>
 8007950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007952:	2200      	movs	r2, #0
 8007954:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007958:	f002 f954 	bl	8009c04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800795c:	1d3a      	adds	r2, r7, #4
 800795e:	f107 0310 	add.w	r3, r7, #16
 8007962:	4611      	mov	r1, r2
 8007964:	4618      	mov	r0, r3
 8007966:	f001 f96b 	bl	8008c40 <xTaskCheckForTimeOut>
 800796a:	4603      	mov	r3, r0
 800796c:	2b00      	cmp	r3, #0
 800796e:	d123      	bne.n	80079b8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007970:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007972:	f000 fb1a 	bl	8007faa <prvIsQueueEmpty>
 8007976:	4603      	mov	r3, r0
 8007978:	2b00      	cmp	r3, #0
 800797a:	d017      	beq.n	80079ac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800797c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800797e:	3324      	adds	r3, #36	; 0x24
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	4611      	mov	r1, r2
 8007984:	4618      	mov	r0, r3
 8007986:	f001 f891 	bl	8008aac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800798a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800798c:	f000 fabb 	bl	8007f06 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007990:	f000 fe9e 	bl	80086d0 <xTaskResumeAll>
 8007994:	4603      	mov	r3, r0
 8007996:	2b00      	cmp	r3, #0
 8007998:	d189      	bne.n	80078ae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800799a:	4b10      	ldr	r3, [pc, #64]	; (80079dc <xQueueReceive+0x1bc>)
 800799c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079a0:	601a      	str	r2, [r3, #0]
 80079a2:	f3bf 8f4f 	dsb	sy
 80079a6:	f3bf 8f6f 	isb	sy
 80079aa:	e780      	b.n	80078ae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80079ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079ae:	f000 faaa 	bl	8007f06 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80079b2:	f000 fe8d 	bl	80086d0 <xTaskResumeAll>
 80079b6:	e77a      	b.n	80078ae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80079b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079ba:	f000 faa4 	bl	8007f06 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80079be:	f000 fe87 	bl	80086d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80079c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079c4:	f000 faf1 	bl	8007faa <prvIsQueueEmpty>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	f43f af6f 	beq.w	80078ae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80079d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3730      	adds	r7, #48	; 0x30
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop
 80079dc:	e000ed04 	.word	0xe000ed04

080079e0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b08e      	sub	sp, #56	; 0x38
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80079ea:	2300      	movs	r3, #0
 80079ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80079f2:	2300      	movs	r3, #0
 80079f4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80079f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d10a      	bne.n	8007a12 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80079fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a00:	f383 8811 	msr	BASEPRI, r3
 8007a04:	f3bf 8f6f 	isb	sy
 8007a08:	f3bf 8f4f 	dsb	sy
 8007a0c:	623b      	str	r3, [r7, #32]
}
 8007a0e:	bf00      	nop
 8007a10:	e7fe      	b.n	8007a10 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d00a      	beq.n	8007a30 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a1e:	f383 8811 	msr	BASEPRI, r3
 8007a22:	f3bf 8f6f 	isb	sy
 8007a26:	f3bf 8f4f 	dsb	sy
 8007a2a:	61fb      	str	r3, [r7, #28]
}
 8007a2c:	bf00      	nop
 8007a2e:	e7fe      	b.n	8007a2e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a30:	f001 fa5e 	bl	8008ef0 <xTaskGetSchedulerState>
 8007a34:	4603      	mov	r3, r0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d102      	bne.n	8007a40 <xQueueSemaphoreTake+0x60>
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d101      	bne.n	8007a44 <xQueueSemaphoreTake+0x64>
 8007a40:	2301      	movs	r3, #1
 8007a42:	e000      	b.n	8007a46 <xQueueSemaphoreTake+0x66>
 8007a44:	2300      	movs	r3, #0
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d10a      	bne.n	8007a60 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8007a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a4e:	f383 8811 	msr	BASEPRI, r3
 8007a52:	f3bf 8f6f 	isb	sy
 8007a56:	f3bf 8f4f 	dsb	sy
 8007a5a:	61bb      	str	r3, [r7, #24]
}
 8007a5c:	bf00      	nop
 8007a5e:	e7fe      	b.n	8007a5e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007a60:	f002 f8a0 	bl	8009ba4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a68:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d024      	beq.n	8007aba <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a72:	1e5a      	subs	r2, r3, #1
 8007a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a76:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d104      	bne.n	8007a8a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007a80:	f001 fbac 	bl	80091dc <pvTaskIncrementMutexHeldCount>
 8007a84:	4602      	mov	r2, r0
 8007a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a88:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a8c:	691b      	ldr	r3, [r3, #16]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d00f      	beq.n	8007ab2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a94:	3310      	adds	r3, #16
 8007a96:	4618      	mov	r0, r3
 8007a98:	f001 f858 	bl	8008b4c <xTaskRemoveFromEventList>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d007      	beq.n	8007ab2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007aa2:	4b54      	ldr	r3, [pc, #336]	; (8007bf4 <xQueueSemaphoreTake+0x214>)
 8007aa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007aa8:	601a      	str	r2, [r3, #0]
 8007aaa:	f3bf 8f4f 	dsb	sy
 8007aae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007ab2:	f002 f8a7 	bl	8009c04 <vPortExitCritical>
				return pdPASS;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e097      	b.n	8007bea <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d111      	bne.n	8007ae4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d00a      	beq.n	8007adc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aca:	f383 8811 	msr	BASEPRI, r3
 8007ace:	f3bf 8f6f 	isb	sy
 8007ad2:	f3bf 8f4f 	dsb	sy
 8007ad6:	617b      	str	r3, [r7, #20]
}
 8007ad8:	bf00      	nop
 8007ada:	e7fe      	b.n	8007ada <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007adc:	f002 f892 	bl	8009c04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	e082      	b.n	8007bea <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d106      	bne.n	8007af8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007aea:	f107 030c 	add.w	r3, r7, #12
 8007aee:	4618      	mov	r0, r3
 8007af0:	f001 f890 	bl	8008c14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007af4:	2301      	movs	r3, #1
 8007af6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007af8:	f002 f884 	bl	8009c04 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007afc:	f000 fdda 	bl	80086b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b00:	f002 f850 	bl	8009ba4 <vPortEnterCritical>
 8007b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b0a:	b25b      	sxtb	r3, r3
 8007b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b10:	d103      	bne.n	8007b1a <xQueueSemaphoreTake+0x13a>
 8007b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b14:	2200      	movs	r2, #0
 8007b16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b20:	b25b      	sxtb	r3, r3
 8007b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b26:	d103      	bne.n	8007b30 <xQueueSemaphoreTake+0x150>
 8007b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b30:	f002 f868 	bl	8009c04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b34:	463a      	mov	r2, r7
 8007b36:	f107 030c 	add.w	r3, r7, #12
 8007b3a:	4611      	mov	r1, r2
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f001 f87f 	bl	8008c40 <xTaskCheckForTimeOut>
 8007b42:	4603      	mov	r3, r0
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d132      	bne.n	8007bae <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b4a:	f000 fa2e 	bl	8007faa <prvIsQueueEmpty>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d026      	beq.n	8007ba2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d109      	bne.n	8007b70 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007b5c:	f002 f822 	bl	8009ba4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	4618      	mov	r0, r3
 8007b66:	f001 f9e1 	bl	8008f2c <xTaskPriorityInherit>
 8007b6a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007b6c:	f002 f84a 	bl	8009c04 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b72:	3324      	adds	r3, #36	; 0x24
 8007b74:	683a      	ldr	r2, [r7, #0]
 8007b76:	4611      	mov	r1, r2
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f000 ff97 	bl	8008aac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007b7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b80:	f000 f9c1 	bl	8007f06 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007b84:	f000 fda4 	bl	80086d0 <xTaskResumeAll>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	f47f af68 	bne.w	8007a60 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007b90:	4b18      	ldr	r3, [pc, #96]	; (8007bf4 <xQueueSemaphoreTake+0x214>)
 8007b92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b96:	601a      	str	r2, [r3, #0]
 8007b98:	f3bf 8f4f 	dsb	sy
 8007b9c:	f3bf 8f6f 	isb	sy
 8007ba0:	e75e      	b.n	8007a60 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007ba2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ba4:	f000 f9af 	bl	8007f06 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ba8:	f000 fd92 	bl	80086d0 <xTaskResumeAll>
 8007bac:	e758      	b.n	8007a60 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007bae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007bb0:	f000 f9a9 	bl	8007f06 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007bb4:	f000 fd8c 	bl	80086d0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007bb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007bba:	f000 f9f6 	bl	8007faa <prvIsQueueEmpty>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	f43f af4d 	beq.w	8007a60 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d00d      	beq.n	8007be8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007bcc:	f001 ffea 	bl	8009ba4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007bd0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007bd2:	f000 f8f0 	bl	8007db6 <prvGetDisinheritPriorityAfterTimeout>
 8007bd6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007bde:	4618      	mov	r0, r3
 8007be0:	f001 fa7a 	bl	80090d8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007be4:	f002 f80e 	bl	8009c04 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007be8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3738      	adds	r7, #56	; 0x38
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}
 8007bf2:	bf00      	nop
 8007bf4:	e000ed04 	.word	0xe000ed04

08007bf8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b08e      	sub	sp, #56	; 0x38
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d10a      	bne.n	8007c24 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c12:	f383 8811 	msr	BASEPRI, r3
 8007c16:	f3bf 8f6f 	isb	sy
 8007c1a:	f3bf 8f4f 	dsb	sy
 8007c1e:	623b      	str	r3, [r7, #32]
}
 8007c20:	bf00      	nop
 8007c22:	e7fe      	b.n	8007c22 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d103      	bne.n	8007c32 <xQueueReceiveFromISR+0x3a>
 8007c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d101      	bne.n	8007c36 <xQueueReceiveFromISR+0x3e>
 8007c32:	2301      	movs	r3, #1
 8007c34:	e000      	b.n	8007c38 <xQueueReceiveFromISR+0x40>
 8007c36:	2300      	movs	r3, #0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d10a      	bne.n	8007c52 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c40:	f383 8811 	msr	BASEPRI, r3
 8007c44:	f3bf 8f6f 	isb	sy
 8007c48:	f3bf 8f4f 	dsb	sy
 8007c4c:	61fb      	str	r3, [r7, #28]
}
 8007c4e:	bf00      	nop
 8007c50:	e7fe      	b.n	8007c50 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007c52:	f002 f889 	bl	8009d68 <vPortValidateInterruptPriority>
	__asm volatile
 8007c56:	f3ef 8211 	mrs	r2, BASEPRI
 8007c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c5e:	f383 8811 	msr	BASEPRI, r3
 8007c62:	f3bf 8f6f 	isb	sy
 8007c66:	f3bf 8f4f 	dsb	sy
 8007c6a:	61ba      	str	r2, [r7, #24]
 8007c6c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007c6e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007c70:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c76:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d02f      	beq.n	8007cde <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007c88:	68b9      	ldr	r1, [r7, #8]
 8007c8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c8c:	f000 f915 	bl	8007eba <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c92:	1e5a      	subs	r2, r3, #1
 8007c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c96:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007c98:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ca0:	d112      	bne.n	8007cc8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca4:	691b      	ldr	r3, [r3, #16]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d016      	beq.n	8007cd8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cac:	3310      	adds	r3, #16
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f000 ff4c 	bl	8008b4c <xTaskRemoveFromEventList>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d00e      	beq.n	8007cd8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d00b      	beq.n	8007cd8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	601a      	str	r2, [r3, #0]
 8007cc6:	e007      	b.n	8007cd8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007cc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ccc:	3301      	adds	r3, #1
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	b25a      	sxtb	r2, r3
 8007cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	637b      	str	r3, [r7, #52]	; 0x34
 8007cdc:	e001      	b.n	8007ce2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	637b      	str	r3, [r7, #52]	; 0x34
 8007ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	f383 8811 	msr	BASEPRI, r3
}
 8007cec:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3738      	adds	r7, #56	; 0x38
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}

08007cf8 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d10a      	bne.n	8007d1c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8007d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d0a:	f383 8811 	msr	BASEPRI, r3
 8007d0e:	f3bf 8f6f 	isb	sy
 8007d12:	f3bf 8f4f 	dsb	sy
 8007d16:	60bb      	str	r3, [r7, #8]
}
 8007d18:	bf00      	nop
 8007d1a:	e7fe      	b.n	8007d1a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8007d1c:	f001 ff42 	bl	8009ba4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d24:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8007d26:	f001 ff6d 	bl	8009c04 <vPortExitCritical>

	return uxReturn;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3710      	adds	r7, #16
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8007d34:	b480      	push	{r7}
 8007d36:	b087      	sub	sp, #28
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d10a      	bne.n	8007d5c <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8007d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d4a:	f383 8811 	msr	BASEPRI, r3
 8007d4e:	f3bf 8f6f 	isb	sy
 8007d52:	f3bf 8f4f 	dsb	sy
 8007d56:	60fb      	str	r3, [r7, #12]
}
 8007d58:	bf00      	nop
 8007d5a:	e7fe      	b.n	8007d5a <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d60:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8007d62:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007d64:	4618      	mov	r0, r3
 8007d66:	371c      	adds	r7, #28
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr

08007d70 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b084      	sub	sp, #16
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d10a      	bne.n	8007d98 <vQueueDelete+0x28>
	__asm volatile
 8007d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d86:	f383 8811 	msr	BASEPRI, r3
 8007d8a:	f3bf 8f6f 	isb	sy
 8007d8e:	f3bf 8f4f 	dsb	sy
 8007d92:	60bb      	str	r3, [r7, #8]
}
 8007d94:	bf00      	nop
 8007d96:	e7fe      	b.n	8007d96 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007d98:	68f8      	ldr	r0, [r7, #12]
 8007d9a:	f000 f95f 	bl	800805c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d102      	bne.n	8007dae <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8007da8:	68f8      	ldr	r0, [r7, #12]
 8007daa:	f002 f8e9 	bl	8009f80 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007dae:	bf00      	nop
 8007db0:	3710      	adds	r7, #16
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}

08007db6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007db6:	b480      	push	{r7}
 8007db8:	b085      	sub	sp, #20
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d006      	beq.n	8007dd4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007dd0:	60fb      	str	r3, [r7, #12]
 8007dd2:	e001      	b.n	8007dd8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
	}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3714      	adds	r7, #20
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr

08007de6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007de6:	b580      	push	{r7, lr}
 8007de8:	b086      	sub	sp, #24
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	60f8      	str	r0, [r7, #12]
 8007dee:	60b9      	str	r1, [r7, #8]
 8007df0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007df2:	2300      	movs	r3, #0
 8007df4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dfa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d10d      	bne.n	8007e20 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d14d      	bne.n	8007ea8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	4618      	mov	r0, r3
 8007e12:	f001 f8f3 	bl	8008ffc <xTaskPriorityDisinherit>
 8007e16:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	609a      	str	r2, [r3, #8]
 8007e1e:	e043      	b.n	8007ea8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d119      	bne.n	8007e5a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	6858      	ldr	r0, [r3, #4]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e2e:	461a      	mov	r2, r3
 8007e30:	68b9      	ldr	r1, [r7, #8]
 8007e32:	f013 ffbf 	bl	801bdb4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	685a      	ldr	r2, [r3, #4]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e3e:	441a      	add	r2, r3
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	685a      	ldr	r2, [r3, #4]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d32b      	bcc.n	8007ea8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681a      	ldr	r2, [r3, #0]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	605a      	str	r2, [r3, #4]
 8007e58:	e026      	b.n	8007ea8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	68d8      	ldr	r0, [r3, #12]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e62:	461a      	mov	r2, r3
 8007e64:	68b9      	ldr	r1, [r7, #8]
 8007e66:	f013 ffa5 	bl	801bdb4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	68da      	ldr	r2, [r3, #12]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e72:	425b      	negs	r3, r3
 8007e74:	441a      	add	r2, r3
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	68da      	ldr	r2, [r3, #12]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d207      	bcs.n	8007e96 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	689a      	ldr	r2, [r3, #8]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e8e:	425b      	negs	r3, r3
 8007e90:	441a      	add	r2, r3
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2b02      	cmp	r3, #2
 8007e9a:	d105      	bne.n	8007ea8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d002      	beq.n	8007ea8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	3b01      	subs	r3, #1
 8007ea6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	1c5a      	adds	r2, r3, #1
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007eb0:	697b      	ldr	r3, [r7, #20]
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3718      	adds	r7, #24
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}

08007eba <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b082      	sub	sp, #8
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
 8007ec2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d018      	beq.n	8007efe <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	68da      	ldr	r2, [r3, #12]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ed4:	441a      	add	r2, r3
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	68da      	ldr	r2, [r3, #12]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	689b      	ldr	r3, [r3, #8]
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d303      	bcc.n	8007eee <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	68d9      	ldr	r1, [r3, #12]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	6838      	ldr	r0, [r7, #0]
 8007efa:	f013 ff5b 	bl	801bdb4 <memcpy>
	}
}
 8007efe:	bf00      	nop
 8007f00:	3708      	adds	r7, #8
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}

08007f06 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007f06:	b580      	push	{r7, lr}
 8007f08:	b084      	sub	sp, #16
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007f0e:	f001 fe49 	bl	8009ba4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f18:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007f1a:	e011      	b.n	8007f40 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d012      	beq.n	8007f4a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	3324      	adds	r3, #36	; 0x24
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f000 fe0f 	bl	8008b4c <xTaskRemoveFromEventList>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d001      	beq.n	8007f38 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007f34:	f000 fee6 	bl	8008d04 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007f38:	7bfb      	ldrb	r3, [r7, #15]
 8007f3a:	3b01      	subs	r3, #1
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007f40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	dce9      	bgt.n	8007f1c <prvUnlockQueue+0x16>
 8007f48:	e000      	b.n	8007f4c <prvUnlockQueue+0x46>
					break;
 8007f4a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	22ff      	movs	r2, #255	; 0xff
 8007f50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007f54:	f001 fe56 	bl	8009c04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007f58:	f001 fe24 	bl	8009ba4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f62:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f64:	e011      	b.n	8007f8a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	691b      	ldr	r3, [r3, #16]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d012      	beq.n	8007f94 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	3310      	adds	r3, #16
 8007f72:	4618      	mov	r0, r3
 8007f74:	f000 fdea 	bl	8008b4c <xTaskRemoveFromEventList>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d001      	beq.n	8007f82 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007f7e:	f000 fec1 	bl	8008d04 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007f82:	7bbb      	ldrb	r3, [r7, #14]
 8007f84:	3b01      	subs	r3, #1
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	dce9      	bgt.n	8007f66 <prvUnlockQueue+0x60>
 8007f92:	e000      	b.n	8007f96 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007f94:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	22ff      	movs	r2, #255	; 0xff
 8007f9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007f9e:	f001 fe31 	bl	8009c04 <vPortExitCritical>
}
 8007fa2:	bf00      	nop
 8007fa4:	3710      	adds	r7, #16
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}

08007faa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007faa:	b580      	push	{r7, lr}
 8007fac:	b084      	sub	sp, #16
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007fb2:	f001 fdf7 	bl	8009ba4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d102      	bne.n	8007fc4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	60fb      	str	r3, [r7, #12]
 8007fc2:	e001      	b.n	8007fc8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007fc8:	f001 fe1c 	bl	8009c04 <vPortExitCritical>

	return xReturn;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3710      	adds	r7, #16
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}

08007fd6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007fd6:	b580      	push	{r7, lr}
 8007fd8:	b084      	sub	sp, #16
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007fde:	f001 fde1 	bl	8009ba4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d102      	bne.n	8007ff4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	60fb      	str	r3, [r7, #12]
 8007ff2:	e001      	b.n	8007ff8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007ff8:	f001 fe04 	bl	8009c04 <vPortExitCritical>

	return xReturn;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3710      	adds	r7, #16
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
	...

08008008 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008008:	b480      	push	{r7}
 800800a:	b085      	sub	sp, #20
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008012:	2300      	movs	r3, #0
 8008014:	60fb      	str	r3, [r7, #12]
 8008016:	e014      	b.n	8008042 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008018:	4a0f      	ldr	r2, [pc, #60]	; (8008058 <vQueueAddToRegistry+0x50>)
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d10b      	bne.n	800803c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008024:	490c      	ldr	r1, [pc, #48]	; (8008058 <vQueueAddToRegistry+0x50>)
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	683a      	ldr	r2, [r7, #0]
 800802a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800802e:	4a0a      	ldr	r2, [pc, #40]	; (8008058 <vQueueAddToRegistry+0x50>)
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	00db      	lsls	r3, r3, #3
 8008034:	4413      	add	r3, r2
 8008036:	687a      	ldr	r2, [r7, #4]
 8008038:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800803a:	e006      	b.n	800804a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	3301      	adds	r3, #1
 8008040:	60fb      	str	r3, [r7, #12]
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2b07      	cmp	r3, #7
 8008046:	d9e7      	bls.n	8008018 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008048:	bf00      	nop
 800804a:	bf00      	nop
 800804c:	3714      	adds	r7, #20
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr
 8008056:	bf00      	nop
 8008058:	20004bc0 	.word	0x20004bc0

0800805c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800805c:	b480      	push	{r7}
 800805e:	b085      	sub	sp, #20
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008064:	2300      	movs	r3, #0
 8008066:	60fb      	str	r3, [r7, #12]
 8008068:	e016      	b.n	8008098 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800806a:	4a10      	ldr	r2, [pc, #64]	; (80080ac <vQueueUnregisterQueue+0x50>)
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	00db      	lsls	r3, r3, #3
 8008070:	4413      	add	r3, r2
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	429a      	cmp	r2, r3
 8008078:	d10b      	bne.n	8008092 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800807a:	4a0c      	ldr	r2, [pc, #48]	; (80080ac <vQueueUnregisterQueue+0x50>)
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2100      	movs	r1, #0
 8008080:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008084:	4a09      	ldr	r2, [pc, #36]	; (80080ac <vQueueUnregisterQueue+0x50>)
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	00db      	lsls	r3, r3, #3
 800808a:	4413      	add	r3, r2
 800808c:	2200      	movs	r2, #0
 800808e:	605a      	str	r2, [r3, #4]
				break;
 8008090:	e006      	b.n	80080a0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	3301      	adds	r3, #1
 8008096:	60fb      	str	r3, [r7, #12]
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2b07      	cmp	r3, #7
 800809c:	d9e5      	bls.n	800806a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800809e:	bf00      	nop
 80080a0:	bf00      	nop
 80080a2:	3714      	adds	r7, #20
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr
 80080ac:	20004bc0 	.word	0x20004bc0

080080b0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b086      	sub	sp, #24
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	60f8      	str	r0, [r7, #12]
 80080b8:	60b9      	str	r1, [r7, #8]
 80080ba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80080c0:	f001 fd70 	bl	8009ba4 <vPortEnterCritical>
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80080ca:	b25b      	sxtb	r3, r3
 80080cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080d0:	d103      	bne.n	80080da <vQueueWaitForMessageRestricted+0x2a>
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	2200      	movs	r2, #0
 80080d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80080e0:	b25b      	sxtb	r3, r3
 80080e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080e6:	d103      	bne.n	80080f0 <vQueueWaitForMessageRestricted+0x40>
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	2200      	movs	r2, #0
 80080ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80080f0:	f001 fd88 	bl	8009c04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d106      	bne.n	800810a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	3324      	adds	r3, #36	; 0x24
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	68b9      	ldr	r1, [r7, #8]
 8008104:	4618      	mov	r0, r3
 8008106:	f000 fcf5 	bl	8008af4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800810a:	6978      	ldr	r0, [r7, #20]
 800810c:	f7ff fefb 	bl	8007f06 <prvUnlockQueue>
	}
 8008110:	bf00      	nop
 8008112:	3718      	adds	r7, #24
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008118:	b580      	push	{r7, lr}
 800811a:	b08e      	sub	sp, #56	; 0x38
 800811c:	af04      	add	r7, sp, #16
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	607a      	str	r2, [r7, #4]
 8008124:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008128:	2b00      	cmp	r3, #0
 800812a:	d10a      	bne.n	8008142 <xTaskCreateStatic+0x2a>
	__asm volatile
 800812c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008130:	f383 8811 	msr	BASEPRI, r3
 8008134:	f3bf 8f6f 	isb	sy
 8008138:	f3bf 8f4f 	dsb	sy
 800813c:	623b      	str	r3, [r7, #32]
}
 800813e:	bf00      	nop
 8008140:	e7fe      	b.n	8008140 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008144:	2b00      	cmp	r3, #0
 8008146:	d10a      	bne.n	800815e <xTaskCreateStatic+0x46>
	__asm volatile
 8008148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800814c:	f383 8811 	msr	BASEPRI, r3
 8008150:	f3bf 8f6f 	isb	sy
 8008154:	f3bf 8f4f 	dsb	sy
 8008158:	61fb      	str	r3, [r7, #28]
}
 800815a:	bf00      	nop
 800815c:	e7fe      	b.n	800815c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800815e:	23bc      	movs	r3, #188	; 0xbc
 8008160:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	2bbc      	cmp	r3, #188	; 0xbc
 8008166:	d00a      	beq.n	800817e <xTaskCreateStatic+0x66>
	__asm volatile
 8008168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800816c:	f383 8811 	msr	BASEPRI, r3
 8008170:	f3bf 8f6f 	isb	sy
 8008174:	f3bf 8f4f 	dsb	sy
 8008178:	61bb      	str	r3, [r7, #24]
}
 800817a:	bf00      	nop
 800817c:	e7fe      	b.n	800817c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800817e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008182:	2b00      	cmp	r3, #0
 8008184:	d01e      	beq.n	80081c4 <xTaskCreateStatic+0xac>
 8008186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008188:	2b00      	cmp	r3, #0
 800818a:	d01b      	beq.n	80081c4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800818c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800818e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008192:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008194:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008198:	2202      	movs	r2, #2
 800819a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800819e:	2300      	movs	r3, #0
 80081a0:	9303      	str	r3, [sp, #12]
 80081a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a4:	9302      	str	r3, [sp, #8]
 80081a6:	f107 0314 	add.w	r3, r7, #20
 80081aa:	9301      	str	r3, [sp, #4]
 80081ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ae:	9300      	str	r3, [sp, #0]
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	68b9      	ldr	r1, [r7, #8]
 80081b6:	68f8      	ldr	r0, [r7, #12]
 80081b8:	f000 f850 	bl	800825c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80081bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80081be:	f000 f8f3 	bl	80083a8 <prvAddNewTaskToReadyList>
 80081c2:	e001      	b.n	80081c8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80081c4:	2300      	movs	r3, #0
 80081c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80081c8:	697b      	ldr	r3, [r7, #20]
	}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3728      	adds	r7, #40	; 0x28
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}

080081d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80081d2:	b580      	push	{r7, lr}
 80081d4:	b08c      	sub	sp, #48	; 0x30
 80081d6:	af04      	add	r7, sp, #16
 80081d8:	60f8      	str	r0, [r7, #12]
 80081da:	60b9      	str	r1, [r7, #8]
 80081dc:	603b      	str	r3, [r7, #0]
 80081de:	4613      	mov	r3, r2
 80081e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80081e2:	88fb      	ldrh	r3, [r7, #6]
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	4618      	mov	r0, r3
 80081e8:	f001 fdfe 	bl	8009de8 <pvPortMalloc>
 80081ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d00e      	beq.n	8008212 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80081f4:	20bc      	movs	r0, #188	; 0xbc
 80081f6:	f001 fdf7 	bl	8009de8 <pvPortMalloc>
 80081fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80081fc:	69fb      	ldr	r3, [r7, #28]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d003      	beq.n	800820a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008202:	69fb      	ldr	r3, [r7, #28]
 8008204:	697a      	ldr	r2, [r7, #20]
 8008206:	631a      	str	r2, [r3, #48]	; 0x30
 8008208:	e005      	b.n	8008216 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800820a:	6978      	ldr	r0, [r7, #20]
 800820c:	f001 feb8 	bl	8009f80 <vPortFree>
 8008210:	e001      	b.n	8008216 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008212:	2300      	movs	r3, #0
 8008214:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008216:	69fb      	ldr	r3, [r7, #28]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d017      	beq.n	800824c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800821c:	69fb      	ldr	r3, [r7, #28]
 800821e:	2200      	movs	r2, #0
 8008220:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008224:	88fa      	ldrh	r2, [r7, #6]
 8008226:	2300      	movs	r3, #0
 8008228:	9303      	str	r3, [sp, #12]
 800822a:	69fb      	ldr	r3, [r7, #28]
 800822c:	9302      	str	r3, [sp, #8]
 800822e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008230:	9301      	str	r3, [sp, #4]
 8008232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008234:	9300      	str	r3, [sp, #0]
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	68b9      	ldr	r1, [r7, #8]
 800823a:	68f8      	ldr	r0, [r7, #12]
 800823c:	f000 f80e 	bl	800825c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008240:	69f8      	ldr	r0, [r7, #28]
 8008242:	f000 f8b1 	bl	80083a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008246:	2301      	movs	r3, #1
 8008248:	61bb      	str	r3, [r7, #24]
 800824a:	e002      	b.n	8008252 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800824c:	f04f 33ff 	mov.w	r3, #4294967295
 8008250:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008252:	69bb      	ldr	r3, [r7, #24]
	}
 8008254:	4618      	mov	r0, r3
 8008256:	3720      	adds	r7, #32
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b088      	sub	sp, #32
 8008260:	af00      	add	r7, sp, #0
 8008262:	60f8      	str	r0, [r7, #12]
 8008264:	60b9      	str	r1, [r7, #8]
 8008266:	607a      	str	r2, [r7, #4]
 8008268:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800826a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800826c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	009b      	lsls	r3, r3, #2
 8008272:	461a      	mov	r2, r3
 8008274:	21a5      	movs	r1, #165	; 0xa5
 8008276:	f013 fdc5 	bl	801be04 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800827a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800827c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008284:	3b01      	subs	r3, #1
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	4413      	add	r3, r2
 800828a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800828c:	69bb      	ldr	r3, [r7, #24]
 800828e:	f023 0307 	bic.w	r3, r3, #7
 8008292:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008294:	69bb      	ldr	r3, [r7, #24]
 8008296:	f003 0307 	and.w	r3, r3, #7
 800829a:	2b00      	cmp	r3, #0
 800829c:	d00a      	beq.n	80082b4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800829e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a2:	f383 8811 	msr	BASEPRI, r3
 80082a6:	f3bf 8f6f 	isb	sy
 80082aa:	f3bf 8f4f 	dsb	sy
 80082ae:	617b      	str	r3, [r7, #20]
}
 80082b0:	bf00      	nop
 80082b2:	e7fe      	b.n	80082b2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d01f      	beq.n	80082fa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80082ba:	2300      	movs	r3, #0
 80082bc:	61fb      	str	r3, [r7, #28]
 80082be:	e012      	b.n	80082e6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80082c0:	68ba      	ldr	r2, [r7, #8]
 80082c2:	69fb      	ldr	r3, [r7, #28]
 80082c4:	4413      	add	r3, r2
 80082c6:	7819      	ldrb	r1, [r3, #0]
 80082c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082ca:	69fb      	ldr	r3, [r7, #28]
 80082cc:	4413      	add	r3, r2
 80082ce:	3334      	adds	r3, #52	; 0x34
 80082d0:	460a      	mov	r2, r1
 80082d2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80082d4:	68ba      	ldr	r2, [r7, #8]
 80082d6:	69fb      	ldr	r3, [r7, #28]
 80082d8:	4413      	add	r3, r2
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d006      	beq.n	80082ee <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80082e0:	69fb      	ldr	r3, [r7, #28]
 80082e2:	3301      	adds	r3, #1
 80082e4:	61fb      	str	r3, [r7, #28]
 80082e6:	69fb      	ldr	r3, [r7, #28]
 80082e8:	2b0f      	cmp	r3, #15
 80082ea:	d9e9      	bls.n	80082c0 <prvInitialiseNewTask+0x64>
 80082ec:	e000      	b.n	80082f0 <prvInitialiseNewTask+0x94>
			{
				break;
 80082ee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80082f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f2:	2200      	movs	r2, #0
 80082f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80082f8:	e003      	b.n	8008302 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80082fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082fc:	2200      	movs	r2, #0
 80082fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008304:	2b37      	cmp	r3, #55	; 0x37
 8008306:	d901      	bls.n	800830c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008308:	2337      	movs	r3, #55	; 0x37
 800830a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800830c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800830e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008310:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008314:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008316:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800831a:	2200      	movs	r2, #0
 800831c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800831e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008320:	3304      	adds	r3, #4
 8008322:	4618      	mov	r0, r3
 8008324:	f7fe fd64 	bl	8006df0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800832a:	3318      	adds	r3, #24
 800832c:	4618      	mov	r0, r3
 800832e:	f7fe fd5f 	bl	8006df0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008334:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008336:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800833a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800833e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008340:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008344:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008346:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800834a:	2200      	movs	r2, #0
 800834c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008352:	2200      	movs	r2, #0
 8008354:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800835a:	3354      	adds	r3, #84	; 0x54
 800835c:	2260      	movs	r2, #96	; 0x60
 800835e:	2100      	movs	r1, #0
 8008360:	4618      	mov	r0, r3
 8008362:	f013 fd4f 	bl	801be04 <memset>
 8008366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008368:	4a0c      	ldr	r2, [pc, #48]	; (800839c <prvInitialiseNewTask+0x140>)
 800836a:	659a      	str	r2, [r3, #88]	; 0x58
 800836c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800836e:	4a0c      	ldr	r2, [pc, #48]	; (80083a0 <prvInitialiseNewTask+0x144>)
 8008370:	65da      	str	r2, [r3, #92]	; 0x5c
 8008372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008374:	4a0b      	ldr	r2, [pc, #44]	; (80083a4 <prvInitialiseNewTask+0x148>)
 8008376:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008378:	683a      	ldr	r2, [r7, #0]
 800837a:	68f9      	ldr	r1, [r7, #12]
 800837c:	69b8      	ldr	r0, [r7, #24]
 800837e:	f001 fae3 	bl	8009948 <pxPortInitialiseStack>
 8008382:	4602      	mov	r2, r0
 8008384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008386:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800838a:	2b00      	cmp	r3, #0
 800838c:	d002      	beq.n	8008394 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800838e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008390:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008392:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008394:	bf00      	nop
 8008396:	3720      	adds	r7, #32
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}
 800839c:	08022a44 	.word	0x08022a44
 80083a0:	08022a64 	.word	0x08022a64
 80083a4:	08022a24 	.word	0x08022a24

080083a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80083b0:	f001 fbf8 	bl	8009ba4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80083b4:	4b2d      	ldr	r3, [pc, #180]	; (800846c <prvAddNewTaskToReadyList+0xc4>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	3301      	adds	r3, #1
 80083ba:	4a2c      	ldr	r2, [pc, #176]	; (800846c <prvAddNewTaskToReadyList+0xc4>)
 80083bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80083be:	4b2c      	ldr	r3, [pc, #176]	; (8008470 <prvAddNewTaskToReadyList+0xc8>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d109      	bne.n	80083da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80083c6:	4a2a      	ldr	r2, [pc, #168]	; (8008470 <prvAddNewTaskToReadyList+0xc8>)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80083cc:	4b27      	ldr	r3, [pc, #156]	; (800846c <prvAddNewTaskToReadyList+0xc4>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	d110      	bne.n	80083f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80083d4:	f000 fcba 	bl	8008d4c <prvInitialiseTaskLists>
 80083d8:	e00d      	b.n	80083f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80083da:	4b26      	ldr	r3, [pc, #152]	; (8008474 <prvAddNewTaskToReadyList+0xcc>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d109      	bne.n	80083f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80083e2:	4b23      	ldr	r3, [pc, #140]	; (8008470 <prvAddNewTaskToReadyList+0xc8>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d802      	bhi.n	80083f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80083f0:	4a1f      	ldr	r2, [pc, #124]	; (8008470 <prvAddNewTaskToReadyList+0xc8>)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80083f6:	4b20      	ldr	r3, [pc, #128]	; (8008478 <prvAddNewTaskToReadyList+0xd0>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	3301      	adds	r3, #1
 80083fc:	4a1e      	ldr	r2, [pc, #120]	; (8008478 <prvAddNewTaskToReadyList+0xd0>)
 80083fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008400:	4b1d      	ldr	r3, [pc, #116]	; (8008478 <prvAddNewTaskToReadyList+0xd0>)
 8008402:	681a      	ldr	r2, [r3, #0]
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800840c:	4b1b      	ldr	r3, [pc, #108]	; (800847c <prvAddNewTaskToReadyList+0xd4>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	429a      	cmp	r2, r3
 8008412:	d903      	bls.n	800841c <prvAddNewTaskToReadyList+0x74>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008418:	4a18      	ldr	r2, [pc, #96]	; (800847c <prvAddNewTaskToReadyList+0xd4>)
 800841a:	6013      	str	r3, [r2, #0]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008420:	4613      	mov	r3, r2
 8008422:	009b      	lsls	r3, r3, #2
 8008424:	4413      	add	r3, r2
 8008426:	009b      	lsls	r3, r3, #2
 8008428:	4a15      	ldr	r2, [pc, #84]	; (8008480 <prvAddNewTaskToReadyList+0xd8>)
 800842a:	441a      	add	r2, r3
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	3304      	adds	r3, #4
 8008430:	4619      	mov	r1, r3
 8008432:	4610      	mov	r0, r2
 8008434:	f7fe fce9 	bl	8006e0a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008438:	f001 fbe4 	bl	8009c04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800843c:	4b0d      	ldr	r3, [pc, #52]	; (8008474 <prvAddNewTaskToReadyList+0xcc>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d00e      	beq.n	8008462 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008444:	4b0a      	ldr	r3, [pc, #40]	; (8008470 <prvAddNewTaskToReadyList+0xc8>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800844e:	429a      	cmp	r2, r3
 8008450:	d207      	bcs.n	8008462 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008452:	4b0c      	ldr	r3, [pc, #48]	; (8008484 <prvAddNewTaskToReadyList+0xdc>)
 8008454:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008458:	601a      	str	r2, [r3, #0]
 800845a:	f3bf 8f4f 	dsb	sy
 800845e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008462:	bf00      	nop
 8008464:	3708      	adds	r7, #8
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
 800846a:	bf00      	nop
 800846c:	20001278 	.word	0x20001278
 8008470:	20000da4 	.word	0x20000da4
 8008474:	20001284 	.word	0x20001284
 8008478:	20001294 	.word	0x20001294
 800847c:	20001280 	.word	0x20001280
 8008480:	20000da8 	.word	0x20000da8
 8008484:	e000ed04 	.word	0xe000ed04

08008488 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8008488:	b580      	push	{r7, lr}
 800848a:	b084      	sub	sp, #16
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008490:	f001 fb88 	bl	8009ba4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d102      	bne.n	80084a0 <vTaskDelete+0x18>
 800849a:	4b2c      	ldr	r3, [pc, #176]	; (800854c <vTaskDelete+0xc4>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	e000      	b.n	80084a2 <vTaskDelete+0x1a>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	3304      	adds	r3, #4
 80084a8:	4618      	mov	r0, r3
 80084aa:	f7fe fd0b 	bl	8006ec4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d004      	beq.n	80084c0 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	3318      	adds	r3, #24
 80084ba:	4618      	mov	r0, r3
 80084bc:	f7fe fd02 	bl	8006ec4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80084c0:	4b23      	ldr	r3, [pc, #140]	; (8008550 <vTaskDelete+0xc8>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	3301      	adds	r3, #1
 80084c6:	4a22      	ldr	r2, [pc, #136]	; (8008550 <vTaskDelete+0xc8>)
 80084c8:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80084ca:	4b20      	ldr	r3, [pc, #128]	; (800854c <vTaskDelete+0xc4>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	68fa      	ldr	r2, [r7, #12]
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d10b      	bne.n	80084ec <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	3304      	adds	r3, #4
 80084d8:	4619      	mov	r1, r3
 80084da:	481e      	ldr	r0, [pc, #120]	; (8008554 <vTaskDelete+0xcc>)
 80084dc:	f7fe fc95 	bl	8006e0a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80084e0:	4b1d      	ldr	r3, [pc, #116]	; (8008558 <vTaskDelete+0xd0>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	3301      	adds	r3, #1
 80084e6:	4a1c      	ldr	r2, [pc, #112]	; (8008558 <vTaskDelete+0xd0>)
 80084e8:	6013      	str	r3, [r2, #0]
 80084ea:	e009      	b.n	8008500 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80084ec:	4b1b      	ldr	r3, [pc, #108]	; (800855c <vTaskDelete+0xd4>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	3b01      	subs	r3, #1
 80084f2:	4a1a      	ldr	r2, [pc, #104]	; (800855c <vTaskDelete+0xd4>)
 80084f4:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80084f6:	68f8      	ldr	r0, [r7, #12]
 80084f8:	f000 fc96 	bl	8008e28 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80084fc:	f000 fcc8 	bl	8008e90 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8008500:	f001 fb80 	bl	8009c04 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8008504:	4b16      	ldr	r3, [pc, #88]	; (8008560 <vTaskDelete+0xd8>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d01b      	beq.n	8008544 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 800850c:	4b0f      	ldr	r3, [pc, #60]	; (800854c <vTaskDelete+0xc4>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	68fa      	ldr	r2, [r7, #12]
 8008512:	429a      	cmp	r2, r3
 8008514:	d116      	bne.n	8008544 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8008516:	4b13      	ldr	r3, [pc, #76]	; (8008564 <vTaskDelete+0xdc>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d00a      	beq.n	8008534 <vTaskDelete+0xac>
	__asm volatile
 800851e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008522:	f383 8811 	msr	BASEPRI, r3
 8008526:	f3bf 8f6f 	isb	sy
 800852a:	f3bf 8f4f 	dsb	sy
 800852e:	60bb      	str	r3, [r7, #8]
}
 8008530:	bf00      	nop
 8008532:	e7fe      	b.n	8008532 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8008534:	4b0c      	ldr	r3, [pc, #48]	; (8008568 <vTaskDelete+0xe0>)
 8008536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800853a:	601a      	str	r2, [r3, #0]
 800853c:	f3bf 8f4f 	dsb	sy
 8008540:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008544:	bf00      	nop
 8008546:	3710      	adds	r7, #16
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}
 800854c:	20000da4 	.word	0x20000da4
 8008550:	20001294 	.word	0x20001294
 8008554:	2000124c 	.word	0x2000124c
 8008558:	20001260 	.word	0x20001260
 800855c:	20001278 	.word	0x20001278
 8008560:	20001284 	.word	0x20001284
 8008564:	200012a0 	.word	0x200012a0
 8008568:	e000ed04 	.word	0xe000ed04

0800856c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800856c:	b580      	push	{r7, lr}
 800856e:	b084      	sub	sp, #16
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008574:	2300      	movs	r3, #0
 8008576:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d017      	beq.n	80085ae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800857e:	4b13      	ldr	r3, [pc, #76]	; (80085cc <vTaskDelay+0x60>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d00a      	beq.n	800859c <vTaskDelay+0x30>
	__asm volatile
 8008586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800858a:	f383 8811 	msr	BASEPRI, r3
 800858e:	f3bf 8f6f 	isb	sy
 8008592:	f3bf 8f4f 	dsb	sy
 8008596:	60bb      	str	r3, [r7, #8]
}
 8008598:	bf00      	nop
 800859a:	e7fe      	b.n	800859a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800859c:	f000 f88a 	bl	80086b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80085a0:	2100      	movs	r1, #0
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 fe2e 	bl	8009204 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80085a8:	f000 f892 	bl	80086d0 <xTaskResumeAll>
 80085ac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d107      	bne.n	80085c4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80085b4:	4b06      	ldr	r3, [pc, #24]	; (80085d0 <vTaskDelay+0x64>)
 80085b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085ba:	601a      	str	r2, [r3, #0]
 80085bc:	f3bf 8f4f 	dsb	sy
 80085c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80085c4:	bf00      	nop
 80085c6:	3710      	adds	r7, #16
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}
 80085cc:	200012a0 	.word	0x200012a0
 80085d0:	e000ed04 	.word	0xe000ed04

080085d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b08a      	sub	sp, #40	; 0x28
 80085d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80085da:	2300      	movs	r3, #0
 80085dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80085de:	2300      	movs	r3, #0
 80085e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80085e2:	463a      	mov	r2, r7
 80085e4:	1d39      	adds	r1, r7, #4
 80085e6:	f107 0308 	add.w	r3, r7, #8
 80085ea:	4618      	mov	r0, r3
 80085ec:	f7fe fbac 	bl	8006d48 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80085f0:	6839      	ldr	r1, [r7, #0]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	68ba      	ldr	r2, [r7, #8]
 80085f6:	9202      	str	r2, [sp, #8]
 80085f8:	9301      	str	r3, [sp, #4]
 80085fa:	2300      	movs	r3, #0
 80085fc:	9300      	str	r3, [sp, #0]
 80085fe:	2300      	movs	r3, #0
 8008600:	460a      	mov	r2, r1
 8008602:	4924      	ldr	r1, [pc, #144]	; (8008694 <vTaskStartScheduler+0xc0>)
 8008604:	4824      	ldr	r0, [pc, #144]	; (8008698 <vTaskStartScheduler+0xc4>)
 8008606:	f7ff fd87 	bl	8008118 <xTaskCreateStatic>
 800860a:	4603      	mov	r3, r0
 800860c:	4a23      	ldr	r2, [pc, #140]	; (800869c <vTaskStartScheduler+0xc8>)
 800860e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008610:	4b22      	ldr	r3, [pc, #136]	; (800869c <vTaskStartScheduler+0xc8>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d002      	beq.n	800861e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008618:	2301      	movs	r3, #1
 800861a:	617b      	str	r3, [r7, #20]
 800861c:	e001      	b.n	8008622 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800861e:	2300      	movs	r3, #0
 8008620:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	2b01      	cmp	r3, #1
 8008626:	d102      	bne.n	800862e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008628:	f000 fe40 	bl	80092ac <xTimerCreateTimerTask>
 800862c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	2b01      	cmp	r3, #1
 8008632:	d11b      	bne.n	800866c <vTaskStartScheduler+0x98>
	__asm volatile
 8008634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008638:	f383 8811 	msr	BASEPRI, r3
 800863c:	f3bf 8f6f 	isb	sy
 8008640:	f3bf 8f4f 	dsb	sy
 8008644:	613b      	str	r3, [r7, #16]
}
 8008646:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008648:	4b15      	ldr	r3, [pc, #84]	; (80086a0 <vTaskStartScheduler+0xcc>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	3354      	adds	r3, #84	; 0x54
 800864e:	4a15      	ldr	r2, [pc, #84]	; (80086a4 <vTaskStartScheduler+0xd0>)
 8008650:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008652:	4b15      	ldr	r3, [pc, #84]	; (80086a8 <vTaskStartScheduler+0xd4>)
 8008654:	f04f 32ff 	mov.w	r2, #4294967295
 8008658:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800865a:	4b14      	ldr	r3, [pc, #80]	; (80086ac <vTaskStartScheduler+0xd8>)
 800865c:	2201      	movs	r2, #1
 800865e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008660:	4b13      	ldr	r3, [pc, #76]	; (80086b0 <vTaskStartScheduler+0xdc>)
 8008662:	2200      	movs	r2, #0
 8008664:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008666:	f001 f9fb 	bl	8009a60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800866a:	e00e      	b.n	800868a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008672:	d10a      	bne.n	800868a <vTaskStartScheduler+0xb6>
	__asm volatile
 8008674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008678:	f383 8811 	msr	BASEPRI, r3
 800867c:	f3bf 8f6f 	isb	sy
 8008680:	f3bf 8f4f 	dsb	sy
 8008684:	60fb      	str	r3, [r7, #12]
}
 8008686:	bf00      	nop
 8008688:	e7fe      	b.n	8008688 <vTaskStartScheduler+0xb4>
}
 800868a:	bf00      	nop
 800868c:	3718      	adds	r7, #24
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}
 8008692:	bf00      	nop
 8008694:	0801ec2c 	.word	0x0801ec2c
 8008698:	08008d1d 	.word	0x08008d1d
 800869c:	2000129c 	.word	0x2000129c
 80086a0:	20000da4 	.word	0x20000da4
 80086a4:	10000134 	.word	0x10000134
 80086a8:	20001298 	.word	0x20001298
 80086ac:	20001284 	.word	0x20001284
 80086b0:	2000127c 	.word	0x2000127c

080086b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80086b4:	b480      	push	{r7}
 80086b6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80086b8:	4b04      	ldr	r3, [pc, #16]	; (80086cc <vTaskSuspendAll+0x18>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	3301      	adds	r3, #1
 80086be:	4a03      	ldr	r2, [pc, #12]	; (80086cc <vTaskSuspendAll+0x18>)
 80086c0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80086c2:	bf00      	nop
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr
 80086cc:	200012a0 	.word	0x200012a0

080086d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b084      	sub	sp, #16
 80086d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80086d6:	2300      	movs	r3, #0
 80086d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80086da:	2300      	movs	r3, #0
 80086dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80086de:	4b42      	ldr	r3, [pc, #264]	; (80087e8 <xTaskResumeAll+0x118>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d10a      	bne.n	80086fc <xTaskResumeAll+0x2c>
	__asm volatile
 80086e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ea:	f383 8811 	msr	BASEPRI, r3
 80086ee:	f3bf 8f6f 	isb	sy
 80086f2:	f3bf 8f4f 	dsb	sy
 80086f6:	603b      	str	r3, [r7, #0]
}
 80086f8:	bf00      	nop
 80086fa:	e7fe      	b.n	80086fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80086fc:	f001 fa52 	bl	8009ba4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008700:	4b39      	ldr	r3, [pc, #228]	; (80087e8 <xTaskResumeAll+0x118>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	3b01      	subs	r3, #1
 8008706:	4a38      	ldr	r2, [pc, #224]	; (80087e8 <xTaskResumeAll+0x118>)
 8008708:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800870a:	4b37      	ldr	r3, [pc, #220]	; (80087e8 <xTaskResumeAll+0x118>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d162      	bne.n	80087d8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008712:	4b36      	ldr	r3, [pc, #216]	; (80087ec <xTaskResumeAll+0x11c>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d05e      	beq.n	80087d8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800871a:	e02f      	b.n	800877c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800871c:	4b34      	ldr	r3, [pc, #208]	; (80087f0 <xTaskResumeAll+0x120>)
 800871e:	68db      	ldr	r3, [r3, #12]
 8008720:	68db      	ldr	r3, [r3, #12]
 8008722:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	3318      	adds	r3, #24
 8008728:	4618      	mov	r0, r3
 800872a:	f7fe fbcb 	bl	8006ec4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	3304      	adds	r3, #4
 8008732:	4618      	mov	r0, r3
 8008734:	f7fe fbc6 	bl	8006ec4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800873c:	4b2d      	ldr	r3, [pc, #180]	; (80087f4 <xTaskResumeAll+0x124>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	429a      	cmp	r2, r3
 8008742:	d903      	bls.n	800874c <xTaskResumeAll+0x7c>
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008748:	4a2a      	ldr	r2, [pc, #168]	; (80087f4 <xTaskResumeAll+0x124>)
 800874a:	6013      	str	r3, [r2, #0]
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008750:	4613      	mov	r3, r2
 8008752:	009b      	lsls	r3, r3, #2
 8008754:	4413      	add	r3, r2
 8008756:	009b      	lsls	r3, r3, #2
 8008758:	4a27      	ldr	r2, [pc, #156]	; (80087f8 <xTaskResumeAll+0x128>)
 800875a:	441a      	add	r2, r3
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	3304      	adds	r3, #4
 8008760:	4619      	mov	r1, r3
 8008762:	4610      	mov	r0, r2
 8008764:	f7fe fb51 	bl	8006e0a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800876c:	4b23      	ldr	r3, [pc, #140]	; (80087fc <xTaskResumeAll+0x12c>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008772:	429a      	cmp	r2, r3
 8008774:	d302      	bcc.n	800877c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008776:	4b22      	ldr	r3, [pc, #136]	; (8008800 <xTaskResumeAll+0x130>)
 8008778:	2201      	movs	r2, #1
 800877a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800877c:	4b1c      	ldr	r3, [pc, #112]	; (80087f0 <xTaskResumeAll+0x120>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d1cb      	bne.n	800871c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d001      	beq.n	800878e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800878a:	f000 fb81 	bl	8008e90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800878e:	4b1d      	ldr	r3, [pc, #116]	; (8008804 <xTaskResumeAll+0x134>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d010      	beq.n	80087bc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800879a:	f000 f859 	bl	8008850 <xTaskIncrementTick>
 800879e:	4603      	mov	r3, r0
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d002      	beq.n	80087aa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80087a4:	4b16      	ldr	r3, [pc, #88]	; (8008800 <xTaskResumeAll+0x130>)
 80087a6:	2201      	movs	r2, #1
 80087a8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	3b01      	subs	r3, #1
 80087ae:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d1f1      	bne.n	800879a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80087b6:	4b13      	ldr	r3, [pc, #76]	; (8008804 <xTaskResumeAll+0x134>)
 80087b8:	2200      	movs	r2, #0
 80087ba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80087bc:	4b10      	ldr	r3, [pc, #64]	; (8008800 <xTaskResumeAll+0x130>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d009      	beq.n	80087d8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80087c4:	2301      	movs	r3, #1
 80087c6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80087c8:	4b0f      	ldr	r3, [pc, #60]	; (8008808 <xTaskResumeAll+0x138>)
 80087ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087ce:	601a      	str	r2, [r3, #0]
 80087d0:	f3bf 8f4f 	dsb	sy
 80087d4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80087d8:	f001 fa14 	bl	8009c04 <vPortExitCritical>

	return xAlreadyYielded;
 80087dc:	68bb      	ldr	r3, [r7, #8]
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3710      	adds	r7, #16
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	200012a0 	.word	0x200012a0
 80087ec:	20001278 	.word	0x20001278
 80087f0:	20001238 	.word	0x20001238
 80087f4:	20001280 	.word	0x20001280
 80087f8:	20000da8 	.word	0x20000da8
 80087fc:	20000da4 	.word	0x20000da4
 8008800:	2000128c 	.word	0x2000128c
 8008804:	20001288 	.word	0x20001288
 8008808:	e000ed04 	.word	0xe000ed04

0800880c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800880c:	b480      	push	{r7}
 800880e:	b083      	sub	sp, #12
 8008810:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008812:	4b05      	ldr	r3, [pc, #20]	; (8008828 <xTaskGetTickCount+0x1c>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008818:	687b      	ldr	r3, [r7, #4]
}
 800881a:	4618      	mov	r0, r3
 800881c:	370c      	adds	r7, #12
 800881e:	46bd      	mov	sp, r7
 8008820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008824:	4770      	bx	lr
 8008826:	bf00      	nop
 8008828:	2000127c 	.word	0x2000127c

0800882c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b082      	sub	sp, #8
 8008830:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008832:	f001 fa99 	bl	8009d68 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8008836:	2300      	movs	r3, #0
 8008838:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800883a:	4b04      	ldr	r3, [pc, #16]	; (800884c <xTaskGetTickCountFromISR+0x20>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008840:	683b      	ldr	r3, [r7, #0]
}
 8008842:	4618      	mov	r0, r3
 8008844:	3708      	adds	r7, #8
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}
 800884a:	bf00      	nop
 800884c:	2000127c 	.word	0x2000127c

08008850 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b086      	sub	sp, #24
 8008854:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008856:	2300      	movs	r3, #0
 8008858:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800885a:	4b4f      	ldr	r3, [pc, #316]	; (8008998 <xTaskIncrementTick+0x148>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	2b00      	cmp	r3, #0
 8008860:	f040 808f 	bne.w	8008982 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008864:	4b4d      	ldr	r3, [pc, #308]	; (800899c <xTaskIncrementTick+0x14c>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	3301      	adds	r3, #1
 800886a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800886c:	4a4b      	ldr	r2, [pc, #300]	; (800899c <xTaskIncrementTick+0x14c>)
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d120      	bne.n	80088ba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008878:	4b49      	ldr	r3, [pc, #292]	; (80089a0 <xTaskIncrementTick+0x150>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d00a      	beq.n	8008898 <xTaskIncrementTick+0x48>
	__asm volatile
 8008882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008886:	f383 8811 	msr	BASEPRI, r3
 800888a:	f3bf 8f6f 	isb	sy
 800888e:	f3bf 8f4f 	dsb	sy
 8008892:	603b      	str	r3, [r7, #0]
}
 8008894:	bf00      	nop
 8008896:	e7fe      	b.n	8008896 <xTaskIncrementTick+0x46>
 8008898:	4b41      	ldr	r3, [pc, #260]	; (80089a0 <xTaskIncrementTick+0x150>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	60fb      	str	r3, [r7, #12]
 800889e:	4b41      	ldr	r3, [pc, #260]	; (80089a4 <xTaskIncrementTick+0x154>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a3f      	ldr	r2, [pc, #252]	; (80089a0 <xTaskIncrementTick+0x150>)
 80088a4:	6013      	str	r3, [r2, #0]
 80088a6:	4a3f      	ldr	r2, [pc, #252]	; (80089a4 <xTaskIncrementTick+0x154>)
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	6013      	str	r3, [r2, #0]
 80088ac:	4b3e      	ldr	r3, [pc, #248]	; (80089a8 <xTaskIncrementTick+0x158>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	3301      	adds	r3, #1
 80088b2:	4a3d      	ldr	r2, [pc, #244]	; (80089a8 <xTaskIncrementTick+0x158>)
 80088b4:	6013      	str	r3, [r2, #0]
 80088b6:	f000 faeb 	bl	8008e90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80088ba:	4b3c      	ldr	r3, [pc, #240]	; (80089ac <xTaskIncrementTick+0x15c>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	693a      	ldr	r2, [r7, #16]
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d349      	bcc.n	8008958 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088c4:	4b36      	ldr	r3, [pc, #216]	; (80089a0 <xTaskIncrementTick+0x150>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d104      	bne.n	80088d8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088ce:	4b37      	ldr	r3, [pc, #220]	; (80089ac <xTaskIncrementTick+0x15c>)
 80088d0:	f04f 32ff 	mov.w	r2, #4294967295
 80088d4:	601a      	str	r2, [r3, #0]
					break;
 80088d6:	e03f      	b.n	8008958 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088d8:	4b31      	ldr	r3, [pc, #196]	; (80089a0 <xTaskIncrementTick+0x150>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	68db      	ldr	r3, [r3, #12]
 80088de:	68db      	ldr	r3, [r3, #12]
 80088e0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80088e8:	693a      	ldr	r2, [r7, #16]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d203      	bcs.n	80088f8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80088f0:	4a2e      	ldr	r2, [pc, #184]	; (80089ac <xTaskIncrementTick+0x15c>)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80088f6:	e02f      	b.n	8008958 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	3304      	adds	r3, #4
 80088fc:	4618      	mov	r0, r3
 80088fe:	f7fe fae1 	bl	8006ec4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008906:	2b00      	cmp	r3, #0
 8008908:	d004      	beq.n	8008914 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	3318      	adds	r3, #24
 800890e:	4618      	mov	r0, r3
 8008910:	f7fe fad8 	bl	8006ec4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008918:	4b25      	ldr	r3, [pc, #148]	; (80089b0 <xTaskIncrementTick+0x160>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	429a      	cmp	r2, r3
 800891e:	d903      	bls.n	8008928 <xTaskIncrementTick+0xd8>
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008924:	4a22      	ldr	r2, [pc, #136]	; (80089b0 <xTaskIncrementTick+0x160>)
 8008926:	6013      	str	r3, [r2, #0]
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800892c:	4613      	mov	r3, r2
 800892e:	009b      	lsls	r3, r3, #2
 8008930:	4413      	add	r3, r2
 8008932:	009b      	lsls	r3, r3, #2
 8008934:	4a1f      	ldr	r2, [pc, #124]	; (80089b4 <xTaskIncrementTick+0x164>)
 8008936:	441a      	add	r2, r3
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	3304      	adds	r3, #4
 800893c:	4619      	mov	r1, r3
 800893e:	4610      	mov	r0, r2
 8008940:	f7fe fa63 	bl	8006e0a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008948:	4b1b      	ldr	r3, [pc, #108]	; (80089b8 <xTaskIncrementTick+0x168>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800894e:	429a      	cmp	r2, r3
 8008950:	d3b8      	bcc.n	80088c4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008952:	2301      	movs	r3, #1
 8008954:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008956:	e7b5      	b.n	80088c4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008958:	4b17      	ldr	r3, [pc, #92]	; (80089b8 <xTaskIncrementTick+0x168>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800895e:	4915      	ldr	r1, [pc, #84]	; (80089b4 <xTaskIncrementTick+0x164>)
 8008960:	4613      	mov	r3, r2
 8008962:	009b      	lsls	r3, r3, #2
 8008964:	4413      	add	r3, r2
 8008966:	009b      	lsls	r3, r3, #2
 8008968:	440b      	add	r3, r1
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	2b01      	cmp	r3, #1
 800896e:	d901      	bls.n	8008974 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008970:	2301      	movs	r3, #1
 8008972:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008974:	4b11      	ldr	r3, [pc, #68]	; (80089bc <xTaskIncrementTick+0x16c>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d007      	beq.n	800898c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800897c:	2301      	movs	r3, #1
 800897e:	617b      	str	r3, [r7, #20]
 8008980:	e004      	b.n	800898c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008982:	4b0f      	ldr	r3, [pc, #60]	; (80089c0 <xTaskIncrementTick+0x170>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	3301      	adds	r3, #1
 8008988:	4a0d      	ldr	r2, [pc, #52]	; (80089c0 <xTaskIncrementTick+0x170>)
 800898a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800898c:	697b      	ldr	r3, [r7, #20]
}
 800898e:	4618      	mov	r0, r3
 8008990:	3718      	adds	r7, #24
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
 8008996:	bf00      	nop
 8008998:	200012a0 	.word	0x200012a0
 800899c:	2000127c 	.word	0x2000127c
 80089a0:	20001230 	.word	0x20001230
 80089a4:	20001234 	.word	0x20001234
 80089a8:	20001290 	.word	0x20001290
 80089ac:	20001298 	.word	0x20001298
 80089b0:	20001280 	.word	0x20001280
 80089b4:	20000da8 	.word	0x20000da8
 80089b8:	20000da4 	.word	0x20000da4
 80089bc:	2000128c 	.word	0x2000128c
 80089c0:	20001288 	.word	0x20001288

080089c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b084      	sub	sp, #16
 80089c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80089ca:	4b32      	ldr	r3, [pc, #200]	; (8008a94 <vTaskSwitchContext+0xd0>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d003      	beq.n	80089da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80089d2:	4b31      	ldr	r3, [pc, #196]	; (8008a98 <vTaskSwitchContext+0xd4>)
 80089d4:	2201      	movs	r2, #1
 80089d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80089d8:	e057      	b.n	8008a8a <vTaskSwitchContext+0xc6>
		xYieldPending = pdFALSE;
 80089da:	4b2f      	ldr	r3, [pc, #188]	; (8008a98 <vTaskSwitchContext+0xd4>)
 80089dc:	2200      	movs	r2, #0
 80089de:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80089e0:	4b2e      	ldr	r3, [pc, #184]	; (8008a9c <vTaskSwitchContext+0xd8>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	681a      	ldr	r2, [r3, #0]
 80089e6:	4b2d      	ldr	r3, [pc, #180]	; (8008a9c <vTaskSwitchContext+0xd8>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d808      	bhi.n	8008a02 <vTaskSwitchContext+0x3e>
 80089f0:	4b2a      	ldr	r3, [pc, #168]	; (8008a9c <vTaskSwitchContext+0xd8>)
 80089f2:	681a      	ldr	r2, [r3, #0]
 80089f4:	4b29      	ldr	r3, [pc, #164]	; (8008a9c <vTaskSwitchContext+0xd8>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	3334      	adds	r3, #52	; 0x34
 80089fa:	4619      	mov	r1, r3
 80089fc:	4610      	mov	r0, r2
 80089fe:	f7f8 fa9f 	bl	8000f40 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a02:	4b27      	ldr	r3, [pc, #156]	; (8008aa0 <vTaskSwitchContext+0xdc>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	60fb      	str	r3, [r7, #12]
 8008a08:	e010      	b.n	8008a2c <vTaskSwitchContext+0x68>
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d10a      	bne.n	8008a26 <vTaskSwitchContext+0x62>
	__asm volatile
 8008a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a14:	f383 8811 	msr	BASEPRI, r3
 8008a18:	f3bf 8f6f 	isb	sy
 8008a1c:	f3bf 8f4f 	dsb	sy
 8008a20:	607b      	str	r3, [r7, #4]
}
 8008a22:	bf00      	nop
 8008a24:	e7fe      	b.n	8008a24 <vTaskSwitchContext+0x60>
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	3b01      	subs	r3, #1
 8008a2a:	60fb      	str	r3, [r7, #12]
 8008a2c:	491d      	ldr	r1, [pc, #116]	; (8008aa4 <vTaskSwitchContext+0xe0>)
 8008a2e:	68fa      	ldr	r2, [r7, #12]
 8008a30:	4613      	mov	r3, r2
 8008a32:	009b      	lsls	r3, r3, #2
 8008a34:	4413      	add	r3, r2
 8008a36:	009b      	lsls	r3, r3, #2
 8008a38:	440b      	add	r3, r1
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d0e4      	beq.n	8008a0a <vTaskSwitchContext+0x46>
 8008a40:	68fa      	ldr	r2, [r7, #12]
 8008a42:	4613      	mov	r3, r2
 8008a44:	009b      	lsls	r3, r3, #2
 8008a46:	4413      	add	r3, r2
 8008a48:	009b      	lsls	r3, r3, #2
 8008a4a:	4a16      	ldr	r2, [pc, #88]	; (8008aa4 <vTaskSwitchContext+0xe0>)
 8008a4c:	4413      	add	r3, r2
 8008a4e:	60bb      	str	r3, [r7, #8]
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	685a      	ldr	r2, [r3, #4]
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	605a      	str	r2, [r3, #4]
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	685a      	ldr	r2, [r3, #4]
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	3308      	adds	r3, #8
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d104      	bne.n	8008a70 <vTaskSwitchContext+0xac>
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	685a      	ldr	r2, [r3, #4]
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	605a      	str	r2, [r3, #4]
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	68db      	ldr	r3, [r3, #12]
 8008a76:	4a09      	ldr	r2, [pc, #36]	; (8008a9c <vTaskSwitchContext+0xd8>)
 8008a78:	6013      	str	r3, [r2, #0]
 8008a7a:	4a09      	ldr	r2, [pc, #36]	; (8008aa0 <vTaskSwitchContext+0xdc>)
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008a80:	4b06      	ldr	r3, [pc, #24]	; (8008a9c <vTaskSwitchContext+0xd8>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	3354      	adds	r3, #84	; 0x54
 8008a86:	4a08      	ldr	r2, [pc, #32]	; (8008aa8 <vTaskSwitchContext+0xe4>)
 8008a88:	6013      	str	r3, [r2, #0]
}
 8008a8a:	bf00      	nop
 8008a8c:	3710      	adds	r7, #16
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop
 8008a94:	200012a0 	.word	0x200012a0
 8008a98:	2000128c 	.word	0x2000128c
 8008a9c:	20000da4 	.word	0x20000da4
 8008aa0:	20001280 	.word	0x20001280
 8008aa4:	20000da8 	.word	0x20000da8
 8008aa8:	10000134 	.word	0x10000134

08008aac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b084      	sub	sp, #16
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d10a      	bne.n	8008ad2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac0:	f383 8811 	msr	BASEPRI, r3
 8008ac4:	f3bf 8f6f 	isb	sy
 8008ac8:	f3bf 8f4f 	dsb	sy
 8008acc:	60fb      	str	r3, [r7, #12]
}
 8008ace:	bf00      	nop
 8008ad0:	e7fe      	b.n	8008ad0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008ad2:	4b07      	ldr	r3, [pc, #28]	; (8008af0 <vTaskPlaceOnEventList+0x44>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	3318      	adds	r3, #24
 8008ad8:	4619      	mov	r1, r3
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f7fe f9b9 	bl	8006e52 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008ae0:	2101      	movs	r1, #1
 8008ae2:	6838      	ldr	r0, [r7, #0]
 8008ae4:	f000 fb8e 	bl	8009204 <prvAddCurrentTaskToDelayedList>
}
 8008ae8:	bf00      	nop
 8008aea:	3710      	adds	r7, #16
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}
 8008af0:	20000da4 	.word	0x20000da4

08008af4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b086      	sub	sp, #24
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	60f8      	str	r0, [r7, #12]
 8008afc:	60b9      	str	r1, [r7, #8]
 8008afe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d10a      	bne.n	8008b1c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b0a:	f383 8811 	msr	BASEPRI, r3
 8008b0e:	f3bf 8f6f 	isb	sy
 8008b12:	f3bf 8f4f 	dsb	sy
 8008b16:	617b      	str	r3, [r7, #20]
}
 8008b18:	bf00      	nop
 8008b1a:	e7fe      	b.n	8008b1a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b1c:	4b0a      	ldr	r3, [pc, #40]	; (8008b48 <vTaskPlaceOnEventListRestricted+0x54>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	3318      	adds	r3, #24
 8008b22:	4619      	mov	r1, r3
 8008b24:	68f8      	ldr	r0, [r7, #12]
 8008b26:	f7fe f970 	bl	8006e0a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d002      	beq.n	8008b36 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008b30:	f04f 33ff 	mov.w	r3, #4294967295
 8008b34:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008b36:	6879      	ldr	r1, [r7, #4]
 8008b38:	68b8      	ldr	r0, [r7, #8]
 8008b3a:	f000 fb63 	bl	8009204 <prvAddCurrentTaskToDelayedList>
	}
 8008b3e:	bf00      	nop
 8008b40:	3718      	adds	r7, #24
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	bf00      	nop
 8008b48:	20000da4 	.word	0x20000da4

08008b4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b086      	sub	sp, #24
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	68db      	ldr	r3, [r3, #12]
 8008b58:	68db      	ldr	r3, [r3, #12]
 8008b5a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d10a      	bne.n	8008b78 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b66:	f383 8811 	msr	BASEPRI, r3
 8008b6a:	f3bf 8f6f 	isb	sy
 8008b6e:	f3bf 8f4f 	dsb	sy
 8008b72:	60fb      	str	r3, [r7, #12]
}
 8008b74:	bf00      	nop
 8008b76:	e7fe      	b.n	8008b76 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	3318      	adds	r3, #24
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f7fe f9a1 	bl	8006ec4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b82:	4b1e      	ldr	r3, [pc, #120]	; (8008bfc <xTaskRemoveFromEventList+0xb0>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d11d      	bne.n	8008bc6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	3304      	adds	r3, #4
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f7fe f998 	bl	8006ec4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b98:	4b19      	ldr	r3, [pc, #100]	; (8008c00 <xTaskRemoveFromEventList+0xb4>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d903      	bls.n	8008ba8 <xTaskRemoveFromEventList+0x5c>
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ba4:	4a16      	ldr	r2, [pc, #88]	; (8008c00 <xTaskRemoveFromEventList+0xb4>)
 8008ba6:	6013      	str	r3, [r2, #0]
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bac:	4613      	mov	r3, r2
 8008bae:	009b      	lsls	r3, r3, #2
 8008bb0:	4413      	add	r3, r2
 8008bb2:	009b      	lsls	r3, r3, #2
 8008bb4:	4a13      	ldr	r2, [pc, #76]	; (8008c04 <xTaskRemoveFromEventList+0xb8>)
 8008bb6:	441a      	add	r2, r3
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	3304      	adds	r3, #4
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	4610      	mov	r0, r2
 8008bc0:	f7fe f923 	bl	8006e0a <vListInsertEnd>
 8008bc4:	e005      	b.n	8008bd2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	3318      	adds	r3, #24
 8008bca:	4619      	mov	r1, r3
 8008bcc:	480e      	ldr	r0, [pc, #56]	; (8008c08 <xTaskRemoveFromEventList+0xbc>)
 8008bce:	f7fe f91c 	bl	8006e0a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bd6:	4b0d      	ldr	r3, [pc, #52]	; (8008c0c <xTaskRemoveFromEventList+0xc0>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	d905      	bls.n	8008bec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008be0:	2301      	movs	r3, #1
 8008be2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008be4:	4b0a      	ldr	r3, [pc, #40]	; (8008c10 <xTaskRemoveFromEventList+0xc4>)
 8008be6:	2201      	movs	r2, #1
 8008be8:	601a      	str	r2, [r3, #0]
 8008bea:	e001      	b.n	8008bf0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008bec:	2300      	movs	r3, #0
 8008bee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008bf0:	697b      	ldr	r3, [r7, #20]
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3718      	adds	r7, #24
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}
 8008bfa:	bf00      	nop
 8008bfc:	200012a0 	.word	0x200012a0
 8008c00:	20001280 	.word	0x20001280
 8008c04:	20000da8 	.word	0x20000da8
 8008c08:	20001238 	.word	0x20001238
 8008c0c:	20000da4 	.word	0x20000da4
 8008c10:	2000128c 	.word	0x2000128c

08008c14 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008c14:	b480      	push	{r7}
 8008c16:	b083      	sub	sp, #12
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008c1c:	4b06      	ldr	r3, [pc, #24]	; (8008c38 <vTaskInternalSetTimeOutState+0x24>)
 8008c1e:	681a      	ldr	r2, [r3, #0]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008c24:	4b05      	ldr	r3, [pc, #20]	; (8008c3c <vTaskInternalSetTimeOutState+0x28>)
 8008c26:	681a      	ldr	r2, [r3, #0]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	605a      	str	r2, [r3, #4]
}
 8008c2c:	bf00      	nop
 8008c2e:	370c      	adds	r7, #12
 8008c30:	46bd      	mov	sp, r7
 8008c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c36:	4770      	bx	lr
 8008c38:	20001290 	.word	0x20001290
 8008c3c:	2000127c 	.word	0x2000127c

08008c40 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b088      	sub	sp, #32
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d10a      	bne.n	8008c66 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c54:	f383 8811 	msr	BASEPRI, r3
 8008c58:	f3bf 8f6f 	isb	sy
 8008c5c:	f3bf 8f4f 	dsb	sy
 8008c60:	613b      	str	r3, [r7, #16]
}
 8008c62:	bf00      	nop
 8008c64:	e7fe      	b.n	8008c64 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d10a      	bne.n	8008c82 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c70:	f383 8811 	msr	BASEPRI, r3
 8008c74:	f3bf 8f6f 	isb	sy
 8008c78:	f3bf 8f4f 	dsb	sy
 8008c7c:	60fb      	str	r3, [r7, #12]
}
 8008c7e:	bf00      	nop
 8008c80:	e7fe      	b.n	8008c80 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008c82:	f000 ff8f 	bl	8009ba4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008c86:	4b1d      	ldr	r3, [pc, #116]	; (8008cfc <xTaskCheckForTimeOut+0xbc>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	69ba      	ldr	r2, [r7, #24]
 8008c92:	1ad3      	subs	r3, r2, r3
 8008c94:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c9e:	d102      	bne.n	8008ca6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	61fb      	str	r3, [r7, #28]
 8008ca4:	e023      	b.n	8008cee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681a      	ldr	r2, [r3, #0]
 8008caa:	4b15      	ldr	r3, [pc, #84]	; (8008d00 <xTaskCheckForTimeOut+0xc0>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	d007      	beq.n	8008cc2 <xTaskCheckForTimeOut+0x82>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	69ba      	ldr	r2, [r7, #24]
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d302      	bcc.n	8008cc2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	61fb      	str	r3, [r7, #28]
 8008cc0:	e015      	b.n	8008cee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	697a      	ldr	r2, [r7, #20]
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d20b      	bcs.n	8008ce4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	1ad2      	subs	r2, r2, r3
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f7ff ff9b 	bl	8008c14 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	61fb      	str	r3, [r7, #28]
 8008ce2:	e004      	b.n	8008cee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008cea:	2301      	movs	r3, #1
 8008cec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008cee:	f000 ff89 	bl	8009c04 <vPortExitCritical>

	return xReturn;
 8008cf2:	69fb      	ldr	r3, [r7, #28]
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3720      	adds	r7, #32
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}
 8008cfc:	2000127c 	.word	0x2000127c
 8008d00:	20001290 	.word	0x20001290

08008d04 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008d04:	b480      	push	{r7}
 8008d06:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008d08:	4b03      	ldr	r3, [pc, #12]	; (8008d18 <vTaskMissedYield+0x14>)
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	601a      	str	r2, [r3, #0]
}
 8008d0e:	bf00      	nop
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr
 8008d18:	2000128c 	.word	0x2000128c

08008d1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b082      	sub	sp, #8
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008d24:	f000 f852 	bl	8008dcc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008d28:	4b06      	ldr	r3, [pc, #24]	; (8008d44 <prvIdleTask+0x28>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d9f9      	bls.n	8008d24 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008d30:	4b05      	ldr	r3, [pc, #20]	; (8008d48 <prvIdleTask+0x2c>)
 8008d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d36:	601a      	str	r2, [r3, #0]
 8008d38:	f3bf 8f4f 	dsb	sy
 8008d3c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008d40:	e7f0      	b.n	8008d24 <prvIdleTask+0x8>
 8008d42:	bf00      	nop
 8008d44:	20000da8 	.word	0x20000da8
 8008d48:	e000ed04 	.word	0xe000ed04

08008d4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b082      	sub	sp, #8
 8008d50:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008d52:	2300      	movs	r3, #0
 8008d54:	607b      	str	r3, [r7, #4]
 8008d56:	e00c      	b.n	8008d72 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008d58:	687a      	ldr	r2, [r7, #4]
 8008d5a:	4613      	mov	r3, r2
 8008d5c:	009b      	lsls	r3, r3, #2
 8008d5e:	4413      	add	r3, r2
 8008d60:	009b      	lsls	r3, r3, #2
 8008d62:	4a12      	ldr	r2, [pc, #72]	; (8008dac <prvInitialiseTaskLists+0x60>)
 8008d64:	4413      	add	r3, r2
 8008d66:	4618      	mov	r0, r3
 8008d68:	f7fe f822 	bl	8006db0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	3301      	adds	r3, #1
 8008d70:	607b      	str	r3, [r7, #4]
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2b37      	cmp	r3, #55	; 0x37
 8008d76:	d9ef      	bls.n	8008d58 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008d78:	480d      	ldr	r0, [pc, #52]	; (8008db0 <prvInitialiseTaskLists+0x64>)
 8008d7a:	f7fe f819 	bl	8006db0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008d7e:	480d      	ldr	r0, [pc, #52]	; (8008db4 <prvInitialiseTaskLists+0x68>)
 8008d80:	f7fe f816 	bl	8006db0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008d84:	480c      	ldr	r0, [pc, #48]	; (8008db8 <prvInitialiseTaskLists+0x6c>)
 8008d86:	f7fe f813 	bl	8006db0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008d8a:	480c      	ldr	r0, [pc, #48]	; (8008dbc <prvInitialiseTaskLists+0x70>)
 8008d8c:	f7fe f810 	bl	8006db0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008d90:	480b      	ldr	r0, [pc, #44]	; (8008dc0 <prvInitialiseTaskLists+0x74>)
 8008d92:	f7fe f80d 	bl	8006db0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008d96:	4b0b      	ldr	r3, [pc, #44]	; (8008dc4 <prvInitialiseTaskLists+0x78>)
 8008d98:	4a05      	ldr	r2, [pc, #20]	; (8008db0 <prvInitialiseTaskLists+0x64>)
 8008d9a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008d9c:	4b0a      	ldr	r3, [pc, #40]	; (8008dc8 <prvInitialiseTaskLists+0x7c>)
 8008d9e:	4a05      	ldr	r2, [pc, #20]	; (8008db4 <prvInitialiseTaskLists+0x68>)
 8008da0:	601a      	str	r2, [r3, #0]
}
 8008da2:	bf00      	nop
 8008da4:	3708      	adds	r7, #8
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}
 8008daa:	bf00      	nop
 8008dac:	20000da8 	.word	0x20000da8
 8008db0:	20001208 	.word	0x20001208
 8008db4:	2000121c 	.word	0x2000121c
 8008db8:	20001238 	.word	0x20001238
 8008dbc:	2000124c 	.word	0x2000124c
 8008dc0:	20001264 	.word	0x20001264
 8008dc4:	20001230 	.word	0x20001230
 8008dc8:	20001234 	.word	0x20001234

08008dcc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b082      	sub	sp, #8
 8008dd0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008dd2:	e019      	b.n	8008e08 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008dd4:	f000 fee6 	bl	8009ba4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008dd8:	4b10      	ldr	r3, [pc, #64]	; (8008e1c <prvCheckTasksWaitingTermination+0x50>)
 8008dda:	68db      	ldr	r3, [r3, #12]
 8008ddc:	68db      	ldr	r3, [r3, #12]
 8008dde:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	3304      	adds	r3, #4
 8008de4:	4618      	mov	r0, r3
 8008de6:	f7fe f86d 	bl	8006ec4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008dea:	4b0d      	ldr	r3, [pc, #52]	; (8008e20 <prvCheckTasksWaitingTermination+0x54>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	3b01      	subs	r3, #1
 8008df0:	4a0b      	ldr	r2, [pc, #44]	; (8008e20 <prvCheckTasksWaitingTermination+0x54>)
 8008df2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008df4:	4b0b      	ldr	r3, [pc, #44]	; (8008e24 <prvCheckTasksWaitingTermination+0x58>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	3b01      	subs	r3, #1
 8008dfa:	4a0a      	ldr	r2, [pc, #40]	; (8008e24 <prvCheckTasksWaitingTermination+0x58>)
 8008dfc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008dfe:	f000 ff01 	bl	8009c04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f000 f810 	bl	8008e28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e08:	4b06      	ldr	r3, [pc, #24]	; (8008e24 <prvCheckTasksWaitingTermination+0x58>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d1e1      	bne.n	8008dd4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008e10:	bf00      	nop
 8008e12:	bf00      	nop
 8008e14:	3708      	adds	r7, #8
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}
 8008e1a:	bf00      	nop
 8008e1c:	2000124c 	.word	0x2000124c
 8008e20:	20001278 	.word	0x20001278
 8008e24:	20001260 	.word	0x20001260

08008e28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b084      	sub	sp, #16
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	3354      	adds	r3, #84	; 0x54
 8008e34:	4618      	mov	r0, r3
 8008e36:	f013 fec9 	bl	801cbcc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d108      	bne.n	8008e56 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f001 f899 	bl	8009f80 <vPortFree>
				vPortFree( pxTCB );
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f001 f896 	bl	8009f80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008e54:	e018      	b.n	8008e88 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	d103      	bne.n	8008e68 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f001 f88d 	bl	8009f80 <vPortFree>
	}
 8008e66:	e00f      	b.n	8008e88 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008e6e:	2b02      	cmp	r3, #2
 8008e70:	d00a      	beq.n	8008e88 <prvDeleteTCB+0x60>
	__asm volatile
 8008e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e76:	f383 8811 	msr	BASEPRI, r3
 8008e7a:	f3bf 8f6f 	isb	sy
 8008e7e:	f3bf 8f4f 	dsb	sy
 8008e82:	60fb      	str	r3, [r7, #12]
}
 8008e84:	bf00      	nop
 8008e86:	e7fe      	b.n	8008e86 <prvDeleteTCB+0x5e>
	}
 8008e88:	bf00      	nop
 8008e8a:	3710      	adds	r7, #16
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008e90:	b480      	push	{r7}
 8008e92:	b083      	sub	sp, #12
 8008e94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e96:	4b0c      	ldr	r3, [pc, #48]	; (8008ec8 <prvResetNextTaskUnblockTime+0x38>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d104      	bne.n	8008eaa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008ea0:	4b0a      	ldr	r3, [pc, #40]	; (8008ecc <prvResetNextTaskUnblockTime+0x3c>)
 8008ea2:	f04f 32ff 	mov.w	r2, #4294967295
 8008ea6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008ea8:	e008      	b.n	8008ebc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008eaa:	4b07      	ldr	r3, [pc, #28]	; (8008ec8 <prvResetNextTaskUnblockTime+0x38>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	68db      	ldr	r3, [r3, #12]
 8008eb0:	68db      	ldr	r3, [r3, #12]
 8008eb2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	4a04      	ldr	r2, [pc, #16]	; (8008ecc <prvResetNextTaskUnblockTime+0x3c>)
 8008eba:	6013      	str	r3, [r2, #0]
}
 8008ebc:	bf00      	nop
 8008ebe:	370c      	adds	r7, #12
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec6:	4770      	bx	lr
 8008ec8:	20001230 	.word	0x20001230
 8008ecc:	20001298 	.word	0x20001298

08008ed0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b083      	sub	sp, #12
 8008ed4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008ed6:	4b05      	ldr	r3, [pc, #20]	; (8008eec <xTaskGetCurrentTaskHandle+0x1c>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008edc:	687b      	ldr	r3, [r7, #4]
	}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	370c      	adds	r7, #12
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee8:	4770      	bx	lr
 8008eea:	bf00      	nop
 8008eec:	20000da4 	.word	0x20000da4

08008ef0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b083      	sub	sp, #12
 8008ef4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008ef6:	4b0b      	ldr	r3, [pc, #44]	; (8008f24 <xTaskGetSchedulerState+0x34>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d102      	bne.n	8008f04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008efe:	2301      	movs	r3, #1
 8008f00:	607b      	str	r3, [r7, #4]
 8008f02:	e008      	b.n	8008f16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f04:	4b08      	ldr	r3, [pc, #32]	; (8008f28 <xTaskGetSchedulerState+0x38>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d102      	bne.n	8008f12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008f0c:	2302      	movs	r3, #2
 8008f0e:	607b      	str	r3, [r7, #4]
 8008f10:	e001      	b.n	8008f16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008f12:	2300      	movs	r3, #0
 8008f14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008f16:	687b      	ldr	r3, [r7, #4]
	}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	370c      	adds	r7, #12
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f22:	4770      	bx	lr
 8008f24:	20001284 	.word	0x20001284
 8008f28:	200012a0 	.word	0x200012a0

08008f2c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b084      	sub	sp, #16
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d051      	beq.n	8008fe6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f46:	4b2a      	ldr	r3, [pc, #168]	; (8008ff0 <xTaskPriorityInherit+0xc4>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d241      	bcs.n	8008fd4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	699b      	ldr	r3, [r3, #24]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	db06      	blt.n	8008f66 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f58:	4b25      	ldr	r3, [pc, #148]	; (8008ff0 <xTaskPriorityInherit+0xc4>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f5e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	6959      	ldr	r1, [r3, #20]
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f6e:	4613      	mov	r3, r2
 8008f70:	009b      	lsls	r3, r3, #2
 8008f72:	4413      	add	r3, r2
 8008f74:	009b      	lsls	r3, r3, #2
 8008f76:	4a1f      	ldr	r2, [pc, #124]	; (8008ff4 <xTaskPriorityInherit+0xc8>)
 8008f78:	4413      	add	r3, r2
 8008f7a:	4299      	cmp	r1, r3
 8008f7c:	d122      	bne.n	8008fc4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	3304      	adds	r3, #4
 8008f82:	4618      	mov	r0, r3
 8008f84:	f7fd ff9e 	bl	8006ec4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008f88:	4b19      	ldr	r3, [pc, #100]	; (8008ff0 <xTaskPriorityInherit+0xc4>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f96:	4b18      	ldr	r3, [pc, #96]	; (8008ff8 <xTaskPriorityInherit+0xcc>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	d903      	bls.n	8008fa6 <xTaskPriorityInherit+0x7a>
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fa2:	4a15      	ldr	r2, [pc, #84]	; (8008ff8 <xTaskPriorityInherit+0xcc>)
 8008fa4:	6013      	str	r3, [r2, #0]
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008faa:	4613      	mov	r3, r2
 8008fac:	009b      	lsls	r3, r3, #2
 8008fae:	4413      	add	r3, r2
 8008fb0:	009b      	lsls	r3, r3, #2
 8008fb2:	4a10      	ldr	r2, [pc, #64]	; (8008ff4 <xTaskPriorityInherit+0xc8>)
 8008fb4:	441a      	add	r2, r3
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	3304      	adds	r3, #4
 8008fba:	4619      	mov	r1, r3
 8008fbc:	4610      	mov	r0, r2
 8008fbe:	f7fd ff24 	bl	8006e0a <vListInsertEnd>
 8008fc2:	e004      	b.n	8008fce <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008fc4:	4b0a      	ldr	r3, [pc, #40]	; (8008ff0 <xTaskPriorityInherit+0xc4>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008fce:	2301      	movs	r3, #1
 8008fd0:	60fb      	str	r3, [r7, #12]
 8008fd2:	e008      	b.n	8008fe6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008fd8:	4b05      	ldr	r3, [pc, #20]	; (8008ff0 <xTaskPriorityInherit+0xc4>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	d201      	bcs.n	8008fe6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
	}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3710      	adds	r7, #16
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}
 8008ff0:	20000da4 	.word	0x20000da4
 8008ff4:	20000da8 	.word	0x20000da8
 8008ff8:	20001280 	.word	0x20001280

08008ffc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b086      	sub	sp, #24
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009008:	2300      	movs	r3, #0
 800900a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d056      	beq.n	80090c0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009012:	4b2e      	ldr	r3, [pc, #184]	; (80090cc <xTaskPriorityDisinherit+0xd0>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	693a      	ldr	r2, [r7, #16]
 8009018:	429a      	cmp	r2, r3
 800901a:	d00a      	beq.n	8009032 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800901c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009020:	f383 8811 	msr	BASEPRI, r3
 8009024:	f3bf 8f6f 	isb	sy
 8009028:	f3bf 8f4f 	dsb	sy
 800902c:	60fb      	str	r3, [r7, #12]
}
 800902e:	bf00      	nop
 8009030:	e7fe      	b.n	8009030 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009036:	2b00      	cmp	r3, #0
 8009038:	d10a      	bne.n	8009050 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800903a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800903e:	f383 8811 	msr	BASEPRI, r3
 8009042:	f3bf 8f6f 	isb	sy
 8009046:	f3bf 8f4f 	dsb	sy
 800904a:	60bb      	str	r3, [r7, #8]
}
 800904c:	bf00      	nop
 800904e:	e7fe      	b.n	800904e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009054:	1e5a      	subs	r2, r3, #1
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009062:	429a      	cmp	r2, r3
 8009064:	d02c      	beq.n	80090c0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800906a:	2b00      	cmp	r3, #0
 800906c:	d128      	bne.n	80090c0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	3304      	adds	r3, #4
 8009072:	4618      	mov	r0, r3
 8009074:	f7fd ff26 	bl	8006ec4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009084:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009090:	4b0f      	ldr	r3, [pc, #60]	; (80090d0 <xTaskPriorityDisinherit+0xd4>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	429a      	cmp	r2, r3
 8009096:	d903      	bls.n	80090a0 <xTaskPriorityDisinherit+0xa4>
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800909c:	4a0c      	ldr	r2, [pc, #48]	; (80090d0 <xTaskPriorityDisinherit+0xd4>)
 800909e:	6013      	str	r3, [r2, #0]
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090a4:	4613      	mov	r3, r2
 80090a6:	009b      	lsls	r3, r3, #2
 80090a8:	4413      	add	r3, r2
 80090aa:	009b      	lsls	r3, r3, #2
 80090ac:	4a09      	ldr	r2, [pc, #36]	; (80090d4 <xTaskPriorityDisinherit+0xd8>)
 80090ae:	441a      	add	r2, r3
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	3304      	adds	r3, #4
 80090b4:	4619      	mov	r1, r3
 80090b6:	4610      	mov	r0, r2
 80090b8:	f7fd fea7 	bl	8006e0a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80090bc:	2301      	movs	r3, #1
 80090be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80090c0:	697b      	ldr	r3, [r7, #20]
	}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3718      	adds	r7, #24
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}
 80090ca:	bf00      	nop
 80090cc:	20000da4 	.word	0x20000da4
 80090d0:	20001280 	.word	0x20001280
 80090d4:	20000da8 	.word	0x20000da8

080090d8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b088      	sub	sp, #32
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80090e6:	2301      	movs	r3, #1
 80090e8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d06a      	beq.n	80091c6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80090f0:	69bb      	ldr	r3, [r7, #24]
 80090f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d10a      	bne.n	800910e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80090f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090fc:	f383 8811 	msr	BASEPRI, r3
 8009100:	f3bf 8f6f 	isb	sy
 8009104:	f3bf 8f4f 	dsb	sy
 8009108:	60fb      	str	r3, [r7, #12]
}
 800910a:	bf00      	nop
 800910c:	e7fe      	b.n	800910c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800910e:	69bb      	ldr	r3, [r7, #24]
 8009110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009112:	683a      	ldr	r2, [r7, #0]
 8009114:	429a      	cmp	r2, r3
 8009116:	d902      	bls.n	800911e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	61fb      	str	r3, [r7, #28]
 800911c:	e002      	b.n	8009124 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800911e:	69bb      	ldr	r3, [r7, #24]
 8009120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009122:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009124:	69bb      	ldr	r3, [r7, #24]
 8009126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009128:	69fa      	ldr	r2, [r7, #28]
 800912a:	429a      	cmp	r2, r3
 800912c:	d04b      	beq.n	80091c6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800912e:	69bb      	ldr	r3, [r7, #24]
 8009130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009132:	697a      	ldr	r2, [r7, #20]
 8009134:	429a      	cmp	r2, r3
 8009136:	d146      	bne.n	80091c6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009138:	4b25      	ldr	r3, [pc, #148]	; (80091d0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	69ba      	ldr	r2, [r7, #24]
 800913e:	429a      	cmp	r2, r3
 8009140:	d10a      	bne.n	8009158 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8009142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009146:	f383 8811 	msr	BASEPRI, r3
 800914a:	f3bf 8f6f 	isb	sy
 800914e:	f3bf 8f4f 	dsb	sy
 8009152:	60bb      	str	r3, [r7, #8]
}
 8009154:	bf00      	nop
 8009156:	e7fe      	b.n	8009156 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009158:	69bb      	ldr	r3, [r7, #24]
 800915a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800915c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800915e:	69bb      	ldr	r3, [r7, #24]
 8009160:	69fa      	ldr	r2, [r7, #28]
 8009162:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009164:	69bb      	ldr	r3, [r7, #24]
 8009166:	699b      	ldr	r3, [r3, #24]
 8009168:	2b00      	cmp	r3, #0
 800916a:	db04      	blt.n	8009176 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800916c:	69fb      	ldr	r3, [r7, #28]
 800916e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009172:	69bb      	ldr	r3, [r7, #24]
 8009174:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009176:	69bb      	ldr	r3, [r7, #24]
 8009178:	6959      	ldr	r1, [r3, #20]
 800917a:	693a      	ldr	r2, [r7, #16]
 800917c:	4613      	mov	r3, r2
 800917e:	009b      	lsls	r3, r3, #2
 8009180:	4413      	add	r3, r2
 8009182:	009b      	lsls	r3, r3, #2
 8009184:	4a13      	ldr	r2, [pc, #76]	; (80091d4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009186:	4413      	add	r3, r2
 8009188:	4299      	cmp	r1, r3
 800918a:	d11c      	bne.n	80091c6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800918c:	69bb      	ldr	r3, [r7, #24]
 800918e:	3304      	adds	r3, #4
 8009190:	4618      	mov	r0, r3
 8009192:	f7fd fe97 	bl	8006ec4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009196:	69bb      	ldr	r3, [r7, #24]
 8009198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800919a:	4b0f      	ldr	r3, [pc, #60]	; (80091d8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	429a      	cmp	r2, r3
 80091a0:	d903      	bls.n	80091aa <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80091a2:	69bb      	ldr	r3, [r7, #24]
 80091a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091a6:	4a0c      	ldr	r2, [pc, #48]	; (80091d8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80091a8:	6013      	str	r3, [r2, #0]
 80091aa:	69bb      	ldr	r3, [r7, #24]
 80091ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091ae:	4613      	mov	r3, r2
 80091b0:	009b      	lsls	r3, r3, #2
 80091b2:	4413      	add	r3, r2
 80091b4:	009b      	lsls	r3, r3, #2
 80091b6:	4a07      	ldr	r2, [pc, #28]	; (80091d4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80091b8:	441a      	add	r2, r3
 80091ba:	69bb      	ldr	r3, [r7, #24]
 80091bc:	3304      	adds	r3, #4
 80091be:	4619      	mov	r1, r3
 80091c0:	4610      	mov	r0, r2
 80091c2:	f7fd fe22 	bl	8006e0a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80091c6:	bf00      	nop
 80091c8:	3720      	adds	r7, #32
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}
 80091ce:	bf00      	nop
 80091d0:	20000da4 	.word	0x20000da4
 80091d4:	20000da8 	.word	0x20000da8
 80091d8:	20001280 	.word	0x20001280

080091dc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80091dc:	b480      	push	{r7}
 80091de:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80091e0:	4b07      	ldr	r3, [pc, #28]	; (8009200 <pvTaskIncrementMutexHeldCount+0x24>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d004      	beq.n	80091f2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80091e8:	4b05      	ldr	r3, [pc, #20]	; (8009200 <pvTaskIncrementMutexHeldCount+0x24>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80091ee:	3201      	adds	r2, #1
 80091f0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80091f2:	4b03      	ldr	r3, [pc, #12]	; (8009200 <pvTaskIncrementMutexHeldCount+0x24>)
 80091f4:	681b      	ldr	r3, [r3, #0]
	}
 80091f6:	4618      	mov	r0, r3
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr
 8009200:	20000da4 	.word	0x20000da4

08009204 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b084      	sub	sp, #16
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800920e:	4b21      	ldr	r3, [pc, #132]	; (8009294 <prvAddCurrentTaskToDelayedList+0x90>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009214:	4b20      	ldr	r3, [pc, #128]	; (8009298 <prvAddCurrentTaskToDelayedList+0x94>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	3304      	adds	r3, #4
 800921a:	4618      	mov	r0, r3
 800921c:	f7fd fe52 	bl	8006ec4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009226:	d10a      	bne.n	800923e <prvAddCurrentTaskToDelayedList+0x3a>
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d007      	beq.n	800923e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800922e:	4b1a      	ldr	r3, [pc, #104]	; (8009298 <prvAddCurrentTaskToDelayedList+0x94>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	3304      	adds	r3, #4
 8009234:	4619      	mov	r1, r3
 8009236:	4819      	ldr	r0, [pc, #100]	; (800929c <prvAddCurrentTaskToDelayedList+0x98>)
 8009238:	f7fd fde7 	bl	8006e0a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800923c:	e026      	b.n	800928c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800923e:	68fa      	ldr	r2, [r7, #12]
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	4413      	add	r3, r2
 8009244:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009246:	4b14      	ldr	r3, [pc, #80]	; (8009298 <prvAddCurrentTaskToDelayedList+0x94>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	68ba      	ldr	r2, [r7, #8]
 800924c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800924e:	68ba      	ldr	r2, [r7, #8]
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	429a      	cmp	r2, r3
 8009254:	d209      	bcs.n	800926a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009256:	4b12      	ldr	r3, [pc, #72]	; (80092a0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009258:	681a      	ldr	r2, [r3, #0]
 800925a:	4b0f      	ldr	r3, [pc, #60]	; (8009298 <prvAddCurrentTaskToDelayedList+0x94>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	3304      	adds	r3, #4
 8009260:	4619      	mov	r1, r3
 8009262:	4610      	mov	r0, r2
 8009264:	f7fd fdf5 	bl	8006e52 <vListInsert>
}
 8009268:	e010      	b.n	800928c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800926a:	4b0e      	ldr	r3, [pc, #56]	; (80092a4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800926c:	681a      	ldr	r2, [r3, #0]
 800926e:	4b0a      	ldr	r3, [pc, #40]	; (8009298 <prvAddCurrentTaskToDelayedList+0x94>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	3304      	adds	r3, #4
 8009274:	4619      	mov	r1, r3
 8009276:	4610      	mov	r0, r2
 8009278:	f7fd fdeb 	bl	8006e52 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800927c:	4b0a      	ldr	r3, [pc, #40]	; (80092a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	68ba      	ldr	r2, [r7, #8]
 8009282:	429a      	cmp	r2, r3
 8009284:	d202      	bcs.n	800928c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009286:	4a08      	ldr	r2, [pc, #32]	; (80092a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	6013      	str	r3, [r2, #0]
}
 800928c:	bf00      	nop
 800928e:	3710      	adds	r7, #16
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}
 8009294:	2000127c 	.word	0x2000127c
 8009298:	20000da4 	.word	0x20000da4
 800929c:	20001264 	.word	0x20001264
 80092a0:	20001234 	.word	0x20001234
 80092a4:	20001230 	.word	0x20001230
 80092a8:	20001298 	.word	0x20001298

080092ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b08a      	sub	sp, #40	; 0x28
 80092b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80092b2:	2300      	movs	r3, #0
 80092b4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80092b6:	f000 fb07 	bl	80098c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80092ba:	4b1c      	ldr	r3, [pc, #112]	; (800932c <xTimerCreateTimerTask+0x80>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d021      	beq.n	8009306 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80092c2:	2300      	movs	r3, #0
 80092c4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80092c6:	2300      	movs	r3, #0
 80092c8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80092ca:	1d3a      	adds	r2, r7, #4
 80092cc:	f107 0108 	add.w	r1, r7, #8
 80092d0:	f107 030c 	add.w	r3, r7, #12
 80092d4:	4618      	mov	r0, r3
 80092d6:	f7fd fd51 	bl	8006d7c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80092da:	6879      	ldr	r1, [r7, #4]
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	68fa      	ldr	r2, [r7, #12]
 80092e0:	9202      	str	r2, [sp, #8]
 80092e2:	9301      	str	r3, [sp, #4]
 80092e4:	2302      	movs	r3, #2
 80092e6:	9300      	str	r3, [sp, #0]
 80092e8:	2300      	movs	r3, #0
 80092ea:	460a      	mov	r2, r1
 80092ec:	4910      	ldr	r1, [pc, #64]	; (8009330 <xTimerCreateTimerTask+0x84>)
 80092ee:	4811      	ldr	r0, [pc, #68]	; (8009334 <xTimerCreateTimerTask+0x88>)
 80092f0:	f7fe ff12 	bl	8008118 <xTaskCreateStatic>
 80092f4:	4603      	mov	r3, r0
 80092f6:	4a10      	ldr	r2, [pc, #64]	; (8009338 <xTimerCreateTimerTask+0x8c>)
 80092f8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80092fa:	4b0f      	ldr	r3, [pc, #60]	; (8009338 <xTimerCreateTimerTask+0x8c>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d001      	beq.n	8009306 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009302:	2301      	movs	r3, #1
 8009304:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d10a      	bne.n	8009322 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800930c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009310:	f383 8811 	msr	BASEPRI, r3
 8009314:	f3bf 8f6f 	isb	sy
 8009318:	f3bf 8f4f 	dsb	sy
 800931c:	613b      	str	r3, [r7, #16]
}
 800931e:	bf00      	nop
 8009320:	e7fe      	b.n	8009320 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009322:	697b      	ldr	r3, [r7, #20]
}
 8009324:	4618      	mov	r0, r3
 8009326:	3718      	adds	r7, #24
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}
 800932c:	200012d4 	.word	0x200012d4
 8009330:	0801ec34 	.word	0x0801ec34
 8009334:	08009471 	.word	0x08009471
 8009338:	200012d8 	.word	0x200012d8

0800933c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b08a      	sub	sp, #40	; 0x28
 8009340:	af00      	add	r7, sp, #0
 8009342:	60f8      	str	r0, [r7, #12]
 8009344:	60b9      	str	r1, [r7, #8]
 8009346:	607a      	str	r2, [r7, #4]
 8009348:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800934a:	2300      	movs	r3, #0
 800934c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d10a      	bne.n	800936a <xTimerGenericCommand+0x2e>
	__asm volatile
 8009354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009358:	f383 8811 	msr	BASEPRI, r3
 800935c:	f3bf 8f6f 	isb	sy
 8009360:	f3bf 8f4f 	dsb	sy
 8009364:	623b      	str	r3, [r7, #32]
}
 8009366:	bf00      	nop
 8009368:	e7fe      	b.n	8009368 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800936a:	4b1a      	ldr	r3, [pc, #104]	; (80093d4 <xTimerGenericCommand+0x98>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d02a      	beq.n	80093c8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	2b05      	cmp	r3, #5
 8009382:	dc18      	bgt.n	80093b6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009384:	f7ff fdb4 	bl	8008ef0 <xTaskGetSchedulerState>
 8009388:	4603      	mov	r3, r0
 800938a:	2b02      	cmp	r3, #2
 800938c:	d109      	bne.n	80093a2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800938e:	4b11      	ldr	r3, [pc, #68]	; (80093d4 <xTimerGenericCommand+0x98>)
 8009390:	6818      	ldr	r0, [r3, #0]
 8009392:	f107 0110 	add.w	r1, r7, #16
 8009396:	2300      	movs	r3, #0
 8009398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800939a:	f7fe f81b 	bl	80073d4 <xQueueGenericSend>
 800939e:	6278      	str	r0, [r7, #36]	; 0x24
 80093a0:	e012      	b.n	80093c8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80093a2:	4b0c      	ldr	r3, [pc, #48]	; (80093d4 <xTimerGenericCommand+0x98>)
 80093a4:	6818      	ldr	r0, [r3, #0]
 80093a6:	f107 0110 	add.w	r1, r7, #16
 80093aa:	2300      	movs	r3, #0
 80093ac:	2200      	movs	r2, #0
 80093ae:	f7fe f811 	bl	80073d4 <xQueueGenericSend>
 80093b2:	6278      	str	r0, [r7, #36]	; 0x24
 80093b4:	e008      	b.n	80093c8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80093b6:	4b07      	ldr	r3, [pc, #28]	; (80093d4 <xTimerGenericCommand+0x98>)
 80093b8:	6818      	ldr	r0, [r3, #0]
 80093ba:	f107 0110 	add.w	r1, r7, #16
 80093be:	2300      	movs	r3, #0
 80093c0:	683a      	ldr	r2, [r7, #0]
 80093c2:	f7fe f905 	bl	80075d0 <xQueueGenericSendFromISR>
 80093c6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80093c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3728      	adds	r7, #40	; 0x28
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}
 80093d2:	bf00      	nop
 80093d4:	200012d4 	.word	0x200012d4

080093d8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b088      	sub	sp, #32
 80093dc:	af02      	add	r7, sp, #8
 80093de:	6078      	str	r0, [r7, #4]
 80093e0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093e2:	4b22      	ldr	r3, [pc, #136]	; (800946c <prvProcessExpiredTimer+0x94>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	68db      	ldr	r3, [r3, #12]
 80093e8:	68db      	ldr	r3, [r3, #12]
 80093ea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	3304      	adds	r3, #4
 80093f0:	4618      	mov	r0, r3
 80093f2:	f7fd fd67 	bl	8006ec4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093fc:	f003 0304 	and.w	r3, r3, #4
 8009400:	2b00      	cmp	r3, #0
 8009402:	d022      	beq.n	800944a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	699a      	ldr	r2, [r3, #24]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	18d1      	adds	r1, r2, r3
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	683a      	ldr	r2, [r7, #0]
 8009410:	6978      	ldr	r0, [r7, #20]
 8009412:	f000 f8d1 	bl	80095b8 <prvInsertTimerInActiveList>
 8009416:	4603      	mov	r3, r0
 8009418:	2b00      	cmp	r3, #0
 800941a:	d01f      	beq.n	800945c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800941c:	2300      	movs	r3, #0
 800941e:	9300      	str	r3, [sp, #0]
 8009420:	2300      	movs	r3, #0
 8009422:	687a      	ldr	r2, [r7, #4]
 8009424:	2100      	movs	r1, #0
 8009426:	6978      	ldr	r0, [r7, #20]
 8009428:	f7ff ff88 	bl	800933c <xTimerGenericCommand>
 800942c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d113      	bne.n	800945c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009438:	f383 8811 	msr	BASEPRI, r3
 800943c:	f3bf 8f6f 	isb	sy
 8009440:	f3bf 8f4f 	dsb	sy
 8009444:	60fb      	str	r3, [r7, #12]
}
 8009446:	bf00      	nop
 8009448:	e7fe      	b.n	8009448 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009450:	f023 0301 	bic.w	r3, r3, #1
 8009454:	b2da      	uxtb	r2, r3
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	6a1b      	ldr	r3, [r3, #32]
 8009460:	6978      	ldr	r0, [r7, #20]
 8009462:	4798      	blx	r3
}
 8009464:	bf00      	nop
 8009466:	3718      	adds	r7, #24
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}
 800946c:	200012cc 	.word	0x200012cc

08009470 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b084      	sub	sp, #16
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009478:	f107 0308 	add.w	r3, r7, #8
 800947c:	4618      	mov	r0, r3
 800947e:	f000 f857 	bl	8009530 <prvGetNextExpireTime>
 8009482:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	4619      	mov	r1, r3
 8009488:	68f8      	ldr	r0, [r7, #12]
 800948a:	f000 f803 	bl	8009494 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800948e:	f000 f8d5 	bl	800963c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009492:	e7f1      	b.n	8009478 <prvTimerTask+0x8>

08009494 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800949e:	f7ff f909 	bl	80086b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80094a2:	f107 0308 	add.w	r3, r7, #8
 80094a6:	4618      	mov	r0, r3
 80094a8:	f000 f866 	bl	8009578 <prvSampleTimeNow>
 80094ac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d130      	bne.n	8009516 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d10a      	bne.n	80094d0 <prvProcessTimerOrBlockTask+0x3c>
 80094ba:	687a      	ldr	r2, [r7, #4]
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	429a      	cmp	r2, r3
 80094c0:	d806      	bhi.n	80094d0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80094c2:	f7ff f905 	bl	80086d0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80094c6:	68f9      	ldr	r1, [r7, #12]
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f7ff ff85 	bl	80093d8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80094ce:	e024      	b.n	800951a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d008      	beq.n	80094e8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80094d6:	4b13      	ldr	r3, [pc, #76]	; (8009524 <prvProcessTimerOrBlockTask+0x90>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d101      	bne.n	80094e4 <prvProcessTimerOrBlockTask+0x50>
 80094e0:	2301      	movs	r3, #1
 80094e2:	e000      	b.n	80094e6 <prvProcessTimerOrBlockTask+0x52>
 80094e4:	2300      	movs	r3, #0
 80094e6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80094e8:	4b0f      	ldr	r3, [pc, #60]	; (8009528 <prvProcessTimerOrBlockTask+0x94>)
 80094ea:	6818      	ldr	r0, [r3, #0]
 80094ec:	687a      	ldr	r2, [r7, #4]
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	1ad3      	subs	r3, r2, r3
 80094f2:	683a      	ldr	r2, [r7, #0]
 80094f4:	4619      	mov	r1, r3
 80094f6:	f7fe fddb 	bl	80080b0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80094fa:	f7ff f8e9 	bl	80086d0 <xTaskResumeAll>
 80094fe:	4603      	mov	r3, r0
 8009500:	2b00      	cmp	r3, #0
 8009502:	d10a      	bne.n	800951a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009504:	4b09      	ldr	r3, [pc, #36]	; (800952c <prvProcessTimerOrBlockTask+0x98>)
 8009506:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800950a:	601a      	str	r2, [r3, #0]
 800950c:	f3bf 8f4f 	dsb	sy
 8009510:	f3bf 8f6f 	isb	sy
}
 8009514:	e001      	b.n	800951a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009516:	f7ff f8db 	bl	80086d0 <xTaskResumeAll>
}
 800951a:	bf00      	nop
 800951c:	3710      	adds	r7, #16
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}
 8009522:	bf00      	nop
 8009524:	200012d0 	.word	0x200012d0
 8009528:	200012d4 	.word	0x200012d4
 800952c:	e000ed04 	.word	0xe000ed04

08009530 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009530:	b480      	push	{r7}
 8009532:	b085      	sub	sp, #20
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009538:	4b0e      	ldr	r3, [pc, #56]	; (8009574 <prvGetNextExpireTime+0x44>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d101      	bne.n	8009546 <prvGetNextExpireTime+0x16>
 8009542:	2201      	movs	r2, #1
 8009544:	e000      	b.n	8009548 <prvGetNextExpireTime+0x18>
 8009546:	2200      	movs	r2, #0
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d105      	bne.n	8009560 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009554:	4b07      	ldr	r3, [pc, #28]	; (8009574 <prvGetNextExpireTime+0x44>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	68db      	ldr	r3, [r3, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	60fb      	str	r3, [r7, #12]
 800955e:	e001      	b.n	8009564 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009560:	2300      	movs	r3, #0
 8009562:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009564:	68fb      	ldr	r3, [r7, #12]
}
 8009566:	4618      	mov	r0, r3
 8009568:	3714      	adds	r7, #20
 800956a:	46bd      	mov	sp, r7
 800956c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009570:	4770      	bx	lr
 8009572:	bf00      	nop
 8009574:	200012cc 	.word	0x200012cc

08009578 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b084      	sub	sp, #16
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009580:	f7ff f944 	bl	800880c <xTaskGetTickCount>
 8009584:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009586:	4b0b      	ldr	r3, [pc, #44]	; (80095b4 <prvSampleTimeNow+0x3c>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	68fa      	ldr	r2, [r7, #12]
 800958c:	429a      	cmp	r2, r3
 800958e:	d205      	bcs.n	800959c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009590:	f000 f936 	bl	8009800 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2201      	movs	r2, #1
 8009598:	601a      	str	r2, [r3, #0]
 800959a:	e002      	b.n	80095a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2200      	movs	r2, #0
 80095a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80095a2:	4a04      	ldr	r2, [pc, #16]	; (80095b4 <prvSampleTimeNow+0x3c>)
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80095a8:	68fb      	ldr	r3, [r7, #12]
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3710      	adds	r7, #16
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}
 80095b2:	bf00      	nop
 80095b4:	200012dc 	.word	0x200012dc

080095b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b086      	sub	sp, #24
 80095bc:	af00      	add	r7, sp, #0
 80095be:	60f8      	str	r0, [r7, #12]
 80095c0:	60b9      	str	r1, [r7, #8]
 80095c2:	607a      	str	r2, [r7, #4]
 80095c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80095c6:	2300      	movs	r3, #0
 80095c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	68ba      	ldr	r2, [r7, #8]
 80095ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	68fa      	ldr	r2, [r7, #12]
 80095d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80095d6:	68ba      	ldr	r2, [r7, #8]
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	429a      	cmp	r2, r3
 80095dc:	d812      	bhi.n	8009604 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095de:	687a      	ldr	r2, [r7, #4]
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	1ad2      	subs	r2, r2, r3
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	699b      	ldr	r3, [r3, #24]
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d302      	bcc.n	80095f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80095ec:	2301      	movs	r3, #1
 80095ee:	617b      	str	r3, [r7, #20]
 80095f0:	e01b      	b.n	800962a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80095f2:	4b10      	ldr	r3, [pc, #64]	; (8009634 <prvInsertTimerInActiveList+0x7c>)
 80095f4:	681a      	ldr	r2, [r3, #0]
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	3304      	adds	r3, #4
 80095fa:	4619      	mov	r1, r3
 80095fc:	4610      	mov	r0, r2
 80095fe:	f7fd fc28 	bl	8006e52 <vListInsert>
 8009602:	e012      	b.n	800962a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009604:	687a      	ldr	r2, [r7, #4]
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	429a      	cmp	r2, r3
 800960a:	d206      	bcs.n	800961a <prvInsertTimerInActiveList+0x62>
 800960c:	68ba      	ldr	r2, [r7, #8]
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	429a      	cmp	r2, r3
 8009612:	d302      	bcc.n	800961a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009614:	2301      	movs	r3, #1
 8009616:	617b      	str	r3, [r7, #20]
 8009618:	e007      	b.n	800962a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800961a:	4b07      	ldr	r3, [pc, #28]	; (8009638 <prvInsertTimerInActiveList+0x80>)
 800961c:	681a      	ldr	r2, [r3, #0]
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	3304      	adds	r3, #4
 8009622:	4619      	mov	r1, r3
 8009624:	4610      	mov	r0, r2
 8009626:	f7fd fc14 	bl	8006e52 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800962a:	697b      	ldr	r3, [r7, #20]
}
 800962c:	4618      	mov	r0, r3
 800962e:	3718      	adds	r7, #24
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}
 8009634:	200012d0 	.word	0x200012d0
 8009638:	200012cc 	.word	0x200012cc

0800963c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b08e      	sub	sp, #56	; 0x38
 8009640:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009642:	e0ca      	b.n	80097da <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2b00      	cmp	r3, #0
 8009648:	da18      	bge.n	800967c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800964a:	1d3b      	adds	r3, r7, #4
 800964c:	3304      	adds	r3, #4
 800964e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009652:	2b00      	cmp	r3, #0
 8009654:	d10a      	bne.n	800966c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800965a:	f383 8811 	msr	BASEPRI, r3
 800965e:	f3bf 8f6f 	isb	sy
 8009662:	f3bf 8f4f 	dsb	sy
 8009666:	61fb      	str	r3, [r7, #28]
}
 8009668:	bf00      	nop
 800966a:	e7fe      	b.n	800966a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800966c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009672:	6850      	ldr	r0, [r2, #4]
 8009674:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009676:	6892      	ldr	r2, [r2, #8]
 8009678:	4611      	mov	r1, r2
 800967a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2b00      	cmp	r3, #0
 8009680:	f2c0 80aa 	blt.w	80097d8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800968a:	695b      	ldr	r3, [r3, #20]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d004      	beq.n	800969a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009692:	3304      	adds	r3, #4
 8009694:	4618      	mov	r0, r3
 8009696:	f7fd fc15 	bl	8006ec4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800969a:	463b      	mov	r3, r7
 800969c:	4618      	mov	r0, r3
 800969e:	f7ff ff6b 	bl	8009578 <prvSampleTimeNow>
 80096a2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2b09      	cmp	r3, #9
 80096a8:	f200 8097 	bhi.w	80097da <prvProcessReceivedCommands+0x19e>
 80096ac:	a201      	add	r2, pc, #4	; (adr r2, 80096b4 <prvProcessReceivedCommands+0x78>)
 80096ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096b2:	bf00      	nop
 80096b4:	080096dd 	.word	0x080096dd
 80096b8:	080096dd 	.word	0x080096dd
 80096bc:	080096dd 	.word	0x080096dd
 80096c0:	08009751 	.word	0x08009751
 80096c4:	08009765 	.word	0x08009765
 80096c8:	080097af 	.word	0x080097af
 80096cc:	080096dd 	.word	0x080096dd
 80096d0:	080096dd 	.word	0x080096dd
 80096d4:	08009751 	.word	0x08009751
 80096d8:	08009765 	.word	0x08009765
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80096dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096e2:	f043 0301 	orr.w	r3, r3, #1
 80096e6:	b2da      	uxtb	r2, r3
 80096e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80096ee:	68ba      	ldr	r2, [r7, #8]
 80096f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096f2:	699b      	ldr	r3, [r3, #24]
 80096f4:	18d1      	adds	r1, r2, r3
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096fc:	f7ff ff5c 	bl	80095b8 <prvInsertTimerInActiveList>
 8009700:	4603      	mov	r3, r0
 8009702:	2b00      	cmp	r3, #0
 8009704:	d069      	beq.n	80097da <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009708:	6a1b      	ldr	r3, [r3, #32]
 800970a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800970c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800970e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009710:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009714:	f003 0304 	and.w	r3, r3, #4
 8009718:	2b00      	cmp	r3, #0
 800971a:	d05e      	beq.n	80097da <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800971c:	68ba      	ldr	r2, [r7, #8]
 800971e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009720:	699b      	ldr	r3, [r3, #24]
 8009722:	441a      	add	r2, r3
 8009724:	2300      	movs	r3, #0
 8009726:	9300      	str	r3, [sp, #0]
 8009728:	2300      	movs	r3, #0
 800972a:	2100      	movs	r1, #0
 800972c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800972e:	f7ff fe05 	bl	800933c <xTimerGenericCommand>
 8009732:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009734:	6a3b      	ldr	r3, [r7, #32]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d14f      	bne.n	80097da <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800973a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800973e:	f383 8811 	msr	BASEPRI, r3
 8009742:	f3bf 8f6f 	isb	sy
 8009746:	f3bf 8f4f 	dsb	sy
 800974a:	61bb      	str	r3, [r7, #24]
}
 800974c:	bf00      	nop
 800974e:	e7fe      	b.n	800974e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009752:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009756:	f023 0301 	bic.w	r3, r3, #1
 800975a:	b2da      	uxtb	r2, r3
 800975c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800975e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009762:	e03a      	b.n	80097da <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009766:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800976a:	f043 0301 	orr.w	r3, r3, #1
 800976e:	b2da      	uxtb	r2, r3
 8009770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009772:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009776:	68ba      	ldr	r2, [r7, #8]
 8009778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800977a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800977c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800977e:	699b      	ldr	r3, [r3, #24]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d10a      	bne.n	800979a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009788:	f383 8811 	msr	BASEPRI, r3
 800978c:	f3bf 8f6f 	isb	sy
 8009790:	f3bf 8f4f 	dsb	sy
 8009794:	617b      	str	r3, [r7, #20]
}
 8009796:	bf00      	nop
 8009798:	e7fe      	b.n	8009798 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800979a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800979c:	699a      	ldr	r2, [r3, #24]
 800979e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a0:	18d1      	adds	r1, r2, r3
 80097a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097a8:	f7ff ff06 	bl	80095b8 <prvInsertTimerInActiveList>
					break;
 80097ac:	e015      	b.n	80097da <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80097ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097b4:	f003 0302 	and.w	r3, r3, #2
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d103      	bne.n	80097c4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80097bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097be:	f000 fbdf 	bl	8009f80 <vPortFree>
 80097c2:	e00a      	b.n	80097da <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80097c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097ca:	f023 0301 	bic.w	r3, r3, #1
 80097ce:	b2da      	uxtb	r2, r3
 80097d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80097d6:	e000      	b.n	80097da <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80097d8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80097da:	4b08      	ldr	r3, [pc, #32]	; (80097fc <prvProcessReceivedCommands+0x1c0>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	1d39      	adds	r1, r7, #4
 80097e0:	2200      	movs	r2, #0
 80097e2:	4618      	mov	r0, r3
 80097e4:	f7fe f81c 	bl	8007820 <xQueueReceive>
 80097e8:	4603      	mov	r3, r0
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	f47f af2a 	bne.w	8009644 <prvProcessReceivedCommands+0x8>
	}
}
 80097f0:	bf00      	nop
 80097f2:	bf00      	nop
 80097f4:	3730      	adds	r7, #48	; 0x30
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}
 80097fa:	bf00      	nop
 80097fc:	200012d4 	.word	0x200012d4

08009800 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b088      	sub	sp, #32
 8009804:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009806:	e048      	b.n	800989a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009808:	4b2d      	ldr	r3, [pc, #180]	; (80098c0 <prvSwitchTimerLists+0xc0>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	68db      	ldr	r3, [r3, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009812:	4b2b      	ldr	r3, [pc, #172]	; (80098c0 <prvSwitchTimerLists+0xc0>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	68db      	ldr	r3, [r3, #12]
 8009818:	68db      	ldr	r3, [r3, #12]
 800981a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	3304      	adds	r3, #4
 8009820:	4618      	mov	r0, r3
 8009822:	f7fd fb4f 	bl	8006ec4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	6a1b      	ldr	r3, [r3, #32]
 800982a:	68f8      	ldr	r0, [r7, #12]
 800982c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009834:	f003 0304 	and.w	r3, r3, #4
 8009838:	2b00      	cmp	r3, #0
 800983a:	d02e      	beq.n	800989a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	699b      	ldr	r3, [r3, #24]
 8009840:	693a      	ldr	r2, [r7, #16]
 8009842:	4413      	add	r3, r2
 8009844:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009846:	68ba      	ldr	r2, [r7, #8]
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	429a      	cmp	r2, r3
 800984c:	d90e      	bls.n	800986c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	68ba      	ldr	r2, [r7, #8]
 8009852:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	68fa      	ldr	r2, [r7, #12]
 8009858:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800985a:	4b19      	ldr	r3, [pc, #100]	; (80098c0 <prvSwitchTimerLists+0xc0>)
 800985c:	681a      	ldr	r2, [r3, #0]
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	3304      	adds	r3, #4
 8009862:	4619      	mov	r1, r3
 8009864:	4610      	mov	r0, r2
 8009866:	f7fd faf4 	bl	8006e52 <vListInsert>
 800986a:	e016      	b.n	800989a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800986c:	2300      	movs	r3, #0
 800986e:	9300      	str	r3, [sp, #0]
 8009870:	2300      	movs	r3, #0
 8009872:	693a      	ldr	r2, [r7, #16]
 8009874:	2100      	movs	r1, #0
 8009876:	68f8      	ldr	r0, [r7, #12]
 8009878:	f7ff fd60 	bl	800933c <xTimerGenericCommand>
 800987c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d10a      	bne.n	800989a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009888:	f383 8811 	msr	BASEPRI, r3
 800988c:	f3bf 8f6f 	isb	sy
 8009890:	f3bf 8f4f 	dsb	sy
 8009894:	603b      	str	r3, [r7, #0]
}
 8009896:	bf00      	nop
 8009898:	e7fe      	b.n	8009898 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800989a:	4b09      	ldr	r3, [pc, #36]	; (80098c0 <prvSwitchTimerLists+0xc0>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d1b1      	bne.n	8009808 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80098a4:	4b06      	ldr	r3, [pc, #24]	; (80098c0 <prvSwitchTimerLists+0xc0>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80098aa:	4b06      	ldr	r3, [pc, #24]	; (80098c4 <prvSwitchTimerLists+0xc4>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4a04      	ldr	r2, [pc, #16]	; (80098c0 <prvSwitchTimerLists+0xc0>)
 80098b0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80098b2:	4a04      	ldr	r2, [pc, #16]	; (80098c4 <prvSwitchTimerLists+0xc4>)
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	6013      	str	r3, [r2, #0]
}
 80098b8:	bf00      	nop
 80098ba:	3718      	adds	r7, #24
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}
 80098c0:	200012cc 	.word	0x200012cc
 80098c4:	200012d0 	.word	0x200012d0

080098c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b082      	sub	sp, #8
 80098cc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80098ce:	f000 f969 	bl	8009ba4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80098d2:	4b15      	ldr	r3, [pc, #84]	; (8009928 <prvCheckForValidListAndQueue+0x60>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d120      	bne.n	800991c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80098da:	4814      	ldr	r0, [pc, #80]	; (800992c <prvCheckForValidListAndQueue+0x64>)
 80098dc:	f7fd fa68 	bl	8006db0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80098e0:	4813      	ldr	r0, [pc, #76]	; (8009930 <prvCheckForValidListAndQueue+0x68>)
 80098e2:	f7fd fa65 	bl	8006db0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80098e6:	4b13      	ldr	r3, [pc, #76]	; (8009934 <prvCheckForValidListAndQueue+0x6c>)
 80098e8:	4a10      	ldr	r2, [pc, #64]	; (800992c <prvCheckForValidListAndQueue+0x64>)
 80098ea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80098ec:	4b12      	ldr	r3, [pc, #72]	; (8009938 <prvCheckForValidListAndQueue+0x70>)
 80098ee:	4a10      	ldr	r2, [pc, #64]	; (8009930 <prvCheckForValidListAndQueue+0x68>)
 80098f0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80098f2:	2300      	movs	r3, #0
 80098f4:	9300      	str	r3, [sp, #0]
 80098f6:	4b11      	ldr	r3, [pc, #68]	; (800993c <prvCheckForValidListAndQueue+0x74>)
 80098f8:	4a11      	ldr	r2, [pc, #68]	; (8009940 <prvCheckForValidListAndQueue+0x78>)
 80098fa:	2110      	movs	r1, #16
 80098fc:	200a      	movs	r0, #10
 80098fe:	f7fd fb73 	bl	8006fe8 <xQueueGenericCreateStatic>
 8009902:	4603      	mov	r3, r0
 8009904:	4a08      	ldr	r2, [pc, #32]	; (8009928 <prvCheckForValidListAndQueue+0x60>)
 8009906:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009908:	4b07      	ldr	r3, [pc, #28]	; (8009928 <prvCheckForValidListAndQueue+0x60>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d005      	beq.n	800991c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009910:	4b05      	ldr	r3, [pc, #20]	; (8009928 <prvCheckForValidListAndQueue+0x60>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	490b      	ldr	r1, [pc, #44]	; (8009944 <prvCheckForValidListAndQueue+0x7c>)
 8009916:	4618      	mov	r0, r3
 8009918:	f7fe fb76 	bl	8008008 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800991c:	f000 f972 	bl	8009c04 <vPortExitCritical>
}
 8009920:	bf00      	nop
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}
 8009926:	bf00      	nop
 8009928:	200012d4 	.word	0x200012d4
 800992c:	200012a4 	.word	0x200012a4
 8009930:	200012b8 	.word	0x200012b8
 8009934:	200012cc 	.word	0x200012cc
 8009938:	200012d0 	.word	0x200012d0
 800993c:	20001380 	.word	0x20001380
 8009940:	200012e0 	.word	0x200012e0
 8009944:	0801ec3c 	.word	0x0801ec3c

08009948 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009948:	b480      	push	{r7}
 800994a:	b085      	sub	sp, #20
 800994c:	af00      	add	r7, sp, #0
 800994e:	60f8      	str	r0, [r7, #12]
 8009950:	60b9      	str	r1, [r7, #8]
 8009952:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	3b04      	subs	r3, #4
 8009958:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009960:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	3b04      	subs	r3, #4
 8009966:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	f023 0201 	bic.w	r2, r3, #1
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	3b04      	subs	r3, #4
 8009976:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009978:	4a0c      	ldr	r2, [pc, #48]	; (80099ac <pxPortInitialiseStack+0x64>)
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	3b14      	subs	r3, #20
 8009982:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009984:	687a      	ldr	r2, [r7, #4]
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	3b04      	subs	r3, #4
 800998e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	f06f 0202 	mvn.w	r2, #2
 8009996:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	3b20      	subs	r3, #32
 800999c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800999e:	68fb      	ldr	r3, [r7, #12]
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3714      	adds	r7, #20
 80099a4:	46bd      	mov	sp, r7
 80099a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099aa:	4770      	bx	lr
 80099ac:	080099b1 	.word	0x080099b1

080099b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80099b0:	b480      	push	{r7}
 80099b2:	b085      	sub	sp, #20
 80099b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80099b6:	2300      	movs	r3, #0
 80099b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80099ba:	4b12      	ldr	r3, [pc, #72]	; (8009a04 <prvTaskExitError+0x54>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099c2:	d00a      	beq.n	80099da <prvTaskExitError+0x2a>
	__asm volatile
 80099c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c8:	f383 8811 	msr	BASEPRI, r3
 80099cc:	f3bf 8f6f 	isb	sy
 80099d0:	f3bf 8f4f 	dsb	sy
 80099d4:	60fb      	str	r3, [r7, #12]
}
 80099d6:	bf00      	nop
 80099d8:	e7fe      	b.n	80099d8 <prvTaskExitError+0x28>
	__asm volatile
 80099da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099de:	f383 8811 	msr	BASEPRI, r3
 80099e2:	f3bf 8f6f 	isb	sy
 80099e6:	f3bf 8f4f 	dsb	sy
 80099ea:	60bb      	str	r3, [r7, #8]
}
 80099ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80099ee:	bf00      	nop
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d0fc      	beq.n	80099f0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80099f6:	bf00      	nop
 80099f8:	bf00      	nop
 80099fa:	3714      	adds	r7, #20
 80099fc:	46bd      	mov	sp, r7
 80099fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a02:	4770      	bx	lr
 8009a04:	1000000c 	.word	0x1000000c
	...

08009a10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009a10:	4b07      	ldr	r3, [pc, #28]	; (8009a30 <pxCurrentTCBConst2>)
 8009a12:	6819      	ldr	r1, [r3, #0]
 8009a14:	6808      	ldr	r0, [r1, #0]
 8009a16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a1a:	f380 8809 	msr	PSP, r0
 8009a1e:	f3bf 8f6f 	isb	sy
 8009a22:	f04f 0000 	mov.w	r0, #0
 8009a26:	f380 8811 	msr	BASEPRI, r0
 8009a2a:	4770      	bx	lr
 8009a2c:	f3af 8000 	nop.w

08009a30 <pxCurrentTCBConst2>:
 8009a30:	20000da4 	.word	0x20000da4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009a34:	bf00      	nop
 8009a36:	bf00      	nop

08009a38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009a38:	4808      	ldr	r0, [pc, #32]	; (8009a5c <prvPortStartFirstTask+0x24>)
 8009a3a:	6800      	ldr	r0, [r0, #0]
 8009a3c:	6800      	ldr	r0, [r0, #0]
 8009a3e:	f380 8808 	msr	MSP, r0
 8009a42:	f04f 0000 	mov.w	r0, #0
 8009a46:	f380 8814 	msr	CONTROL, r0
 8009a4a:	b662      	cpsie	i
 8009a4c:	b661      	cpsie	f
 8009a4e:	f3bf 8f4f 	dsb	sy
 8009a52:	f3bf 8f6f 	isb	sy
 8009a56:	df00      	svc	0
 8009a58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009a5a:	bf00      	nop
 8009a5c:	e000ed08 	.word	0xe000ed08

08009a60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b086      	sub	sp, #24
 8009a64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009a66:	4b46      	ldr	r3, [pc, #280]	; (8009b80 <xPortStartScheduler+0x120>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4a46      	ldr	r2, [pc, #280]	; (8009b84 <xPortStartScheduler+0x124>)
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d10a      	bne.n	8009a86 <xPortStartScheduler+0x26>
	__asm volatile
 8009a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a74:	f383 8811 	msr	BASEPRI, r3
 8009a78:	f3bf 8f6f 	isb	sy
 8009a7c:	f3bf 8f4f 	dsb	sy
 8009a80:	613b      	str	r3, [r7, #16]
}
 8009a82:	bf00      	nop
 8009a84:	e7fe      	b.n	8009a84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009a86:	4b3e      	ldr	r3, [pc, #248]	; (8009b80 <xPortStartScheduler+0x120>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4a3f      	ldr	r2, [pc, #252]	; (8009b88 <xPortStartScheduler+0x128>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d10a      	bne.n	8009aa6 <xPortStartScheduler+0x46>
	__asm volatile
 8009a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a94:	f383 8811 	msr	BASEPRI, r3
 8009a98:	f3bf 8f6f 	isb	sy
 8009a9c:	f3bf 8f4f 	dsb	sy
 8009aa0:	60fb      	str	r3, [r7, #12]
}
 8009aa2:	bf00      	nop
 8009aa4:	e7fe      	b.n	8009aa4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009aa6:	4b39      	ldr	r3, [pc, #228]	; (8009b8c <xPortStartScheduler+0x12c>)
 8009aa8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	781b      	ldrb	r3, [r3, #0]
 8009aae:	b2db      	uxtb	r3, r3
 8009ab0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	22ff      	movs	r2, #255	; 0xff
 8009ab6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	781b      	ldrb	r3, [r3, #0]
 8009abc:	b2db      	uxtb	r3, r3
 8009abe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009ac0:	78fb      	ldrb	r3, [r7, #3]
 8009ac2:	b2db      	uxtb	r3, r3
 8009ac4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009ac8:	b2da      	uxtb	r2, r3
 8009aca:	4b31      	ldr	r3, [pc, #196]	; (8009b90 <xPortStartScheduler+0x130>)
 8009acc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009ace:	4b31      	ldr	r3, [pc, #196]	; (8009b94 <xPortStartScheduler+0x134>)
 8009ad0:	2207      	movs	r2, #7
 8009ad2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009ad4:	e009      	b.n	8009aea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009ad6:	4b2f      	ldr	r3, [pc, #188]	; (8009b94 <xPortStartScheduler+0x134>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	3b01      	subs	r3, #1
 8009adc:	4a2d      	ldr	r2, [pc, #180]	; (8009b94 <xPortStartScheduler+0x134>)
 8009ade:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009ae0:	78fb      	ldrb	r3, [r7, #3]
 8009ae2:	b2db      	uxtb	r3, r3
 8009ae4:	005b      	lsls	r3, r3, #1
 8009ae6:	b2db      	uxtb	r3, r3
 8009ae8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009aea:	78fb      	ldrb	r3, [r7, #3]
 8009aec:	b2db      	uxtb	r3, r3
 8009aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009af2:	2b80      	cmp	r3, #128	; 0x80
 8009af4:	d0ef      	beq.n	8009ad6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009af6:	4b27      	ldr	r3, [pc, #156]	; (8009b94 <xPortStartScheduler+0x134>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f1c3 0307 	rsb	r3, r3, #7
 8009afe:	2b04      	cmp	r3, #4
 8009b00:	d00a      	beq.n	8009b18 <xPortStartScheduler+0xb8>
	__asm volatile
 8009b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b06:	f383 8811 	msr	BASEPRI, r3
 8009b0a:	f3bf 8f6f 	isb	sy
 8009b0e:	f3bf 8f4f 	dsb	sy
 8009b12:	60bb      	str	r3, [r7, #8]
}
 8009b14:	bf00      	nop
 8009b16:	e7fe      	b.n	8009b16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009b18:	4b1e      	ldr	r3, [pc, #120]	; (8009b94 <xPortStartScheduler+0x134>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	021b      	lsls	r3, r3, #8
 8009b1e:	4a1d      	ldr	r2, [pc, #116]	; (8009b94 <xPortStartScheduler+0x134>)
 8009b20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009b22:	4b1c      	ldr	r3, [pc, #112]	; (8009b94 <xPortStartScheduler+0x134>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009b2a:	4a1a      	ldr	r2, [pc, #104]	; (8009b94 <xPortStartScheduler+0x134>)
 8009b2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	b2da      	uxtb	r2, r3
 8009b32:	697b      	ldr	r3, [r7, #20]
 8009b34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009b36:	4b18      	ldr	r3, [pc, #96]	; (8009b98 <xPortStartScheduler+0x138>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	4a17      	ldr	r2, [pc, #92]	; (8009b98 <xPortStartScheduler+0x138>)
 8009b3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009b40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009b42:	4b15      	ldr	r3, [pc, #84]	; (8009b98 <xPortStartScheduler+0x138>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	4a14      	ldr	r2, [pc, #80]	; (8009b98 <xPortStartScheduler+0x138>)
 8009b48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009b4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009b4e:	f000 f8dd 	bl	8009d0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009b52:	4b12      	ldr	r3, [pc, #72]	; (8009b9c <xPortStartScheduler+0x13c>)
 8009b54:	2200      	movs	r2, #0
 8009b56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009b58:	f000 f8fc 	bl	8009d54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009b5c:	4b10      	ldr	r3, [pc, #64]	; (8009ba0 <xPortStartScheduler+0x140>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4a0f      	ldr	r2, [pc, #60]	; (8009ba0 <xPortStartScheduler+0x140>)
 8009b62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009b66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009b68:	f7ff ff66 	bl	8009a38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009b6c:	f7fe ff2a 	bl	80089c4 <vTaskSwitchContext>
	prvTaskExitError();
 8009b70:	f7ff ff1e 	bl	80099b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009b74:	2300      	movs	r3, #0
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3718      	adds	r7, #24
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}
 8009b7e:	bf00      	nop
 8009b80:	e000ed00 	.word	0xe000ed00
 8009b84:	410fc271 	.word	0x410fc271
 8009b88:	410fc270 	.word	0x410fc270
 8009b8c:	e000e400 	.word	0xe000e400
 8009b90:	200013d0 	.word	0x200013d0
 8009b94:	200013d4 	.word	0x200013d4
 8009b98:	e000ed20 	.word	0xe000ed20
 8009b9c:	1000000c 	.word	0x1000000c
 8009ba0:	e000ef34 	.word	0xe000ef34

08009ba4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b083      	sub	sp, #12
 8009ba8:	af00      	add	r7, sp, #0
	__asm volatile
 8009baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bae:	f383 8811 	msr	BASEPRI, r3
 8009bb2:	f3bf 8f6f 	isb	sy
 8009bb6:	f3bf 8f4f 	dsb	sy
 8009bba:	607b      	str	r3, [r7, #4]
}
 8009bbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009bbe:	4b0f      	ldr	r3, [pc, #60]	; (8009bfc <vPortEnterCritical+0x58>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	3301      	adds	r3, #1
 8009bc4:	4a0d      	ldr	r2, [pc, #52]	; (8009bfc <vPortEnterCritical+0x58>)
 8009bc6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009bc8:	4b0c      	ldr	r3, [pc, #48]	; (8009bfc <vPortEnterCritical+0x58>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	2b01      	cmp	r3, #1
 8009bce:	d10f      	bne.n	8009bf0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009bd0:	4b0b      	ldr	r3, [pc, #44]	; (8009c00 <vPortEnterCritical+0x5c>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	b2db      	uxtb	r3, r3
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d00a      	beq.n	8009bf0 <vPortEnterCritical+0x4c>
	__asm volatile
 8009bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bde:	f383 8811 	msr	BASEPRI, r3
 8009be2:	f3bf 8f6f 	isb	sy
 8009be6:	f3bf 8f4f 	dsb	sy
 8009bea:	603b      	str	r3, [r7, #0]
}
 8009bec:	bf00      	nop
 8009bee:	e7fe      	b.n	8009bee <vPortEnterCritical+0x4a>
	}
}
 8009bf0:	bf00      	nop
 8009bf2:	370c      	adds	r7, #12
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr
 8009bfc:	1000000c 	.word	0x1000000c
 8009c00:	e000ed04 	.word	0xe000ed04

08009c04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009c04:	b480      	push	{r7}
 8009c06:	b083      	sub	sp, #12
 8009c08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009c0a:	4b12      	ldr	r3, [pc, #72]	; (8009c54 <vPortExitCritical+0x50>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d10a      	bne.n	8009c28 <vPortExitCritical+0x24>
	__asm volatile
 8009c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c16:	f383 8811 	msr	BASEPRI, r3
 8009c1a:	f3bf 8f6f 	isb	sy
 8009c1e:	f3bf 8f4f 	dsb	sy
 8009c22:	607b      	str	r3, [r7, #4]
}
 8009c24:	bf00      	nop
 8009c26:	e7fe      	b.n	8009c26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009c28:	4b0a      	ldr	r3, [pc, #40]	; (8009c54 <vPortExitCritical+0x50>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	3b01      	subs	r3, #1
 8009c2e:	4a09      	ldr	r2, [pc, #36]	; (8009c54 <vPortExitCritical+0x50>)
 8009c30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009c32:	4b08      	ldr	r3, [pc, #32]	; (8009c54 <vPortExitCritical+0x50>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d105      	bne.n	8009c46 <vPortExitCritical+0x42>
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	f383 8811 	msr	BASEPRI, r3
}
 8009c44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009c46:	bf00      	nop
 8009c48:	370c      	adds	r7, #12
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c50:	4770      	bx	lr
 8009c52:	bf00      	nop
 8009c54:	1000000c 	.word	0x1000000c
	...

08009c60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009c60:	f3ef 8009 	mrs	r0, PSP
 8009c64:	f3bf 8f6f 	isb	sy
 8009c68:	4b15      	ldr	r3, [pc, #84]	; (8009cc0 <pxCurrentTCBConst>)
 8009c6a:	681a      	ldr	r2, [r3, #0]
 8009c6c:	f01e 0f10 	tst.w	lr, #16
 8009c70:	bf08      	it	eq
 8009c72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009c76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c7a:	6010      	str	r0, [r2, #0]
 8009c7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009c80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009c84:	f380 8811 	msr	BASEPRI, r0
 8009c88:	f3bf 8f4f 	dsb	sy
 8009c8c:	f3bf 8f6f 	isb	sy
 8009c90:	f7fe fe98 	bl	80089c4 <vTaskSwitchContext>
 8009c94:	f04f 0000 	mov.w	r0, #0
 8009c98:	f380 8811 	msr	BASEPRI, r0
 8009c9c:	bc09      	pop	{r0, r3}
 8009c9e:	6819      	ldr	r1, [r3, #0]
 8009ca0:	6808      	ldr	r0, [r1, #0]
 8009ca2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ca6:	f01e 0f10 	tst.w	lr, #16
 8009caa:	bf08      	it	eq
 8009cac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009cb0:	f380 8809 	msr	PSP, r0
 8009cb4:	f3bf 8f6f 	isb	sy
 8009cb8:	4770      	bx	lr
 8009cba:	bf00      	nop
 8009cbc:	f3af 8000 	nop.w

08009cc0 <pxCurrentTCBConst>:
 8009cc0:	20000da4 	.word	0x20000da4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009cc4:	bf00      	nop
 8009cc6:	bf00      	nop

08009cc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b082      	sub	sp, #8
 8009ccc:	af00      	add	r7, sp, #0
	__asm volatile
 8009cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd2:	f383 8811 	msr	BASEPRI, r3
 8009cd6:	f3bf 8f6f 	isb	sy
 8009cda:	f3bf 8f4f 	dsb	sy
 8009cde:	607b      	str	r3, [r7, #4]
}
 8009ce0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009ce2:	f7fe fdb5 	bl	8008850 <xTaskIncrementTick>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d003      	beq.n	8009cf4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009cec:	4b06      	ldr	r3, [pc, #24]	; (8009d08 <xPortSysTickHandler+0x40>)
 8009cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cf2:	601a      	str	r2, [r3, #0]
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	f383 8811 	msr	BASEPRI, r3
}
 8009cfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009d00:	bf00      	nop
 8009d02:	3708      	adds	r7, #8
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}
 8009d08:	e000ed04 	.word	0xe000ed04

08009d0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009d10:	4b0b      	ldr	r3, [pc, #44]	; (8009d40 <vPortSetupTimerInterrupt+0x34>)
 8009d12:	2200      	movs	r2, #0
 8009d14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009d16:	4b0b      	ldr	r3, [pc, #44]	; (8009d44 <vPortSetupTimerInterrupt+0x38>)
 8009d18:	2200      	movs	r2, #0
 8009d1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009d1c:	4b0a      	ldr	r3, [pc, #40]	; (8009d48 <vPortSetupTimerInterrupt+0x3c>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4a0a      	ldr	r2, [pc, #40]	; (8009d4c <vPortSetupTimerInterrupt+0x40>)
 8009d22:	fba2 2303 	umull	r2, r3, r2, r3
 8009d26:	099b      	lsrs	r3, r3, #6
 8009d28:	4a09      	ldr	r2, [pc, #36]	; (8009d50 <vPortSetupTimerInterrupt+0x44>)
 8009d2a:	3b01      	subs	r3, #1
 8009d2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009d2e:	4b04      	ldr	r3, [pc, #16]	; (8009d40 <vPortSetupTimerInterrupt+0x34>)
 8009d30:	2207      	movs	r2, #7
 8009d32:	601a      	str	r2, [r3, #0]
}
 8009d34:	bf00      	nop
 8009d36:	46bd      	mov	sp, r7
 8009d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3c:	4770      	bx	lr
 8009d3e:	bf00      	nop
 8009d40:	e000e010 	.word	0xe000e010
 8009d44:	e000e018 	.word	0xe000e018
 8009d48:	10000000 	.word	0x10000000
 8009d4c:	10624dd3 	.word	0x10624dd3
 8009d50:	e000e014 	.word	0xe000e014

08009d54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009d54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009d64 <vPortEnableVFP+0x10>
 8009d58:	6801      	ldr	r1, [r0, #0]
 8009d5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009d5e:	6001      	str	r1, [r0, #0]
 8009d60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009d62:	bf00      	nop
 8009d64:	e000ed88 	.word	0xe000ed88

08009d68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009d68:	b480      	push	{r7}
 8009d6a:	b085      	sub	sp, #20
 8009d6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009d6e:	f3ef 8305 	mrs	r3, IPSR
 8009d72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	2b0f      	cmp	r3, #15
 8009d78:	d914      	bls.n	8009da4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009d7a:	4a17      	ldr	r2, [pc, #92]	; (8009dd8 <vPortValidateInterruptPriority+0x70>)
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	4413      	add	r3, r2
 8009d80:	781b      	ldrb	r3, [r3, #0]
 8009d82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009d84:	4b15      	ldr	r3, [pc, #84]	; (8009ddc <vPortValidateInterruptPriority+0x74>)
 8009d86:	781b      	ldrb	r3, [r3, #0]
 8009d88:	7afa      	ldrb	r2, [r7, #11]
 8009d8a:	429a      	cmp	r2, r3
 8009d8c:	d20a      	bcs.n	8009da4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d92:	f383 8811 	msr	BASEPRI, r3
 8009d96:	f3bf 8f6f 	isb	sy
 8009d9a:	f3bf 8f4f 	dsb	sy
 8009d9e:	607b      	str	r3, [r7, #4]
}
 8009da0:	bf00      	nop
 8009da2:	e7fe      	b.n	8009da2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009da4:	4b0e      	ldr	r3, [pc, #56]	; (8009de0 <vPortValidateInterruptPriority+0x78>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009dac:	4b0d      	ldr	r3, [pc, #52]	; (8009de4 <vPortValidateInterruptPriority+0x7c>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	429a      	cmp	r2, r3
 8009db2:	d90a      	bls.n	8009dca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db8:	f383 8811 	msr	BASEPRI, r3
 8009dbc:	f3bf 8f6f 	isb	sy
 8009dc0:	f3bf 8f4f 	dsb	sy
 8009dc4:	603b      	str	r3, [r7, #0]
}
 8009dc6:	bf00      	nop
 8009dc8:	e7fe      	b.n	8009dc8 <vPortValidateInterruptPriority+0x60>
	}
 8009dca:	bf00      	nop
 8009dcc:	3714      	adds	r7, #20
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd4:	4770      	bx	lr
 8009dd6:	bf00      	nop
 8009dd8:	e000e3f0 	.word	0xe000e3f0
 8009ddc:	200013d0 	.word	0x200013d0
 8009de0:	e000ed0c 	.word	0xe000ed0c
 8009de4:	200013d4 	.word	0x200013d4

08009de8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b08a      	sub	sp, #40	; 0x28
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009df0:	2300      	movs	r3, #0
 8009df2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009df4:	f7fe fc5e 	bl	80086b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009df8:	4b5b      	ldr	r3, [pc, #364]	; (8009f68 <pvPortMalloc+0x180>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d101      	bne.n	8009e04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009e00:	f000 f920 	bl	800a044 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009e04:	4b59      	ldr	r3, [pc, #356]	; (8009f6c <pvPortMalloc+0x184>)
 8009e06:	681a      	ldr	r2, [r3, #0]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	4013      	ands	r3, r2
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	f040 8093 	bne.w	8009f38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d01d      	beq.n	8009e54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009e18:	2208      	movs	r2, #8
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	4413      	add	r3, r2
 8009e1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f003 0307 	and.w	r3, r3, #7
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d014      	beq.n	8009e54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f023 0307 	bic.w	r3, r3, #7
 8009e30:	3308      	adds	r3, #8
 8009e32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f003 0307 	and.w	r3, r3, #7
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d00a      	beq.n	8009e54 <pvPortMalloc+0x6c>
	__asm volatile
 8009e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e42:	f383 8811 	msr	BASEPRI, r3
 8009e46:	f3bf 8f6f 	isb	sy
 8009e4a:	f3bf 8f4f 	dsb	sy
 8009e4e:	617b      	str	r3, [r7, #20]
}
 8009e50:	bf00      	nop
 8009e52:	e7fe      	b.n	8009e52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d06e      	beq.n	8009f38 <pvPortMalloc+0x150>
 8009e5a:	4b45      	ldr	r3, [pc, #276]	; (8009f70 <pvPortMalloc+0x188>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	687a      	ldr	r2, [r7, #4]
 8009e60:	429a      	cmp	r2, r3
 8009e62:	d869      	bhi.n	8009f38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009e64:	4b43      	ldr	r3, [pc, #268]	; (8009f74 <pvPortMalloc+0x18c>)
 8009e66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009e68:	4b42      	ldr	r3, [pc, #264]	; (8009f74 <pvPortMalloc+0x18c>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009e6e:	e004      	b.n	8009e7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e7c:	685b      	ldr	r3, [r3, #4]
 8009e7e:	687a      	ldr	r2, [r7, #4]
 8009e80:	429a      	cmp	r2, r3
 8009e82:	d903      	bls.n	8009e8c <pvPortMalloc+0xa4>
 8009e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d1f1      	bne.n	8009e70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009e8c:	4b36      	ldr	r3, [pc, #216]	; (8009f68 <pvPortMalloc+0x180>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e92:	429a      	cmp	r2, r3
 8009e94:	d050      	beq.n	8009f38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009e96:	6a3b      	ldr	r3, [r7, #32]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	2208      	movs	r2, #8
 8009e9c:	4413      	add	r3, r2
 8009e9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea2:	681a      	ldr	r2, [r3, #0]
 8009ea4:	6a3b      	ldr	r3, [r7, #32]
 8009ea6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eaa:	685a      	ldr	r2, [r3, #4]
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	1ad2      	subs	r2, r2, r3
 8009eb0:	2308      	movs	r3, #8
 8009eb2:	005b      	lsls	r3, r3, #1
 8009eb4:	429a      	cmp	r2, r3
 8009eb6:	d91f      	bls.n	8009ef8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009eb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	4413      	add	r3, r2
 8009ebe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ec0:	69bb      	ldr	r3, [r7, #24]
 8009ec2:	f003 0307 	and.w	r3, r3, #7
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d00a      	beq.n	8009ee0 <pvPortMalloc+0xf8>
	__asm volatile
 8009eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ece:	f383 8811 	msr	BASEPRI, r3
 8009ed2:	f3bf 8f6f 	isb	sy
 8009ed6:	f3bf 8f4f 	dsb	sy
 8009eda:	613b      	str	r3, [r7, #16]
}
 8009edc:	bf00      	nop
 8009ede:	e7fe      	b.n	8009ede <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee2:	685a      	ldr	r2, [r3, #4]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	1ad2      	subs	r2, r2, r3
 8009ee8:	69bb      	ldr	r3, [r7, #24]
 8009eea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eee:	687a      	ldr	r2, [r7, #4]
 8009ef0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009ef2:	69b8      	ldr	r0, [r7, #24]
 8009ef4:	f000 f908 	bl	800a108 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009ef8:	4b1d      	ldr	r3, [pc, #116]	; (8009f70 <pvPortMalloc+0x188>)
 8009efa:	681a      	ldr	r2, [r3, #0]
 8009efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009efe:	685b      	ldr	r3, [r3, #4]
 8009f00:	1ad3      	subs	r3, r2, r3
 8009f02:	4a1b      	ldr	r2, [pc, #108]	; (8009f70 <pvPortMalloc+0x188>)
 8009f04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009f06:	4b1a      	ldr	r3, [pc, #104]	; (8009f70 <pvPortMalloc+0x188>)
 8009f08:	681a      	ldr	r2, [r3, #0]
 8009f0a:	4b1b      	ldr	r3, [pc, #108]	; (8009f78 <pvPortMalloc+0x190>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	429a      	cmp	r2, r3
 8009f10:	d203      	bcs.n	8009f1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009f12:	4b17      	ldr	r3, [pc, #92]	; (8009f70 <pvPortMalloc+0x188>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	4a18      	ldr	r2, [pc, #96]	; (8009f78 <pvPortMalloc+0x190>)
 8009f18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f1c:	685a      	ldr	r2, [r3, #4]
 8009f1e:	4b13      	ldr	r3, [pc, #76]	; (8009f6c <pvPortMalloc+0x184>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	431a      	orrs	r2, r3
 8009f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009f2e:	4b13      	ldr	r3, [pc, #76]	; (8009f7c <pvPortMalloc+0x194>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	3301      	adds	r3, #1
 8009f34:	4a11      	ldr	r2, [pc, #68]	; (8009f7c <pvPortMalloc+0x194>)
 8009f36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009f38:	f7fe fbca 	bl	80086d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f3c:	69fb      	ldr	r3, [r7, #28]
 8009f3e:	f003 0307 	and.w	r3, r3, #7
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d00a      	beq.n	8009f5c <pvPortMalloc+0x174>
	__asm volatile
 8009f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f4a:	f383 8811 	msr	BASEPRI, r3
 8009f4e:	f3bf 8f6f 	isb	sy
 8009f52:	f3bf 8f4f 	dsb	sy
 8009f56:	60fb      	str	r3, [r7, #12]
}
 8009f58:	bf00      	nop
 8009f5a:	e7fe      	b.n	8009f5a <pvPortMalloc+0x172>
	return pvReturn;
 8009f5c:	69fb      	ldr	r3, [r7, #28]
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3728      	adds	r7, #40	; 0x28
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
 8009f66:	bf00      	nop
 8009f68:	200013e0 	.word	0x200013e0
 8009f6c:	200013f4 	.word	0x200013f4
 8009f70:	200013e4 	.word	0x200013e4
 8009f74:	200013d8 	.word	0x200013d8
 8009f78:	200013e8 	.word	0x200013e8
 8009f7c:	200013ec 	.word	0x200013ec

08009f80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b086      	sub	sp, #24
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d04d      	beq.n	800a02e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009f92:	2308      	movs	r3, #8
 8009f94:	425b      	negs	r3, r3
 8009f96:	697a      	ldr	r2, [r7, #20]
 8009f98:	4413      	add	r3, r2
 8009f9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009fa0:	693b      	ldr	r3, [r7, #16]
 8009fa2:	685a      	ldr	r2, [r3, #4]
 8009fa4:	4b24      	ldr	r3, [pc, #144]	; (800a038 <vPortFree+0xb8>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	4013      	ands	r3, r2
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d10a      	bne.n	8009fc4 <vPortFree+0x44>
	__asm volatile
 8009fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb2:	f383 8811 	msr	BASEPRI, r3
 8009fb6:	f3bf 8f6f 	isb	sy
 8009fba:	f3bf 8f4f 	dsb	sy
 8009fbe:	60fb      	str	r3, [r7, #12]
}
 8009fc0:	bf00      	nop
 8009fc2:	e7fe      	b.n	8009fc2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d00a      	beq.n	8009fe2 <vPortFree+0x62>
	__asm volatile
 8009fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd0:	f383 8811 	msr	BASEPRI, r3
 8009fd4:	f3bf 8f6f 	isb	sy
 8009fd8:	f3bf 8f4f 	dsb	sy
 8009fdc:	60bb      	str	r3, [r7, #8]
}
 8009fde:	bf00      	nop
 8009fe0:	e7fe      	b.n	8009fe0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	685a      	ldr	r2, [r3, #4]
 8009fe6:	4b14      	ldr	r3, [pc, #80]	; (800a038 <vPortFree+0xb8>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	4013      	ands	r3, r2
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d01e      	beq.n	800a02e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d11a      	bne.n	800a02e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009ff8:	693b      	ldr	r3, [r7, #16]
 8009ffa:	685a      	ldr	r2, [r3, #4]
 8009ffc:	4b0e      	ldr	r3, [pc, #56]	; (800a038 <vPortFree+0xb8>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	43db      	mvns	r3, r3
 800a002:	401a      	ands	r2, r3
 800a004:	693b      	ldr	r3, [r7, #16]
 800a006:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a008:	f7fe fb54 	bl	80086b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	685a      	ldr	r2, [r3, #4]
 800a010:	4b0a      	ldr	r3, [pc, #40]	; (800a03c <vPortFree+0xbc>)
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	4413      	add	r3, r2
 800a016:	4a09      	ldr	r2, [pc, #36]	; (800a03c <vPortFree+0xbc>)
 800a018:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a01a:	6938      	ldr	r0, [r7, #16]
 800a01c:	f000 f874 	bl	800a108 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a020:	4b07      	ldr	r3, [pc, #28]	; (800a040 <vPortFree+0xc0>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	3301      	adds	r3, #1
 800a026:	4a06      	ldr	r2, [pc, #24]	; (800a040 <vPortFree+0xc0>)
 800a028:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a02a:	f7fe fb51 	bl	80086d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a02e:	bf00      	nop
 800a030:	3718      	adds	r7, #24
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}
 800a036:	bf00      	nop
 800a038:	200013f4 	.word	0x200013f4
 800a03c:	200013e4 	.word	0x200013e4
 800a040:	200013f0 	.word	0x200013f0

0800a044 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a044:	b480      	push	{r7}
 800a046:	b085      	sub	sp, #20
 800a048:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a04a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800a04e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a050:	4b27      	ldr	r3, [pc, #156]	; (800a0f0 <prvHeapInit+0xac>)
 800a052:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	f003 0307 	and.w	r3, r3, #7
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d00c      	beq.n	800a078 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	3307      	adds	r3, #7
 800a062:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	f023 0307 	bic.w	r3, r3, #7
 800a06a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a06c:	68ba      	ldr	r2, [r7, #8]
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	1ad3      	subs	r3, r2, r3
 800a072:	4a1f      	ldr	r2, [pc, #124]	; (800a0f0 <prvHeapInit+0xac>)
 800a074:	4413      	add	r3, r2
 800a076:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a07c:	4a1d      	ldr	r2, [pc, #116]	; (800a0f4 <prvHeapInit+0xb0>)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a082:	4b1c      	ldr	r3, [pc, #112]	; (800a0f4 <prvHeapInit+0xb0>)
 800a084:	2200      	movs	r2, #0
 800a086:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	68ba      	ldr	r2, [r7, #8]
 800a08c:	4413      	add	r3, r2
 800a08e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a090:	2208      	movs	r2, #8
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	1a9b      	subs	r3, r3, r2
 800a096:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	f023 0307 	bic.w	r3, r3, #7
 800a09e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	4a15      	ldr	r2, [pc, #84]	; (800a0f8 <prvHeapInit+0xb4>)
 800a0a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a0a6:	4b14      	ldr	r3, [pc, #80]	; (800a0f8 <prvHeapInit+0xb4>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a0ae:	4b12      	ldr	r3, [pc, #72]	; (800a0f8 <prvHeapInit+0xb4>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	68fa      	ldr	r2, [r7, #12]
 800a0be:	1ad2      	subs	r2, r2, r3
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a0c4:	4b0c      	ldr	r3, [pc, #48]	; (800a0f8 <prvHeapInit+0xb4>)
 800a0c6:	681a      	ldr	r2, [r3, #0]
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	685b      	ldr	r3, [r3, #4]
 800a0d0:	4a0a      	ldr	r2, [pc, #40]	; (800a0fc <prvHeapInit+0xb8>)
 800a0d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	4a09      	ldr	r2, [pc, #36]	; (800a100 <prvHeapInit+0xbc>)
 800a0da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a0dc:	4b09      	ldr	r3, [pc, #36]	; (800a104 <prvHeapInit+0xc0>)
 800a0de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a0e2:	601a      	str	r2, [r3, #0]
}
 800a0e4:	bf00      	nop
 800a0e6:	3714      	adds	r7, #20
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ee:	4770      	bx	lr
 800a0f0:	10000304 	.word	0x10000304
 800a0f4:	200013d8 	.word	0x200013d8
 800a0f8:	200013e0 	.word	0x200013e0
 800a0fc:	200013e8 	.word	0x200013e8
 800a100:	200013e4 	.word	0x200013e4
 800a104:	200013f4 	.word	0x200013f4

0800a108 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a108:	b480      	push	{r7}
 800a10a:	b085      	sub	sp, #20
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a110:	4b28      	ldr	r3, [pc, #160]	; (800a1b4 <prvInsertBlockIntoFreeList+0xac>)
 800a112:	60fb      	str	r3, [r7, #12]
 800a114:	e002      	b.n	800a11c <prvInsertBlockIntoFreeList+0x14>
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	60fb      	str	r3, [r7, #12]
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	687a      	ldr	r2, [r7, #4]
 800a122:	429a      	cmp	r2, r3
 800a124:	d8f7      	bhi.n	800a116 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	685b      	ldr	r3, [r3, #4]
 800a12e:	68ba      	ldr	r2, [r7, #8]
 800a130:	4413      	add	r3, r2
 800a132:	687a      	ldr	r2, [r7, #4]
 800a134:	429a      	cmp	r2, r3
 800a136:	d108      	bne.n	800a14a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	685a      	ldr	r2, [r3, #4]
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	685b      	ldr	r3, [r3, #4]
 800a140:	441a      	add	r2, r3
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	685b      	ldr	r3, [r3, #4]
 800a152:	68ba      	ldr	r2, [r7, #8]
 800a154:	441a      	add	r2, r3
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	429a      	cmp	r2, r3
 800a15c:	d118      	bne.n	800a190 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681a      	ldr	r2, [r3, #0]
 800a162:	4b15      	ldr	r3, [pc, #84]	; (800a1b8 <prvInsertBlockIntoFreeList+0xb0>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	429a      	cmp	r2, r3
 800a168:	d00d      	beq.n	800a186 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	685a      	ldr	r2, [r3, #4]
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	685b      	ldr	r3, [r3, #4]
 800a174:	441a      	add	r2, r3
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	681a      	ldr	r2, [r3, #0]
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	601a      	str	r2, [r3, #0]
 800a184:	e008      	b.n	800a198 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a186:	4b0c      	ldr	r3, [pc, #48]	; (800a1b8 <prvInsertBlockIntoFreeList+0xb0>)
 800a188:	681a      	ldr	r2, [r3, #0]
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	601a      	str	r2, [r3, #0]
 800a18e:	e003      	b.n	800a198 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681a      	ldr	r2, [r3, #0]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a198:	68fa      	ldr	r2, [r7, #12]
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	429a      	cmp	r2, r3
 800a19e:	d002      	beq.n	800a1a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	687a      	ldr	r2, [r7, #4]
 800a1a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a1a6:	bf00      	nop
 800a1a8:	3714      	adds	r7, #20
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b0:	4770      	bx	lr
 800a1b2:	bf00      	nop
 800a1b4:	200013d8 	.word	0x200013d8
 800a1b8:	200013e0 	.word	0x200013e0

0800a1bc <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b084      	sub	sp, #16
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
 800a1c4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	330c      	adds	r3, #12
 800a1cc:	461a      	mov	r2, r3
 800a1ce:	6839      	ldr	r1, [r7, #0]
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f003 ff95 	bl	800e100 <tcpip_send_msg_wait_sem>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800a1da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d103      	bne.n	800a1ea <netconn_apimsg+0x2e>
    return apimsg->err;
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800a1e8:	e001      	b.n	800a1ee <netconn_apimsg+0x32>
  }
  return err;
 800a1ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	3710      	adds	r7, #16
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}
	...

0800a1f8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b08c      	sub	sp, #48	; 0x30
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	4603      	mov	r3, r0
 800a200:	603a      	str	r2, [r7, #0]
 800a202:	71fb      	strb	r3, [r7, #7]
 800a204:	460b      	mov	r3, r1
 800a206:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800a208:	79fb      	ldrb	r3, [r7, #7]
 800a20a:	6839      	ldr	r1, [r7, #0]
 800a20c:	4618      	mov	r0, r3
 800a20e:	f001 f9a3 	bl	800b558 <netconn_alloc>
 800a212:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800a214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a216:	2b00      	cmp	r3, #0
 800a218:	d054      	beq.n	800a2c4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800a21a:	79bb      	ldrb	r3, [r7, #6]
 800a21c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800a21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a220:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800a222:	f107 0308 	add.w	r3, r7, #8
 800a226:	4619      	mov	r1, r3
 800a228:	4829      	ldr	r0, [pc, #164]	; (800a2d0 <netconn_new_with_proto_and_callback+0xd8>)
 800a22a:	f7ff ffc7 	bl	800a1bc <netconn_apimsg>
 800a22e:	4603      	mov	r3, r0
 800a230:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800a234:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d043      	beq.n	800a2c4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800a23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a23e:	685b      	ldr	r3, [r3, #4]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d005      	beq.n	800a250 <netconn_new_with_proto_and_callback+0x58>
 800a244:	4b23      	ldr	r3, [pc, #140]	; (800a2d4 <netconn_new_with_proto_and_callback+0xdc>)
 800a246:	22a3      	movs	r2, #163	; 0xa3
 800a248:	4923      	ldr	r1, [pc, #140]	; (800a2d8 <netconn_new_with_proto_and_callback+0xe0>)
 800a24a:	4824      	ldr	r0, [pc, #144]	; (800a2dc <netconn_new_with_proto_and_callback+0xe4>)
 800a24c:	f012 fc50 	bl	801caf0 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800a250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a252:	3310      	adds	r3, #16
 800a254:	4618      	mov	r0, r3
 800a256:	f00f f95d 	bl	8019514 <sys_mbox_valid>
 800a25a:	4603      	mov	r3, r0
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d105      	bne.n	800a26c <netconn_new_with_proto_and_callback+0x74>
 800a260:	4b1c      	ldr	r3, [pc, #112]	; (800a2d4 <netconn_new_with_proto_and_callback+0xdc>)
 800a262:	22a4      	movs	r2, #164	; 0xa4
 800a264:	491e      	ldr	r1, [pc, #120]	; (800a2e0 <netconn_new_with_proto_and_callback+0xe8>)
 800a266:	481d      	ldr	r0, [pc, #116]	; (800a2dc <netconn_new_with_proto_and_callback+0xe4>)
 800a268:	f012 fc42 	bl	801caf0 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800a26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a26e:	3314      	adds	r3, #20
 800a270:	4618      	mov	r0, r3
 800a272:	f00f f94f 	bl	8019514 <sys_mbox_valid>
 800a276:	4603      	mov	r3, r0
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d005      	beq.n	800a288 <netconn_new_with_proto_and_callback+0x90>
 800a27c:	4b15      	ldr	r3, [pc, #84]	; (800a2d4 <netconn_new_with_proto_and_callback+0xdc>)
 800a27e:	22a6      	movs	r2, #166	; 0xa6
 800a280:	4918      	ldr	r1, [pc, #96]	; (800a2e4 <netconn_new_with_proto_and_callback+0xec>)
 800a282:	4816      	ldr	r0, [pc, #88]	; (800a2dc <netconn_new_with_proto_and_callback+0xe4>)
 800a284:	f012 fc34 	bl	801caf0 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800a288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a28a:	330c      	adds	r3, #12
 800a28c:	4618      	mov	r0, r3
 800a28e:	f00f f9cf 	bl	8019630 <sys_sem_valid>
 800a292:	4603      	mov	r3, r0
 800a294:	2b00      	cmp	r3, #0
 800a296:	d105      	bne.n	800a2a4 <netconn_new_with_proto_and_callback+0xac>
 800a298:	4b0e      	ldr	r3, [pc, #56]	; (800a2d4 <netconn_new_with_proto_and_callback+0xdc>)
 800a29a:	22a9      	movs	r2, #169	; 0xa9
 800a29c:	4912      	ldr	r1, [pc, #72]	; (800a2e8 <netconn_new_with_proto_and_callback+0xf0>)
 800a29e:	480f      	ldr	r0, [pc, #60]	; (800a2dc <netconn_new_with_proto_and_callback+0xe4>)
 800a2a0:	f012 fc26 	bl	801caf0 <iprintf>
      sys_sem_free(&conn->op_completed);
 800a2a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2a6:	330c      	adds	r3, #12
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	f00f f9b4 	bl	8019616 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800a2ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2b0:	3310      	adds	r3, #16
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f00f f8ba 	bl	801942c <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800a2b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a2ba:	2007      	movs	r0, #7
 800a2bc:	f004 fc88 	bl	800ebd0 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	e000      	b.n	800a2c6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800a2c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3730      	adds	r7, #48	; 0x30
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
 800a2ce:	bf00      	nop
 800a2d0:	0800b52d 	.word	0x0800b52d
 800a2d4:	0801ec44 	.word	0x0801ec44
 800a2d8:	0801ec78 	.word	0x0801ec78
 800a2dc:	0801ec9c 	.word	0x0801ec9c
 800a2e0:	0801ecc4 	.word	0x0801ecc4
 800a2e4:	0801ecdc 	.word	0x0801ecdc
 800a2e8:	0801ed00 	.word	0x0801ed00

0800a2ec <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b08c      	sub	sp, #48	; 0x30
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d101      	bne.n	800a2fe <netconn_prepare_delete+0x12>
    return ERR_OK;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	e014      	b.n	800a328 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800a302:	2329      	movs	r3, #41	; 0x29
 800a304:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800a306:	f107 030c 	add.w	r3, r7, #12
 800a30a:	4619      	mov	r1, r3
 800a30c:	4808      	ldr	r0, [pc, #32]	; (800a330 <netconn_prepare_delete+0x44>)
 800a30e:	f7ff ff55 	bl	800a1bc <netconn_apimsg>
 800a312:	4603      	mov	r3, r0
 800a314:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800a318:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d002      	beq.n	800a326 <netconn_prepare_delete+0x3a>
    return err;
 800a320:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a324:	e000      	b.n	800a328 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800a326:	2300      	movs	r3, #0
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3730      	adds	r7, #48	; 0x30
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}
 800a330:	0800ba91 	.word	0x0800ba91

0800a334 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b084      	sub	sp, #16
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d101      	bne.n	800a346 <netconn_delete+0x12>
    return ERR_OK;
 800a342:	2300      	movs	r3, #0
 800a344:	e00d      	b.n	800a362 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f7ff ffd0 	bl	800a2ec <netconn_prepare_delete>
 800a34c:	4603      	mov	r3, r0
 800a34e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800a350:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d102      	bne.n	800a35e <netconn_delete+0x2a>
    netconn_free(conn);
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f001 f96b 	bl	800b634 <netconn_free>
  }
  return err;
 800a35e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a362:	4618      	mov	r0, r3
 800a364:	3710      	adds	r7, #16
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}
	...

0800a36c <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b08e      	sub	sp, #56	; 0x38
 800a370:	af00      	add	r7, sp, #0
 800a372:	60f8      	str	r0, [r7, #12]
 800a374:	60b9      	str	r1, [r7, #8]
 800a376:	607a      	str	r2, [r7, #4]
 800a378:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d109      	bne.n	800a394 <netconn_getaddr+0x28>
 800a380:	4b1d      	ldr	r3, [pc, #116]	; (800a3f8 <netconn_getaddr+0x8c>)
 800a382:	f44f 7289 	mov.w	r2, #274	; 0x112
 800a386:	491d      	ldr	r1, [pc, #116]	; (800a3fc <netconn_getaddr+0x90>)
 800a388:	481d      	ldr	r0, [pc, #116]	; (800a400 <netconn_getaddr+0x94>)
 800a38a:	f012 fbb1 	bl	801caf0 <iprintf>
 800a38e:	f06f 030f 	mvn.w	r3, #15
 800a392:	e02d      	b.n	800a3f0 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d109      	bne.n	800a3ae <netconn_getaddr+0x42>
 800a39a:	4b17      	ldr	r3, [pc, #92]	; (800a3f8 <netconn_getaddr+0x8c>)
 800a39c:	f240 1213 	movw	r2, #275	; 0x113
 800a3a0:	4918      	ldr	r1, [pc, #96]	; (800a404 <netconn_getaddr+0x98>)
 800a3a2:	4817      	ldr	r0, [pc, #92]	; (800a400 <netconn_getaddr+0x94>)
 800a3a4:	f012 fba4 	bl	801caf0 <iprintf>
 800a3a8:	f06f 030f 	mvn.w	r3, #15
 800a3ac:	e020      	b.n	800a3f0 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d109      	bne.n	800a3c8 <netconn_getaddr+0x5c>
 800a3b4:	4b10      	ldr	r3, [pc, #64]	; (800a3f8 <netconn_getaddr+0x8c>)
 800a3b6:	f44f 728a 	mov.w	r2, #276	; 0x114
 800a3ba:	4913      	ldr	r1, [pc, #76]	; (800a408 <netconn_getaddr+0x9c>)
 800a3bc:	4810      	ldr	r0, [pc, #64]	; (800a400 <netconn_getaddr+0x94>)
 800a3be:	f012 fb97 	bl	801caf0 <iprintf>
 800a3c2:	f06f 030f 	mvn.w	r3, #15
 800a3c6:	e013      	b.n	800a3f0 <netconn_getaddr+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 800a3cc:	78fb      	ldrb	r3, [r7, #3]
 800a3ce:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	61fb      	str	r3, [r7, #28]
  msg.msg.ad.port = port;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	623b      	str	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 800a3da:	f107 0314 	add.w	r3, r7, #20
 800a3de:	4619      	mov	r1, r3
 800a3e0:	480a      	ldr	r0, [pc, #40]	; (800a40c <netconn_getaddr+0xa0>)
 800a3e2:	f7ff feeb 	bl	800a1bc <netconn_apimsg>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 800a3ec:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	3738      	adds	r7, #56	; 0x38
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}
 800a3f8:	0801ec44 	.word	0x0801ec44
 800a3fc:	0801ed1c 	.word	0x0801ed1c
 800a400:	0801ec9c 	.word	0x0801ec9c
 800a404:	0801ed3c 	.word	0x0801ed3c
 800a408:	0801ed5c 	.word	0x0801ed5c
 800a40c:	0800c3b1 	.word	0x0800c3b1

0800a410 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b08e      	sub	sp, #56	; 0x38
 800a414:	af00      	add	r7, sp, #0
 800a416:	60f8      	str	r0, [r7, #12]
 800a418:	60b9      	str	r1, [r7, #8]
 800a41a:	4613      	mov	r3, r2
 800a41c:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d109      	bne.n	800a438 <netconn_bind+0x28>
 800a424:	4b11      	ldr	r3, [pc, #68]	; (800a46c <netconn_bind+0x5c>)
 800a426:	f44f 729c 	mov.w	r2, #312	; 0x138
 800a42a:	4911      	ldr	r1, [pc, #68]	; (800a470 <netconn_bind+0x60>)
 800a42c:	4811      	ldr	r0, [pc, #68]	; (800a474 <netconn_bind+0x64>)
 800a42e:	f012 fb5f 	bl	801caf0 <iprintf>
 800a432:	f06f 030f 	mvn.w	r3, #15
 800a436:	e015      	b.n	800a464 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d101      	bne.n	800a442 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800a43e:	4b0e      	ldr	r3, [pc, #56]	; (800a478 <netconn_bind+0x68>)
 800a440:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800a44a:	88fb      	ldrh	r3, [r7, #6]
 800a44c:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800a44e:	f107 0314 	add.w	r3, r7, #20
 800a452:	4619      	mov	r1, r3
 800a454:	4809      	ldr	r0, [pc, #36]	; (800a47c <netconn_bind+0x6c>)
 800a456:	f7ff feb1 	bl	800a1bc <netconn_apimsg>
 800a45a:	4603      	mov	r3, r0
 800a45c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800a460:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800a464:	4618      	mov	r0, r3
 800a466:	3738      	adds	r7, #56	; 0x38
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}
 800a46c:	0801ec44 	.word	0x0801ec44
 800a470:	0801ed7c 	.word	0x0801ed7c
 800a474:	0801ec9c 	.word	0x0801ec9c
 800a478:	08022898 	.word	0x08022898
 800a47c:	0800bc59 	.word	0x0800bc59

0800a480 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b08c      	sub	sp, #48	; 0x30
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
 800a488:	460b      	mov	r3, r1
 800a48a:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d109      	bne.n	800a4a6 <netconn_listen_with_backlog+0x26>
 800a492:	4b0d      	ldr	r3, [pc, #52]	; (800a4c8 <netconn_listen_with_backlog+0x48>)
 800a494:	f240 12bb 	movw	r2, #443	; 0x1bb
 800a498:	490c      	ldr	r1, [pc, #48]	; (800a4cc <netconn_listen_with_backlog+0x4c>)
 800a49a:	480d      	ldr	r0, [pc, #52]	; (800a4d0 <netconn_listen_with_backlog+0x50>)
 800a49c:	f012 fb28 	bl	801caf0 <iprintf>
 800a4a0:	f06f 030f 	mvn.w	r3, #15
 800a4a4:	e00c      	b.n	800a4c0 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800a4aa:	f107 030c 	add.w	r3, r7, #12
 800a4ae:	4619      	mov	r1, r3
 800a4b0:	4808      	ldr	r0, [pc, #32]	; (800a4d4 <netconn_listen_with_backlog+0x54>)
 800a4b2:	f7ff fe83 	bl	800a1bc <netconn_apimsg>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800a4bc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3730      	adds	r7, #48	; 0x30
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}
 800a4c8:	0801ec44 	.word	0x0801ec44
 800a4cc:	0801edfc 	.word	0x0801edfc
 800a4d0:	0801ec9c 	.word	0x0801ec9c
 800a4d4:	0800bccd 	.word	0x0800bccd

0800a4d8 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b086      	sub	sp, #24
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
 800a4e0:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d109      	bne.n	800a4fc <netconn_accept+0x24>
 800a4e8:	4b3d      	ldr	r3, [pc, #244]	; (800a5e0 <netconn_accept+0x108>)
 800a4ea:	f240 12e1 	movw	r2, #481	; 0x1e1
 800a4ee:	493d      	ldr	r1, [pc, #244]	; (800a5e4 <netconn_accept+0x10c>)
 800a4f0:	483d      	ldr	r0, [pc, #244]	; (800a5e8 <netconn_accept+0x110>)
 800a4f2:	f012 fafd 	bl	801caf0 <iprintf>
 800a4f6:	f06f 030f 	mvn.w	r3, #15
 800a4fa:	e06c      	b.n	800a5d6 <netconn_accept+0xfe>
  *new_conn = NULL;
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	2200      	movs	r2, #0
 800a500:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d109      	bne.n	800a51c <netconn_accept+0x44>
 800a508:	4b35      	ldr	r3, [pc, #212]	; (800a5e0 <netconn_accept+0x108>)
 800a50a:	f240 12e3 	movw	r2, #483	; 0x1e3
 800a50e:	4937      	ldr	r1, [pc, #220]	; (800a5ec <netconn_accept+0x114>)
 800a510:	4835      	ldr	r0, [pc, #212]	; (800a5e8 <netconn_accept+0x110>)
 800a512:	f012 faed 	bl	801caf0 <iprintf>
 800a516:	f06f 030f 	mvn.w	r3, #15
 800a51a:	e05c      	b.n	800a5d6 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f000 fb99 	bl	800ac54 <netconn_err>
 800a522:	4603      	mov	r3, r0
 800a524:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 800a526:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d002      	beq.n	800a534 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800a52e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a532:	e050      	b.n	800a5d6 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	3314      	adds	r3, #20
 800a538:	4618      	mov	r0, r3
 800a53a:	f00e ffeb 	bl	8019514 <sys_mbox_valid>
 800a53e:	4603      	mov	r3, r0
 800a540:	2b00      	cmp	r3, #0
 800a542:	d005      	beq.n	800a550 <netconn_accept+0x78>
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	7f1b      	ldrb	r3, [r3, #28]
 800a548:	f003 0301 	and.w	r3, r3, #1
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d002      	beq.n	800a556 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800a550:	f06f 030e 	mvn.w	r3, #14
 800a554:	e03f      	b.n	800a5d6 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	7f1b      	ldrb	r3, [r3, #28]
 800a55a:	f003 0302 	and.w	r3, r3, #2
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d00e      	beq.n	800a580 <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	3314      	adds	r3, #20
 800a566:	f107 020c 	add.w	r2, r7, #12
 800a56a:	4611      	mov	r1, r2
 800a56c:	4618      	mov	r0, r3
 800a56e:	f00e ffba 	bl	80194e6 <sys_arch_mbox_tryfetch>
 800a572:	4603      	mov	r3, r0
 800a574:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a578:	d10a      	bne.n	800a590 <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 800a57a:	f06f 0306 	mvn.w	r3, #6
 800a57e:	e02a      	b.n	800a5d6 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	3314      	adds	r3, #20
 800a584:	f107 010c 	add.w	r1, r7, #12
 800a588:	2200      	movs	r2, #0
 800a58a:	4618      	mov	r0, r3
 800a58c:	f00e ff7a 	bl	8019484 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a594:	2b00      	cmp	r3, #0
 800a596:	d005      	beq.n	800a5a4 <netconn_accept+0xcc>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a59c:	2200      	movs	r2, #0
 800a59e:	2101      	movs	r1, #1
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	f107 0213 	add.w	r2, r7, #19
 800a5aa:	4611      	mov	r1, r2
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f000 fba3 	bl	800acf8 <lwip_netconn_is_err_msg>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d002      	beq.n	800a5be <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 800a5b8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a5bc:	e00b      	b.n	800a5d6 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d102      	bne.n	800a5ca <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 800a5c4:	f06f 030e 	mvn.w	r3, #14
 800a5c8:	e005      	b.n	800a5d6 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	697a      	ldr	r2, [r7, #20]
 800a5d2:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800a5d4:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3718      	adds	r7, #24
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}
 800a5de:	bf00      	nop
 800a5e0:	0801ec44 	.word	0x0801ec44
 800a5e4:	0801ee1c 	.word	0x0801ee1c
 800a5e8:	0801ec9c 	.word	0x0801ec9c
 800a5ec:	0801ee3c 	.word	0x0801ee3c

0800a5f0 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b088      	sub	sp, #32
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	60f8      	str	r0, [r7, #12]
 800a5f8:	60b9      	str	r1, [r7, #8]
 800a5fa:	4613      	mov	r3, r2
 800a5fc:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800a5fe:	2300      	movs	r3, #0
 800a600:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d109      	bne.n	800a61c <netconn_recv_data+0x2c>
 800a608:	4b58      	ldr	r3, [pc, #352]	; (800a76c <netconn_recv_data+0x17c>)
 800a60a:	f44f 7212 	mov.w	r2, #584	; 0x248
 800a60e:	4958      	ldr	r1, [pc, #352]	; (800a770 <netconn_recv_data+0x180>)
 800a610:	4858      	ldr	r0, [pc, #352]	; (800a774 <netconn_recv_data+0x184>)
 800a612:	f012 fa6d 	bl	801caf0 <iprintf>
 800a616:	f06f 030f 	mvn.w	r3, #15
 800a61a:	e0a2      	b.n	800a762 <netconn_recv_data+0x172>
  *new_buf = NULL;
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	2200      	movs	r2, #0
 800a620:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d109      	bne.n	800a63c <netconn_recv_data+0x4c>
 800a628:	4b50      	ldr	r3, [pc, #320]	; (800a76c <netconn_recv_data+0x17c>)
 800a62a:	f240 224a 	movw	r2, #586	; 0x24a
 800a62e:	4952      	ldr	r1, [pc, #328]	; (800a778 <netconn_recv_data+0x188>)
 800a630:	4850      	ldr	r0, [pc, #320]	; (800a774 <netconn_recv_data+0x184>)
 800a632:	f012 fa5d 	bl	801caf0 <iprintf>
 800a636:	f06f 030f 	mvn.w	r3, #15
 800a63a:	e092      	b.n	800a762 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	3310      	adds	r3, #16
 800a640:	4618      	mov	r0, r3
 800a642:	f00e ff67 	bl	8019514 <sys_mbox_valid>
 800a646:	4603      	mov	r3, r0
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d10e      	bne.n	800a66a <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800a64c:	68f8      	ldr	r0, [r7, #12]
 800a64e:	f000 fb01 	bl	800ac54 <netconn_err>
 800a652:	4603      	mov	r3, r0
 800a654:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800a656:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d002      	beq.n	800a664 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800a65e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800a662:	e07e      	b.n	800a762 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800a664:	f06f 030a 	mvn.w	r3, #10
 800a668:	e07b      	b.n	800a762 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	7f1b      	ldrb	r3, [r3, #28]
 800a66e:	f003 0302 	and.w	r3, r3, #2
 800a672:	2b00      	cmp	r3, #0
 800a674:	d10f      	bne.n	800a696 <netconn_recv_data+0xa6>
 800a676:	79fb      	ldrb	r3, [r7, #7]
 800a678:	f003 0304 	and.w	r3, r3, #4
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d10a      	bne.n	800a696 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	7f1b      	ldrb	r3, [r3, #28]
 800a684:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d104      	bne.n	800a696 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d023      	beq.n	800a6de <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	3310      	adds	r3, #16
 800a69a:	f107 0218 	add.w	r2, r7, #24
 800a69e:	4611      	mov	r1, r2
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f00e ff20 	bl	80194e6 <sys_arch_mbox_tryfetch>
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6ac:	d11f      	bne.n	800a6ee <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800a6ae:	68f8      	ldr	r0, [r7, #12]
 800a6b0:	f000 fad0 	bl	800ac54 <netconn_err>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800a6b8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d002      	beq.n	800a6c6 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800a6c0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800a6c4:	e04d      	b.n	800a762 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	7f1b      	ldrb	r3, [r3, #28]
 800a6ca:	f003 0301 	and.w	r3, r3, #1
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d002      	beq.n	800a6d8 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800a6d2:	f06f 030a 	mvn.w	r3, #10
 800a6d6:	e044      	b.n	800a762 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800a6d8:	f06f 0306 	mvn.w	r3, #6
 800a6dc:	e041      	b.n	800a762 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	3310      	adds	r3, #16
 800a6e2:	f107 0118 	add.w	r1, r7, #24
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	f00e fecb 	bl	8019484 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	781b      	ldrb	r3, [r3, #0]
 800a6f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a6f6:	2b10      	cmp	r3, #16
 800a6f8:	d117      	bne.n	800a72a <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800a6fa:	69bb      	ldr	r3, [r7, #24]
 800a6fc:	f107 0217 	add.w	r2, r7, #23
 800a700:	4611      	mov	r1, r2
 800a702:	4618      	mov	r0, r3
 800a704:	f000 faf8 	bl	800acf8 <lwip_netconn_is_err_msg>
 800a708:	4603      	mov	r3, r0
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d009      	beq.n	800a722 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800a70e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a712:	f113 0f0f 	cmn.w	r3, #15
 800a716:	d101      	bne.n	800a71c <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800a718:	2300      	movs	r3, #0
 800a71a:	e022      	b.n	800a762 <netconn_recv_data+0x172>
      }
      return err;
 800a71c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a720:	e01f      	b.n	800a762 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800a722:	69bb      	ldr	r3, [r7, #24]
 800a724:	891b      	ldrh	r3, [r3, #8]
 800a726:	83fb      	strh	r3, [r7, #30]
 800a728:	e00d      	b.n	800a746 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800a72a:	69bb      	ldr	r3, [r7, #24]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d106      	bne.n	800a73e <netconn_recv_data+0x14e>
 800a730:	4b0e      	ldr	r3, [pc, #56]	; (800a76c <netconn_recv_data+0x17c>)
 800a732:	f240 2291 	movw	r2, #657	; 0x291
 800a736:	4911      	ldr	r1, [pc, #68]	; (800a77c <netconn_recv_data+0x18c>)
 800a738:	480e      	ldr	r0, [pc, #56]	; (800a774 <netconn_recv_data+0x184>)
 800a73a:	f012 f9d9 	bl	801caf0 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800a73e:	69bb      	ldr	r3, [r7, #24]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	891b      	ldrh	r3, [r3, #8]
 800a744:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d005      	beq.n	800a75a <netconn_recv_data+0x16a>
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a752:	8bfa      	ldrh	r2, [r7, #30]
 800a754:	2101      	movs	r1, #1
 800a756:	68f8      	ldr	r0, [r7, #12]
 800a758:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800a75a:	69ba      	ldr	r2, [r7, #24]
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800a760:	2300      	movs	r3, #0
}
 800a762:	4618      	mov	r0, r3
 800a764:	3720      	adds	r7, #32
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}
 800a76a:	bf00      	nop
 800a76c:	0801ec44 	.word	0x0801ec44
 800a770:	0801ee5c 	.word	0x0801ee5c
 800a774:	0801ec9c 	.word	0x0801ec9c
 800a778:	0801ee7c 	.word	0x0801ee7c
 800a77c:	0801ee98 	.word	0x0801ee98

0800a780 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b084      	sub	sp, #16
 800a784:	af00      	add	r7, sp, #0
 800a786:	60f8      	str	r0, [r7, #12]
 800a788:	60b9      	str	r1, [r7, #8]
 800a78a:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d005      	beq.n	800a79e <netconn_tcp_recvd_msg+0x1e>
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	781b      	ldrb	r3, [r3, #0]
 800a796:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a79a:	2b10      	cmp	r3, #16
 800a79c:	d009      	beq.n	800a7b2 <netconn_tcp_recvd_msg+0x32>
 800a79e:	4b0c      	ldr	r3, [pc, #48]	; (800a7d0 <netconn_tcp_recvd_msg+0x50>)
 800a7a0:	f240 22a7 	movw	r2, #679	; 0x2a7
 800a7a4:	490b      	ldr	r1, [pc, #44]	; (800a7d4 <netconn_tcp_recvd_msg+0x54>)
 800a7a6:	480c      	ldr	r0, [pc, #48]	; (800a7d8 <netconn_tcp_recvd_msg+0x58>)
 800a7a8:	f012 f9a2 	bl	801caf0 <iprintf>
 800a7ac:	f06f 030f 	mvn.w	r3, #15
 800a7b0:	e00a      	b.n	800a7c8 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	68fa      	ldr	r2, [r7, #12]
 800a7b6:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	68ba      	ldr	r2, [r7, #8]
 800a7bc:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800a7be:	6879      	ldr	r1, [r7, #4]
 800a7c0:	4806      	ldr	r0, [pc, #24]	; (800a7dc <netconn_tcp_recvd_msg+0x5c>)
 800a7c2:	f7ff fcfb 	bl	800a1bc <netconn_apimsg>
 800a7c6:	4603      	mov	r3, r0
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3710      	adds	r7, #16
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}
 800a7d0:	0801ec44 	.word	0x0801ec44
 800a7d4:	0801eea4 	.word	0x0801eea4
 800a7d8:	0801ec9c 	.word	0x0801ec9c
 800a7dc:	0800be97 	.word	0x0800be97

0800a7e0 <netconn_tcp_recvd>:

err_t
netconn_tcp_recvd(struct netconn *conn, size_t len)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b08c      	sub	sp, #48	; 0x30
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
 800a7e8:	6039      	str	r1, [r7, #0]
  err_t err;
  API_MSG_VAR_DECLARE(msg);
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d005      	beq.n	800a7fc <netconn_tcp_recvd+0x1c>
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	781b      	ldrb	r3, [r3, #0]
 800a7f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a7f8:	2b10      	cmp	r3, #16
 800a7fa:	d009      	beq.n	800a810 <netconn_tcp_recvd+0x30>
 800a7fc:	4b0c      	ldr	r3, [pc, #48]	; (800a830 <netconn_tcp_recvd+0x50>)
 800a7fe:	f240 22b5 	movw	r2, #693	; 0x2b5
 800a802:	490c      	ldr	r1, [pc, #48]	; (800a834 <netconn_tcp_recvd+0x54>)
 800a804:	480c      	ldr	r0, [pc, #48]	; (800a838 <netconn_tcp_recvd+0x58>)
 800a806:	f012 f973 	bl	801caf0 <iprintf>
 800a80a:	f06f 030f 	mvn.w	r3, #15
 800a80e:	e00b      	b.n	800a828 <netconn_tcp_recvd+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  API_MSG_VAR_ALLOC(msg);
  err = netconn_tcp_recvd_msg(conn, len, &API_VAR_REF(msg));
 800a810:	f107 030c 	add.w	r3, r7, #12
 800a814:	461a      	mov	r2, r3
 800a816:	6839      	ldr	r1, [r7, #0]
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f7ff ffb1 	bl	800a780 <netconn_tcp_recvd_msg>
 800a81e:	4603      	mov	r3, r0
 800a820:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);
  return err;
 800a824:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a828:	4618      	mov	r0, r3
 800a82a:	3730      	adds	r7, #48	; 0x30
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}
 800a830:	0801ec44 	.word	0x0801ec44
 800a834:	0801eea4 	.word	0x0801eea4
 800a838:	0801ec9c 	.word	0x0801ec9c

0800a83c <netconn_recv_data_tcp>:

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b090      	sub	sp, #64	; 0x40
 800a840:	af00      	add	r7, sp, #0
 800a842:	60f8      	str	r0, [r7, #12]
 800a844:	60b9      	str	r1, [r7, #8]
 800a846:	4613      	mov	r3, r2
 800a848:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	3310      	adds	r3, #16
 800a84e:	4618      	mov	r0, r3
 800a850:	f00e fe60 	bl	8019514 <sys_mbox_valid>
 800a854:	4603      	mov	r3, r0
 800a856:	2b00      	cmp	r3, #0
 800a858:	d102      	bne.n	800a860 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800a85a:	f06f 030a 	mvn.w	r3, #10
 800a85e:	e06d      	b.n	800a93c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	7f1b      	ldrb	r3, [r3, #28]
 800a864:	b25b      	sxtb	r3, r3
 800a866:	2b00      	cmp	r3, #0
 800a868:	da07      	bge.n	800a87a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	7f1b      	ldrb	r3, [r3, #28]
 800a86e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a872:	b2da      	uxtb	r2, r3
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800a878:	e039      	b.n	800a8ee <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800a87a:	79fb      	ldrb	r3, [r7, #7]
 800a87c:	461a      	mov	r2, r3
 800a87e:	68b9      	ldr	r1, [r7, #8]
 800a880:	68f8      	ldr	r0, [r7, #12]
 800a882:	f7ff feb5 	bl	800a5f0 <netconn_recv_data>
 800a886:	4603      	mov	r3, r0
 800a888:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800a88c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a890:	2b00      	cmp	r3, #0
 800a892:	d002      	beq.n	800a89a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800a894:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a898:	e050      	b.n	800a93c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800a89a:	68bb      	ldr	r3, [r7, #8]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800a8a0:	79fb      	ldrb	r3, [r7, #7]
 800a8a2:	f003 0308 	and.w	r3, r3, #8
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d10e      	bne.n	800a8c8 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800a8aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d002      	beq.n	800a8b6 <netconn_recv_data_tcp+0x7a>
 800a8b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8b2:	891b      	ldrh	r3, [r3, #8]
 800a8b4:	e000      	b.n	800a8b8 <netconn_recv_data_tcp+0x7c>
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800a8ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a8bc:	f107 0214 	add.w	r2, r7, #20
 800a8c0:	4619      	mov	r1, r3
 800a8c2:	68f8      	ldr	r0, [r7, #12]
 800a8c4:	f7ff ff5c 	bl	800a780 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800a8c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d134      	bne.n	800a938 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800a8ce:	79fb      	ldrb	r3, [r7, #7]
 800a8d0:	f003 0310 	and.w	r3, r3, #16
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d009      	beq.n	800a8ec <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	7f1b      	ldrb	r3, [r3, #28]
 800a8dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a8e0:	b2da      	uxtb	r2, r3
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800a8e6:	f06f 0306 	mvn.w	r3, #6
 800a8ea:	e027      	b.n	800a93c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800a8ec:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d005      	beq.n	800a902 <netconn_recv_data_tcp+0xc6>
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	2101      	movs	r1, #1
 800a8fe:	68f8      	ldr	r0, [r7, #12]
 800a900:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	685b      	ldr	r3, [r3, #4]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d10f      	bne.n	800a92a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800a90a:	68f8      	ldr	r0, [r7, #12]
 800a90c:	f000 f9a2 	bl	800ac54 <netconn_err>
 800a910:	4603      	mov	r3, r0
 800a912:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800a916:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d002      	beq.n	800a924 <netconn_recv_data_tcp+0xe8>
          return err;
 800a91e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a922:	e00b      	b.n	800a93c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800a924:	f06f 030d 	mvn.w	r3, #13
 800a928:	e008      	b.n	800a93c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800a92a:	2101      	movs	r1, #1
 800a92c:	68f8      	ldr	r0, [r7, #12]
 800a92e:	f000 f961 	bl	800abf4 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800a932:	f06f 030e 	mvn.w	r3, #14
 800a936:	e001      	b.n	800a93c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800a938:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3740      	adds	r7, #64	; 0x40
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}

0800a944 <netconn_recv_tcp_pbuf_flags>:
 *                memory error or another error, @see netconn_recv_data)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf_flags(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b084      	sub	sp, #16
 800a948:	af00      	add	r7, sp, #0
 800a94a:	60f8      	str	r0, [r7, #12]
 800a94c:	60b9      	str	r1, [r7, #8]
 800a94e:	4613      	mov	r3, r2
 800a950:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d005      	beq.n	800a964 <netconn_recv_tcp_pbuf_flags+0x20>
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	781b      	ldrb	r3, [r3, #0]
 800a95c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a960:	2b10      	cmp	r3, #16
 800a962:	d009      	beq.n	800a978 <netconn_recv_tcp_pbuf_flags+0x34>
 800a964:	4b0a      	ldr	r3, [pc, #40]	; (800a990 <netconn_recv_tcp_pbuf_flags+0x4c>)
 800a966:	f240 3225 	movw	r2, #805	; 0x325
 800a96a:	490a      	ldr	r1, [pc, #40]	; (800a994 <netconn_recv_tcp_pbuf_flags+0x50>)
 800a96c:	480a      	ldr	r0, [pc, #40]	; (800a998 <netconn_recv_tcp_pbuf_flags+0x54>)
 800a96e:	f012 f8bf 	bl	801caf0 <iprintf>
 800a972:	f06f 030f 	mvn.w	r3, #15
 800a976:	e006      	b.n	800a986 <netconn_recv_tcp_pbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data_tcp(conn, new_buf, apiflags);
 800a978:	79fb      	ldrb	r3, [r7, #7]
 800a97a:	461a      	mov	r2, r3
 800a97c:	68b9      	ldr	r1, [r7, #8]
 800a97e:	68f8      	ldr	r0, [r7, #12]
 800a980:	f7ff ff5c 	bl	800a83c <netconn_recv_data_tcp>
 800a984:	4603      	mov	r3, r0
}
 800a986:	4618      	mov	r0, r3
 800a988:	3710      	adds	r7, #16
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}
 800a98e:	bf00      	nop
 800a990:	0801ec44 	.word	0x0801ec44
 800a994:	0801eea4 	.word	0x0801eea4
 800a998:	0801ec9c 	.word	0x0801ec9c

0800a99c <netconn_recv_udp_raw_netbuf_flags>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a UDP/RAW netconn
 */
err_t
netconn_recv_udp_raw_netbuf_flags(struct netconn *conn, struct netbuf **new_buf, u8_t apiflags)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b084      	sub	sp, #16
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	60f8      	str	r0, [r7, #12]
 800a9a4:	60b9      	str	r1, [r7, #8]
 800a9a6:	4613      	mov	r3, r2
 800a9a8:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d005      	beq.n	800a9bc <netconn_recv_udp_raw_netbuf_flags+0x20>
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	781b      	ldrb	r3, [r3, #0]
 800a9b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a9b8:	2b10      	cmp	r3, #16
 800a9ba:	d109      	bne.n	800a9d0 <netconn_recv_udp_raw_netbuf_flags+0x34>
 800a9bc:	4b0a      	ldr	r3, [pc, #40]	; (800a9e8 <netconn_recv_udp_raw_netbuf_flags+0x4c>)
 800a9be:	f44f 7253 	mov.w	r2, #844	; 0x34c
 800a9c2:	490a      	ldr	r1, [pc, #40]	; (800a9ec <netconn_recv_udp_raw_netbuf_flags+0x50>)
 800a9c4:	480a      	ldr	r0, [pc, #40]	; (800a9f0 <netconn_recv_udp_raw_netbuf_flags+0x54>)
 800a9c6:	f012 f893 	bl	801caf0 <iprintf>
 800a9ca:	f06f 030f 	mvn.w	r3, #15
 800a9ce:	e006      	b.n	800a9de <netconn_recv_udp_raw_netbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) != NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 800a9d0:	79fb      	ldrb	r3, [r7, #7]
 800a9d2:	461a      	mov	r2, r3
 800a9d4:	68b9      	ldr	r1, [r7, #8]
 800a9d6:	68f8      	ldr	r0, [r7, #12]
 800a9d8:	f7ff fe0a 	bl	800a5f0 <netconn_recv_data>
 800a9dc:	4603      	mov	r3, r0
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	3710      	adds	r7, #16
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}
 800a9e6:	bf00      	nop
 800a9e8:	0801ec44 	.word	0x0801ec44
 800a9ec:	0801eec8 	.word	0x0801eec8
 800a9f0:	0801ec9c 	.word	0x0801ec9c

0800a9f4 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b08c      	sub	sp, #48	; 0x30
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
 800a9fc:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d109      	bne.n	800aa18 <netconn_send+0x24>
 800aa04:	4b0e      	ldr	r3, [pc, #56]	; (800aa40 <netconn_send+0x4c>)
 800aa06:	f240 32b2 	movw	r2, #946	; 0x3b2
 800aa0a:	490e      	ldr	r1, [pc, #56]	; (800aa44 <netconn_send+0x50>)
 800aa0c:	480e      	ldr	r0, [pc, #56]	; (800aa48 <netconn_send+0x54>)
 800aa0e:	f012 f86f 	bl	801caf0 <iprintf>
 800aa12:	f06f 030f 	mvn.w	r3, #15
 800aa16:	e00e      	b.n	800aa36 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800aa20:	f107 030c 	add.w	r3, r7, #12
 800aa24:	4619      	mov	r1, r3
 800aa26:	4809      	ldr	r0, [pc, #36]	; (800aa4c <netconn_send+0x58>)
 800aa28:	f7ff fbc8 	bl	800a1bc <netconn_apimsg>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800aa32:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3730      	adds	r7, #48	; 0x30
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}
 800aa3e:	bf00      	nop
 800aa40:	0801ec44 	.word	0x0801ec44
 800aa44:	0801ef00 	.word	0x0801ef00
 800aa48:	0801ec9c 	.word	0x0801ec9c
 800aa4c:	0800bdfd 	.word	0x0800bdfd

0800aa50 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b088      	sub	sp, #32
 800aa54:	af02      	add	r7, sp, #8
 800aa56:	60f8      	str	r0, [r7, #12]
 800aa58:	60b9      	str	r1, [r7, #8]
 800aa5a:	607a      	str	r2, [r7, #4]
 800aa5c:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800aa66:	78fa      	ldrb	r2, [r7, #3]
 800aa68:	f107 0110 	add.w	r1, r7, #16
 800aa6c:	6a3b      	ldr	r3, [r7, #32]
 800aa6e:	9300      	str	r3, [sp, #0]
 800aa70:	4613      	mov	r3, r2
 800aa72:	2201      	movs	r2, #1
 800aa74:	68f8      	ldr	r0, [r7, #12]
 800aa76:	f000 f805 	bl	800aa84 <netconn_write_vectors_partly>
 800aa7a:	4603      	mov	r3, r0
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3718      	adds	r7, #24
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}

0800aa84 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b092      	sub	sp, #72	; 0x48
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	60f8      	str	r0, [r7, #12]
 800aa8c:	60b9      	str	r1, [r7, #8]
 800aa8e:	4611      	mov	r1, r2
 800aa90:	461a      	mov	r2, r3
 800aa92:	460b      	mov	r3, r1
 800aa94:	80fb      	strh	r3, [r7, #6]
 800aa96:	4613      	mov	r3, r2
 800aa98:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d109      	bne.n	800aab4 <netconn_write_vectors_partly+0x30>
 800aaa0:	4b4e      	ldr	r3, [pc, #312]	; (800abdc <netconn_write_vectors_partly+0x158>)
 800aaa2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800aaa6:	494e      	ldr	r1, [pc, #312]	; (800abe0 <netconn_write_vectors_partly+0x15c>)
 800aaa8:	484e      	ldr	r0, [pc, #312]	; (800abe4 <netconn_write_vectors_partly+0x160>)
 800aaaa:	f012 f821 	bl	801caf0 <iprintf>
 800aaae:	f06f 030f 	mvn.w	r3, #15
 800aab2:	e08e      	b.n	800abd2 <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	781b      	ldrb	r3, [r3, #0]
 800aab8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aabc:	2b10      	cmp	r3, #16
 800aabe:	d009      	beq.n	800aad4 <netconn_write_vectors_partly+0x50>
 800aac0:	4b46      	ldr	r3, [pc, #280]	; (800abdc <netconn_write_vectors_partly+0x158>)
 800aac2:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800aac6:	4948      	ldr	r1, [pc, #288]	; (800abe8 <netconn_write_vectors_partly+0x164>)
 800aac8:	4846      	ldr	r0, [pc, #280]	; (800abe4 <netconn_write_vectors_partly+0x160>)
 800aaca:	f012 f811 	bl	801caf0 <iprintf>
 800aace:	f06f 0305 	mvn.w	r3, #5
 800aad2:	e07e      	b.n	800abd2 <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	7f1b      	ldrb	r3, [r3, #28]
 800aad8:	f003 0302 	and.w	r3, r3, #2
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d104      	bne.n	800aaea <netconn_write_vectors_partly+0x66>
 800aae0:	797b      	ldrb	r3, [r7, #5]
 800aae2:	f003 0304 	and.w	r3, r3, #4
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d001      	beq.n	800aaee <netconn_write_vectors_partly+0x6a>
 800aaea:	2301      	movs	r3, #1
 800aaec:	e000      	b.n	800aaf0 <netconn_write_vectors_partly+0x6c>
 800aaee:	2300      	movs	r3, #0
 800aaf0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800aaf4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d005      	beq.n	800ab08 <netconn_write_vectors_partly+0x84>
 800aafc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d102      	bne.n	800ab08 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800ab02:	f06f 0305 	mvn.w	r3, #5
 800ab06:	e064      	b.n	800abd2 <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	643b      	str	r3, [r7, #64]	; 0x40
 800ab10:	e015      	b.n	800ab3e <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800ab12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab14:	00db      	lsls	r3, r3, #3
 800ab16:	68ba      	ldr	r2, [r7, #8]
 800ab18:	4413      	add	r3, r2
 800ab1a:	685b      	ldr	r3, [r3, #4]
 800ab1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab1e:	4413      	add	r3, r2
 800ab20:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800ab22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab24:	00db      	lsls	r3, r3, #3
 800ab26:	68ba      	ldr	r2, [r7, #8]
 800ab28:	4413      	add	r3, r2
 800ab2a:	685b      	ldr	r3, [r3, #4]
 800ab2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab2e:	429a      	cmp	r2, r3
 800ab30:	d202      	bcs.n	800ab38 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800ab32:	f06f 0305 	mvn.w	r3, #5
 800ab36:	e04c      	b.n	800abd2 <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800ab38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab3a:	3301      	adds	r3, #1
 800ab3c:	643b      	str	r3, [r7, #64]	; 0x40
 800ab3e:	88fb      	ldrh	r3, [r7, #6]
 800ab40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ab42:	429a      	cmp	r2, r3
 800ab44:	dbe5      	blt.n	800ab12 <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800ab46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d101      	bne.n	800ab50 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	e040      	b.n	800abd2 <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800ab50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	da0a      	bge.n	800ab6c <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800ab56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d102      	bne.n	800ab62 <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800ab5c:	f06f 0305 	mvn.w	r3, #5
 800ab60:	e037      	b.n	800abd2 <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800ab62:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ab66:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 800ab68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab6a:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800ab74:	88fb      	ldrh	r3, [r7, #6]
 800ab76:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800ab78:	2300      	movs	r3, #0
 800ab7a:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800ab7c:	797b      	ldrb	r3, [r7, #5]
 800ab7e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800ab82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab84:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800ab86:	2300      	movs	r3, #0
 800ab88:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800ab8a:	f107 0314 	add.w	r3, r7, #20
 800ab8e:	4619      	mov	r1, r3
 800ab90:	4816      	ldr	r0, [pc, #88]	; (800abec <netconn_write_vectors_partly+0x168>)
 800ab92:	f7ff fb13 	bl	800a1bc <netconn_apimsg>
 800ab96:	4603      	mov	r3, r0
 800ab98:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 800ab9c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d114      	bne.n	800abce <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800aba4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d002      	beq.n	800abb0 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800abaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800abae:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800abb0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d10a      	bne.n	800abce <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800abb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800abbc:	429a      	cmp	r2, r3
 800abbe:	d006      	beq.n	800abce <netconn_write_vectors_partly+0x14a>
 800abc0:	4b06      	ldr	r3, [pc, #24]	; (800abdc <netconn_write_vectors_partly+0x158>)
 800abc2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800abc6:	490a      	ldr	r1, [pc, #40]	; (800abf0 <netconn_write_vectors_partly+0x16c>)
 800abc8:	4806      	ldr	r0, [pc, #24]	; (800abe4 <netconn_write_vectors_partly+0x160>)
 800abca:	f011 ff91 	bl	801caf0 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800abce:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	3748      	adds	r7, #72	; 0x48
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}
 800abda:	bf00      	nop
 800abdc:	0801ec44 	.word	0x0801ec44
 800abe0:	0801ef1c 	.word	0x0801ef1c
 800abe4:	0801ec9c 	.word	0x0801ec9c
 800abe8:	0801ef38 	.word	0x0801ef38
 800abec:	0800c299 	.word	0x0800c299
 800abf0:	0801ef5c 	.word	0x0801ef5c

0800abf4 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b08c      	sub	sp, #48	; 0x30
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
 800abfc:	460b      	mov	r3, r1
 800abfe:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d109      	bne.n	800ac1a <netconn_close_shutdown+0x26>
 800ac06:	4b0f      	ldr	r3, [pc, #60]	; (800ac44 <netconn_close_shutdown+0x50>)
 800ac08:	f240 4247 	movw	r2, #1095	; 0x447
 800ac0c:	490e      	ldr	r1, [pc, #56]	; (800ac48 <netconn_close_shutdown+0x54>)
 800ac0e:	480f      	ldr	r0, [pc, #60]	; (800ac4c <netconn_close_shutdown+0x58>)
 800ac10:	f011 ff6e 	bl	801caf0 <iprintf>
 800ac14:	f06f 030f 	mvn.w	r3, #15
 800ac18:	e010      	b.n	800ac3c <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800ac1e:	78fb      	ldrb	r3, [r7, #3]
 800ac20:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800ac22:	2329      	movs	r3, #41	; 0x29
 800ac24:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800ac26:	f107 030c 	add.w	r3, r7, #12
 800ac2a:	4619      	mov	r1, r3
 800ac2c:	4808      	ldr	r0, [pc, #32]	; (800ac50 <netconn_close_shutdown+0x5c>)
 800ac2e:	f7ff fac5 	bl	800a1bc <netconn_apimsg>
 800ac32:	4603      	mov	r3, r0
 800ac34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800ac38:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	3730      	adds	r7, #48	; 0x30
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}
 800ac44:	0801ec44 	.word	0x0801ec44
 800ac48:	0801ef80 	.word	0x0801ef80
 800ac4c:	0801ec9c 	.word	0x0801ec9c
 800ac50:	0800c4bd 	.word	0x0800c4bd

0800ac54 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b084      	sub	sp, #16
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d101      	bne.n	800ac66 <netconn_err+0x12>
    return ERR_OK;
 800ac62:	2300      	movs	r3, #0
 800ac64:	e00d      	b.n	800ac82 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800ac66:	f00e fd5f 	bl	8019728 <sys_arch_protect>
 800ac6a:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	7a1b      	ldrb	r3, [r3, #8]
 800ac70:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2200      	movs	r2, #0
 800ac76:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800ac78:	68f8      	ldr	r0, [r7, #12]
 800ac7a:	f00e fd63 	bl	8019744 <sys_arch_unprotect>
  return err;
 800ac7e:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3710      	adds	r7, #16
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}
	...

0800ac8c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b082      	sub	sp, #8
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	4603      	mov	r3, r0
 800ac94:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800ac96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac9a:	f113 0f0d 	cmn.w	r3, #13
 800ac9e:	d009      	beq.n	800acb4 <lwip_netconn_err_to_msg+0x28>
 800aca0:	f113 0f0d 	cmn.w	r3, #13
 800aca4:	dc0c      	bgt.n	800acc0 <lwip_netconn_err_to_msg+0x34>
 800aca6:	f113 0f0f 	cmn.w	r3, #15
 800acaa:	d007      	beq.n	800acbc <lwip_netconn_err_to_msg+0x30>
 800acac:	f113 0f0e 	cmn.w	r3, #14
 800acb0:	d002      	beq.n	800acb8 <lwip_netconn_err_to_msg+0x2c>
 800acb2:	e005      	b.n	800acc0 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800acb4:	4b0a      	ldr	r3, [pc, #40]	; (800ace0 <lwip_netconn_err_to_msg+0x54>)
 800acb6:	e00e      	b.n	800acd6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800acb8:	4b0a      	ldr	r3, [pc, #40]	; (800ace4 <lwip_netconn_err_to_msg+0x58>)
 800acba:	e00c      	b.n	800acd6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800acbc:	4b0a      	ldr	r3, [pc, #40]	; (800ace8 <lwip_netconn_err_to_msg+0x5c>)
 800acbe:	e00a      	b.n	800acd6 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800acc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d005      	beq.n	800acd4 <lwip_netconn_err_to_msg+0x48>
 800acc8:	4b08      	ldr	r3, [pc, #32]	; (800acec <lwip_netconn_err_to_msg+0x60>)
 800acca:	227d      	movs	r2, #125	; 0x7d
 800accc:	4908      	ldr	r1, [pc, #32]	; (800acf0 <lwip_netconn_err_to_msg+0x64>)
 800acce:	4809      	ldr	r0, [pc, #36]	; (800acf4 <lwip_netconn_err_to_msg+0x68>)
 800acd0:	f011 ff0e 	bl	801caf0 <iprintf>
      return NULL;
 800acd4:	2300      	movs	r3, #0
  }
}
 800acd6:	4618      	mov	r0, r3
 800acd8:	3708      	adds	r7, #8
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}
 800acde:	bf00      	nop
 800ace0:	08022740 	.word	0x08022740
 800ace4:	08022741 	.word	0x08022741
 800ace8:	08022742 	.word	0x08022742
 800acec:	0801ef9c 	.word	0x0801ef9c
 800acf0:	0801efd0 	.word	0x0801efd0
 800acf4:	0801efe0 	.word	0x0801efe0

0800acf8 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b082      	sub	sp, #8
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
 800ad00:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d105      	bne.n	800ad14 <lwip_netconn_is_err_msg+0x1c>
 800ad08:	4b12      	ldr	r3, [pc, #72]	; (800ad54 <lwip_netconn_is_err_msg+0x5c>)
 800ad0a:	2285      	movs	r2, #133	; 0x85
 800ad0c:	4912      	ldr	r1, [pc, #72]	; (800ad58 <lwip_netconn_is_err_msg+0x60>)
 800ad0e:	4813      	ldr	r0, [pc, #76]	; (800ad5c <lwip_netconn_is_err_msg+0x64>)
 800ad10:	f011 feee 	bl	801caf0 <iprintf>

  if (msg == &netconn_aborted) {
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	4a12      	ldr	r2, [pc, #72]	; (800ad60 <lwip_netconn_is_err_msg+0x68>)
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d104      	bne.n	800ad26 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	22f3      	movs	r2, #243	; 0xf3
 800ad20:	701a      	strb	r2, [r3, #0]
    return 1;
 800ad22:	2301      	movs	r3, #1
 800ad24:	e012      	b.n	800ad4c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	4a0e      	ldr	r2, [pc, #56]	; (800ad64 <lwip_netconn_is_err_msg+0x6c>)
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	d104      	bne.n	800ad38 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	22f2      	movs	r2, #242	; 0xf2
 800ad32:	701a      	strb	r2, [r3, #0]
    return 1;
 800ad34:	2301      	movs	r3, #1
 800ad36:	e009      	b.n	800ad4c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	4a0b      	ldr	r2, [pc, #44]	; (800ad68 <lwip_netconn_is_err_msg+0x70>)
 800ad3c:	4293      	cmp	r3, r2
 800ad3e:	d104      	bne.n	800ad4a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	22f1      	movs	r2, #241	; 0xf1
 800ad44:	701a      	strb	r2, [r3, #0]
    return 1;
 800ad46:	2301      	movs	r3, #1
 800ad48:	e000      	b.n	800ad4c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800ad4a:	2300      	movs	r3, #0
}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	3708      	adds	r7, #8
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}
 800ad54:	0801ef9c 	.word	0x0801ef9c
 800ad58:	0801f008 	.word	0x0801f008
 800ad5c:	0801efe0 	.word	0x0801efe0
 800ad60:	08022740 	.word	0x08022740
 800ad64:	08022741 	.word	0x08022741
 800ad68:	08022742 	.word	0x08022742

0800ad6c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b088      	sub	sp, #32
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	60f8      	str	r0, [r7, #12]
 800ad74:	60b9      	str	r1, [r7, #8]
 800ad76:	607a      	str	r2, [r7, #4]
 800ad78:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d105      	bne.n	800ad8c <recv_udp+0x20>
 800ad80:	4b34      	ldr	r3, [pc, #208]	; (800ae54 <recv_udp+0xe8>)
 800ad82:	22e5      	movs	r2, #229	; 0xe5
 800ad84:	4934      	ldr	r1, [pc, #208]	; (800ae58 <recv_udp+0xec>)
 800ad86:	4835      	ldr	r0, [pc, #212]	; (800ae5c <recv_udp+0xf0>)
 800ad88:	f011 feb2 	bl	801caf0 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d105      	bne.n	800ad9e <recv_udp+0x32>
 800ad92:	4b30      	ldr	r3, [pc, #192]	; (800ae54 <recv_udp+0xe8>)
 800ad94:	22e6      	movs	r2, #230	; 0xe6
 800ad96:	4932      	ldr	r1, [pc, #200]	; (800ae60 <recv_udp+0xf4>)
 800ad98:	4830      	ldr	r0, [pc, #192]	; (800ae5c <recv_udp+0xf0>)
 800ad9a:	f011 fea9 	bl	801caf0 <iprintf>
  conn = (struct netconn *)arg;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800ada2:	69fb      	ldr	r3, [r7, #28]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d103      	bne.n	800adb0 <recv_udp+0x44>
    pbuf_free(p);
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f004 fe1f 	bl	800f9ec <pbuf_free>
    return;
 800adae:	e04d      	b.n	800ae4c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800adb0:	69fb      	ldr	r3, [r7, #28]
 800adb2:	685b      	ldr	r3, [r3, #4]
 800adb4:	68ba      	ldr	r2, [r7, #8]
 800adb6:	429a      	cmp	r2, r3
 800adb8:	d005      	beq.n	800adc6 <recv_udp+0x5a>
 800adba:	4b26      	ldr	r3, [pc, #152]	; (800ae54 <recv_udp+0xe8>)
 800adbc:	22ee      	movs	r2, #238	; 0xee
 800adbe:	4929      	ldr	r1, [pc, #164]	; (800ae64 <recv_udp+0xf8>)
 800adc0:	4826      	ldr	r0, [pc, #152]	; (800ae5c <recv_udp+0xf0>)
 800adc2:	f011 fe95 	bl	801caf0 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800adc6:	69fb      	ldr	r3, [r7, #28]
 800adc8:	3310      	adds	r3, #16
 800adca:	4618      	mov	r0, r3
 800adcc:	f00e fba2 	bl	8019514 <sys_mbox_valid>
 800add0:	4603      	mov	r3, r0
 800add2:	2b00      	cmp	r3, #0
 800add4:	d103      	bne.n	800adde <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f004 fe08 	bl	800f9ec <pbuf_free>
    return;
 800addc:	e036      	b.n	800ae4c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800adde:	2006      	movs	r0, #6
 800ade0:	f003 fea4 	bl	800eb2c <memp_malloc>
 800ade4:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800ade6:	69bb      	ldr	r3, [r7, #24]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d103      	bne.n	800adf4 <recv_udp+0x88>
    pbuf_free(p);
 800adec:	6878      	ldr	r0, [r7, #4]
 800adee:	f004 fdfd 	bl	800f9ec <pbuf_free>
    return;
 800adf2:	e02b      	b.n	800ae4c <recv_udp+0xe0>
  } else {
    buf->p = p;
 800adf4:	69bb      	ldr	r3, [r7, #24]
 800adf6:	687a      	ldr	r2, [r7, #4]
 800adf8:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800adfa:	69bb      	ldr	r3, [r7, #24]
 800adfc:	687a      	ldr	r2, [r7, #4]
 800adfe:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d002      	beq.n	800ae0c <recv_udp+0xa0>
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	e000      	b.n	800ae0e <recv_udp+0xa2>
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	69ba      	ldr	r2, [r7, #24]
 800ae10:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800ae12:	69bb      	ldr	r3, [r7, #24]
 800ae14:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800ae16:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	891b      	ldrh	r3, [r3, #8]
 800ae1c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800ae1e:	69fb      	ldr	r3, [r7, #28]
 800ae20:	3310      	adds	r3, #16
 800ae22:	69b9      	ldr	r1, [r7, #24]
 800ae24:	4618      	mov	r0, r3
 800ae26:	f00e fb13 	bl	8019450 <sys_mbox_trypost>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d003      	beq.n	800ae38 <recv_udp+0xcc>
    netbuf_delete(buf);
 800ae30:	69b8      	ldr	r0, [r7, #24]
 800ae32:	f001 fbed 	bl	800c610 <netbuf_delete>
    return;
 800ae36:	e009      	b.n	800ae4c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800ae38:	69fb      	ldr	r3, [r7, #28]
 800ae3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d005      	beq.n	800ae4c <recv_udp+0xe0>
 800ae40:	69fb      	ldr	r3, [r7, #28]
 800ae42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae44:	8afa      	ldrh	r2, [r7, #22]
 800ae46:	2100      	movs	r1, #0
 800ae48:	69f8      	ldr	r0, [r7, #28]
 800ae4a:	4798      	blx	r3
  }
}
 800ae4c:	3720      	adds	r7, #32
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}
 800ae52:	bf00      	nop
 800ae54:	0801ef9c 	.word	0x0801ef9c
 800ae58:	0801f014 	.word	0x0801f014
 800ae5c:	0801efe0 	.word	0x0801efe0
 800ae60:	0801f038 	.word	0x0801f038
 800ae64:	0801f058 	.word	0x0801f058

0800ae68 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b088      	sub	sp, #32
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	60f8      	str	r0, [r7, #12]
 800ae70:	60b9      	str	r1, [r7, #8]
 800ae72:	607a      	str	r2, [r7, #4]
 800ae74:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d106      	bne.n	800ae8a <recv_tcp+0x22>
 800ae7c:	4b36      	ldr	r3, [pc, #216]	; (800af58 <recv_tcp+0xf0>)
 800ae7e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800ae82:	4936      	ldr	r1, [pc, #216]	; (800af5c <recv_tcp+0xf4>)
 800ae84:	4836      	ldr	r0, [pc, #216]	; (800af60 <recv_tcp+0xf8>)
 800ae86:	f011 fe33 	bl	801caf0 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d106      	bne.n	800ae9e <recv_tcp+0x36>
 800ae90:	4b31      	ldr	r3, [pc, #196]	; (800af58 <recv_tcp+0xf0>)
 800ae92:	f240 122d 	movw	r2, #301	; 0x12d
 800ae96:	4933      	ldr	r1, [pc, #204]	; (800af64 <recv_tcp+0xfc>)
 800ae98:	4831      	ldr	r0, [pc, #196]	; (800af60 <recv_tcp+0xf8>)
 800ae9a:	f011 fe29 	bl	801caf0 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800ae9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d006      	beq.n	800aeb4 <recv_tcp+0x4c>
 800aea6:	4b2c      	ldr	r3, [pc, #176]	; (800af58 <recv_tcp+0xf0>)
 800aea8:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800aeac:	492e      	ldr	r1, [pc, #184]	; (800af68 <recv_tcp+0x100>)
 800aeae:	482c      	ldr	r0, [pc, #176]	; (800af60 <recv_tcp+0xf8>)
 800aeb0:	f011 fe1e 	bl	801caf0 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800aeb8:	697b      	ldr	r3, [r7, #20]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d102      	bne.n	800aec4 <recv_tcp+0x5c>
    return ERR_VAL;
 800aebe:	f06f 0305 	mvn.w	r3, #5
 800aec2:	e045      	b.n	800af50 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800aec4:	697b      	ldr	r3, [r7, #20]
 800aec6:	685b      	ldr	r3, [r3, #4]
 800aec8:	68ba      	ldr	r2, [r7, #8]
 800aeca:	429a      	cmp	r2, r3
 800aecc:	d006      	beq.n	800aedc <recv_tcp+0x74>
 800aece:	4b22      	ldr	r3, [pc, #136]	; (800af58 <recv_tcp+0xf0>)
 800aed0:	f240 1235 	movw	r2, #309	; 0x135
 800aed4:	4925      	ldr	r1, [pc, #148]	; (800af6c <recv_tcp+0x104>)
 800aed6:	4822      	ldr	r0, [pc, #136]	; (800af60 <recv_tcp+0xf8>)
 800aed8:	f011 fe0a 	bl	801caf0 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800aedc:	697b      	ldr	r3, [r7, #20]
 800aede:	3310      	adds	r3, #16
 800aee0:	4618      	mov	r0, r3
 800aee2:	f00e fb17 	bl	8019514 <sys_mbox_valid>
 800aee6:	4603      	mov	r3, r0
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d10d      	bne.n	800af08 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d008      	beq.n	800af04 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	891b      	ldrh	r3, [r3, #8]
 800aef6:	4619      	mov	r1, r3
 800aef8:	68b8      	ldr	r0, [r7, #8]
 800aefa:	f005 fd59 	bl	80109b0 <tcp_recved>
      pbuf_free(p);
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f004 fd74 	bl	800f9ec <pbuf_free>
    }
    return ERR_OK;
 800af04:	2300      	movs	r3, #0
 800af06:	e023      	b.n	800af50 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d005      	beq.n	800af1a <recv_tcp+0xb2>
    msg = p;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	891b      	ldrh	r3, [r3, #8]
 800af16:	83fb      	strh	r3, [r7, #30]
 800af18:	e003      	b.n	800af22 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800af1a:	4b15      	ldr	r3, [pc, #84]	; (800af70 <recv_tcp+0x108>)
 800af1c:	61bb      	str	r3, [r7, #24]
    len = 0;
 800af1e:	2300      	movs	r3, #0
 800af20:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	3310      	adds	r3, #16
 800af26:	69b9      	ldr	r1, [r7, #24]
 800af28:	4618      	mov	r0, r3
 800af2a:	f00e fa91 	bl	8019450 <sys_mbox_trypost>
 800af2e:	4603      	mov	r3, r0
 800af30:	2b00      	cmp	r3, #0
 800af32:	d002      	beq.n	800af3a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800af34:	f04f 33ff 	mov.w	r3, #4294967295
 800af38:	e00a      	b.n	800af50 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800af3a:	697b      	ldr	r3, [r7, #20]
 800af3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d005      	beq.n	800af4e <recv_tcp+0xe6>
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af46:	8bfa      	ldrh	r2, [r7, #30]
 800af48:	2100      	movs	r1, #0
 800af4a:	6978      	ldr	r0, [r7, #20]
 800af4c:	4798      	blx	r3
  }

  return ERR_OK;
 800af4e:	2300      	movs	r3, #0
}
 800af50:	4618      	mov	r0, r3
 800af52:	3720      	adds	r7, #32
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}
 800af58:	0801ef9c 	.word	0x0801ef9c
 800af5c:	0801f078 	.word	0x0801f078
 800af60:	0801efe0 	.word	0x0801efe0
 800af64:	0801f09c 	.word	0x0801f09c
 800af68:	0801f0bc 	.word	0x0801f0bc
 800af6c:	0801f0d4 	.word	0x0801f0d4
 800af70:	08022742 	.word	0x08022742

0800af74 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b084      	sub	sp, #16
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
 800af7c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d106      	bne.n	800af96 <poll_tcp+0x22>
 800af88:	4b29      	ldr	r3, [pc, #164]	; (800b030 <poll_tcp+0xbc>)
 800af8a:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800af8e:	4929      	ldr	r1, [pc, #164]	; (800b034 <poll_tcp+0xc0>)
 800af90:	4829      	ldr	r0, [pc, #164]	; (800b038 <poll_tcp+0xc4>)
 800af92:	f011 fdad 	bl	801caf0 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	785b      	ldrb	r3, [r3, #1]
 800af9a:	2b01      	cmp	r3, #1
 800af9c:	d104      	bne.n	800afa8 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800af9e:	2101      	movs	r1, #1
 800afa0:	68f8      	ldr	r0, [r7, #12]
 800afa2:	f000 ffad 	bl	800bf00 <lwip_netconn_do_writemore>
 800afa6:	e016      	b.n	800afd6 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	785b      	ldrb	r3, [r3, #1]
 800afac:	2b04      	cmp	r3, #4
 800afae:	d112      	bne.n	800afd6 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	6a1b      	ldr	r3, [r3, #32]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d00a      	beq.n	800afce <poll_tcp+0x5a>
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	6a1b      	ldr	r3, [r3, #32]
 800afbc:	7a5b      	ldrb	r3, [r3, #9]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d005      	beq.n	800afce <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	6a1b      	ldr	r3, [r3, #32]
 800afc6:	7a5a      	ldrb	r2, [r3, #9]
 800afc8:	3a01      	subs	r2, #1
 800afca:	b2d2      	uxtb	r2, r2
 800afcc:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800afce:	2101      	movs	r1, #1
 800afd0:	68f8      	ldr	r0, [r7, #12]
 800afd2:	f000 fbf7 	bl	800b7c4 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	7f1b      	ldrb	r3, [r3, #28]
 800afda:	f003 0310 	and.w	r3, r3, #16
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d021      	beq.n	800b026 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	685b      	ldr	r3, [r3, #4]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d01d      	beq.n	800b026 <poll_tcp+0xb2>
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	685b      	ldr	r3, [r3, #4]
 800afee:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800aff2:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800aff6:	d316      	bcc.n	800b026 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	685b      	ldr	r3, [r3, #4]
 800affc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800b000:	2b04      	cmp	r3, #4
 800b002:	d810      	bhi.n	800b026 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	7f1b      	ldrb	r3, [r3, #28]
 800b008:	f023 0310 	bic.w	r3, r3, #16
 800b00c:	b2da      	uxtb	r2, r3
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b016:	2b00      	cmp	r3, #0
 800b018:	d005      	beq.n	800b026 <poll_tcp+0xb2>
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b01e:	2200      	movs	r2, #0
 800b020:	2102      	movs	r1, #2
 800b022:	68f8      	ldr	r0, [r7, #12]
 800b024:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800b026:	2300      	movs	r3, #0
}
 800b028:	4618      	mov	r0, r3
 800b02a:	3710      	adds	r7, #16
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}
 800b030:	0801ef9c 	.word	0x0801ef9c
 800b034:	0801f0f4 	.word	0x0801f0f4
 800b038:	0801efe0 	.word	0x0801efe0

0800b03c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b086      	sub	sp, #24
 800b040:	af00      	add	r7, sp, #0
 800b042:	60f8      	str	r0, [r7, #12]
 800b044:	60b9      	str	r1, [r7, #8]
 800b046:	4613      	mov	r3, r2
 800b048:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800b04e:	697b      	ldr	r3, [r7, #20]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d106      	bne.n	800b062 <sent_tcp+0x26>
 800b054:	4b20      	ldr	r3, [pc, #128]	; (800b0d8 <sent_tcp+0x9c>)
 800b056:	f240 1293 	movw	r2, #403	; 0x193
 800b05a:	4920      	ldr	r1, [pc, #128]	; (800b0dc <sent_tcp+0xa0>)
 800b05c:	4820      	ldr	r0, [pc, #128]	; (800b0e0 <sent_tcp+0xa4>)
 800b05e:	f011 fd47 	bl	801caf0 <iprintf>

  if (conn) {
 800b062:	697b      	ldr	r3, [r7, #20]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d032      	beq.n	800b0ce <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800b068:	697b      	ldr	r3, [r7, #20]
 800b06a:	785b      	ldrb	r3, [r3, #1]
 800b06c:	2b01      	cmp	r3, #1
 800b06e:	d104      	bne.n	800b07a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800b070:	2101      	movs	r1, #1
 800b072:	6978      	ldr	r0, [r7, #20]
 800b074:	f000 ff44 	bl	800bf00 <lwip_netconn_do_writemore>
 800b078:	e007      	b.n	800b08a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800b07a:	697b      	ldr	r3, [r7, #20]
 800b07c:	785b      	ldrb	r3, [r3, #1]
 800b07e:	2b04      	cmp	r3, #4
 800b080:	d103      	bne.n	800b08a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800b082:	2101      	movs	r1, #1
 800b084:	6978      	ldr	r0, [r7, #20]
 800b086:	f000 fb9d 	bl	800b7c4 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800b08a:	697b      	ldr	r3, [r7, #20]
 800b08c:	685b      	ldr	r3, [r3, #4]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d01d      	beq.n	800b0ce <sent_tcp+0x92>
 800b092:	697b      	ldr	r3, [r7, #20]
 800b094:	685b      	ldr	r3, [r3, #4]
 800b096:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b09a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800b09e:	d316      	bcc.n	800b0ce <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800b0a0:	697b      	ldr	r3, [r7, #20]
 800b0a2:	685b      	ldr	r3, [r3, #4]
 800b0a4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800b0a8:	2b04      	cmp	r3, #4
 800b0aa:	d810      	bhi.n	800b0ce <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800b0ac:	697b      	ldr	r3, [r7, #20]
 800b0ae:	7f1b      	ldrb	r3, [r3, #28]
 800b0b0:	f023 0310 	bic.w	r3, r3, #16
 800b0b4:	b2da      	uxtb	r2, r3
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d005      	beq.n	800b0ce <sent_tcp+0x92>
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0c6:	88fa      	ldrh	r2, [r7, #6]
 800b0c8:	2102      	movs	r1, #2
 800b0ca:	6978      	ldr	r0, [r7, #20]
 800b0cc:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800b0ce:	2300      	movs	r3, #0
}
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	3718      	adds	r7, #24
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bd80      	pop	{r7, pc}
 800b0d8:	0801ef9c 	.word	0x0801ef9c
 800b0dc:	0801f0f4 	.word	0x0801f0f4
 800b0e0:	0801efe0 	.word	0x0801efe0

0800b0e4 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b088      	sub	sp, #32
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
 800b0ec:	460b      	mov	r3, r1
 800b0ee:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800b0f4:	69fb      	ldr	r3, [r7, #28]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d106      	bne.n	800b108 <err_tcp+0x24>
 800b0fa:	4b5f      	ldr	r3, [pc, #380]	; (800b278 <err_tcp+0x194>)
 800b0fc:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800b100:	495e      	ldr	r1, [pc, #376]	; (800b27c <err_tcp+0x198>)
 800b102:	485f      	ldr	r0, [pc, #380]	; (800b280 <err_tcp+0x19c>)
 800b104:	f011 fcf4 	bl	801caf0 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800b108:	f00e fb0e 	bl	8019728 <sys_arch_protect>
 800b10c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800b10e:	69fb      	ldr	r3, [r7, #28]
 800b110:	2200      	movs	r2, #0
 800b112:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800b114:	69fb      	ldr	r3, [r7, #28]
 800b116:	78fa      	ldrb	r2, [r7, #3]
 800b118:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800b11a:	69fb      	ldr	r3, [r7, #28]
 800b11c:	7f1b      	ldrb	r3, [r3, #28]
 800b11e:	f043 0301 	orr.w	r3, r3, #1
 800b122:	b2da      	uxtb	r2, r3
 800b124:	69fb      	ldr	r3, [r7, #28]
 800b126:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800b128:	69fb      	ldr	r3, [r7, #28]
 800b12a:	785b      	ldrb	r3, [r3, #1]
 800b12c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800b12e:	69fb      	ldr	r3, [r7, #28]
 800b130:	2200      	movs	r2, #0
 800b132:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800b134:	69b8      	ldr	r0, [r7, #24]
 800b136:	f00e fb05 	bl	8019744 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800b13a:	69fb      	ldr	r3, [r7, #28]
 800b13c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d005      	beq.n	800b14e <err_tcp+0x6a>
 800b142:	69fb      	ldr	r3, [r7, #28]
 800b144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b146:	2200      	movs	r2, #0
 800b148:	2104      	movs	r1, #4
 800b14a:	69f8      	ldr	r0, [r7, #28]
 800b14c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b14e:	69fb      	ldr	r3, [r7, #28]
 800b150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b152:	2b00      	cmp	r3, #0
 800b154:	d005      	beq.n	800b162 <err_tcp+0x7e>
 800b156:	69fb      	ldr	r3, [r7, #28]
 800b158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b15a:	2200      	movs	r2, #0
 800b15c:	2100      	movs	r1, #0
 800b15e:	69f8      	ldr	r0, [r7, #28]
 800b160:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800b162:	69fb      	ldr	r3, [r7, #28]
 800b164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b166:	2b00      	cmp	r3, #0
 800b168:	d005      	beq.n	800b176 <err_tcp+0x92>
 800b16a:	69fb      	ldr	r3, [r7, #28]
 800b16c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b16e:	2200      	movs	r2, #0
 800b170:	2102      	movs	r1, #2
 800b172:	69f8      	ldr	r0, [r7, #28]
 800b174:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800b176:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b17a:	4618      	mov	r0, r3
 800b17c:	f7ff fd86 	bl	800ac8c <lwip_netconn_err_to_msg>
 800b180:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800b182:	69fb      	ldr	r3, [r7, #28]
 800b184:	3310      	adds	r3, #16
 800b186:	4618      	mov	r0, r3
 800b188:	f00e f9c4 	bl	8019514 <sys_mbox_valid>
 800b18c:	4603      	mov	r3, r0
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d005      	beq.n	800b19e <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800b192:	69fb      	ldr	r3, [r7, #28]
 800b194:	3310      	adds	r3, #16
 800b196:	6939      	ldr	r1, [r7, #16]
 800b198:	4618      	mov	r0, r3
 800b19a:	f00e f959 	bl	8019450 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800b19e:	69fb      	ldr	r3, [r7, #28]
 800b1a0:	3314      	adds	r3, #20
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f00e f9b6 	bl	8019514 <sys_mbox_valid>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d005      	beq.n	800b1ba <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800b1ae:	69fb      	ldr	r3, [r7, #28]
 800b1b0:	3314      	adds	r3, #20
 800b1b2:	6939      	ldr	r1, [r7, #16]
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	f00e f94b 	bl	8019450 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800b1ba:	7dfb      	ldrb	r3, [r7, #23]
 800b1bc:	2b01      	cmp	r3, #1
 800b1be:	d005      	beq.n	800b1cc <err_tcp+0xe8>
 800b1c0:	7dfb      	ldrb	r3, [r7, #23]
 800b1c2:	2b04      	cmp	r3, #4
 800b1c4:	d002      	beq.n	800b1cc <err_tcp+0xe8>
 800b1c6:	7dfb      	ldrb	r3, [r7, #23]
 800b1c8:	2b03      	cmp	r3, #3
 800b1ca:	d143      	bne.n	800b254 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800b1cc:	69fb      	ldr	r3, [r7, #28]
 800b1ce:	7f1b      	ldrb	r3, [r3, #28]
 800b1d0:	f003 0304 	and.w	r3, r3, #4
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	bf14      	ite	ne
 800b1d8:	2301      	movne	r3, #1
 800b1da:	2300      	moveq	r3, #0
 800b1dc:	b2db      	uxtb	r3, r3
 800b1de:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800b1e0:	69fb      	ldr	r3, [r7, #28]
 800b1e2:	7f1b      	ldrb	r3, [r3, #28]
 800b1e4:	f023 0304 	bic.w	r3, r3, #4
 800b1e8:	b2da      	uxtb	r2, r3
 800b1ea:	69fb      	ldr	r3, [r7, #28]
 800b1ec:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d13b      	bne.n	800b26c <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800b1f4:	69fb      	ldr	r3, [r7, #28]
 800b1f6:	6a1b      	ldr	r3, [r3, #32]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d106      	bne.n	800b20a <err_tcp+0x126>
 800b1fc:	4b1e      	ldr	r3, [pc, #120]	; (800b278 <err_tcp+0x194>)
 800b1fe:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800b202:	4920      	ldr	r1, [pc, #128]	; (800b284 <err_tcp+0x1a0>)
 800b204:	481e      	ldr	r0, [pc, #120]	; (800b280 <err_tcp+0x19c>)
 800b206:	f011 fc73 	bl	801caf0 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800b20a:	7dfb      	ldrb	r3, [r7, #23]
 800b20c:	2b04      	cmp	r3, #4
 800b20e:	d104      	bne.n	800b21a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800b210:	69fb      	ldr	r3, [r7, #28]
 800b212:	6a1b      	ldr	r3, [r3, #32]
 800b214:	2200      	movs	r2, #0
 800b216:	711a      	strb	r2, [r3, #4]
 800b218:	e003      	b.n	800b222 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800b21a:	69fb      	ldr	r3, [r7, #28]
 800b21c:	6a1b      	ldr	r3, [r3, #32]
 800b21e:	78fa      	ldrb	r2, [r7, #3]
 800b220:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b222:	69fb      	ldr	r3, [r7, #28]
 800b224:	6a1b      	ldr	r3, [r3, #32]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	330c      	adds	r3, #12
 800b22a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800b22c:	68b8      	ldr	r0, [r7, #8]
 800b22e:	f00e f9ff 	bl	8019630 <sys_sem_valid>
 800b232:	4603      	mov	r3, r0
 800b234:	2b00      	cmp	r3, #0
 800b236:	d106      	bne.n	800b246 <err_tcp+0x162>
 800b238:	4b0f      	ldr	r3, [pc, #60]	; (800b278 <err_tcp+0x194>)
 800b23a:	f240 12ef 	movw	r2, #495	; 0x1ef
 800b23e:	4912      	ldr	r1, [pc, #72]	; (800b288 <err_tcp+0x1a4>)
 800b240:	480f      	ldr	r0, [pc, #60]	; (800b280 <err_tcp+0x19c>)
 800b242:	f011 fc55 	bl	801caf0 <iprintf>
      conn->current_msg = NULL;
 800b246:	69fb      	ldr	r3, [r7, #28]
 800b248:	2200      	movs	r2, #0
 800b24a:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800b24c:	68b8      	ldr	r0, [r7, #8]
 800b24e:	f00e f9d5 	bl	80195fc <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800b252:	e00b      	b.n	800b26c <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800b254:	69fb      	ldr	r3, [r7, #28]
 800b256:	6a1b      	ldr	r3, [r3, #32]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d008      	beq.n	800b26e <err_tcp+0x18a>
 800b25c:	4b06      	ldr	r3, [pc, #24]	; (800b278 <err_tcp+0x194>)
 800b25e:	f240 12f7 	movw	r2, #503	; 0x1f7
 800b262:	490a      	ldr	r1, [pc, #40]	; (800b28c <err_tcp+0x1a8>)
 800b264:	4806      	ldr	r0, [pc, #24]	; (800b280 <err_tcp+0x19c>)
 800b266:	f011 fc43 	bl	801caf0 <iprintf>
  }
}
 800b26a:	e000      	b.n	800b26e <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800b26c:	bf00      	nop
}
 800b26e:	bf00      	nop
 800b270:	3720      	adds	r7, #32
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}
 800b276:	bf00      	nop
 800b278:	0801ef9c 	.word	0x0801ef9c
 800b27c:	0801f0f4 	.word	0x0801f0f4
 800b280:	0801efe0 	.word	0x0801efe0
 800b284:	0801f104 	.word	0x0801f104
 800b288:	0801f120 	.word	0x0801f120
 800b28c:	0801f13c 	.word	0x0801f13c

0800b290 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b084      	sub	sp, #16
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	685b      	ldr	r3, [r3, #4]
 800b29c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800b29e:	6879      	ldr	r1, [r7, #4]
 800b2a0:	68f8      	ldr	r0, [r7, #12]
 800b2a2:	f006 fa4b 	bl	801173c <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800b2a6:	490a      	ldr	r1, [pc, #40]	; (800b2d0 <setup_tcp+0x40>)
 800b2a8:	68f8      	ldr	r0, [r7, #12]
 800b2aa:	f006 fa59 	bl	8011760 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800b2ae:	4909      	ldr	r1, [pc, #36]	; (800b2d4 <setup_tcp+0x44>)
 800b2b0:	68f8      	ldr	r0, [r7, #12]
 800b2b2:	f006 fa77 	bl	80117a4 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800b2b6:	2202      	movs	r2, #2
 800b2b8:	4907      	ldr	r1, [pc, #28]	; (800b2d8 <setup_tcp+0x48>)
 800b2ba:	68f8      	ldr	r0, [r7, #12]
 800b2bc:	f006 face 	bl	801185c <tcp_poll>
  tcp_err(pcb, err_tcp);
 800b2c0:	4906      	ldr	r1, [pc, #24]	; (800b2dc <setup_tcp+0x4c>)
 800b2c2:	68f8      	ldr	r0, [r7, #12]
 800b2c4:	f006 fa90 	bl	80117e8 <tcp_err>
}
 800b2c8:	bf00      	nop
 800b2ca:	3710      	adds	r7, #16
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}
 800b2d0:	0800ae69 	.word	0x0800ae69
 800b2d4:	0800b03d 	.word	0x0800b03d
 800b2d8:	0800af75 	.word	0x0800af75
 800b2dc:	0800b0e5 	.word	0x0800b0e5

0800b2e0 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800b2e0:	b590      	push	{r4, r7, lr}
 800b2e2:	b089      	sub	sp, #36	; 0x24
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	60f8      	str	r0, [r7, #12]
 800b2e8:	60b9      	str	r1, [r7, #8]
 800b2ea:	4613      	mov	r3, r2
 800b2ec:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800b2f2:	69fb      	ldr	r3, [r7, #28]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d102      	bne.n	800b2fe <accept_function+0x1e>
    return ERR_VAL;
 800b2f8:	f06f 0305 	mvn.w	r3, #5
 800b2fc:	e0a1      	b.n	800b442 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800b2fe:	69fb      	ldr	r3, [r7, #28]
 800b300:	3314      	adds	r3, #20
 800b302:	4618      	mov	r0, r3
 800b304:	f00e f906 	bl	8019514 <sys_mbox_valid>
 800b308:	4603      	mov	r3, r0
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d102      	bne.n	800b314 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800b30e:	f06f 0305 	mvn.w	r3, #5
 800b312:	e096      	b.n	800b442 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d11b      	bne.n	800b352 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800b31a:	69fb      	ldr	r3, [r7, #28]
 800b31c:	f103 0414 	add.w	r4, r3, #20
 800b320:	f06f 000c 	mvn.w	r0, #12
 800b324:	f7ff fcb2 	bl	800ac8c <lwip_netconn_err_to_msg>
 800b328:	4603      	mov	r3, r0
 800b32a:	4619      	mov	r1, r3
 800b32c:	4620      	mov	r0, r4
 800b32e:	f00e f88f 	bl	8019450 <sys_mbox_trypost>
 800b332:	4603      	mov	r3, r0
 800b334:	2b00      	cmp	r3, #0
 800b336:	d109      	bne.n	800b34c <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b338:	69fb      	ldr	r3, [r7, #28]
 800b33a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d005      	beq.n	800b34c <accept_function+0x6c>
 800b340:	69fb      	ldr	r3, [r7, #28]
 800b342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b344:	2200      	movs	r2, #0
 800b346:	2100      	movs	r1, #0
 800b348:	69f8      	ldr	r0, [r7, #28]
 800b34a:	4798      	blx	r3
    }
    return ERR_VAL;
 800b34c:	f06f 0305 	mvn.w	r3, #5
 800b350:	e077      	b.n	800b442 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800b352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d006      	beq.n	800b368 <accept_function+0x88>
 800b35a:	4b3c      	ldr	r3, [pc, #240]	; (800b44c <accept_function+0x16c>)
 800b35c:	f240 222a 	movw	r2, #554	; 0x22a
 800b360:	493b      	ldr	r1, [pc, #236]	; (800b450 <accept_function+0x170>)
 800b362:	483c      	ldr	r0, [pc, #240]	; (800b454 <accept_function+0x174>)
 800b364:	f011 fbc4 	bl	801caf0 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800b368:	69fb      	ldr	r3, [r7, #28]
 800b36a:	781a      	ldrb	r2, [r3, #0]
 800b36c:	69fb      	ldr	r3, [r7, #28]
 800b36e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b370:	4619      	mov	r1, r3
 800b372:	4610      	mov	r0, r2
 800b374:	f000 f8f0 	bl	800b558 <netconn_alloc>
 800b378:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800b37a:	69bb      	ldr	r3, [r7, #24]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d11b      	bne.n	800b3b8 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800b380:	69fb      	ldr	r3, [r7, #28]
 800b382:	f103 0414 	add.w	r4, r3, #20
 800b386:	f06f 000c 	mvn.w	r0, #12
 800b38a:	f7ff fc7f 	bl	800ac8c <lwip_netconn_err_to_msg>
 800b38e:	4603      	mov	r3, r0
 800b390:	4619      	mov	r1, r3
 800b392:	4620      	mov	r0, r4
 800b394:	f00e f85c 	bl	8019450 <sys_mbox_trypost>
 800b398:	4603      	mov	r3, r0
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d109      	bne.n	800b3b2 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b39e:	69fb      	ldr	r3, [r7, #28]
 800b3a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d005      	beq.n	800b3b2 <accept_function+0xd2>
 800b3a6:	69fb      	ldr	r3, [r7, #28]
 800b3a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	2100      	movs	r1, #0
 800b3ae:	69f8      	ldr	r0, [r7, #28]
 800b3b0:	4798      	blx	r3
    }
    return ERR_MEM;
 800b3b2:	f04f 33ff 	mov.w	r3, #4294967295
 800b3b6:	e044      	b.n	800b442 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800b3b8:	69bb      	ldr	r3, [r7, #24]
 800b3ba:	68ba      	ldr	r2, [r7, #8]
 800b3bc:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800b3be:	69b8      	ldr	r0, [r7, #24]
 800b3c0:	f7ff ff66 	bl	800b290 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800b3c4:	69fb      	ldr	r3, [r7, #28]
 800b3c6:	3314      	adds	r3, #20
 800b3c8:	69b9      	ldr	r1, [r7, #24]
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f00e f840 	bl	8019450 <sys_mbox_trypost>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d02a      	beq.n	800b42c <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800b3d6:	69bb      	ldr	r3, [r7, #24]
 800b3d8:	685b      	ldr	r3, [r3, #4]
 800b3da:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800b3dc:	2100      	movs	r1, #0
 800b3de:	6978      	ldr	r0, [r7, #20]
 800b3e0:	f006 f9ac 	bl	801173c <tcp_arg>
    tcp_recv(pcb, NULL);
 800b3e4:	2100      	movs	r1, #0
 800b3e6:	6978      	ldr	r0, [r7, #20]
 800b3e8:	f006 f9ba 	bl	8011760 <tcp_recv>
    tcp_sent(pcb, NULL);
 800b3ec:	2100      	movs	r1, #0
 800b3ee:	6978      	ldr	r0, [r7, #20]
 800b3f0:	f006 f9d8 	bl	80117a4 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	2100      	movs	r1, #0
 800b3f8:	6978      	ldr	r0, [r7, #20]
 800b3fa:	f006 fa2f 	bl	801185c <tcp_poll>
    tcp_err(pcb, NULL);
 800b3fe:	2100      	movs	r1, #0
 800b400:	6978      	ldr	r0, [r7, #20]
 800b402:	f006 f9f1 	bl	80117e8 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800b406:	69bb      	ldr	r3, [r7, #24]
 800b408:	2200      	movs	r2, #0
 800b40a:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800b40c:	69bb      	ldr	r3, [r7, #24]
 800b40e:	3310      	adds	r3, #16
 800b410:	4618      	mov	r0, r3
 800b412:	f00e f80b 	bl	801942c <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800b416:	69bb      	ldr	r3, [r7, #24]
 800b418:	3310      	adds	r3, #16
 800b41a:	4618      	mov	r0, r3
 800b41c:	f00e f88b 	bl	8019536 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800b420:	69b8      	ldr	r0, [r7, #24]
 800b422:	f000 f907 	bl	800b634 <netconn_free>
    return ERR_MEM;
 800b426:	f04f 33ff 	mov.w	r3, #4294967295
 800b42a:	e00a      	b.n	800b442 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b42c:	69fb      	ldr	r3, [r7, #28]
 800b42e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b430:	2b00      	cmp	r3, #0
 800b432:	d005      	beq.n	800b440 <accept_function+0x160>
 800b434:	69fb      	ldr	r3, [r7, #28]
 800b436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b438:	2200      	movs	r2, #0
 800b43a:	2100      	movs	r1, #0
 800b43c:	69f8      	ldr	r0, [r7, #28]
 800b43e:	4798      	blx	r3
  }

  return ERR_OK;
 800b440:	2300      	movs	r3, #0
}
 800b442:	4618      	mov	r0, r3
 800b444:	3724      	adds	r7, #36	; 0x24
 800b446:	46bd      	mov	sp, r7
 800b448:	bd90      	pop	{r4, r7, pc}
 800b44a:	bf00      	nop
 800b44c:	0801ef9c 	.word	0x0801ef9c
 800b450:	0801f158 	.word	0x0801f158
 800b454:	0801efe0 	.word	0x0801efe0

0800b458 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800b458:	b590      	push	{r4, r7, lr}
 800b45a:	b085      	sub	sp, #20
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800b460:	2300      	movs	r3, #0
 800b462:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	685b      	ldr	r3, [r3, #4]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d006      	beq.n	800b47c <pcb_new+0x24>
 800b46e:	4b2b      	ldr	r3, [pc, #172]	; (800b51c <pcb_new+0xc4>)
 800b470:	f240 2265 	movw	r2, #613	; 0x265
 800b474:	492a      	ldr	r1, [pc, #168]	; (800b520 <pcb_new+0xc8>)
 800b476:	482b      	ldr	r0, [pc, #172]	; (800b524 <pcb_new+0xcc>)
 800b478:	f011 fb3a 	bl	801caf0 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	781b      	ldrb	r3, [r3, #0]
 800b482:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b486:	2b10      	cmp	r3, #16
 800b488:	d022      	beq.n	800b4d0 <pcb_new+0x78>
 800b48a:	2b20      	cmp	r3, #32
 800b48c:	d133      	bne.n	800b4f6 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681c      	ldr	r4, [r3, #0]
 800b492:	7bfb      	ldrb	r3, [r7, #15]
 800b494:	4618      	mov	r0, r3
 800b496:	f00b fc30 	bl	8016cfa <udp_new_ip_type>
 800b49a:	4603      	mov	r3, r0
 800b49c:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	685b      	ldr	r3, [r3, #4]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d02a      	beq.n	800b4fe <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	781b      	ldrb	r3, [r3, #0]
 800b4ae:	2b22      	cmp	r3, #34	; 0x22
 800b4b0:	d104      	bne.n	800b4bc <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	685b      	ldr	r3, [r3, #4]
 800b4b8:	2201      	movs	r2, #1
 800b4ba:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	6858      	ldr	r0, [r3, #4]
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	461a      	mov	r2, r3
 800b4c8:	4917      	ldr	r1, [pc, #92]	; (800b528 <pcb_new+0xd0>)
 800b4ca:	f00b fb9d 	bl	8016c08 <udp_recv>
      }
      break;
 800b4ce:	e016      	b.n	800b4fe <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681c      	ldr	r4, [r3, #0]
 800b4d4:	7bfb      	ldrb	r3, [r7, #15]
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f006 f922 	bl	8011720 <tcp_new_ip_type>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	685b      	ldr	r3, [r3, #4]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d00b      	beq.n	800b502 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	f7ff fece 	bl	800b290 <setup_tcp>
      }
      break;
 800b4f4:	e005      	b.n	800b502 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	22fa      	movs	r2, #250	; 0xfa
 800b4fa:	711a      	strb	r2, [r3, #4]
      return;
 800b4fc:	e00a      	b.n	800b514 <pcb_new+0xbc>
      break;
 800b4fe:	bf00      	nop
 800b500:	e000      	b.n	800b504 <pcb_new+0xac>
      break;
 800b502:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	685b      	ldr	r3, [r3, #4]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d102      	bne.n	800b514 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	22ff      	movs	r2, #255	; 0xff
 800b512:	711a      	strb	r2, [r3, #4]
  }
}
 800b514:	3714      	adds	r7, #20
 800b516:	46bd      	mov	sp, r7
 800b518:	bd90      	pop	{r4, r7, pc}
 800b51a:	bf00      	nop
 800b51c:	0801ef9c 	.word	0x0801ef9c
 800b520:	0801f180 	.word	0x0801f180
 800b524:	0801efe0 	.word	0x0801efe0
 800b528:	0800ad6d 	.word	0x0800ad6d

0800b52c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b084      	sub	sp, #16
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	2200      	movs	r2, #0
 800b53c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	685b      	ldr	r3, [r3, #4]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d102      	bne.n	800b54e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800b548:	68f8      	ldr	r0, [r7, #12]
 800b54a:	f7ff ff85 	bl	800b458 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800b54e:	bf00      	nop
 800b550:	3710      	adds	r7, #16
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}
	...

0800b558 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b086      	sub	sp, #24
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	4603      	mov	r3, r0
 800b560:	6039      	str	r1, [r7, #0]
 800b562:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800b564:	2300      	movs	r3, #0
 800b566:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800b568:	2007      	movs	r0, #7
 800b56a:	f003 fadf 	bl	800eb2c <memp_malloc>
 800b56e:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d101      	bne.n	800b57a <netconn_alloc+0x22>
    return NULL;
 800b576:	2300      	movs	r3, #0
 800b578:	e052      	b.n	800b620 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	2200      	movs	r2, #0
 800b57e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	79fa      	ldrb	r2, [r7, #7]
 800b584:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	2200      	movs	r2, #0
 800b58a:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800b58c:	79fb      	ldrb	r3, [r7, #7]
 800b58e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b592:	2b10      	cmp	r3, #16
 800b594:	d004      	beq.n	800b5a0 <netconn_alloc+0x48>
 800b596:	2b20      	cmp	r3, #32
 800b598:	d105      	bne.n	800b5a6 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800b59a:	2306      	movs	r3, #6
 800b59c:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800b59e:	e00a      	b.n	800b5b6 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800b5a0:	2306      	movs	r3, #6
 800b5a2:	617b      	str	r3, [r7, #20]
      break;
 800b5a4:	e007      	b.n	800b5b6 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800b5a6:	4b20      	ldr	r3, [pc, #128]	; (800b628 <netconn_alloc+0xd0>)
 800b5a8:	f240 22e5 	movw	r2, #741	; 0x2e5
 800b5ac:	491f      	ldr	r1, [pc, #124]	; (800b62c <netconn_alloc+0xd4>)
 800b5ae:	4820      	ldr	r0, [pc, #128]	; (800b630 <netconn_alloc+0xd8>)
 800b5b0:	f011 fa9e 	bl	801caf0 <iprintf>
      goto free_and_return;
 800b5b4:	e02f      	b.n	800b616 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	3310      	adds	r3, #16
 800b5ba:	6979      	ldr	r1, [r7, #20]
 800b5bc:	4618      	mov	r0, r3
 800b5be:	f00d ff1b 	bl	80193f8 <sys_mbox_new>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d125      	bne.n	800b614 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	330c      	adds	r3, #12
 800b5cc:	2100      	movs	r1, #0
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	f00d ffbe 	bl	8019550 <sys_sem_new>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d005      	beq.n	800b5e6 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	3310      	adds	r3, #16
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f00d ff24 	bl	801942c <sys_mbox_free>
    goto free_and_return;
 800b5e4:	e017      	b.n	800b616 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	3314      	adds	r3, #20
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f00d ffa3 	bl	8019536 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	f04f 32ff 	mov.w	r2, #4294967295
 800b5fc:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	683a      	ldr	r2, [r7, #0]
 800b602:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	2200      	movs	r2, #0
 800b608:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	7cfa      	ldrb	r2, [r7, #19]
 800b60e:	771a      	strb	r2, [r3, #28]
  return conn;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	e005      	b.n	800b620 <netconn_alloc+0xc8>
    goto free_and_return;
 800b614:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800b616:	68f9      	ldr	r1, [r7, #12]
 800b618:	2007      	movs	r0, #7
 800b61a:	f003 fad9 	bl	800ebd0 <memp_free>
  return NULL;
 800b61e:	2300      	movs	r3, #0
}
 800b620:	4618      	mov	r0, r3
 800b622:	3718      	adds	r7, #24
 800b624:	46bd      	mov	sp, r7
 800b626:	bd80      	pop	{r7, pc}
 800b628:	0801ef9c 	.word	0x0801ef9c
 800b62c:	0801f1a0 	.word	0x0801f1a0
 800b630:	0801efe0 	.word	0x0801efe0

0800b634 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b082      	sub	sp, #8
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	685b      	ldr	r3, [r3, #4]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d006      	beq.n	800b652 <netconn_free+0x1e>
 800b644:	4b1b      	ldr	r3, [pc, #108]	; (800b6b4 <netconn_free+0x80>)
 800b646:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800b64a:	491b      	ldr	r1, [pc, #108]	; (800b6b8 <netconn_free+0x84>)
 800b64c:	481b      	ldr	r0, [pc, #108]	; (800b6bc <netconn_free+0x88>)
 800b64e:	f011 fa4f 	bl	801caf0 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	3310      	adds	r3, #16
 800b656:	4618      	mov	r0, r3
 800b658:	f00d ff5c 	bl	8019514 <sys_mbox_valid>
 800b65c:	4603      	mov	r3, r0
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d006      	beq.n	800b670 <netconn_free+0x3c>
 800b662:	4b14      	ldr	r3, [pc, #80]	; (800b6b4 <netconn_free+0x80>)
 800b664:	f240 3223 	movw	r2, #803	; 0x323
 800b668:	4915      	ldr	r1, [pc, #84]	; (800b6c0 <netconn_free+0x8c>)
 800b66a:	4814      	ldr	r0, [pc, #80]	; (800b6bc <netconn_free+0x88>)
 800b66c:	f011 fa40 	bl	801caf0 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	3314      	adds	r3, #20
 800b674:	4618      	mov	r0, r3
 800b676:	f00d ff4d 	bl	8019514 <sys_mbox_valid>
 800b67a:	4603      	mov	r3, r0
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d006      	beq.n	800b68e <netconn_free+0x5a>
 800b680:	4b0c      	ldr	r3, [pc, #48]	; (800b6b4 <netconn_free+0x80>)
 800b682:	f240 3226 	movw	r2, #806	; 0x326
 800b686:	490f      	ldr	r1, [pc, #60]	; (800b6c4 <netconn_free+0x90>)
 800b688:	480c      	ldr	r0, [pc, #48]	; (800b6bc <netconn_free+0x88>)
 800b68a:	f011 fa31 	bl	801caf0 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	330c      	adds	r3, #12
 800b692:	4618      	mov	r0, r3
 800b694:	f00d ffbf 	bl	8019616 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	330c      	adds	r3, #12
 800b69c:	4618      	mov	r0, r3
 800b69e:	f00d ffd8 	bl	8019652 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800b6a2:	6879      	ldr	r1, [r7, #4]
 800b6a4:	2007      	movs	r0, #7
 800b6a6:	f003 fa93 	bl	800ebd0 <memp_free>
}
 800b6aa:	bf00      	nop
 800b6ac:	3708      	adds	r7, #8
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}
 800b6b2:	bf00      	nop
 800b6b4:	0801ef9c 	.word	0x0801ef9c
 800b6b8:	0801f1c8 	.word	0x0801f1c8
 800b6bc:	0801efe0 	.word	0x0801efe0
 800b6c0:	0801f1f8 	.word	0x0801f1f8
 800b6c4:	0801f234 	.word	0x0801f234

0800b6c8 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b086      	sub	sp, #24
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	3310      	adds	r3, #16
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	f00d ff1d 	bl	8019514 <sys_mbox_valid>
 800b6da:	4603      	mov	r3, r0
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d02f      	beq.n	800b740 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800b6e0:	e018      	b.n	800b714 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	781b      	ldrb	r3, [r3, #0]
 800b6e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b6ea:	2b10      	cmp	r3, #16
 800b6ec:	d10e      	bne.n	800b70c <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800b6ee:	693b      	ldr	r3, [r7, #16]
 800b6f0:	f107 020f 	add.w	r2, r7, #15
 800b6f4:	4611      	mov	r1, r2
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f7ff fafe 	bl	800acf8 <lwip_netconn_is_err_msg>
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d108      	bne.n	800b714 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800b702:	693b      	ldr	r3, [r7, #16]
 800b704:	4618      	mov	r0, r3
 800b706:	f004 f971 	bl	800f9ec <pbuf_free>
 800b70a:	e003      	b.n	800b714 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800b70c:	693b      	ldr	r3, [r7, #16]
 800b70e:	4618      	mov	r0, r3
 800b710:	f000 ff7e 	bl	800c610 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	3310      	adds	r3, #16
 800b718:	f107 0210 	add.w	r2, r7, #16
 800b71c:	4611      	mov	r1, r2
 800b71e:	4618      	mov	r0, r3
 800b720:	f00d fee1 	bl	80194e6 <sys_arch_mbox_tryfetch>
 800b724:	4603      	mov	r3, r0
 800b726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b72a:	d1da      	bne.n	800b6e2 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	3310      	adds	r3, #16
 800b730:	4618      	mov	r0, r3
 800b732:	f00d fe7b 	bl	801942c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	3310      	adds	r3, #16
 800b73a:	4618      	mov	r0, r3
 800b73c:	f00d fefb 	bl	8019536 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	3314      	adds	r3, #20
 800b744:	4618      	mov	r0, r3
 800b746:	f00d fee5 	bl	8019514 <sys_mbox_valid>
 800b74a:	4603      	mov	r3, r0
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d034      	beq.n	800b7ba <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800b750:	e01d      	b.n	800b78e <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	f107 020e 	add.w	r2, r7, #14
 800b758:	4611      	mov	r1, r2
 800b75a:	4618      	mov	r0, r3
 800b75c:	f7ff facc 	bl	800acf8 <lwip_netconn_is_err_msg>
 800b760:	4603      	mov	r3, r0
 800b762:	2b00      	cmp	r3, #0
 800b764:	d113      	bne.n	800b78e <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800b766:	693b      	ldr	r3, [r7, #16]
 800b768:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800b76a:	6978      	ldr	r0, [r7, #20]
 800b76c:	f7ff ffac 	bl	800b6c8 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800b770:	697b      	ldr	r3, [r7, #20]
 800b772:	685b      	ldr	r3, [r3, #4]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d007      	beq.n	800b788 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800b778:	697b      	ldr	r3, [r7, #20]
 800b77a:	685b      	ldr	r3, [r3, #4]
 800b77c:	4618      	mov	r0, r3
 800b77e:	f004 ff35 	bl	80105ec <tcp_abort>
            newconn->pcb.tcp = NULL;
 800b782:	697b      	ldr	r3, [r7, #20]
 800b784:	2200      	movs	r2, #0
 800b786:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800b788:	6978      	ldr	r0, [r7, #20]
 800b78a:	f7ff ff53 	bl	800b634 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	3314      	adds	r3, #20
 800b792:	f107 0210 	add.w	r2, r7, #16
 800b796:	4611      	mov	r1, r2
 800b798:	4618      	mov	r0, r3
 800b79a:	f00d fea4 	bl	80194e6 <sys_arch_mbox_tryfetch>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7a4:	d1d5      	bne.n	800b752 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	3314      	adds	r3, #20
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f00d fe3e 	bl	801942c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	3314      	adds	r3, #20
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	f00d febe 	bl	8019536 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800b7ba:	bf00      	nop
 800b7bc:	3718      	adds	r7, #24
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}
	...

0800b7c4 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b086      	sub	sp, #24
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
 800b7cc:	460b      	mov	r3, r1
 800b7ce:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d106      	bne.n	800b7e8 <lwip_netconn_do_close_internal+0x24>
 800b7da:	4ba1      	ldr	r3, [pc, #644]	; (800ba60 <lwip_netconn_do_close_internal+0x29c>)
 800b7dc:	f240 32a2 	movw	r2, #930	; 0x3a2
 800b7e0:	49a0      	ldr	r1, [pc, #640]	; (800ba64 <lwip_netconn_do_close_internal+0x2a0>)
 800b7e2:	48a1      	ldr	r0, [pc, #644]	; (800ba68 <lwip_netconn_do_close_internal+0x2a4>)
 800b7e4:	f011 f984 	bl	801caf0 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	781b      	ldrb	r3, [r3, #0]
 800b7ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b7f0:	2b10      	cmp	r3, #16
 800b7f2:	d006      	beq.n	800b802 <lwip_netconn_do_close_internal+0x3e>
 800b7f4:	4b9a      	ldr	r3, [pc, #616]	; (800ba60 <lwip_netconn_do_close_internal+0x29c>)
 800b7f6:	f240 32a3 	movw	r2, #931	; 0x3a3
 800b7fa:	499c      	ldr	r1, [pc, #624]	; (800ba6c <lwip_netconn_do_close_internal+0x2a8>)
 800b7fc:	489a      	ldr	r0, [pc, #616]	; (800ba68 <lwip_netconn_do_close_internal+0x2a4>)
 800b7fe:	f011 f977 	bl	801caf0 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	785b      	ldrb	r3, [r3, #1]
 800b806:	2b04      	cmp	r3, #4
 800b808:	d006      	beq.n	800b818 <lwip_netconn_do_close_internal+0x54>
 800b80a:	4b95      	ldr	r3, [pc, #596]	; (800ba60 <lwip_netconn_do_close_internal+0x29c>)
 800b80c:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800b810:	4997      	ldr	r1, [pc, #604]	; (800ba70 <lwip_netconn_do_close_internal+0x2ac>)
 800b812:	4895      	ldr	r0, [pc, #596]	; (800ba68 <lwip_netconn_do_close_internal+0x2a4>)
 800b814:	f011 f96c 	bl	801caf0 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	685b      	ldr	r3, [r3, #4]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d106      	bne.n	800b82e <lwip_netconn_do_close_internal+0x6a>
 800b820:	4b8f      	ldr	r3, [pc, #572]	; (800ba60 <lwip_netconn_do_close_internal+0x29c>)
 800b822:	f240 32a5 	movw	r2, #933	; 0x3a5
 800b826:	4993      	ldr	r1, [pc, #588]	; (800ba74 <lwip_netconn_do_close_internal+0x2b0>)
 800b828:	488f      	ldr	r0, [pc, #572]	; (800ba68 <lwip_netconn_do_close_internal+0x2a4>)
 800b82a:	f011 f961 	bl	801caf0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	6a1b      	ldr	r3, [r3, #32]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d106      	bne.n	800b844 <lwip_netconn_do_close_internal+0x80>
 800b836:	4b8a      	ldr	r3, [pc, #552]	; (800ba60 <lwip_netconn_do_close_internal+0x29c>)
 800b838:	f240 32a6 	movw	r2, #934	; 0x3a6
 800b83c:	498e      	ldr	r1, [pc, #568]	; (800ba78 <lwip_netconn_do_close_internal+0x2b4>)
 800b83e:	488a      	ldr	r0, [pc, #552]	; (800ba68 <lwip_netconn_do_close_internal+0x2a4>)
 800b840:	f011 f956 	bl	801caf0 <iprintf>

  tpcb = conn->pcb.tcp;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	685b      	ldr	r3, [r3, #4]
 800b848:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	6a1b      	ldr	r3, [r3, #32]
 800b84e:	7a1b      	ldrb	r3, [r3, #8]
 800b850:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800b852:	7bfb      	ldrb	r3, [r7, #15]
 800b854:	f003 0301 	and.w	r3, r3, #1
 800b858:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800b85a:	7bfb      	ldrb	r3, [r7, #15]
 800b85c:	f003 0302 	and.w	r3, r3, #2
 800b860:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800b862:	7bfb      	ldrb	r3, [r7, #15]
 800b864:	2b03      	cmp	r3, #3
 800b866:	d102      	bne.n	800b86e <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800b868:	2301      	movs	r3, #1
 800b86a:	75bb      	strb	r3, [r7, #22]
 800b86c:	e01f      	b.n	800b8ae <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800b86e:	7bbb      	ldrb	r3, [r7, #14]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d00e      	beq.n	800b892 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800b874:	693b      	ldr	r3, [r7, #16]
 800b876:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800b878:	2b05      	cmp	r3, #5
 800b87a:	d007      	beq.n	800b88c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800b87c:	693b      	ldr	r3, [r7, #16]
 800b87e:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800b880:	2b06      	cmp	r3, #6
 800b882:	d003      	beq.n	800b88c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800b884:	693b      	ldr	r3, [r7, #16]
 800b886:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800b888:	2b08      	cmp	r3, #8
 800b88a:	d102      	bne.n	800b892 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800b88c:	2301      	movs	r3, #1
 800b88e:	75bb      	strb	r3, [r7, #22]
 800b890:	e00d      	b.n	800b8ae <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800b892:	7b7b      	ldrb	r3, [r7, #13]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d008      	beq.n	800b8aa <lwip_netconn_do_close_internal+0xe6>
 800b898:	693b      	ldr	r3, [r7, #16]
 800b89a:	8b5b      	ldrh	r3, [r3, #26]
 800b89c:	f003 0310 	and.w	r3, r3, #16
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d002      	beq.n	800b8aa <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800b8a4:	2301      	movs	r3, #1
 800b8a6:	75bb      	strb	r3, [r7, #22]
 800b8a8:	e001      	b.n	800b8ae <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800b8ae:	7dbb      	ldrb	r3, [r7, #22]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d003      	beq.n	800b8bc <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800b8b4:	2100      	movs	r1, #0
 800b8b6:	6938      	ldr	r0, [r7, #16]
 800b8b8:	f005 ff40 	bl	801173c <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800b8bc:	693b      	ldr	r3, [r7, #16]
 800b8be:	7d1b      	ldrb	r3, [r3, #20]
 800b8c0:	2b01      	cmp	r3, #1
 800b8c2:	d104      	bne.n	800b8ce <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800b8c4:	2100      	movs	r1, #0
 800b8c6:	6938      	ldr	r0, [r7, #16]
 800b8c8:	f005 ffb0 	bl	801182c <tcp_accept>
 800b8cc:	e01d      	b.n	800b90a <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800b8ce:	7bbb      	ldrb	r3, [r7, #14]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d007      	beq.n	800b8e4 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800b8d4:	2100      	movs	r1, #0
 800b8d6:	6938      	ldr	r0, [r7, #16]
 800b8d8:	f005 ff42 	bl	8011760 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800b8dc:	2100      	movs	r1, #0
 800b8de:	6938      	ldr	r0, [r7, #16]
 800b8e0:	f005 ffa4 	bl	801182c <tcp_accept>
    }
    if (shut_tx) {
 800b8e4:	7b7b      	ldrb	r3, [r7, #13]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d003      	beq.n	800b8f2 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800b8ea:	2100      	movs	r1, #0
 800b8ec:	6938      	ldr	r0, [r7, #16]
 800b8ee:	f005 ff59 	bl	80117a4 <tcp_sent>
    }
    if (shut_close) {
 800b8f2:	7dbb      	ldrb	r3, [r7, #22]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d008      	beq.n	800b90a <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	2100      	movs	r1, #0
 800b8fc:	6938      	ldr	r0, [r7, #16]
 800b8fe:	f005 ffad 	bl	801185c <tcp_poll>
      tcp_err(tpcb, NULL);
 800b902:	2100      	movs	r1, #0
 800b904:	6938      	ldr	r0, [r7, #16]
 800b906:	f005 ff6f 	bl	80117e8 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800b90a:	7dbb      	ldrb	r3, [r7, #22]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d005      	beq.n	800b91c <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800b910:	6938      	ldr	r0, [r7, #16]
 800b912:	f004 fd25 	bl	8010360 <tcp_close>
 800b916:	4603      	mov	r3, r0
 800b918:	75fb      	strb	r3, [r7, #23]
 800b91a:	e007      	b.n	800b92c <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800b91c:	7bbb      	ldrb	r3, [r7, #14]
 800b91e:	7b7a      	ldrb	r2, [r7, #13]
 800b920:	4619      	mov	r1, r3
 800b922:	6938      	ldr	r0, [r7, #16]
 800b924:	f004 fd48 	bl	80103b8 <tcp_shutdown>
 800b928:	4603      	mov	r3, r0
 800b92a:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800b92c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d102      	bne.n	800b93a <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800b934:	2301      	movs	r3, #1
 800b936:	757b      	strb	r3, [r7, #21]
 800b938:	e016      	b.n	800b968 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800b93a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b93e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b942:	d10f      	bne.n	800b964 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	6a1b      	ldr	r3, [r3, #32]
 800b948:	7a5b      	ldrb	r3, [r3, #9]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d10c      	bne.n	800b968 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800b94e:	2301      	movs	r3, #1
 800b950:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800b952:	7dbb      	ldrb	r3, [r7, #22]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d007      	beq.n	800b968 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800b958:	6938      	ldr	r0, [r7, #16]
 800b95a:	f004 fe47 	bl	80105ec <tcp_abort>
          err = ERR_OK;
 800b95e:	2300      	movs	r3, #0
 800b960:	75fb      	strb	r3, [r7, #23]
 800b962:	e001      	b.n	800b968 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800b964:	2301      	movs	r3, #1
 800b966:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800b968:	7d7b      	ldrb	r3, [r7, #21]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d044      	beq.n	800b9f8 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	6a1b      	ldr	r3, [r3, #32]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	330c      	adds	r3, #12
 800b976:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6a1b      	ldr	r3, [r3, #32]
 800b97c:	7dfa      	ldrb	r2, [r7, #23]
 800b97e:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2200      	movs	r2, #0
 800b984:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	2200      	movs	r2, #0
 800b98a:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800b98c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d129      	bne.n	800b9e8 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800b994:	7dbb      	ldrb	r3, [r7, #22]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d00c      	beq.n	800b9b4 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2200      	movs	r2, #0
 800b99e:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d005      	beq.n	800b9b4 <lwip_netconn_do_close_internal+0x1f0>
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	2104      	movs	r1, #4
 800b9b0:	6878      	ldr	r0, [r7, #4]
 800b9b2:	4798      	blx	r3
      }
      if (shut_rx) {
 800b9b4:	7bbb      	ldrb	r3, [r7, #14]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d009      	beq.n	800b9ce <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d005      	beq.n	800b9ce <lwip_netconn_do_close_internal+0x20a>
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	2100      	movs	r1, #0
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	4798      	blx	r3
      }
      if (shut_tx) {
 800b9ce:	7b7b      	ldrb	r3, [r7, #13]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d009      	beq.n	800b9e8 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d005      	beq.n	800b9e8 <lwip_netconn_do_close_internal+0x224>
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	2102      	movs	r1, #2
 800b9e4:	6878      	ldr	r0, [r7, #4]
 800b9e6:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800b9e8:	78fb      	ldrb	r3, [r7, #3]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d002      	beq.n	800b9f4 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800b9ee:	68b8      	ldr	r0, [r7, #8]
 800b9f0:	f00d fe04 	bl	80195fc <sys_sem_signal>
    }
    return ERR_OK;
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	e02e      	b.n	800ba56 <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 800b9f8:	7d7b      	ldrb	r3, [r7, #21]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d11e      	bne.n	800ba3c <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	7d1b      	ldrb	r3, [r3, #20]
 800ba02:	2b01      	cmp	r3, #1
 800ba04:	d106      	bne.n	800ba14 <lwip_netconn_do_close_internal+0x250>
 800ba06:	4b16      	ldr	r3, [pc, #88]	; (800ba60 <lwip_netconn_do_close_internal+0x29c>)
 800ba08:	f240 4241 	movw	r2, #1089	; 0x441
 800ba0c:	491b      	ldr	r1, [pc, #108]	; (800ba7c <lwip_netconn_do_close_internal+0x2b8>)
 800ba0e:	4816      	ldr	r0, [pc, #88]	; (800ba68 <lwip_netconn_do_close_internal+0x2a4>)
 800ba10:	f011 f86e 	bl	801caf0 <iprintf>
    if (shut_tx) {
 800ba14:	7b7b      	ldrb	r3, [r7, #13]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d003      	beq.n	800ba22 <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800ba1a:	4919      	ldr	r1, [pc, #100]	; (800ba80 <lwip_netconn_do_close_internal+0x2bc>)
 800ba1c:	6938      	ldr	r0, [r7, #16]
 800ba1e:	f005 fec1 	bl	80117a4 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800ba22:	2201      	movs	r2, #1
 800ba24:	4917      	ldr	r1, [pc, #92]	; (800ba84 <lwip_netconn_do_close_internal+0x2c0>)
 800ba26:	6938      	ldr	r0, [r7, #16]
 800ba28:	f005 ff18 	bl	801185c <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800ba2c:	4916      	ldr	r1, [pc, #88]	; (800ba88 <lwip_netconn_do_close_internal+0x2c4>)
 800ba2e:	6938      	ldr	r0, [r7, #16]
 800ba30:	f005 feda 	bl	80117e8 <tcp_err>
    tcp_arg(tpcb, conn);
 800ba34:	6879      	ldr	r1, [r7, #4]
 800ba36:	6938      	ldr	r0, [r7, #16]
 800ba38:	f005 fe80 	bl	801173c <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800ba3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d106      	bne.n	800ba52 <lwip_netconn_do_close_internal+0x28e>
 800ba44:	4b06      	ldr	r3, [pc, #24]	; (800ba60 <lwip_netconn_do_close_internal+0x29c>)
 800ba46:	f240 424d 	movw	r2, #1101	; 0x44d
 800ba4a:	4910      	ldr	r1, [pc, #64]	; (800ba8c <lwip_netconn_do_close_internal+0x2c8>)
 800ba4c:	4806      	ldr	r0, [pc, #24]	; (800ba68 <lwip_netconn_do_close_internal+0x2a4>)
 800ba4e:	f011 f84f 	bl	801caf0 <iprintf>
  return err;
 800ba52:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ba56:	4618      	mov	r0, r3
 800ba58:	3718      	adds	r7, #24
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bd80      	pop	{r7, pc}
 800ba5e:	bf00      	nop
 800ba60:	0801ef9c 	.word	0x0801ef9c
 800ba64:	0801f270 	.word	0x0801f270
 800ba68:	0801efe0 	.word	0x0801efe0
 800ba6c:	0801f280 	.word	0x0801f280
 800ba70:	0801f2a0 	.word	0x0801f2a0
 800ba74:	0801f2c4 	.word	0x0801f2c4
 800ba78:	0801f104 	.word	0x0801f104
 800ba7c:	0801f2d8 	.word	0x0801f2d8
 800ba80:	0800b03d 	.word	0x0800b03d
 800ba84:	0800af75 	.word	0x0800af75
 800ba88:	0800b0e5 	.word	0x0800b0e5
 800ba8c:	0801f2fc 	.word	0x0801f2fc

0800ba90 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b084      	sub	sp, #16
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	785b      	ldrb	r3, [r3, #1]
 800baa2:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800baa4:	7afb      	ldrb	r3, [r7, #11]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d00d      	beq.n	800bac6 <lwip_netconn_do_delconn+0x36>
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	781b      	ldrb	r3, [r3, #0]
 800bab0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bab4:	2b10      	cmp	r3, #16
 800bab6:	d006      	beq.n	800bac6 <lwip_netconn_do_delconn+0x36>
 800bab8:	4b60      	ldr	r3, [pc, #384]	; (800bc3c <lwip_netconn_do_delconn+0x1ac>)
 800baba:	f240 425e 	movw	r2, #1118	; 0x45e
 800babe:	4960      	ldr	r1, [pc, #384]	; (800bc40 <lwip_netconn_do_delconn+0x1b0>)
 800bac0:	4860      	ldr	r0, [pc, #384]	; (800bc44 <lwip_netconn_do_delconn+0x1b4>)
 800bac2:	f011 f815 	bl	801caf0 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800bac6:	7afb      	ldrb	r3, [r7, #11]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d005      	beq.n	800bad8 <lwip_netconn_do_delconn+0x48>
 800bacc:	7afb      	ldrb	r3, [r7, #11]
 800bace:	2b02      	cmp	r3, #2
 800bad0:	d002      	beq.n	800bad8 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800bad2:	7afb      	ldrb	r3, [r7, #11]
 800bad4:	2b03      	cmp	r3, #3
 800bad6:	d109      	bne.n	800baec <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800bad8:	7afb      	ldrb	r3, [r7, #11]
 800bada:	2b03      	cmp	r3, #3
 800badc:	d10a      	bne.n	800baf4 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	7f1b      	ldrb	r3, [r3, #28]
 800bae4:	f003 0304 	and.w	r3, r3, #4
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d103      	bne.n	800baf4 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	22fb      	movs	r2, #251	; 0xfb
 800baf0:	711a      	strb	r2, [r3, #4]
 800baf2:	e097      	b.n	800bc24 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800baf4:	7afb      	ldrb	r3, [r7, #11]
 800baf6:	2b03      	cmp	r3, #3
 800baf8:	d10d      	bne.n	800bb16 <lwip_netconn_do_delconn+0x86>
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	7f1b      	ldrb	r3, [r3, #28]
 800bb00:	f003 0304 	and.w	r3, r3, #4
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d106      	bne.n	800bb16 <lwip_netconn_do_delconn+0x86>
 800bb08:	4b4c      	ldr	r3, [pc, #304]	; (800bc3c <lwip_netconn_do_delconn+0x1ac>)
 800bb0a:	f240 427a 	movw	r2, #1146	; 0x47a
 800bb0e:	494e      	ldr	r1, [pc, #312]	; (800bc48 <lwip_netconn_do_delconn+0x1b8>)
 800bb10:	484c      	ldr	r0, [pc, #304]	; (800bc44 <lwip_netconn_do_delconn+0x1b4>)
 800bb12:	f010 ffed 	bl	801caf0 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	2200      	movs	r2, #0
 800bb1a:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	4618      	mov	r0, r3
 800bb22:	f7ff fdd1 	bl	800b6c8 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	685b      	ldr	r3, [r3, #4]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d05f      	beq.n	800bbf0 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	781b      	ldrb	r3, [r3, #0]
 800bb36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bb3a:	2b10      	cmp	r3, #16
 800bb3c:	d00d      	beq.n	800bb5a <lwip_netconn_do_delconn+0xca>
 800bb3e:	2b20      	cmp	r3, #32
 800bb40:	d151      	bne.n	800bbe6 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	685b      	ldr	r3, [r3, #4]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	685b      	ldr	r3, [r3, #4]
 800bb52:	4618      	mov	r0, r3
 800bb54:	f00b f878 	bl	8016c48 <udp_remove>
          break;
 800bb58:	e046      	b.n	800bbe8 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	6a1b      	ldr	r3, [r3, #32]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d006      	beq.n	800bb72 <lwip_netconn_do_delconn+0xe2>
 800bb64:	4b35      	ldr	r3, [pc, #212]	; (800bc3c <lwip_netconn_do_delconn+0x1ac>)
 800bb66:	f240 4294 	movw	r2, #1172	; 0x494
 800bb6a:	4938      	ldr	r1, [pc, #224]	; (800bc4c <lwip_netconn_do_delconn+0x1bc>)
 800bb6c:	4835      	ldr	r0, [pc, #212]	; (800bc44 <lwip_netconn_do_delconn+0x1b4>)
 800bb6e:	f010 ffbf 	bl	801caf0 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	2204      	movs	r2, #4
 800bb78:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	2203      	movs	r2, #3
 800bb7e:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	68fa      	ldr	r2, [r7, #12]
 800bb86:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	2100      	movs	r1, #0
 800bb8e:	4618      	mov	r0, r3
 800bb90:	f7ff fe18 	bl	800b7c4 <lwip_netconn_do_close_internal>
 800bb94:	4603      	mov	r3, r0
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d04b      	beq.n	800bc32 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	785b      	ldrb	r3, [r3, #1]
 800bba0:	2b04      	cmp	r3, #4
 800bba2:	d006      	beq.n	800bbb2 <lwip_netconn_do_delconn+0x122>
 800bba4:	4b25      	ldr	r3, [pc, #148]	; (800bc3c <lwip_netconn_do_delconn+0x1ac>)
 800bba6:	f240 429a 	movw	r2, #1178	; 0x49a
 800bbaa:	4929      	ldr	r1, [pc, #164]	; (800bc50 <lwip_netconn_do_delconn+0x1c0>)
 800bbac:	4825      	ldr	r0, [pc, #148]	; (800bc44 <lwip_netconn_do_delconn+0x1b4>)
 800bbae:	f010 ff9f 	bl	801caf0 <iprintf>
            UNLOCK_TCPIP_CORE();
 800bbb2:	4828      	ldr	r0, [pc, #160]	; (800bc54 <lwip_netconn_do_delconn+0x1c4>)
 800bbb4:	f00d fd8b 	bl	80196ce <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	330c      	adds	r3, #12
 800bbbe:	2100      	movs	r1, #0
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	f00d fcea 	bl	801959a <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800bbc6:	4823      	ldr	r0, [pc, #140]	; (800bc54 <lwip_netconn_do_delconn+0x1c4>)
 800bbc8:	f00d fd72 	bl	80196b0 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	785b      	ldrb	r3, [r3, #1]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d02d      	beq.n	800bc32 <lwip_netconn_do_delconn+0x1a2>
 800bbd6:	4b19      	ldr	r3, [pc, #100]	; (800bc3c <lwip_netconn_do_delconn+0x1ac>)
 800bbd8:	f240 429e 	movw	r2, #1182	; 0x49e
 800bbdc:	491c      	ldr	r1, [pc, #112]	; (800bc50 <lwip_netconn_do_delconn+0x1c0>)
 800bbde:	4819      	ldr	r0, [pc, #100]	; (800bc44 <lwip_netconn_do_delconn+0x1b4>)
 800bbe0:	f010 ff86 	bl	801caf0 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800bbe4:	e025      	b.n	800bc32 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800bbe6:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	2200      	movs	r2, #0
 800bbee:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d007      	beq.n	800bc0a <lwip_netconn_do_delconn+0x17a>
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc00:	68fa      	ldr	r2, [r7, #12]
 800bc02:	6810      	ldr	r0, [r2, #0]
 800bc04:	2200      	movs	r2, #0
 800bc06:	2100      	movs	r1, #0
 800bc08:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d007      	beq.n	800bc24 <lwip_netconn_do_delconn+0x194>
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc1a:	68fa      	ldr	r2, [r7, #12]
 800bc1c:	6810      	ldr	r0, [r2, #0]
 800bc1e:	2200      	movs	r2, #0
 800bc20:	2102      	movs	r1, #2
 800bc22:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	330c      	adds	r3, #12
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	f00d fd00 	bl	8019630 <sys_sem_valid>
 800bc30:	e000      	b.n	800bc34 <lwip_netconn_do_delconn+0x1a4>
          return;
 800bc32:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800bc34:	3710      	adds	r7, #16
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd80      	pop	{r7, pc}
 800bc3a:	bf00      	nop
 800bc3c:	0801ef9c 	.word	0x0801ef9c
 800bc40:	0801f30c 	.word	0x0801f30c
 800bc44:	0801efe0 	.word	0x0801efe0
 800bc48:	0801f320 	.word	0x0801f320
 800bc4c:	0801f340 	.word	0x0801f340
 800bc50:	0801f35c 	.word	0x0801f35c
 800bc54:	20004c00 	.word	0x20004c00

0800bc58 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b084      	sub	sp, #16
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800bc64:	68bb      	ldr	r3, [r7, #8]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	685b      	ldr	r3, [r3, #4]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d025      	beq.n	800bcba <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800bc6e:	68bb      	ldr	r3, [r7, #8]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	781b      	ldrb	r3, [r3, #0]
 800bc74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bc78:	2b10      	cmp	r3, #16
 800bc7a:	d00e      	beq.n	800bc9a <lwip_netconn_do_bind+0x42>
 800bc7c:	2b20      	cmp	r3, #32
 800bc7e:	d119      	bne.n	800bcb4 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	6858      	ldr	r0, [r3, #4]
 800bc86:	68bb      	ldr	r3, [r7, #8]
 800bc88:	6899      	ldr	r1, [r3, #8]
 800bc8a:	68bb      	ldr	r3, [r7, #8]
 800bc8c:	899b      	ldrh	r3, [r3, #12]
 800bc8e:	461a      	mov	r2, r3
 800bc90:	f00a ff18 	bl	8016ac4 <udp_bind>
 800bc94:	4603      	mov	r3, r0
 800bc96:	73fb      	strb	r3, [r7, #15]
        break;
 800bc98:	e011      	b.n	800bcbe <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800bc9a:	68bb      	ldr	r3, [r7, #8]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	6858      	ldr	r0, [r3, #4]
 800bca0:	68bb      	ldr	r3, [r7, #8]
 800bca2:	6899      	ldr	r1, [r3, #8]
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	899b      	ldrh	r3, [r3, #12]
 800bca8:	461a      	mov	r2, r3
 800bcaa:	f004 fcab 	bl	8010604 <tcp_bind>
 800bcae:	4603      	mov	r3, r0
 800bcb0:	73fb      	strb	r3, [r7, #15]
        break;
 800bcb2:	e004      	b.n	800bcbe <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800bcb4:	23fa      	movs	r3, #250	; 0xfa
 800bcb6:	73fb      	strb	r3, [r7, #15]
        break;
 800bcb8:	e001      	b.n	800bcbe <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800bcba:	23fa      	movs	r3, #250	; 0xfa
 800bcbc:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800bcbe:	68bb      	ldr	r3, [r7, #8]
 800bcc0:	7bfa      	ldrb	r2, [r7, #15]
 800bcc2:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800bcc4:	bf00      	nop
 800bcc6:	3710      	adds	r7, #16
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd80      	pop	{r7, pc}

0800bccc <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b086      	sub	sp, #24
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800bcd8:	697b      	ldr	r3, [r7, #20]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	685b      	ldr	r3, [r3, #4]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d07f      	beq.n	800bde2 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800bce2:	697b      	ldr	r3, [r7, #20]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	781b      	ldrb	r3, [r3, #0]
 800bce8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bcec:	2b10      	cmp	r3, #16
 800bcee:	d175      	bne.n	800bddc <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800bcf0:	697b      	ldr	r3, [r7, #20]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	785b      	ldrb	r3, [r3, #1]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d165      	bne.n	800bdc6 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800bcfa:	697b      	ldr	r3, [r7, #20]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	685b      	ldr	r3, [r3, #4]
 800bd00:	7d1b      	ldrb	r3, [r3, #20]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d002      	beq.n	800bd0c <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800bd06:	23fa      	movs	r3, #250	; 0xfa
 800bd08:	72fb      	strb	r3, [r7, #11]
 800bd0a:	e06c      	b.n	800bde6 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800bd0c:	23ff      	movs	r3, #255	; 0xff
 800bd0e:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800bd10:	697b      	ldr	r3, [r7, #20]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	685b      	ldr	r3, [r3, #4]
 800bd16:	f107 020b 	add.w	r2, r7, #11
 800bd1a:	7cf9      	ldrb	r1, [r7, #19]
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	f004 fd43 	bl	80107a8 <tcp_listen_with_backlog_and_err>
 800bd22:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d05d      	beq.n	800bde6 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800bd2a:	697b      	ldr	r3, [r7, #20]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	3310      	adds	r3, #16
 800bd30:	4618      	mov	r0, r3
 800bd32:	f00d fbef 	bl	8019514 <sys_mbox_valid>
 800bd36:	4603      	mov	r3, r0
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d00b      	beq.n	800bd54 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800bd3c:	697b      	ldr	r3, [r7, #20]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	3310      	adds	r3, #16
 800bd42:	4618      	mov	r0, r3
 800bd44:	f00d fb72 	bl	801942c <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800bd48:	697b      	ldr	r3, [r7, #20]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	3310      	adds	r3, #16
 800bd4e:	4618      	mov	r0, r3
 800bd50:	f00d fbf1 	bl	8019536 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800bd54:	2300      	movs	r3, #0
 800bd56:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800bd58:	697b      	ldr	r3, [r7, #20]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	3314      	adds	r3, #20
 800bd5e:	4618      	mov	r0, r3
 800bd60:	f00d fbd8 	bl	8019514 <sys_mbox_valid>
 800bd64:	4603      	mov	r3, r0
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d108      	bne.n	800bd7c <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800bd6a:	697b      	ldr	r3, [r7, #20]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	3314      	adds	r3, #20
 800bd70:	2106      	movs	r1, #6
 800bd72:	4618      	mov	r0, r3
 800bd74:	f00d fb40 	bl	80193f8 <sys_mbox_new>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800bd7c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d118      	bne.n	800bdb6 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800bd84:	697b      	ldr	r3, [r7, #20]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	2202      	movs	r2, #2
 800bd8a:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800bd8c:	697b      	ldr	r3, [r7, #20]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	68fa      	ldr	r2, [r7, #12]
 800bd92:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800bd94:	697b      	ldr	r3, [r7, #20]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	685a      	ldr	r2, [r3, #4]
 800bd9a:	697b      	ldr	r3, [r7, #20]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	4619      	mov	r1, r3
 800bda0:	4610      	mov	r0, r2
 800bda2:	f005 fccb 	bl	801173c <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800bda6:	697b      	ldr	r3, [r7, #20]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	685b      	ldr	r3, [r3, #4]
 800bdac:	4912      	ldr	r1, [pc, #72]	; (800bdf8 <lwip_netconn_do_listen+0x12c>)
 800bdae:	4618      	mov	r0, r3
 800bdb0:	f005 fd3c 	bl	801182c <tcp_accept>
 800bdb4:	e017      	b.n	800bde6 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800bdb6:	68f8      	ldr	r0, [r7, #12]
 800bdb8:	f004 fad2 	bl	8010360 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800bdbc:	697b      	ldr	r3, [r7, #20]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	605a      	str	r2, [r3, #4]
 800bdc4:	e00f      	b.n	800bde6 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800bdc6:	697b      	ldr	r3, [r7, #20]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	785b      	ldrb	r3, [r3, #1]
 800bdcc:	2b02      	cmp	r3, #2
 800bdce:	d102      	bne.n	800bdd6 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	72fb      	strb	r3, [r7, #11]
 800bdd4:	e007      	b.n	800bde6 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800bdd6:	23f5      	movs	r3, #245	; 0xf5
 800bdd8:	72fb      	strb	r3, [r7, #11]
 800bdda:	e004      	b.n	800bde6 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800bddc:	23f0      	movs	r3, #240	; 0xf0
 800bdde:	72fb      	strb	r3, [r7, #11]
 800bde0:	e001      	b.n	800bde6 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800bde2:	23f5      	movs	r3, #245	; 0xf5
 800bde4:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800bde6:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800bdea:	697b      	ldr	r3, [r7, #20]
 800bdec:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800bdee:	bf00      	nop
 800bdf0:	3718      	adds	r7, #24
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}
 800bdf6:	bf00      	nop
 800bdf8:	0800b2e1 	.word	0x0800b2e1

0800bdfc <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b084      	sub	sp, #16
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	4618      	mov	r0, r3
 800be0e:	f7fe ff21 	bl	800ac54 <netconn_err>
 800be12:	4603      	mov	r3, r0
 800be14:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800be16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d134      	bne.n	800be88 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800be1e:	68bb      	ldr	r3, [r7, #8]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	685b      	ldr	r3, [r3, #4]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d02d      	beq.n	800be84 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800be28:	68bb      	ldr	r3, [r7, #8]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	781b      	ldrb	r3, [r3, #0]
 800be2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800be32:	2b20      	cmp	r3, #32
 800be34:	d123      	bne.n	800be7e <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800be36:	68bb      	ldr	r3, [r7, #8]
 800be38:	689b      	ldr	r3, [r3, #8]
 800be3a:	689b      	ldr	r3, [r3, #8]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d10c      	bne.n	800be5a <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800be40:	68bb      	ldr	r3, [r7, #8]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	685a      	ldr	r2, [r3, #4]
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	689b      	ldr	r3, [r3, #8]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	4619      	mov	r1, r3
 800be4e:	4610      	mov	r0, r2
 800be50:	f00a fc4e 	bl	80166f0 <udp_send>
 800be54:	4603      	mov	r3, r0
 800be56:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800be58:	e016      	b.n	800be88 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800be5a:	68bb      	ldr	r3, [r7, #8]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	6858      	ldr	r0, [r3, #4]
 800be60:	68bb      	ldr	r3, [r7, #8]
 800be62:	689b      	ldr	r3, [r3, #8]
 800be64:	6819      	ldr	r1, [r3, #0]
 800be66:	68bb      	ldr	r3, [r7, #8]
 800be68:	689b      	ldr	r3, [r3, #8]
 800be6a:	f103 0208 	add.w	r2, r3, #8
 800be6e:	68bb      	ldr	r3, [r7, #8]
 800be70:	689b      	ldr	r3, [r3, #8]
 800be72:	899b      	ldrh	r3, [r3, #12]
 800be74:	f00a fc70 	bl	8016758 <udp_sendto>
 800be78:	4603      	mov	r3, r0
 800be7a:	73fb      	strb	r3, [r7, #15]
          break;
 800be7c:	e004      	b.n	800be88 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800be7e:	23f5      	movs	r3, #245	; 0xf5
 800be80:	73fb      	strb	r3, [r7, #15]
          break;
 800be82:	e001      	b.n	800be88 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 800be84:	23f5      	movs	r3, #245	; 0xf5
 800be86:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	7bfa      	ldrb	r2, [r7, #15]
 800be8c:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800be8e:	bf00      	nop
 800be90:	3710      	adds	r7, #16
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}

0800be96 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800be96:	b580      	push	{r7, lr}
 800be98:	b086      	sub	sp, #24
 800be9a:	af00      	add	r7, sp, #0
 800be9c:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800bea2:	693b      	ldr	r3, [r7, #16]
 800bea4:	2200      	movs	r2, #0
 800bea6:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800bea8:	693b      	ldr	r3, [r7, #16]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	685b      	ldr	r3, [r3, #4]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d022      	beq.n	800bef8 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800beb2:	693b      	ldr	r3, [r7, #16]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	781b      	ldrb	r3, [r3, #0]
 800beb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bebc:	2b10      	cmp	r3, #16
 800bebe:	d11b      	bne.n	800bef8 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800bec0:	693b      	ldr	r3, [r7, #16]
 800bec2:	689b      	ldr	r3, [r3, #8]
 800bec4:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800bec6:	697b      	ldr	r3, [r7, #20]
 800bec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800becc:	d202      	bcs.n	800bed4 <lwip_netconn_do_recv+0x3e>
 800bece:	697b      	ldr	r3, [r7, #20]
 800bed0:	b29b      	uxth	r3, r3
 800bed2:	e001      	b.n	800bed8 <lwip_netconn_do_recv+0x42>
 800bed4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bed8:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800beda:	693b      	ldr	r3, [r7, #16]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	685b      	ldr	r3, [r3, #4]
 800bee0:	89fa      	ldrh	r2, [r7, #14]
 800bee2:	4611      	mov	r1, r2
 800bee4:	4618      	mov	r0, r3
 800bee6:	f004 fd63 	bl	80109b0 <tcp_recved>
        remaining -= recved;
 800beea:	89fb      	ldrh	r3, [r7, #14]
 800beec:	697a      	ldr	r2, [r7, #20]
 800beee:	1ad3      	subs	r3, r2, r3
 800bef0:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800bef2:	697b      	ldr	r3, [r7, #20]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d1e6      	bne.n	800bec6 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800bef8:	bf00      	nop
 800befa:	3718      	adds	r7, #24
 800befc:	46bd      	mov	sp, r7
 800befe:	bd80      	pop	{r7, pc}

0800bf00 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b088      	sub	sp, #32
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
 800bf08:	460b      	mov	r3, r1
 800bf0a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d106      	bne.n	800bf24 <lwip_netconn_do_writemore+0x24>
 800bf16:	4b96      	ldr	r3, [pc, #600]	; (800c170 <lwip_netconn_do_writemore+0x270>)
 800bf18:	f240 6273 	movw	r2, #1651	; 0x673
 800bf1c:	4995      	ldr	r1, [pc, #596]	; (800c174 <lwip_netconn_do_writemore+0x274>)
 800bf1e:	4896      	ldr	r0, [pc, #600]	; (800c178 <lwip_netconn_do_writemore+0x278>)
 800bf20:	f010 fde6 	bl	801caf0 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	785b      	ldrb	r3, [r3, #1]
 800bf28:	2b01      	cmp	r3, #1
 800bf2a:	d006      	beq.n	800bf3a <lwip_netconn_do_writemore+0x3a>
 800bf2c:	4b90      	ldr	r3, [pc, #576]	; (800c170 <lwip_netconn_do_writemore+0x270>)
 800bf2e:	f240 6274 	movw	r2, #1652	; 0x674
 800bf32:	4992      	ldr	r1, [pc, #584]	; (800c17c <lwip_netconn_do_writemore+0x27c>)
 800bf34:	4890      	ldr	r0, [pc, #576]	; (800c178 <lwip_netconn_do_writemore+0x278>)
 800bf36:	f010 fddb 	bl	801caf0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6a1b      	ldr	r3, [r3, #32]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d106      	bne.n	800bf50 <lwip_netconn_do_writemore+0x50>
 800bf42:	4b8b      	ldr	r3, [pc, #556]	; (800c170 <lwip_netconn_do_writemore+0x270>)
 800bf44:	f240 6275 	movw	r2, #1653	; 0x675
 800bf48:	498d      	ldr	r1, [pc, #564]	; (800c180 <lwip_netconn_do_writemore+0x280>)
 800bf4a:	488b      	ldr	r0, [pc, #556]	; (800c178 <lwip_netconn_do_writemore+0x278>)
 800bf4c:	f010 fdd0 	bl	801caf0 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	685b      	ldr	r3, [r3, #4]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d106      	bne.n	800bf66 <lwip_netconn_do_writemore+0x66>
 800bf58:	4b85      	ldr	r3, [pc, #532]	; (800c170 <lwip_netconn_do_writemore+0x270>)
 800bf5a:	f240 6276 	movw	r2, #1654	; 0x676
 800bf5e:	4989      	ldr	r1, [pc, #548]	; (800c184 <lwip_netconn_do_writemore+0x284>)
 800bf60:	4885      	ldr	r0, [pc, #532]	; (800c178 <lwip_netconn_do_writemore+0x278>)
 800bf62:	f010 fdc5 	bl	801caf0 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	6a1b      	ldr	r3, [r3, #32]
 800bf6a:	699a      	ldr	r2, [r3, #24]
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	6a1b      	ldr	r3, [r3, #32]
 800bf70:	695b      	ldr	r3, [r3, #20]
 800bf72:	429a      	cmp	r2, r3
 800bf74:	d306      	bcc.n	800bf84 <lwip_netconn_do_writemore+0x84>
 800bf76:	4b7e      	ldr	r3, [pc, #504]	; (800c170 <lwip_netconn_do_writemore+0x270>)
 800bf78:	f240 6277 	movw	r2, #1655	; 0x677
 800bf7c:	4982      	ldr	r1, [pc, #520]	; (800c188 <lwip_netconn_do_writemore+0x288>)
 800bf7e:	487e      	ldr	r0, [pc, #504]	; (800c178 <lwip_netconn_do_writemore+0x278>)
 800bf80:	f010 fdb6 	bl	801caf0 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	6a1b      	ldr	r3, [r3, #32]
 800bf88:	899b      	ldrh	r3, [r3, #12]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d106      	bne.n	800bf9c <lwip_netconn_do_writemore+0x9c>
 800bf8e:	4b78      	ldr	r3, [pc, #480]	; (800c170 <lwip_netconn_do_writemore+0x270>)
 800bf90:	f240 6279 	movw	r2, #1657	; 0x679
 800bf94:	497d      	ldr	r1, [pc, #500]	; (800c18c <lwip_netconn_do_writemore+0x28c>)
 800bf96:	4878      	ldr	r0, [pc, #480]	; (800c178 <lwip_netconn_do_writemore+0x278>)
 800bf98:	f010 fdaa 	bl	801caf0 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	6a1b      	ldr	r3, [r3, #32]
 800bfa0:	7f1b      	ldrb	r3, [r3, #28]
 800bfa2:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	7f1b      	ldrb	r3, [r3, #28]
 800bfa8:	f003 0302 	and.w	r3, r3, #2
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d104      	bne.n	800bfba <lwip_netconn_do_writemore+0xba>
 800bfb0:	7ebb      	ldrb	r3, [r7, #26]
 800bfb2:	f003 0304 	and.w	r3, r3, #4
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d001      	beq.n	800bfbe <lwip_netconn_do_writemore+0xbe>
 800bfba:	2301      	movs	r3, #1
 800bfbc:	e000      	b.n	800bfc0 <lwip_netconn_do_writemore+0xc0>
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	6a1b      	ldr	r3, [r3, #32]
 800bfc6:	689b      	ldr	r3, [r3, #8]
 800bfc8:	681a      	ldr	r2, [r3, #0]
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	6a1b      	ldr	r3, [r3, #32]
 800bfce:	691b      	ldr	r3, [r3, #16]
 800bfd0:	4413      	add	r3, r2
 800bfd2:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	6a1b      	ldr	r3, [r3, #32]
 800bfd8:	689b      	ldr	r3, [r3, #8]
 800bfda:	685a      	ldr	r2, [r3, #4]
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	6a1b      	ldr	r3, [r3, #32]
 800bfe0:	691b      	ldr	r3, [r3, #16]
 800bfe2:	1ad3      	subs	r3, r2, r3
 800bfe4:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800bfe6:	693b      	ldr	r3, [r7, #16]
 800bfe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bfec:	d307      	bcc.n	800bffe <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800bfee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bff2:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800bff4:	7ebb      	ldrb	r3, [r7, #26]
 800bff6:	f043 0302 	orr.w	r3, r3, #2
 800bffa:	76bb      	strb	r3, [r7, #26]
 800bffc:	e001      	b.n	800c002 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800bffe:	693b      	ldr	r3, [r7, #16]
 800c000:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	685b      	ldr	r3, [r3, #4]
 800c006:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c00a:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800c00c:	89fa      	ldrh	r2, [r7, #14]
 800c00e:	8bbb      	ldrh	r3, [r7, #28]
 800c010:	429a      	cmp	r2, r3
 800c012:	d216      	bcs.n	800c042 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800c014:	89fb      	ldrh	r3, [r7, #14]
 800c016:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800c018:	7e3b      	ldrb	r3, [r7, #24]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d00d      	beq.n	800c03a <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800c01e:	8bbb      	ldrh	r3, [r7, #28]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d10e      	bne.n	800c042 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	6a1b      	ldr	r3, [r3, #32]
 800c028:	699b      	ldr	r3, [r3, #24]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d102      	bne.n	800c034 <lwip_netconn_do_writemore+0x134>
 800c02e:	f06f 0306 	mvn.w	r3, #6
 800c032:	e000      	b.n	800c036 <lwip_netconn_do_writemore+0x136>
 800c034:	2300      	movs	r3, #0
 800c036:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800c038:	e07d      	b.n	800c136 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800c03a:	7ebb      	ldrb	r3, [r7, #26]
 800c03c:	f043 0302 	orr.w	r3, r3, #2
 800c040:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	6a1b      	ldr	r3, [r3, #32]
 800c046:	691a      	ldr	r2, [r3, #16]
 800c048:	8bbb      	ldrh	r3, [r7, #28]
 800c04a:	441a      	add	r2, r3
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	6a1b      	ldr	r3, [r3, #32]
 800c050:	689b      	ldr	r3, [r3, #8]
 800c052:	685b      	ldr	r3, [r3, #4]
 800c054:	429a      	cmp	r2, r3
 800c056:	d906      	bls.n	800c066 <lwip_netconn_do_writemore+0x166>
 800c058:	4b45      	ldr	r3, [pc, #276]	; (800c170 <lwip_netconn_do_writemore+0x270>)
 800c05a:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800c05e:	494c      	ldr	r1, [pc, #304]	; (800c190 <lwip_netconn_do_writemore+0x290>)
 800c060:	4845      	ldr	r0, [pc, #276]	; (800c178 <lwip_netconn_do_writemore+0x278>)
 800c062:	f010 fd45 	bl	801caf0 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800c066:	8bbb      	ldrh	r3, [r7, #28]
 800c068:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c06c:	4293      	cmp	r3, r2
 800c06e:	d103      	bne.n	800c078 <lwip_netconn_do_writemore+0x178>
 800c070:	693b      	ldr	r3, [r7, #16]
 800c072:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c076:	d209      	bcs.n	800c08c <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800c078:	693b      	ldr	r3, [r7, #16]
 800c07a:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800c07c:	8bba      	ldrh	r2, [r7, #28]
 800c07e:	429a      	cmp	r2, r3
 800c080:	d10b      	bne.n	800c09a <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	6a1b      	ldr	r3, [r3, #32]
 800c086:	899b      	ldrh	r3, [r3, #12]
 800c088:	2b01      	cmp	r3, #1
 800c08a:	d906      	bls.n	800c09a <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800c08c:	2301      	movs	r3, #1
 800c08e:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800c090:	7ebb      	ldrb	r3, [r7, #26]
 800c092:	f043 0302 	orr.w	r3, r3, #2
 800c096:	76bb      	strb	r3, [r7, #26]
 800c098:	e001      	b.n	800c09e <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800c09a:	2300      	movs	r3, #0
 800c09c:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6858      	ldr	r0, [r3, #4]
 800c0a2:	7ebb      	ldrb	r3, [r7, #26]
 800c0a4:	8bba      	ldrh	r2, [r7, #28]
 800c0a6:	6979      	ldr	r1, [r7, #20]
 800c0a8:	f008 fa86 	bl	80145b8 <tcp_write>
 800c0ac:	4603      	mov	r3, r0
 800c0ae:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800c0b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d12c      	bne.n	800c112 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	6a1b      	ldr	r3, [r3, #32]
 800c0bc:	6999      	ldr	r1, [r3, #24]
 800c0be:	8bba      	ldrh	r2, [r7, #28]
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	6a1b      	ldr	r3, [r3, #32]
 800c0c4:	440a      	add	r2, r1
 800c0c6:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	6a1b      	ldr	r3, [r3, #32]
 800c0cc:	6919      	ldr	r1, [r3, #16]
 800c0ce:	8bba      	ldrh	r2, [r7, #28]
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	6a1b      	ldr	r3, [r3, #32]
 800c0d4:	440a      	add	r2, r1
 800c0d6:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	6a1b      	ldr	r3, [r3, #32]
 800c0dc:	691a      	ldr	r2, [r3, #16]
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	6a1b      	ldr	r3, [r3, #32]
 800c0e2:	689b      	ldr	r3, [r3, #8]
 800c0e4:	685b      	ldr	r3, [r3, #4]
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	d113      	bne.n	800c112 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	6a1b      	ldr	r3, [r3, #32]
 800c0ee:	899a      	ldrh	r2, [r3, #12]
 800c0f0:	3a01      	subs	r2, #1
 800c0f2:	b292      	uxth	r2, r2
 800c0f4:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	6a1b      	ldr	r3, [r3, #32]
 800c0fa:	899b      	ldrh	r3, [r3, #12]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d008      	beq.n	800c112 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	6a1b      	ldr	r3, [r3, #32]
 800c104:	689a      	ldr	r2, [r3, #8]
 800c106:	3208      	adds	r2, #8
 800c108:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	6a1b      	ldr	r3, [r3, #32]
 800c10e:	2200      	movs	r2, #0
 800c110:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800c112:	7e7b      	ldrb	r3, [r7, #25]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d004      	beq.n	800c122 <lwip_netconn_do_writemore+0x222>
 800c118:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	f43f af50 	beq.w	800bfc2 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800c122:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d004      	beq.n	800c134 <lwip_netconn_do_writemore+0x234>
 800c12a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c12e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c132:	d146      	bne.n	800c1c2 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800c134:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800c136:	7e3b      	ldrb	r3, [r7, #24]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d02b      	beq.n	800c194 <lwip_netconn_do_writemore+0x294>
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	6a1b      	ldr	r3, [r3, #32]
 800c140:	699a      	ldr	r2, [r3, #24]
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6a1b      	ldr	r3, [r3, #32]
 800c146:	695b      	ldr	r3, [r3, #20]
 800c148:	429a      	cmp	r2, r3
 800c14a:	d223      	bcs.n	800c194 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c150:	2b00      	cmp	r3, #0
 800c152:	d005      	beq.n	800c160 <lwip_netconn_do_writemore+0x260>
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c158:	2200      	movs	r2, #0
 800c15a:	2103      	movs	r1, #3
 800c15c:	6878      	ldr	r0, [r7, #4]
 800c15e:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	7f1b      	ldrb	r3, [r3, #28]
 800c164:	f043 0310 	orr.w	r3, r3, #16
 800c168:	b2da      	uxtb	r2, r3
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	771a      	strb	r2, [r3, #28]
 800c16e:	e028      	b.n	800c1c2 <lwip_netconn_do_writemore+0x2c2>
 800c170:	0801ef9c 	.word	0x0801ef9c
 800c174:	0801f0f4 	.word	0x0801f0f4
 800c178:	0801efe0 	.word	0x0801efe0
 800c17c:	0801f3fc 	.word	0x0801f3fc
 800c180:	0801f104 	.word	0x0801f104
 800c184:	0801f41c 	.word	0x0801f41c
 800c188:	0801f434 	.word	0x0801f434
 800c18c:	0801f474 	.word	0x0801f474
 800c190:	0801f49c 	.word	0x0801f49c
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	685b      	ldr	r3, [r3, #4]
 800c198:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c19c:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800c1a0:	d305      	bcc.n	800c1ae <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	685b      	ldr	r3, [r3, #4]
 800c1a6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800c1aa:	2b04      	cmp	r3, #4
 800c1ac:	d909      	bls.n	800c1c2 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d005      	beq.n	800c1c2 <lwip_netconn_do_writemore+0x2c2>
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	2103      	movs	r1, #3
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800c1c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d11d      	bne.n	800c206 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	6a1b      	ldr	r3, [r3, #32]
 800c1ce:	699a      	ldr	r2, [r3, #24]
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	6a1b      	ldr	r3, [r3, #32]
 800c1d4:	695b      	ldr	r3, [r3, #20]
 800c1d6:	429a      	cmp	r2, r3
 800c1d8:	d002      	beq.n	800c1e0 <lwip_netconn_do_writemore+0x2e0>
 800c1da:	7e3b      	ldrb	r3, [r7, #24]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d001      	beq.n	800c1e4 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800c1e0:	2301      	movs	r3, #1
 800c1e2:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	685b      	ldr	r3, [r3, #4]
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	f008 ffcf 	bl	801518c <tcp_output>
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800c1f2:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800c1f6:	f113 0f04 	cmn.w	r3, #4
 800c1fa:	d12c      	bne.n	800c256 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800c1fc:	7b3b      	ldrb	r3, [r7, #12]
 800c1fe:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800c200:	2301      	movs	r3, #1
 800c202:	76fb      	strb	r3, [r7, #27]
 800c204:	e027      	b.n	800c256 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800c206:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c20a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c20e:	d120      	bne.n	800c252 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	685b      	ldr	r3, [r3, #4]
 800c214:	4618      	mov	r0, r3
 800c216:	f008 ffb9 	bl	801518c <tcp_output>
 800c21a:	4603      	mov	r3, r0
 800c21c:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800c21e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800c222:	f113 0f04 	cmn.w	r3, #4
 800c226:	d104      	bne.n	800c232 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800c228:	7b7b      	ldrb	r3, [r7, #13]
 800c22a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800c22c:	2301      	movs	r3, #1
 800c22e:	76fb      	strb	r3, [r7, #27]
 800c230:	e011      	b.n	800c256 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800c232:	7e3b      	ldrb	r3, [r7, #24]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d00e      	beq.n	800c256 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	6a1b      	ldr	r3, [r3, #32]
 800c23c:	699b      	ldr	r3, [r3, #24]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d102      	bne.n	800c248 <lwip_netconn_do_writemore+0x348>
 800c242:	f06f 0306 	mvn.w	r3, #6
 800c246:	e000      	b.n	800c24a <lwip_netconn_do_writemore+0x34a>
 800c248:	2300      	movs	r3, #0
 800c24a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800c24c:	2301      	movs	r3, #1
 800c24e:	76fb      	strb	r3, [r7, #27]
 800c250:	e001      	b.n	800c256 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800c252:	2301      	movs	r3, #1
 800c254:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800c256:	7efb      	ldrb	r3, [r7, #27]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d015      	beq.n	800c288 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	6a1b      	ldr	r3, [r3, #32]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	330c      	adds	r3, #12
 800c264:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	6a1b      	ldr	r3, [r3, #32]
 800c26a:	7ffa      	ldrb	r2, [r7, #31]
 800c26c:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2200      	movs	r2, #0
 800c272:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2200      	movs	r2, #0
 800c278:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800c27a:	78fb      	ldrb	r3, [r7, #3]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d006      	beq.n	800c28e <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800c280:	68b8      	ldr	r0, [r7, #8]
 800c282:	f00d f9bb 	bl	80195fc <sys_sem_signal>
 800c286:	e002      	b.n	800c28e <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800c288:	f04f 33ff 	mov.w	r3, #4294967295
 800c28c:	e000      	b.n	800c290 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800c28e:	2300      	movs	r3, #0
}
 800c290:	4618      	mov	r0, r3
 800c292:	3720      	adds	r7, #32
 800c294:	46bd      	mov	sp, r7
 800c296:	bd80      	pop	{r7, pc}

0800c298 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b084      	sub	sp, #16
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	f7fe fcd3 	bl	800ac54 <netconn_err>
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800c2b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d166      	bne.n	800c388 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800c2ba:	68bb      	ldr	r3, [r7, #8]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	781b      	ldrb	r3, [r3, #0]
 800c2c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c2c4:	2b10      	cmp	r3, #16
 800c2c6:	d15d      	bne.n	800c384 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	785b      	ldrb	r3, [r3, #1]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d002      	beq.n	800c2d8 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800c2d2:	23fb      	movs	r3, #251	; 0xfb
 800c2d4:	73fb      	strb	r3, [r7, #15]
 800c2d6:	e057      	b.n	800c388 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800c2d8:	68bb      	ldr	r3, [r7, #8]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	685b      	ldr	r3, [r3, #4]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d04d      	beq.n	800c37e <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800c2e2:	68bb      	ldr	r3, [r7, #8]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	2201      	movs	r2, #1
 800c2e8:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800c2ea:	68bb      	ldr	r3, [r7, #8]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	6a1b      	ldr	r3, [r3, #32]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d006      	beq.n	800c302 <lwip_netconn_do_write+0x6a>
 800c2f4:	4b28      	ldr	r3, [pc, #160]	; (800c398 <lwip_netconn_do_write+0x100>)
 800c2f6:	f240 7223 	movw	r2, #1827	; 0x723
 800c2fa:	4928      	ldr	r1, [pc, #160]	; (800c39c <lwip_netconn_do_write+0x104>)
 800c2fc:	4828      	ldr	r0, [pc, #160]	; (800c3a0 <lwip_netconn_do_write+0x108>)
 800c2fe:	f010 fbf7 	bl	801caf0 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800c302:	68bb      	ldr	r3, [r7, #8]
 800c304:	695b      	ldr	r3, [r3, #20]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d106      	bne.n	800c318 <lwip_netconn_do_write+0x80>
 800c30a:	4b23      	ldr	r3, [pc, #140]	; (800c398 <lwip_netconn_do_write+0x100>)
 800c30c:	f240 7224 	movw	r2, #1828	; 0x724
 800c310:	4924      	ldr	r1, [pc, #144]	; (800c3a4 <lwip_netconn_do_write+0x10c>)
 800c312:	4823      	ldr	r0, [pc, #140]	; (800c3a0 <lwip_netconn_do_write+0x108>)
 800c314:	f010 fbec 	bl	801caf0 <iprintf>
        msg->conn->current_msg = msg;
 800c318:	68bb      	ldr	r3, [r7, #8]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	68ba      	ldr	r2, [r7, #8]
 800c31e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800c320:	68bb      	ldr	r3, [r7, #8]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	2100      	movs	r1, #0
 800c326:	4618      	mov	r0, r3
 800c328:	f7ff fdea 	bl	800bf00 <lwip_netconn_do_writemore>
 800c32c:	4603      	mov	r3, r0
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d02e      	beq.n	800c390 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800c332:	68bb      	ldr	r3, [r7, #8]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	785b      	ldrb	r3, [r3, #1]
 800c338:	2b01      	cmp	r3, #1
 800c33a:	d006      	beq.n	800c34a <lwip_netconn_do_write+0xb2>
 800c33c:	4b16      	ldr	r3, [pc, #88]	; (800c398 <lwip_netconn_do_write+0x100>)
 800c33e:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800c342:	4919      	ldr	r1, [pc, #100]	; (800c3a8 <lwip_netconn_do_write+0x110>)
 800c344:	4816      	ldr	r0, [pc, #88]	; (800c3a0 <lwip_netconn_do_write+0x108>)
 800c346:	f010 fbd3 	bl	801caf0 <iprintf>
          UNLOCK_TCPIP_CORE();
 800c34a:	4818      	ldr	r0, [pc, #96]	; (800c3ac <lwip_netconn_do_write+0x114>)
 800c34c:	f00d f9bf 	bl	80196ce <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	330c      	adds	r3, #12
 800c356:	2100      	movs	r1, #0
 800c358:	4618      	mov	r0, r3
 800c35a:	f00d f91e 	bl	801959a <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800c35e:	4813      	ldr	r0, [pc, #76]	; (800c3ac <lwip_netconn_do_write+0x114>)
 800c360:	f00d f9a6 	bl	80196b0 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800c364:	68bb      	ldr	r3, [r7, #8]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	785b      	ldrb	r3, [r3, #1]
 800c36a:	2b01      	cmp	r3, #1
 800c36c:	d110      	bne.n	800c390 <lwip_netconn_do_write+0xf8>
 800c36e:	4b0a      	ldr	r3, [pc, #40]	; (800c398 <lwip_netconn_do_write+0x100>)
 800c370:	f240 722c 	movw	r2, #1836	; 0x72c
 800c374:	490c      	ldr	r1, [pc, #48]	; (800c3a8 <lwip_netconn_do_write+0x110>)
 800c376:	480a      	ldr	r0, [pc, #40]	; (800c3a0 <lwip_netconn_do_write+0x108>)
 800c378:	f010 fbba 	bl	801caf0 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800c37c:	e008      	b.n	800c390 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800c37e:	23f5      	movs	r3, #245	; 0xf5
 800c380:	73fb      	strb	r3, [r7, #15]
 800c382:	e001      	b.n	800c388 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800c384:	23fa      	movs	r3, #250	; 0xfa
 800c386:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800c388:	68bb      	ldr	r3, [r7, #8]
 800c38a:	7bfa      	ldrb	r2, [r7, #15]
 800c38c:	711a      	strb	r2, [r3, #4]
 800c38e:	e000      	b.n	800c392 <lwip_netconn_do_write+0xfa>
        return;
 800c390:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800c392:	3710      	adds	r7, #16
 800c394:	46bd      	mov	sp, r7
 800c396:	bd80      	pop	{r7, pc}
 800c398:	0801ef9c 	.word	0x0801ef9c
 800c39c:	0801f340 	.word	0x0801f340
 800c3a0:	0801efe0 	.word	0x0801efe0
 800c3a4:	0801f4c8 	.word	0x0801f4c8
 800c3a8:	0801f35c 	.word	0x0801f35c
 800c3ac:	20004c00 	.word	0x20004c00

0800c3b0 <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b084      	sub	sp, #16
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	685b      	ldr	r3, [r3, #4]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d06b      	beq.n	800c49e <lwip_netconn_do_getaddr+0xee>
    if (msg->msg.ad.local) {
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	7c1b      	ldrb	r3, [r3, #16]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d007      	beq.n	800c3de <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	685a      	ldr	r2, [r3, #4]
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	689b      	ldr	r3, [r3, #8]
 800c3d8:	6812      	ldr	r2, [r2, #0]
 800c3da:	601a      	str	r2, [r3, #0]
 800c3dc:	e006      	b.n	800c3ec <lwip_netconn_do_getaddr+0x3c>
                   msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	685a      	ldr	r2, [r3, #4]
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	689b      	ldr	r3, [r3, #8]
 800c3e8:	6852      	ldr	r2, [r2, #4]
 800c3ea:	601a      	str	r2, [r3, #0]
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	781b      	ldrb	r3, [r3, #0]
 800c3f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c3fc:	2b10      	cmp	r3, #16
 800c3fe:	d021      	beq.n	800c444 <lwip_netconn_do_getaddr+0x94>
 800c400:	2b20      	cmp	r3, #32
 800c402:	d144      	bne.n	800c48e <lwip_netconn_do_getaddr+0xde>
        }
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	7c1b      	ldrb	r3, [r3, #16]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d007      	beq.n	800c41c <lwip_netconn_do_getaddr+0x6c>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	685a      	ldr	r2, [r3, #4]
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	68db      	ldr	r3, [r3, #12]
 800c416:	8a52      	ldrh	r2, [r2, #18]
 800c418:	801a      	strh	r2, [r3, #0]
            msg->err = ERR_CONN;
          } else {
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
          }
        }
        break;
 800c41a:	e044      	b.n	800c4a6 <lwip_netconn_do_getaddr+0xf6>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	685b      	ldr	r3, [r3, #4]
 800c422:	7c1b      	ldrb	r3, [r3, #16]
 800c424:	f003 0304 	and.w	r3, r3, #4
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d103      	bne.n	800c434 <lwip_netconn_do_getaddr+0x84>
            msg->err = ERR_CONN;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	22f5      	movs	r2, #245	; 0xf5
 800c430:	711a      	strb	r2, [r3, #4]
        break;
 800c432:	e038      	b.n	800c4a6 <lwip_netconn_do_getaddr+0xf6>
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	685a      	ldr	r2, [r3, #4]
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	68db      	ldr	r3, [r3, #12]
 800c43e:	8a92      	ldrh	r2, [r2, #20]
 800c440:	801a      	strh	r2, [r3, #0]
        break;
 800c442:	e030      	b.n	800c4a6 <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        if ((msg->msg.ad.local == 0) &&
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	7c1b      	ldrb	r3, [r3, #16]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d10f      	bne.n	800c46c <lwip_netconn_do_getaddr+0xbc>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	685b      	ldr	r3, [r3, #4]
 800c452:	7d1b      	ldrb	r3, [r3, #20]
        if ((msg->msg.ad.local == 0) &&
 800c454:	2b00      	cmp	r3, #0
 800c456:	d005      	beq.n	800c464 <lwip_netconn_do_getaddr+0xb4>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	685b      	ldr	r3, [r3, #4]
 800c45e:	7d1b      	ldrb	r3, [r3, #20]
 800c460:	2b01      	cmp	r3, #1
 800c462:	d103      	bne.n	800c46c <lwip_netconn_do_getaddr+0xbc>
          /* pcb is not connected and remote name is requested */
          msg->err = ERR_CONN;
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	22f5      	movs	r2, #245	; 0xf5
 800c468:	711a      	strb	r2, [r3, #4]
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
        }
        break;
 800c46a:	e01c      	b.n	800c4a6 <lwip_netconn_do_getaddr+0xf6>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	7c1b      	ldrb	r3, [r3, #16]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d004      	beq.n	800c47e <lwip_netconn_do_getaddr+0xce>
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	685b      	ldr	r3, [r3, #4]
 800c47a:	8adb      	ldrh	r3, [r3, #22]
 800c47c:	e003      	b.n	800c486 <lwip_netconn_do_getaddr+0xd6>
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	685b      	ldr	r3, [r3, #4]
 800c484:	8b1b      	ldrh	r3, [r3, #24]
 800c486:	68fa      	ldr	r2, [r7, #12]
 800c488:	68d2      	ldr	r2, [r2, #12]
 800c48a:	8013      	strh	r3, [r2, #0]
        break;
 800c48c:	e00b      	b.n	800c4a6 <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_TCP */
      default:
        LWIP_ASSERT("invalid netconn_type", 0);
 800c48e:	4b08      	ldr	r3, [pc, #32]	; (800c4b0 <lwip_netconn_do_getaddr+0x100>)
 800c490:	f240 727d 	movw	r2, #1917	; 0x77d
 800c494:	4907      	ldr	r1, [pc, #28]	; (800c4b4 <lwip_netconn_do_getaddr+0x104>)
 800c496:	4808      	ldr	r0, [pc, #32]	; (800c4b8 <lwip_netconn_do_getaddr+0x108>)
 800c498:	f010 fb2a 	bl	801caf0 <iprintf>
        break;
 800c49c:	e003      	b.n	800c4a6 <lwip_netconn_do_getaddr+0xf6>
    }
  } else {
    msg->err = ERR_CONN;
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	22f5      	movs	r2, #245	; 0xf5
 800c4a2:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
}
 800c4a4:	bf00      	nop
 800c4a6:	bf00      	nop
 800c4a8:	3710      	adds	r7, #16
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}
 800c4ae:	bf00      	nop
 800c4b0:	0801ef9c 	.word	0x0801ef9c
 800c4b4:	0801f4dc 	.word	0x0801f4dc
 800c4b8:	0801efe0 	.word	0x0801efe0

0800c4bc <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b084      	sub	sp, #16
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	785b      	ldrb	r3, [r3, #1]
 800c4ce:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	685b      	ldr	r3, [r3, #4]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d069      	beq.n	800c5ae <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	781b      	ldrb	r3, [r3, #0]
 800c4e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800c4e4:	2b10      	cmp	r3, #16
 800c4e6:	d162      	bne.n	800c5ae <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800c4ec:	2b03      	cmp	r3, #3
 800c4ee:	d002      	beq.n	800c4f6 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800c4f0:	7afb      	ldrb	r3, [r7, #11]
 800c4f2:	2b02      	cmp	r3, #2
 800c4f4:	d05b      	beq.n	800c5ae <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800c4f6:	7afb      	ldrb	r3, [r7, #11]
 800c4f8:	2b03      	cmp	r3, #3
 800c4fa:	d103      	bne.n	800c504 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	22f5      	movs	r2, #245	; 0xf5
 800c500:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800c502:	e059      	b.n	800c5b8 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800c504:	7afb      	ldrb	r3, [r7, #11]
 800c506:	2b01      	cmp	r3, #1
 800c508:	d103      	bne.n	800c512 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	22fb      	movs	r2, #251	; 0xfb
 800c50e:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800c510:	e052      	b.n	800c5b8 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	7a1b      	ldrb	r3, [r3, #8]
 800c516:	f003 0301 	and.w	r3, r3, #1
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d004      	beq.n	800c528 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	4618      	mov	r0, r3
 800c524:	f7ff f8d0 	bl	800b6c8 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	6a1b      	ldr	r3, [r3, #32]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d006      	beq.n	800c540 <lwip_netconn_do_close+0x84>
 800c532:	4b23      	ldr	r3, [pc, #140]	; (800c5c0 <lwip_netconn_do_close+0x104>)
 800c534:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800c538:	4922      	ldr	r1, [pc, #136]	; (800c5c4 <lwip_netconn_do_close+0x108>)
 800c53a:	4823      	ldr	r0, [pc, #140]	; (800c5c8 <lwip_netconn_do_close+0x10c>)
 800c53c:	f010 fad8 	bl	801caf0 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	2204      	movs	r2, #4
 800c546:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	68fa      	ldr	r2, [r7, #12]
 800c54e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	2100      	movs	r1, #0
 800c556:	4618      	mov	r0, r3
 800c558:	f7ff f934 	bl	800b7c4 <lwip_netconn_do_close_internal>
 800c55c:	4603      	mov	r3, r0
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d029      	beq.n	800c5b6 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	785b      	ldrb	r3, [r3, #1]
 800c568:	2b04      	cmp	r3, #4
 800c56a:	d006      	beq.n	800c57a <lwip_netconn_do_close+0xbe>
 800c56c:	4b14      	ldr	r3, [pc, #80]	; (800c5c0 <lwip_netconn_do_close+0x104>)
 800c56e:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800c572:	4916      	ldr	r1, [pc, #88]	; (800c5cc <lwip_netconn_do_close+0x110>)
 800c574:	4814      	ldr	r0, [pc, #80]	; (800c5c8 <lwip_netconn_do_close+0x10c>)
 800c576:	f010 fabb 	bl	801caf0 <iprintf>
        UNLOCK_TCPIP_CORE();
 800c57a:	4815      	ldr	r0, [pc, #84]	; (800c5d0 <lwip_netconn_do_close+0x114>)
 800c57c:	f00d f8a7 	bl	80196ce <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	330c      	adds	r3, #12
 800c586:	2100      	movs	r1, #0
 800c588:	4618      	mov	r0, r3
 800c58a:	f00d f806 	bl	801959a <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800c58e:	4810      	ldr	r0, [pc, #64]	; (800c5d0 <lwip_netconn_do_close+0x114>)
 800c590:	f00d f88e 	bl	80196b0 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	785b      	ldrb	r3, [r3, #1]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d00b      	beq.n	800c5b6 <lwip_netconn_do_close+0xfa>
 800c59e:	4b08      	ldr	r3, [pc, #32]	; (800c5c0 <lwip_netconn_do_close+0x104>)
 800c5a0:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800c5a4:	4909      	ldr	r1, [pc, #36]	; (800c5cc <lwip_netconn_do_close+0x110>)
 800c5a6:	4808      	ldr	r0, [pc, #32]	; (800c5c8 <lwip_netconn_do_close+0x10c>)
 800c5a8:	f010 faa2 	bl	801caf0 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800c5ac:	e003      	b.n	800c5b6 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	22f5      	movs	r2, #245	; 0xf5
 800c5b2:	711a      	strb	r2, [r3, #4]
 800c5b4:	e000      	b.n	800c5b8 <lwip_netconn_do_close+0xfc>
      return;
 800c5b6:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800c5b8:	3710      	adds	r7, #16
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd80      	pop	{r7, pc}
 800c5be:	bf00      	nop
 800c5c0:	0801ef9c 	.word	0x0801ef9c
 800c5c4:	0801f340 	.word	0x0801f340
 800c5c8:	0801efe0 	.word	0x0801efe0
 800c5cc:	0801f35c 	.word	0x0801f35c
 800c5d0:	20004c00 	.word	0x20004c00

0800c5d4 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 800c5d4:	b480      	push	{r7}
 800c5d6:	b083      	sub	sp, #12
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	4603      	mov	r3, r0
 800c5dc:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 800c5de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	dc04      	bgt.n	800c5f0 <err_to_errno+0x1c>
 800c5e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c5ea:	f113 0f10 	cmn.w	r3, #16
 800c5ee:	da01      	bge.n	800c5f4 <err_to_errno+0x20>
    return EIO;
 800c5f0:	2305      	movs	r3, #5
 800c5f2:	e005      	b.n	800c600 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 800c5f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c5f8:	425b      	negs	r3, r3
 800c5fa:	4a04      	ldr	r2, [pc, #16]	; (800c60c <err_to_errno+0x38>)
 800c5fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800c600:	4618      	mov	r0, r3
 800c602:	370c      	adds	r7, #12
 800c604:	46bd      	mov	sp, r7
 800c606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60a:	4770      	bx	lr
 800c60c:	08022744 	.word	0x08022744

0800c610 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b082      	sub	sp, #8
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d013      	beq.n	800c646 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d00b      	beq.n	800c63e <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	4618      	mov	r0, r3
 800c62c:	f003 f9de 	bl	800f9ec <pbuf_free>
      buf->p = buf->ptr = NULL;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2200      	movs	r2, #0
 800c634:	605a      	str	r2, [r3, #4]
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	685a      	ldr	r2, [r3, #4]
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800c63e:	6879      	ldr	r1, [r7, #4]
 800c640:	2006      	movs	r0, #6
 800c642:	f002 fac5 	bl	800ebd0 <memp_free>
  }
}
 800c646:	bf00      	nop
 800c648:	3708      	adds	r7, #8
 800c64a:	46bd      	mov	sp, r7
 800c64c:	bd80      	pop	{r7, pc}
	...

0800c650 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b082      	sub	sp, #8
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d106      	bne.n	800c66c <netbuf_free+0x1c>
 800c65e:	4b0d      	ldr	r3, [pc, #52]	; (800c694 <netbuf_free+0x44>)
 800c660:	2281      	movs	r2, #129	; 0x81
 800c662:	490d      	ldr	r1, [pc, #52]	; (800c698 <netbuf_free+0x48>)
 800c664:	480d      	ldr	r0, [pc, #52]	; (800c69c <netbuf_free+0x4c>)
 800c666:	f010 fa43 	bl	801caf0 <iprintf>
 800c66a:	e00f      	b.n	800c68c <netbuf_free+0x3c>
  if (buf->p != NULL) {
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d004      	beq.n	800c67e <netbuf_free+0x2e>
    pbuf_free(buf->p);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	4618      	mov	r0, r3
 800c67a:	f003 f9b7 	bl	800f9ec <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	2200      	movs	r2, #0
 800c682:	605a      	str	r2, [r3, #4]
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	685a      	ldr	r2, [r3, #4]
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 800c68c:	3708      	adds	r7, #8
 800c68e:	46bd      	mov	sp, r7
 800c690:	bd80      	pop	{r7, pc}
 800c692:	bf00      	nop
 800c694:	0801f4f4 	.word	0x0801f4f4
 800c698:	0801f590 	.word	0x0801f590
 800c69c:	0801f544 	.word	0x0801f544

0800c6a0 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b084      	sub	sp, #16
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	60f8      	str	r0, [r7, #12]
 800c6a8:	60b9      	str	r1, [r7, #8]
 800c6aa:	4613      	mov	r3, r2
 800c6ac:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d108      	bne.n	800c6c6 <netbuf_ref+0x26>
 800c6b4:	4b1c      	ldr	r3, [pc, #112]	; (800c728 <netbuf_ref+0x88>)
 800c6b6:	2299      	movs	r2, #153	; 0x99
 800c6b8:	491c      	ldr	r1, [pc, #112]	; (800c72c <netbuf_ref+0x8c>)
 800c6ba:	481d      	ldr	r0, [pc, #116]	; (800c730 <netbuf_ref+0x90>)
 800c6bc:	f010 fa18 	bl	801caf0 <iprintf>
 800c6c0:	f06f 030f 	mvn.w	r3, #15
 800c6c4:	e02b      	b.n	800c71e <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d004      	beq.n	800c6d8 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f003 f98a 	bl	800f9ec <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 800c6d8:	2241      	movs	r2, #65	; 0x41
 800c6da:	2100      	movs	r1, #0
 800c6dc:	2036      	movs	r0, #54	; 0x36
 800c6de:	f002 fe6f 	bl	800f3c0 <pbuf_alloc>
 800c6e2:	4602      	mov	r2, r0
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d105      	bne.n	800c6fc <netbuf_ref+0x5c>
    buf->ptr = NULL;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 800c6f6:	f04f 33ff 	mov.w	r3, #4294967295
 800c6fa:	e010      	b.n	800c71e <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	68ba      	ldr	r2, [r7, #8]
 800c702:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	88fa      	ldrh	r2, [r7, #6]
 800c70a:	811a      	strh	r2, [r3, #8]
 800c70c:	68fa      	ldr	r2, [r7, #12]
 800c70e:	6812      	ldr	r2, [r2, #0]
 800c710:	891b      	ldrh	r3, [r3, #8]
 800c712:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	681a      	ldr	r2, [r3, #0]
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 800c71c:	2300      	movs	r3, #0
}
 800c71e:	4618      	mov	r0, r3
 800c720:	3710      	adds	r7, #16
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}
 800c726:	bf00      	nop
 800c728:	0801f4f4 	.word	0x0801f4f4
 800c72c:	0801f5ac 	.word	0x0801f5ac
 800c730:	0801f544 	.word	0x0801f544

0800c734 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 800c734:	b480      	push	{r7}
 800c736:	b085      	sub	sp, #20
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	2b00      	cmp	r3, #0
 800c744:	db02      	blt.n	800c74c <tryget_socket_unconn_nouse+0x18>
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	2b03      	cmp	r3, #3
 800c74a:	dd01      	ble.n	800c750 <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 800c74c:	2300      	movs	r3, #0
 800c74e:	e003      	b.n	800c758 <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	011b      	lsls	r3, r3, #4
 800c754:	4a03      	ldr	r2, [pc, #12]	; (800c764 <tryget_socket_unconn_nouse+0x30>)
 800c756:	4413      	add	r3, r2
}
 800c758:	4618      	mov	r0, r3
 800c75a:	3714      	adds	r7, #20
 800c75c:	46bd      	mov	sp, r7
 800c75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c762:	4770      	bx	lr
 800c764:	200013f8 	.word	0x200013f8

0800c768 <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b084      	sub	sp, #16
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 800c770:	6878      	ldr	r0, [r7, #4]
 800c772:	f7ff ffdf 	bl	800c734 <tryget_socket_unconn_nouse>
 800c776:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 800c778:	68fb      	ldr	r3, [r7, #12]
}
 800c77a:	4618      	mov	r0, r3
 800c77c:	3710      	adds	r7, #16
 800c77e:	46bd      	mov	sp, r7
 800c780:	bd80      	pop	{r7, pc}

0800c782 <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 800c782:	b580      	push	{r7, lr}
 800c784:	b084      	sub	sp, #16
 800c786:	af00      	add	r7, sp, #0
 800c788:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	f7ff ffec 	bl	800c768 <tryget_socket_unconn>
 800c790:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d005      	beq.n	800c7a4 <tryget_socket+0x22>
    if (sock->conn) {
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d001      	beq.n	800c7a4 <tryget_socket+0x22>
      return sock;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	e000      	b.n	800c7a6 <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 800c7a4:	2300      	movs	r3, #0
}
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	3710      	adds	r7, #16
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	bd80      	pop	{r7, pc}
	...

0800c7b0 <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b084      	sub	sp, #16
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f7ff ffe2 	bl	800c782 <tryget_socket>
 800c7be:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d104      	bne.n	800c7d0 <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 800c7c6:	4b05      	ldr	r3, [pc, #20]	; (800c7dc <get_socket+0x2c>)
 800c7c8:	2209      	movs	r2, #9
 800c7ca:	601a      	str	r2, [r3, #0]
    return NULL;
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	e000      	b.n	800c7d2 <get_socket+0x22>
  }
  return sock;
 800c7d0:	68fb      	ldr	r3, [r7, #12]
}
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	3710      	adds	r7, #16
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	bd80      	pop	{r7, pc}
 800c7da:	bf00      	nop
 800c7dc:	20008334 	.word	0x20008334

0800c7e0 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b084      	sub	sp, #16
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
 800c7e8:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	60fb      	str	r3, [r7, #12]
 800c7ee:	e052      	b.n	800c896 <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 800c7f0:	f00c ff9a 	bl	8019728 <sys_arch_protect>
 800c7f4:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 800c7f6:	4a2c      	ldr	r2, [pc, #176]	; (800c8a8 <alloc_socket+0xc8>)
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	011b      	lsls	r3, r3, #4
 800c7fc:	4413      	add	r3, r2
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d142      	bne.n	800c88a <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 800c804:	4a28      	ldr	r2, [pc, #160]	; (800c8a8 <alloc_socket+0xc8>)
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	011b      	lsls	r3, r3, #4
 800c80a:	4413      	add	r3, r2
 800c80c:	687a      	ldr	r2, [r7, #4]
 800c80e:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 800c810:	68b8      	ldr	r0, [r7, #8]
 800c812:	f00c ff97 	bl	8019744 <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 800c816:	4a24      	ldr	r2, [pc, #144]	; (800c8a8 <alloc_socket+0xc8>)
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	011b      	lsls	r3, r3, #4
 800c81c:	4413      	add	r3, r2
 800c81e:	3304      	adds	r3, #4
 800c820:	2200      	movs	r2, #0
 800c822:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 800c824:	4a20      	ldr	r2, [pc, #128]	; (800c8a8 <alloc_socket+0xc8>)
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	011b      	lsls	r3, r3, #4
 800c82a:	4413      	add	r3, r2
 800c82c:	330e      	adds	r3, #14
 800c82e:	781b      	ldrb	r3, [r3, #0]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d006      	beq.n	800c842 <alloc_socket+0x62>
 800c834:	4b1d      	ldr	r3, [pc, #116]	; (800c8ac <alloc_socket+0xcc>)
 800c836:	f240 220e 	movw	r2, #526	; 0x20e
 800c83a:	491d      	ldr	r1, [pc, #116]	; (800c8b0 <alloc_socket+0xd0>)
 800c83c:	481d      	ldr	r0, [pc, #116]	; (800c8b4 <alloc_socket+0xd4>)
 800c83e:	f010 f957 	bl	801caf0 <iprintf>
      sockets[i].rcvevent   = 0;
 800c842:	4a19      	ldr	r2, [pc, #100]	; (800c8a8 <alloc_socket+0xc8>)
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	011b      	lsls	r3, r3, #4
 800c848:	4413      	add	r3, r2
 800c84a:	3308      	adds	r3, #8
 800c84c:	2200      	movs	r2, #0
 800c84e:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	781b      	ldrb	r3, [r3, #0]
 800c854:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c858:	2b10      	cmp	r3, #16
 800c85a:	d102      	bne.n	800c862 <alloc_socket+0x82>
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d001      	beq.n	800c866 <alloc_socket+0x86>
 800c862:	2301      	movs	r3, #1
 800c864:	e000      	b.n	800c868 <alloc_socket+0x88>
 800c866:	2300      	movs	r3, #0
 800c868:	b299      	uxth	r1, r3
 800c86a:	4a0f      	ldr	r2, [pc, #60]	; (800c8a8 <alloc_socket+0xc8>)
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	011b      	lsls	r3, r3, #4
 800c870:	4413      	add	r3, r2
 800c872:	330a      	adds	r3, #10
 800c874:	460a      	mov	r2, r1
 800c876:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 800c878:	4a0b      	ldr	r2, [pc, #44]	; (800c8a8 <alloc_socket+0xc8>)
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	011b      	lsls	r3, r3, #4
 800c87e:	4413      	add	r3, r2
 800c880:	330c      	adds	r3, #12
 800c882:	2200      	movs	r2, #0
 800c884:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	e00a      	b.n	800c8a0 <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 800c88a:	68b8      	ldr	r0, [r7, #8]
 800c88c:	f00c ff5a 	bl	8019744 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	3301      	adds	r3, #1
 800c894:	60fb      	str	r3, [r7, #12]
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	2b03      	cmp	r3, #3
 800c89a:	dda9      	ble.n	800c7f0 <alloc_socket+0x10>
  }
  return -1;
 800c89c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	3710      	adds	r7, #16
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}
 800c8a8:	200013f8 	.word	0x200013f8
 800c8ac:	0801f68c 	.word	0x0801f68c
 800c8b0:	0801f6c0 	.word	0x0801f6c0
 800c8b4:	0801f6e0 	.word	0x0801f6e0

0800c8b8 <free_socket_locked>:
 * @param lastdata lastdata is stored here, must be freed externally
 */
static int
free_socket_locked(struct lwip_sock *sock, int is_tcp, struct netconn **conn,
                   union lwip_sock_lastdata *lastdata)
{
 800c8b8:	b480      	push	{r7}
 800c8ba:	b085      	sub	sp, #20
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	60f8      	str	r0, [r7, #12]
 800c8c0:	60b9      	str	r1, [r7, #8]
 800c8c2:	607a      	str	r2, [r7, #4]
 800c8c4:	603b      	str	r3, [r7, #0]
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  LWIP_UNUSED_ARG(is_tcp);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  *lastdata = sock->lastdata;
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	68fa      	ldr	r2, [r7, #12]
 800c8ca:	6852      	ldr	r2, [r2, #4]
 800c8cc:	601a      	str	r2, [r3, #0]
  sock->lastdata.pbuf = NULL;
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	605a      	str	r2, [r3, #4]
  *conn = sock->conn;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	681a      	ldr	r2, [r3, #0]
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	601a      	str	r2, [r3, #0]
  sock->conn = NULL;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	2200      	movs	r2, #0
 800c8e0:	601a      	str	r2, [r3, #0]
  return 1;
 800c8e2:	2301      	movs	r3, #1
}
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	3714      	adds	r7, #20
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ee:	4770      	bx	lr

0800c8f0 <free_socket_free_elements>:

/** Free a socket's leftover members.
 */
static void
free_socket_free_elements(int is_tcp, struct netconn *conn, union lwip_sock_lastdata *lastdata)
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b084      	sub	sp, #16
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	60f8      	str	r0, [r7, #12]
 800c8f8:	60b9      	str	r1, [r7, #8]
 800c8fa:	607a      	str	r2, [r7, #4]
  if (lastdata->pbuf != NULL) {
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d00d      	beq.n	800c920 <free_socket_free_elements+0x30>
    if (is_tcp) {
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d005      	beq.n	800c916 <free_socket_free_elements+0x26>
      pbuf_free(lastdata->pbuf);
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	4618      	mov	r0, r3
 800c910:	f003 f86c 	bl	800f9ec <pbuf_free>
 800c914:	e004      	b.n	800c920 <free_socket_free_elements+0x30>
    } else {
      netbuf_delete(lastdata->netbuf);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	4618      	mov	r0, r3
 800c91c:	f7ff fe78 	bl	800c610 <netbuf_delete>
    }
  }
  if (conn != NULL) {
 800c920:	68bb      	ldr	r3, [r7, #8]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d002      	beq.n	800c92c <free_socket_free_elements+0x3c>
    /* netconn_prepare_delete() has already been called, here we only free the conn */
    netconn_delete(conn);
 800c926:	68b8      	ldr	r0, [r7, #8]
 800c928:	f7fd fd04 	bl	800a334 <netconn_delete>
  }
}
 800c92c:	bf00      	nop
 800c92e:	3710      	adds	r7, #16
 800c930:	46bd      	mov	sp, r7
 800c932:	bd80      	pop	{r7, pc}

0800c934 <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b086      	sub	sp, #24
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
 800c93c:	6039      	str	r1, [r7, #0]
  struct netconn *conn;
  union lwip_sock_lastdata lastdata;
  SYS_ARCH_DECL_PROTECT(lev);

  /* Protect socket array */
  SYS_ARCH_PROTECT(lev);
 800c93e:	f00c fef3 	bl	8019728 <sys_arch_protect>
 800c942:	6178      	str	r0, [r7, #20]

  freed = free_socket_locked(sock, is_tcp, &conn, &lastdata);
 800c944:	f107 0308 	add.w	r3, r7, #8
 800c948:	f107 020c 	add.w	r2, r7, #12
 800c94c:	6839      	ldr	r1, [r7, #0]
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f7ff ffb2 	bl	800c8b8 <free_socket_locked>
 800c954:	6138      	str	r0, [r7, #16]
  SYS_ARCH_UNPROTECT(lev);
 800c956:	6978      	ldr	r0, [r7, #20]
 800c958:	f00c fef4 	bl	8019744 <sys_arch_unprotect>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (freed) {
 800c95c:	693b      	ldr	r3, [r7, #16]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d006      	beq.n	800c970 <free_socket+0x3c>
    free_socket_free_elements(is_tcp, conn, &lastdata);
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	f107 0208 	add.w	r2, r7, #8
 800c968:	4619      	mov	r1, r3
 800c96a:	6838      	ldr	r0, [r7, #0]
 800c96c:	f7ff ffc0 	bl	800c8f0 <free_socket_free_elements>
  }
}
 800c970:	bf00      	nop
 800c972:	3718      	adds	r7, #24
 800c974:	46bd      	mov	sp, r7
 800c976:	bd80      	pop	{r7, pc}

0800c978 <lwip_accept>:
 * Exceptions are documented!
 */

int
lwip_accept(int s, struct sockaddr *addr, socklen_t *addrlen)
{
 800c978:	b590      	push	{r4, r7, lr}
 800c97a:	b099      	sub	sp, #100	; 0x64
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	60f8      	str	r0, [r7, #12]
 800c980:	60b9      	str	r1, [r7, #8]
 800c982:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock, *nsock;
  struct netconn *newconn;
  ip_addr_t naddr;
  u16_t port = 0;
 800c984:	2300      	movs	r3, #0
 800c986:	84fb      	strh	r3, [r7, #38]	; 0x26
  err_t err;
  int recvevent;
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d)...\n", s));
  sock = get_socket(s);
 800c988:	68f8      	ldr	r0, [r7, #12]
 800c98a:	f7ff ff11 	bl	800c7b0 <get_socket>
 800c98e:	65b8      	str	r0, [r7, #88]	; 0x58
  if (!sock) {
 800c990:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c992:	2b00      	cmp	r3, #0
 800c994:	d102      	bne.n	800c99c <lwip_accept+0x24>
    return -1;
 800c996:	f04f 33ff 	mov.w	r3, #4294967295
 800c99a:	e0f8      	b.n	800cb8e <lwip_accept+0x216>
  }

  /* wait for a new connection */
  err = netconn_accept(sock->conn, &newconn);
 800c99c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800c9a4:	4611      	mov	r1, r2
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	f7fd fd96 	bl	800a4d8 <netconn_accept>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (err != ERR_OK) {
 800c9b2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d02c      	beq.n	800ca14 <lwip_accept+0x9c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_acept failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800c9ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	781b      	ldrb	r3, [r3, #0]
 800c9c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c9c4:	2b10      	cmp	r3, #16
 800c9c6:	d008      	beq.n	800c9da <lwip_accept+0x62>
      sock_set_errno(sock, EOPNOTSUPP);
 800c9c8:	235f      	movs	r3, #95	; 0x5f
 800c9ca:	633b      	str	r3, [r7, #48]	; 0x30
 800c9cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d01d      	beq.n	800ca0e <lwip_accept+0x96>
 800c9d2:	4a71      	ldr	r2, [pc, #452]	; (800cb98 <lwip_accept+0x220>)
 800c9d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9d6:	6013      	str	r3, [r2, #0]
 800c9d8:	e019      	b.n	800ca0e <lwip_accept+0x96>
    } else if (err == ERR_CLSD) {
 800c9da:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800c9de:	f113 0f0f 	cmn.w	r3, #15
 800c9e2:	d108      	bne.n	800c9f6 <lwip_accept+0x7e>
      sock_set_errno(sock, EINVAL);
 800c9e4:	2316      	movs	r3, #22
 800c9e6:	637b      	str	r3, [r7, #52]	; 0x34
 800c9e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d00f      	beq.n	800ca0e <lwip_accept+0x96>
 800c9ee:	4a6a      	ldr	r2, [pc, #424]	; (800cb98 <lwip_accept+0x220>)
 800c9f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9f2:	6013      	str	r3, [r2, #0]
 800c9f4:	e00b      	b.n	800ca0e <lwip_accept+0x96>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 800c9f6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	f7ff fdea 	bl	800c5d4 <err_to_errno>
 800ca00:	63b8      	str	r0, [r7, #56]	; 0x38
 800ca02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d002      	beq.n	800ca0e <lwip_accept+0x96>
 800ca08:	4a63      	ldr	r2, [pc, #396]	; (800cb98 <lwip_accept+0x220>)
 800ca0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca0c:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 800ca0e:	f04f 33ff 	mov.w	r3, #4294967295
 800ca12:	e0bc      	b.n	800cb8e <lwip_accept+0x216>
  }
  LWIP_ASSERT("newconn != NULL", newconn != NULL);
 800ca14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d106      	bne.n	800ca28 <lwip_accept+0xb0>
 800ca1a:	4b60      	ldr	r3, [pc, #384]	; (800cb9c <lwip_accept+0x224>)
 800ca1c:	f240 228b 	movw	r2, #651	; 0x28b
 800ca20:	495f      	ldr	r1, [pc, #380]	; (800cba0 <lwip_accept+0x228>)
 800ca22:	4860      	ldr	r0, [pc, #384]	; (800cba4 <lwip_accept+0x22c>)
 800ca24:	f010 f864 	bl	801caf0 <iprintf>

  newsock = alloc_socket(newconn, 1);
 800ca28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca2a:	2101      	movs	r1, #1
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	f7ff fed7 	bl	800c7e0 <alloc_socket>
 800ca32:	6538      	str	r0, [r7, #80]	; 0x50
  if (newsock == -1) {
 800ca34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca3a:	d10e      	bne.n	800ca5a <lwip_accept+0xe2>
    netconn_delete(newconn);
 800ca3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca3e:	4618      	mov	r0, r3
 800ca40:	f7fd fc78 	bl	800a334 <netconn_delete>
    sock_set_errno(sock, ENFILE);
 800ca44:	2317      	movs	r3, #23
 800ca46:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d002      	beq.n	800ca54 <lwip_accept+0xdc>
 800ca4e:	4a52      	ldr	r2, [pc, #328]	; (800cb98 <lwip_accept+0x220>)
 800ca50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca52:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800ca54:	f04f 33ff 	mov.w	r3, #4294967295
 800ca58:	e099      	b.n	800cb8e <lwip_accept+0x216>
  }
  LWIP_ASSERT("invalid socket index", (newsock >= LWIP_SOCKET_OFFSET) && (newsock < NUM_SOCKETS + LWIP_SOCKET_OFFSET));
 800ca5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	db02      	blt.n	800ca66 <lwip_accept+0xee>
 800ca60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca62:	2b03      	cmp	r3, #3
 800ca64:	dd06      	ble.n	800ca74 <lwip_accept+0xfc>
 800ca66:	4b4d      	ldr	r3, [pc, #308]	; (800cb9c <lwip_accept+0x224>)
 800ca68:	f44f 7225 	mov.w	r2, #660	; 0x294
 800ca6c:	494e      	ldr	r1, [pc, #312]	; (800cba8 <lwip_accept+0x230>)
 800ca6e:	484d      	ldr	r0, [pc, #308]	; (800cba4 <lwip_accept+0x22c>)
 800ca70:	f010 f83e 	bl	801caf0 <iprintf>
  nsock = &sockets[newsock - LWIP_SOCKET_OFFSET];
 800ca74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca76:	011b      	lsls	r3, r3, #4
 800ca78:	4a4c      	ldr	r2, [pc, #304]	; (800cbac <lwip_accept+0x234>)
 800ca7a:	4413      	add	r3, r2
 800ca7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  /* See event_callback: If data comes in right away after an accept, even
   * though the server task might not have created a new socket yet.
   * In that case, newconn->socket is counted down (newconn->socket--),
   * so nsock->rcvevent is >= 1 here!
   */
  SYS_ARCH_PROTECT(lev);
 800ca7e:	f00c fe53 	bl	8019728 <sys_arch_protect>
 800ca82:	64b8      	str	r0, [r7, #72]	; 0x48
  recvevent = (s16_t)(-1 - newconn->socket);
 800ca84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca86:	699b      	ldr	r3, [r3, #24]
 800ca88:	b21b      	sxth	r3, r3
 800ca8a:	43db      	mvns	r3, r3
 800ca8c:	b21b      	sxth	r3, r3
 800ca8e:	65fb      	str	r3, [r7, #92]	; 0x5c
  newconn->socket = newsock;
 800ca90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca92:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ca94:	619a      	str	r2, [r3, #24]
  SYS_ARCH_UNPROTECT(lev);
 800ca96:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ca98:	f00c fe54 	bl	8019744 <sys_arch_unprotect>

  if (newconn->callback) {
 800ca9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d012      	beq.n	800caca <lwip_accept+0x152>
    LOCK_TCPIP_CORE();
 800caa4:	4842      	ldr	r0, [pc, #264]	; (800cbb0 <lwip_accept+0x238>)
 800caa6:	f00c fe03 	bl	80196b0 <sys_mutex_lock>
    while (recvevent > 0) {
 800caaa:	e008      	b.n	800cabe <lwip_accept+0x146>
      recvevent--;
 800caac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800caae:	3b01      	subs	r3, #1
 800cab0:	65fb      	str	r3, [r7, #92]	; 0x5c
      newconn->callback(newconn, NETCONN_EVT_RCVPLUS, 0);
 800cab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cab6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cab8:	2200      	movs	r2, #0
 800caba:	2100      	movs	r1, #0
 800cabc:	4798      	blx	r3
    while (recvevent > 0) {
 800cabe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	dcf3      	bgt.n	800caac <lwip_accept+0x134>
    }
    UNLOCK_TCPIP_CORE();
 800cac4:	483a      	ldr	r0, [pc, #232]	; (800cbb0 <lwip_accept+0x238>)
 800cac6:	f00c fe02 	bl	80196ce <sys_mutex_unlock>
  }

  /* Note that POSIX only requires us to check addr is non-NULL. addrlen must
   * not be NULL if addr is valid.
   */
  if ((addr != NULL) && (addrlen != NULL)) {
 800caca:	68bb      	ldr	r3, [r7, #8]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d055      	beq.n	800cb7c <lwip_accept+0x204>
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d052      	beq.n	800cb7c <lwip_accept+0x204>
    union sockaddr_aligned tempaddr;
    /* get the IP address and port of the remote host */
    err = netconn_peer(newconn, &naddr, &port);
 800cad6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cad8:	f107 0226 	add.w	r2, r7, #38	; 0x26
 800cadc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800cae0:	2300      	movs	r3, #0
 800cae2:	f7fd fc43 	bl	800a36c <netconn_getaddr>
 800cae6:	4603      	mov	r3, r0
 800cae8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    if (err != ERR_OK) {
 800caec:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d016      	beq.n	800cb22 <lwip_accept+0x1aa>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_peer failed, err=%d\n", s, err));
      netconn_delete(newconn);
 800caf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caf6:	4618      	mov	r0, r3
 800caf8:	f7fd fc1c 	bl	800a334 <netconn_delete>
      free_socket(nsock, 1);
 800cafc:	2101      	movs	r1, #1
 800cafe:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800cb00:	f7ff ff18 	bl	800c934 <free_socket>
      sock_set_errno(sock, err_to_errno(err));
 800cb04:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800cb08:	4618      	mov	r0, r3
 800cb0a:	f7ff fd63 	bl	800c5d4 <err_to_errno>
 800cb0e:	6478      	str	r0, [r7, #68]	; 0x44
 800cb10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d002      	beq.n	800cb1c <lwip_accept+0x1a4>
 800cb16:	4a20      	ldr	r2, [pc, #128]	; (800cb98 <lwip_accept+0x220>)
 800cb18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb1a:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 800cb1c:	f04f 33ff 	mov.w	r3, #4294967295
 800cb20:	e035      	b.n	800cb8e <lwip_accept+0x216>
    }

    IPADDR_PORT_TO_SOCKADDR(&tempaddr, &naddr, port);
 800cb22:	f107 0314 	add.w	r3, r7, #20
 800cb26:	2210      	movs	r2, #16
 800cb28:	701a      	strb	r2, [r3, #0]
 800cb2a:	f107 0314 	add.w	r3, r7, #20
 800cb2e:	2202      	movs	r2, #2
 800cb30:	705a      	strb	r2, [r3, #1]
 800cb32:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cb34:	f107 0414 	add.w	r4, r7, #20
 800cb38:	4618      	mov	r0, r3
 800cb3a:	f001 fb41 	bl	800e1c0 <lwip_htons>
 800cb3e:	4603      	mov	r3, r0
 800cb40:	8063      	strh	r3, [r4, #2]
 800cb42:	f107 0314 	add.w	r3, r7, #20
 800cb46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb48:	605a      	str	r2, [r3, #4]
 800cb4a:	f107 0314 	add.w	r3, r7, #20
 800cb4e:	3308      	adds	r3, #8
 800cb50:	2208      	movs	r2, #8
 800cb52:	2100      	movs	r1, #0
 800cb54:	4618      	mov	r0, r3
 800cb56:	f00f f955 	bl	801be04 <memset>
    if (*addrlen > tempaddr.sa.sa_len) {
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	7d3a      	ldrb	r2, [r7, #20]
 800cb60:	4293      	cmp	r3, r2
 800cb62:	d903      	bls.n	800cb6c <lwip_accept+0x1f4>
      *addrlen = tempaddr.sa.sa_len;
 800cb64:	7d3b      	ldrb	r3, [r7, #20]
 800cb66:	461a      	mov	r2, r3
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	601a      	str	r2, [r3, #0]
    }
    MEMCPY(addr, &tempaddr, *addrlen);
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681a      	ldr	r2, [r3, #0]
 800cb70:	f107 0314 	add.w	r3, r7, #20
 800cb74:	4619      	mov	r1, r3
 800cb76:	68b8      	ldr	r0, [r7, #8]
 800cb78:	f00f f91c 	bl	801bdb4 <memcpy>
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F"\n", port));
  } else {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d) returning new sock=%d", s, newsock));
  }

  sock_set_errno(sock, 0);
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	643b      	str	r3, [r7, #64]	; 0x40
 800cb80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d002      	beq.n	800cb8c <lwip_accept+0x214>
 800cb86:	4a04      	ldr	r2, [pc, #16]	; (800cb98 <lwip_accept+0x220>)
 800cb88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb8a:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  done_socket(nsock);
  return newsock;
 800cb8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800cb8e:	4618      	mov	r0, r3
 800cb90:	3764      	adds	r7, #100	; 0x64
 800cb92:	46bd      	mov	sp, r7
 800cb94:	bd90      	pop	{r4, r7, pc}
 800cb96:	bf00      	nop
 800cb98:	20008334 	.word	0x20008334
 800cb9c:	0801f68c 	.word	0x0801f68c
 800cba0:	0801f708 	.word	0x0801f708
 800cba4:	0801f6e0 	.word	0x0801f6e0
 800cba8:	0801f718 	.word	0x0801f718
 800cbac:	200013f8 	.word	0x200013f8
 800cbb0:	20004c00 	.word	0x20004c00

0800cbb4 <lwip_bind>:

int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b08a      	sub	sp, #40	; 0x28
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	60f8      	str	r0, [r7, #12]
 800cbbc:	60b9      	str	r1, [r7, #8]
 800cbbe:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
 800cbc0:	68f8      	ldr	r0, [r7, #12]
 800cbc2:	f7ff fdf5 	bl	800c7b0 <get_socket>
 800cbc6:	6278      	str	r0, [r7, #36]	; 0x24
  if (!sock) {
 800cbc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d102      	bne.n	800cbd4 <lwip_bind+0x20>
    return -1;
 800cbce:	f04f 33ff 	mov.w	r3, #4294967295
 800cbd2:	e051      	b.n	800cc78 <lwip_bind+0xc4>
    done_socket(sock);
    return -1;
  }

  /* check size, family and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	2b10      	cmp	r3, #16
 800cbd8:	d108      	bne.n	800cbec <lwip_bind+0x38>
 800cbda:	68bb      	ldr	r3, [r7, #8]
 800cbdc:	785b      	ldrb	r3, [r3, #1]
 800cbde:	2b02      	cmp	r3, #2
 800cbe0:	d104      	bne.n	800cbec <lwip_bind+0x38>
 800cbe2:	68bb      	ldr	r3, [r7, #8]
 800cbe4:	f003 0303 	and.w	r3, r3, #3
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d014      	beq.n	800cc16 <lwip_bind+0x62>
 800cbec:	4b24      	ldr	r3, [pc, #144]	; (800cc80 <lwip_bind+0xcc>)
 800cbee:	f240 22e2 	movw	r2, #738	; 0x2e2
 800cbf2:	4924      	ldr	r1, [pc, #144]	; (800cc84 <lwip_bind+0xd0>)
 800cbf4:	4824      	ldr	r0, [pc, #144]	; (800cc88 <lwip_bind+0xd4>)
 800cbf6:	f00f ff7b 	bl	801caf0 <iprintf>
 800cbfa:	f06f 000f 	mvn.w	r0, #15
 800cbfe:	f7ff fce9 	bl	800c5d4 <err_to_errno>
 800cc02:	6178      	str	r0, [r7, #20]
 800cc04:	697b      	ldr	r3, [r7, #20]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d002      	beq.n	800cc10 <lwip_bind+0x5c>
 800cc0a:	4a20      	ldr	r2, [pc, #128]	; (800cc8c <lwip_bind+0xd8>)
 800cc0c:	697b      	ldr	r3, [r7, #20]
 800cc0e:	6013      	str	r3, [r2, #0]
 800cc10:	f04f 33ff 	mov.w	r3, #4294967295
 800cc14:	e030      	b.n	800cc78 <lwip_bind+0xc4>
             IS_SOCK_ADDR_TYPE_VALID(name) && IS_SOCK_ADDR_ALIGNED(name)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(namelen);

  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
 800cc16:	68bb      	ldr	r3, [r7, #8]
 800cc18:	685b      	ldr	r3, [r3, #4]
 800cc1a:	613b      	str	r3, [r7, #16]
 800cc1c:	68bb      	ldr	r3, [r7, #8]
 800cc1e:	885b      	ldrh	r3, [r3, #2]
 800cc20:	4618      	mov	r0, r3
 800cc22:	f001 facd 	bl	800e1c0 <lwip_htons>
 800cc26:	4603      	mov	r3, r0
 800cc28:	847b      	strh	r3, [r7, #34]	; 0x22
    unmap_ipv4_mapped_ipv6(ip_2_ip4(&local_addr), ip_2_ip6(&local_addr));
    IP_SET_TYPE_VAL(local_addr, IPADDR_TYPE_V4);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  err = netconn_bind(sock->conn, &local_addr, local_port);
 800cc2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800cc30:	f107 0110 	add.w	r1, r7, #16
 800cc34:	4618      	mov	r0, r3
 800cc36:	f7fd fbeb 	bl	800a410 <netconn_bind>
 800cc3a:	4603      	mov	r3, r0
 800cc3c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

  if (err != ERR_OK) {
 800cc40:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d00e      	beq.n	800cc66 <lwip_bind+0xb2>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 800cc48:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	f7ff fcc1 	bl	800c5d4 <err_to_errno>
 800cc52:	61b8      	str	r0, [r7, #24]
 800cc54:	69bb      	ldr	r3, [r7, #24]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d002      	beq.n	800cc60 <lwip_bind+0xac>
 800cc5a:	4a0c      	ldr	r2, [pc, #48]	; (800cc8c <lwip_bind+0xd8>)
 800cc5c:	69bb      	ldr	r3, [r7, #24]
 800cc5e:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800cc60:	f04f 33ff 	mov.w	r3, #4294967295
 800cc64:	e008      	b.n	800cc78 <lwip_bind+0xc4>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 800cc66:	2300      	movs	r3, #0
 800cc68:	61fb      	str	r3, [r7, #28]
 800cc6a:	69fb      	ldr	r3, [r7, #28]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d002      	beq.n	800cc76 <lwip_bind+0xc2>
 800cc70:	4a06      	ldr	r2, [pc, #24]	; (800cc8c <lwip_bind+0xd8>)
 800cc72:	69fb      	ldr	r3, [r7, #28]
 800cc74:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800cc76:	2300      	movs	r3, #0
}
 800cc78:	4618      	mov	r0, r3
 800cc7a:	3728      	adds	r7, #40	; 0x28
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	bd80      	pop	{r7, pc}
 800cc80:	0801f68c 	.word	0x0801f68c
 800cc84:	0801f730 	.word	0x0801f730
 800cc88:	0801f6e0 	.word	0x0801f6e0
 800cc8c:	20008334 	.word	0x20008334

0800cc90 <lwip_close>:

int
lwip_close(int s)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b086      	sub	sp, #24
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock;
  int is_tcp = 0;
 800cc98:	2300      	movs	r3, #0
 800cc9a:	617b      	str	r3, [r7, #20]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
 800cc9c:	6878      	ldr	r0, [r7, #4]
 800cc9e:	f7ff fd87 	bl	800c7b0 <get_socket>
 800cca2:	6138      	str	r0, [r7, #16]
  if (!sock) {
 800cca4:	693b      	ldr	r3, [r7, #16]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d102      	bne.n	800ccb0 <lwip_close+0x20>
    return -1;
 800ccaa:	f04f 33ff 	mov.w	r3, #4294967295
 800ccae:	e039      	b.n	800cd24 <lwip_close+0x94>
  }

  if (sock->conn != NULL) {
 800ccb0:	693b      	ldr	r3, [r7, #16]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d00b      	beq.n	800ccd0 <lwip_close+0x40>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 800ccb8:	693b      	ldr	r3, [r7, #16]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	781b      	ldrb	r3, [r3, #0]
 800ccbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ccc2:	2b10      	cmp	r3, #16
 800ccc4:	bf0c      	ite	eq
 800ccc6:	2301      	moveq	r3, #1
 800ccc8:	2300      	movne	r3, #0
 800ccca:	b2db      	uxtb	r3, r3
 800cccc:	617b      	str	r3, [r7, #20]
 800ccce:	e00a      	b.n	800cce6 <lwip_close+0x56>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata.pbuf == NULL);
 800ccd0:	693b      	ldr	r3, [r7, #16]
 800ccd2:	685b      	ldr	r3, [r3, #4]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d006      	beq.n	800cce6 <lwip_close+0x56>
 800ccd8:	4b14      	ldr	r3, [pc, #80]	; (800cd2c <lwip_close+0x9c>)
 800ccda:	f44f 7245 	mov.w	r2, #788	; 0x314
 800ccde:	4914      	ldr	r1, [pc, #80]	; (800cd30 <lwip_close+0xa0>)
 800cce0:	4814      	ldr	r0, [pc, #80]	; (800cd34 <lwip_close+0xa4>)
 800cce2:	f00f ff05 	bl	801caf0 <iprintf>
#if LWIP_IPV6_MLD
  /* drop all possibly joined MLD6 memberships */
  lwip_socket_drop_registered_mld6_memberships(s);
#endif /* LWIP_IPV6_MLD */

  err = netconn_prepare_delete(sock->conn);
 800cce6:	693b      	ldr	r3, [r7, #16]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	4618      	mov	r0, r3
 800ccec:	f7fd fafe 	bl	800a2ec <netconn_prepare_delete>
 800ccf0:	4603      	mov	r3, r0
 800ccf2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800ccf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d00e      	beq.n	800cd1a <lwip_close+0x8a>
    sock_set_errno(sock, err_to_errno(err));
 800ccfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd00:	4618      	mov	r0, r3
 800cd02:	f7ff fc67 	bl	800c5d4 <err_to_errno>
 800cd06:	60b8      	str	r0, [r7, #8]
 800cd08:	68bb      	ldr	r3, [r7, #8]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d002      	beq.n	800cd14 <lwip_close+0x84>
 800cd0e:	4a0a      	ldr	r2, [pc, #40]	; (800cd38 <lwip_close+0xa8>)
 800cd10:	68bb      	ldr	r3, [r7, #8]
 800cd12:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800cd14:	f04f 33ff 	mov.w	r3, #4294967295
 800cd18:	e004      	b.n	800cd24 <lwip_close+0x94>
  }

  free_socket(sock, is_tcp);
 800cd1a:	6979      	ldr	r1, [r7, #20]
 800cd1c:	6938      	ldr	r0, [r7, #16]
 800cd1e:	f7ff fe09 	bl	800c934 <free_socket>
  set_errno(0);
  return 0;
 800cd22:	2300      	movs	r3, #0
}
 800cd24:	4618      	mov	r0, r3
 800cd26:	3718      	adds	r7, #24
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	bd80      	pop	{r7, pc}
 800cd2c:	0801f68c 	.word	0x0801f68c
 800cd30:	0801f74c 	.word	0x0801f74c
 800cd34:	0801f6e0 	.word	0x0801f6e0
 800cd38:	20008334 	.word	0x20008334

0800cd3c <lwip_listen>:
 * @param backlog (ATTENTION: needs TCP_LISTEN_BACKLOG=1)
 * @return 0 on success, non-zero on failure
 */
int
lwip_listen(int s, int backlog)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b088      	sub	sp, #32
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
 800cd44:	6039      	str	r1, [r7, #0]
  struct lwip_sock *sock;
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d, backlog=%d)\n", s, backlog));

  sock = get_socket(s);
 800cd46:	6878      	ldr	r0, [r7, #4]
 800cd48:	f7ff fd32 	bl	800c7b0 <get_socket>
 800cd4c:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800cd4e:	69fb      	ldr	r3, [r7, #28]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d102      	bne.n	800cd5a <lwip_listen+0x1e>
    return -1;
 800cd54:	f04f 33ff 	mov.w	r3, #4294967295
 800cd58:	e03e      	b.n	800cdd8 <lwip_listen+0x9c>
  }

  /* limit the "backlog" parameter to fit in an u8_t */
  backlog = LWIP_MIN(LWIP_MAX(backlog, 0), 0xff);
 800cd5a:	683b      	ldr	r3, [r7, #0]
 800cd5c:	2bfe      	cmp	r3, #254	; 0xfe
 800cd5e:	dc03      	bgt.n	800cd68 <lwip_listen+0x2c>
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800cd66:	e000      	b.n	800cd6a <lwip_listen+0x2e>
 800cd68:	23ff      	movs	r3, #255	; 0xff
 800cd6a:	603b      	str	r3, [r7, #0]

  err = netconn_listen_with_backlog(sock->conn, (u8_t)backlog);
 800cd6c:	69fb      	ldr	r3, [r7, #28]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	683a      	ldr	r2, [r7, #0]
 800cd72:	b2d2      	uxtb	r2, r2
 800cd74:	4611      	mov	r1, r2
 800cd76:	4618      	mov	r0, r3
 800cd78:	f7fd fb82 	bl	800a480 <netconn_listen_with_backlog>
 800cd7c:	4603      	mov	r3, r0
 800cd7e:	76fb      	strb	r3, [r7, #27]

  if (err != ERR_OK) {
 800cd80:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d01e      	beq.n	800cdc6 <lwip_listen+0x8a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d) failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800cd88:	69fb      	ldr	r3, [r7, #28]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	781b      	ldrb	r3, [r3, #0]
 800cd8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cd92:	2b10      	cmp	r3, #16
 800cd94:	d008      	beq.n	800cda8 <lwip_listen+0x6c>
      sock_set_errno(sock, EOPNOTSUPP);
 800cd96:	235f      	movs	r3, #95	; 0x5f
 800cd98:	60fb      	str	r3, [r7, #12]
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d00f      	beq.n	800cdc0 <lwip_listen+0x84>
 800cda0:	4a0f      	ldr	r2, [pc, #60]	; (800cde0 <lwip_listen+0xa4>)
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	6013      	str	r3, [r2, #0]
 800cda6:	e00b      	b.n	800cdc0 <lwip_listen+0x84>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 800cda8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800cdac:	4618      	mov	r0, r3
 800cdae:	f7ff fc11 	bl	800c5d4 <err_to_errno>
 800cdb2:	6138      	str	r0, [r7, #16]
 800cdb4:	693b      	ldr	r3, [r7, #16]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d002      	beq.n	800cdc0 <lwip_listen+0x84>
 800cdba:	4a09      	ldr	r2, [pc, #36]	; (800cde0 <lwip_listen+0xa4>)
 800cdbc:	693b      	ldr	r3, [r7, #16]
 800cdbe:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 800cdc0:	f04f 33ff 	mov.w	r3, #4294967295
 800cdc4:	e008      	b.n	800cdd8 <lwip_listen+0x9c>
  }

  sock_set_errno(sock, 0);
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	617b      	str	r3, [r7, #20]
 800cdca:	697b      	ldr	r3, [r7, #20]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d002      	beq.n	800cdd6 <lwip_listen+0x9a>
 800cdd0:	4a03      	ldr	r2, [pc, #12]	; (800cde0 <lwip_listen+0xa4>)
 800cdd2:	697b      	ldr	r3, [r7, #20]
 800cdd4:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800cdd6:	2300      	movs	r3, #0
}
 800cdd8:	4618      	mov	r0, r3
 800cdda:	3720      	adds	r7, #32
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bd80      	pop	{r7, pc}
 800cde0:	20008334 	.word	0x20008334

0800cde4 <lwip_recv_tcp>:
 * until "len" bytes are received or we're otherwise done.
 * Keeps sock->lastdata for peeking or partly copying.
 */
static ssize_t
lwip_recv_tcp(struct lwip_sock *sock, void *mem, size_t len, int flags)
{
 800cde4:	b580      	push	{r7, lr}
 800cde6:	b08c      	sub	sp, #48	; 0x30
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	60f8      	str	r0, [r7, #12]
 800cdec:	60b9      	str	r1, [r7, #8]
 800cdee:	607a      	str	r2, [r7, #4]
 800cdf0:	603b      	str	r3, [r7, #0]
  u8_t apiflags = NETCONN_NOAUTORCVD;
 800cdf2:	2308      	movs	r3, #8
 800cdf4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  ssize_t recvd = 0;
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	62bb      	str	r3, [r7, #40]	; 0x28
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	db01      	blt.n	800ce06 <lwip_recv_tcp+0x22>
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	e001      	b.n	800ce0a <lwip_recv_tcp+0x26>
 800ce06:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ce0a:	627b      	str	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("no socket given", sock != NULL);
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d106      	bne.n	800ce20 <lwip_recv_tcp+0x3c>
 800ce12:	4b74      	ldr	r3, [pc, #464]	; (800cfe4 <lwip_recv_tcp+0x200>)
 800ce14:	f240 329e 	movw	r2, #926	; 0x39e
 800ce18:	4973      	ldr	r1, [pc, #460]	; (800cfe8 <lwip_recv_tcp+0x204>)
 800ce1a:	4874      	ldr	r0, [pc, #464]	; (800cfec <lwip_recv_tcp+0x208>)
 800ce1c:	f00f fe68 	bl	801caf0 <iprintf>
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	781b      	ldrb	r3, [r3, #0]
 800ce26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ce2a:	2b10      	cmp	r3, #16
 800ce2c:	d006      	beq.n	800ce3c <lwip_recv_tcp+0x58>
 800ce2e:	4b6d      	ldr	r3, [pc, #436]	; (800cfe4 <lwip_recv_tcp+0x200>)
 800ce30:	f240 329f 	movw	r2, #927	; 0x39f
 800ce34:	496e      	ldr	r1, [pc, #440]	; (800cff0 <lwip_recv_tcp+0x20c>)
 800ce36:	486d      	ldr	r0, [pc, #436]	; (800cfec <lwip_recv_tcp+0x208>)
 800ce38:	f00f fe5a 	bl	801caf0 <iprintf>

  if (flags & MSG_DONTWAIT) {
 800ce3c:	683b      	ldr	r3, [r7, #0]
 800ce3e:	f003 0308 	and.w	r3, r3, #8
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d005      	beq.n	800ce52 <lwip_recv_tcp+0x6e>
    apiflags |= NETCONN_DONTBLOCK;
 800ce46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ce4a:	f043 0304 	orr.w	r3, r3, #4
 800ce4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    err_t err;
    u16_t copylen;

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: top while sock->lastdata=%p\n", (void *)sock->lastdata.pbuf));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata.pbuf) {
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	685b      	ldr	r3, [r3, #4]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d003      	beq.n	800ce62 <lwip_recv_tcp+0x7e>
      p = sock->lastdata.pbuf;
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	685b      	ldr	r3, [r3, #4]
 800ce5e:	617b      	str	r3, [r7, #20]
 800ce60:	e036      	b.n	800ced0 <lwip_recv_tcp+0xec>
    } else {
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ce6a:	f107 0114 	add.w	r1, r7, #20
 800ce6e:	4618      	mov	r0, r3
 800ce70:	f7fd fd68 	bl	800a944 <netconn_recv_tcp_pbuf_flags>
 800ce74:	4603      	mov	r3, r0
 800ce76:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: netconn_recv err=%d, pbuf=%p\n",
                                  err, (void *)p));

      if (err != ERR_OK) {
 800ce7a:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d019      	beq.n	800ceb6 <lwip_recv_tcp+0xd2>
        if (recvd > 0) {
 800ce82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	f300 808d 	bgt.w	800cfa4 <lwip_recv_tcp+0x1c0>
          goto lwip_recv_tcp_done;
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: p == NULL, error is \"%s\"!\n",
                                    lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 800ce8a:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800ce8e:	4618      	mov	r0, r3
 800ce90:	f7ff fba0 	bl	800c5d4 <err_to_errno>
 800ce94:	61f8      	str	r0, [r7, #28]
 800ce96:	69fb      	ldr	r3, [r7, #28]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d002      	beq.n	800cea2 <lwip_recv_tcp+0xbe>
 800ce9c:	4a55      	ldr	r2, [pc, #340]	; (800cff4 <lwip_recv_tcp+0x210>)
 800ce9e:	69fb      	ldr	r3, [r7, #28]
 800cea0:	6013      	str	r3, [r2, #0]
        if (err == ERR_CLSD) {
 800cea2:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800cea6:	f113 0f0f 	cmn.w	r3, #15
 800ceaa:	d101      	bne.n	800ceb0 <lwip_recv_tcp+0xcc>
          return 0;
 800ceac:	2300      	movs	r3, #0
 800ceae:	e094      	b.n	800cfda <lwip_recv_tcp+0x1f6>
        } else {
          return -1;
 800ceb0:	f04f 33ff 	mov.w	r3, #4294967295
 800ceb4:	e091      	b.n	800cfda <lwip_recv_tcp+0x1f6>
        }
      }
      LWIP_ASSERT("p != NULL", p != NULL);
 800ceb6:	697b      	ldr	r3, [r7, #20]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d106      	bne.n	800ceca <lwip_recv_tcp+0xe6>
 800cebc:	4b49      	ldr	r3, [pc, #292]	; (800cfe4 <lwip_recv_tcp+0x200>)
 800cebe:	f240 32c5 	movw	r2, #965	; 0x3c5
 800cec2:	494d      	ldr	r1, [pc, #308]	; (800cff8 <lwip_recv_tcp+0x214>)
 800cec4:	4849      	ldr	r0, [pc, #292]	; (800cfec <lwip_recv_tcp+0x208>)
 800cec6:	f00f fe13 	bl	801caf0 <iprintf>
      sock->lastdata.pbuf = p;
 800ceca:	697a      	ldr	r2, [r7, #20]
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	605a      	str	r2, [r3, #4]
    }

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: buflen=%"U16_F" recv_left=%d off=%d\n",
                                p->tot_len, (int)recv_left, (int)recvd));

    if (recv_left > p->tot_len) {
 800ced0:	697b      	ldr	r3, [r7, #20]
 800ced2:	891b      	ldrh	r3, [r3, #8]
 800ced4:	461a      	mov	r2, r3
 800ced6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ced8:	4293      	cmp	r3, r2
 800ceda:	dd03      	ble.n	800cee4 <lwip_recv_tcp+0x100>
      copylen = p->tot_len;
 800cedc:	697b      	ldr	r3, [r7, #20]
 800cede:	891b      	ldrh	r3, [r3, #8]
 800cee0:	847b      	strh	r3, [r7, #34]	; 0x22
 800cee2:	e001      	b.n	800cee8 <lwip_recv_tcp+0x104>
    } else {
      copylen = (u16_t)recv_left;
 800cee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cee6:	847b      	strh	r3, [r7, #34]	; 0x22
    }
    if (recvd + copylen < recvd) {
 800cee8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ceea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceec:	4413      	add	r3, r2
 800ceee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cef0:	429a      	cmp	r2, r3
 800cef2:	dd03      	ble.n	800cefc <lwip_recv_tcp+0x118>
      /* overflow */
      copylen = (u16_t)(SSIZE_MAX - recvd);
 800cef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cef6:	b29b      	uxth	r3, r3
 800cef8:	43db      	mvns	r3, r3
 800cefa:	847b      	strh	r3, [r7, #34]	; 0x22
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 800cefc:	6978      	ldr	r0, [r7, #20]
 800cefe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf00:	68ba      	ldr	r2, [r7, #8]
 800cf02:	18d1      	adds	r1, r2, r3
 800cf04:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800cf06:	2300      	movs	r3, #0
 800cf08:	f002 ff76 	bl	800fdf8 <pbuf_copy_partial>

    recvd += copylen;
 800cf0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cf0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf10:	4413      	add	r3, r2
 800cf12:	62bb      	str	r3, [r7, #40]	; 0x28

    /* TCP combines multiple pbufs for one recv */
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 800cf14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cf16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf18:	429a      	cmp	r2, r3
 800cf1a:	da06      	bge.n	800cf2a <lwip_recv_tcp+0x146>
 800cf1c:	4b31      	ldr	r3, [pc, #196]	; (800cfe4 <lwip_recv_tcp+0x200>)
 800cf1e:	f240 32dd 	movw	r2, #989	; 0x3dd
 800cf22:	4936      	ldr	r1, [pc, #216]	; (800cffc <lwip_recv_tcp+0x218>)
 800cf24:	4831      	ldr	r0, [pc, #196]	; (800cfec <lwip_recv_tcp+0x208>)
 800cf26:	f00f fde3 	bl	801caf0 <iprintf>
    recv_left -= copylen;
 800cf2a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cf2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf2e:	1ad3      	subs	r3, r2, r3
 800cf30:	627b      	str	r3, [r7, #36]	; 0x24

    /* Unless we peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 800cf32:	683b      	ldr	r3, [r7, #0]
 800cf34:	f003 0301 	and.w	r3, r3, #1
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d123      	bne.n	800cf84 <lwip_recv_tcp+0x1a0>
      /* ... check if there is data left in the pbuf */
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 800cf3c:	697b      	ldr	r3, [r7, #20]
 800cf3e:	891b      	ldrh	r3, [r3, #8]
 800cf40:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800cf42:	429a      	cmp	r2, r3
 800cf44:	d906      	bls.n	800cf54 <lwip_recv_tcp+0x170>
 800cf46:	4b27      	ldr	r3, [pc, #156]	; (800cfe4 <lwip_recv_tcp+0x200>)
 800cf48:	f240 32e3 	movw	r2, #995	; 0x3e3
 800cf4c:	492c      	ldr	r1, [pc, #176]	; (800d000 <lwip_recv_tcp+0x21c>)
 800cf4e:	4827      	ldr	r0, [pc, #156]	; (800cfec <lwip_recv_tcp+0x208>)
 800cf50:	f00f fdce 	bl	801caf0 <iprintf>
      if (p->tot_len - copylen > 0) {
 800cf54:	697b      	ldr	r3, [r7, #20]
 800cf56:	891b      	ldrh	r3, [r3, #8]
 800cf58:	461a      	mov	r2, r3
 800cf5a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cf5c:	1ad3      	subs	r3, r2, r3
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	dd09      	ble.n	800cf76 <lwip_recv_tcp+0x192>
        /* If so, it should be saved in the sock structure for the next recv call.
           We store the pbuf but hide/free the consumed data: */
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 800cf62:	697b      	ldr	r3, [r7, #20]
 800cf64:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800cf66:	4611      	mov	r1, r2
 800cf68:	4618      	mov	r0, r3
 800cf6a:	f002 fd0c 	bl	800f986 <pbuf_free_header>
 800cf6e:	4602      	mov	r2, r0
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	605a      	str	r2, [r3, #4]
 800cf74:	e006      	b.n	800cf84 <lwip_recv_tcp+0x1a0>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: lastdata now pbuf=%p\n", (void *)sock->lastdata.pbuf));
      } else {
        sock->lastdata.pbuf = NULL;
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	2200      	movs	r2, #0
 800cf7a:	605a      	str	r2, [r3, #4]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: deleting pbuf=%p\n", (void *)p));
        pbuf_free(p);
 800cf7c:	697b      	ldr	r3, [r7, #20]
 800cf7e:	4618      	mov	r0, r3
 800cf80:	f002 fd34 	bl	800f9ec <pbuf_free>
      }
    }
    /* once we have some data to return, only add more if we don't need to wait */
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 800cf84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cf88:	f043 0314 	orr.w	r3, r3, #20
 800cf8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    /* @todo: do we need to support peeking more than one pbuf? */
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 800cf90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	dd08      	ble.n	800cfa8 <lwip_recv_tcp+0x1c4>
 800cf96:	683b      	ldr	r3, [r7, #0]
 800cf98:	f003 0301 	and.w	r3, r3, #1
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	f43f af58 	beq.w	800ce52 <lwip_recv_tcp+0x6e>
lwip_recv_tcp_done:
 800cfa2:	e001      	b.n	800cfa8 <lwip_recv_tcp+0x1c4>
          goto lwip_recv_tcp_done;
 800cfa4:	bf00      	nop
 800cfa6:	e000      	b.n	800cfaa <lwip_recv_tcp+0x1c6>
lwip_recv_tcp_done:
 800cfa8:	bf00      	nop
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 800cfaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	dd0b      	ble.n	800cfc8 <lwip_recv_tcp+0x1e4>
 800cfb0:	683b      	ldr	r3, [r7, #0]
 800cfb2:	f003 0301 	and.w	r3, r3, #1
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d106      	bne.n	800cfc8 <lwip_recv_tcp+0x1e4>
    /* ensure window update after copying all data */
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cfc0:	4611      	mov	r1, r2
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	f7fd fc0c 	bl	800a7e0 <netconn_tcp_recvd>
  }
  sock_set_errno(sock, 0);
 800cfc8:	2300      	movs	r3, #0
 800cfca:	61bb      	str	r3, [r7, #24]
 800cfcc:	69bb      	ldr	r3, [r7, #24]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d002      	beq.n	800cfd8 <lwip_recv_tcp+0x1f4>
 800cfd2:	4a08      	ldr	r2, [pc, #32]	; (800cff4 <lwip_recv_tcp+0x210>)
 800cfd4:	69bb      	ldr	r3, [r7, #24]
 800cfd6:	6013      	str	r3, [r2, #0]
  return recvd;
 800cfd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800cfda:	4618      	mov	r0, r3
 800cfdc:	3730      	adds	r7, #48	; 0x30
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	bd80      	pop	{r7, pc}
 800cfe2:	bf00      	nop
 800cfe4:	0801f68c 	.word	0x0801f68c
 800cfe8:	0801f784 	.word	0x0801f784
 800cfec:	0801f6e0 	.word	0x0801f6e0
 800cff0:	0801f794 	.word	0x0801f794
 800cff4:	20008334 	.word	0x20008334
 800cff8:	0801f7b8 	.word	0x0801f7b8
 800cffc:	0801f7c4 	.word	0x0801f7c4
 800d000:	0801f7ec 	.word	0x0801f7ec

0800d004 <lwip_sock_make_addr>:

/* Convert a netbuf's address data to struct sockaddr */
static int
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
                    struct sockaddr *from, socklen_t *fromlen)
{
 800d004:	b590      	push	{r4, r7, lr}
 800d006:	b08b      	sub	sp, #44	; 0x2c
 800d008:	af00      	add	r7, sp, #0
 800d00a:	60f8      	str	r0, [r7, #12]
 800d00c:	60b9      	str	r1, [r7, #8]
 800d00e:	603b      	str	r3, [r7, #0]
 800d010:	4613      	mov	r3, r2
 800d012:	80fb      	strh	r3, [r7, #6]
  int truncated = 0;
 800d014:	2300      	movs	r3, #0
 800d016:	627b      	str	r3, [r7, #36]	; 0x24
  union sockaddr_aligned saddr;

  LWIP_UNUSED_ARG(conn);

  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
 800d018:	68bb      	ldr	r3, [r7, #8]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d106      	bne.n	800d02c <lwip_sock_make_addr+0x28>
 800d01e:	4b2b      	ldr	r3, [pc, #172]	; (800d0cc <lwip_sock_make_addr+0xc8>)
 800d020:	f240 4207 	movw	r2, #1031	; 0x407
 800d024:	492a      	ldr	r1, [pc, #168]	; (800d0d0 <lwip_sock_make_addr+0xcc>)
 800d026:	482b      	ldr	r0, [pc, #172]	; (800d0d4 <lwip_sock_make_addr+0xd0>)
 800d028:	f00f fd62 	bl	801caf0 <iprintf>
  LWIP_ASSERT("from != NULL", from != NULL);
 800d02c:	683b      	ldr	r3, [r7, #0]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d106      	bne.n	800d040 <lwip_sock_make_addr+0x3c>
 800d032:	4b26      	ldr	r3, [pc, #152]	; (800d0cc <lwip_sock_make_addr+0xc8>)
 800d034:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800d038:	4927      	ldr	r1, [pc, #156]	; (800d0d8 <lwip_sock_make_addr+0xd4>)
 800d03a:	4826      	ldr	r0, [pc, #152]	; (800d0d4 <lwip_sock_make_addr+0xd0>)
 800d03c:	f00f fd58 	bl	801caf0 <iprintf>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 800d040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d042:	2b00      	cmp	r3, #0
 800d044:	d106      	bne.n	800d054 <lwip_sock_make_addr+0x50>
 800d046:	4b21      	ldr	r3, [pc, #132]	; (800d0cc <lwip_sock_make_addr+0xc8>)
 800d048:	f240 4209 	movw	r2, #1033	; 0x409
 800d04c:	4923      	ldr	r1, [pc, #140]	; (800d0dc <lwip_sock_make_addr+0xd8>)
 800d04e:	4821      	ldr	r0, [pc, #132]	; (800d0d4 <lwip_sock_make_addr+0xd0>)
 800d050:	f00f fd4e 	bl	801caf0 <iprintf>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
    IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 800d054:	f107 0314 	add.w	r3, r7, #20
 800d058:	2210      	movs	r2, #16
 800d05a:	701a      	strb	r2, [r3, #0]
 800d05c:	f107 0314 	add.w	r3, r7, #20
 800d060:	2202      	movs	r2, #2
 800d062:	705a      	strb	r2, [r3, #1]
 800d064:	f107 0414 	add.w	r4, r7, #20
 800d068:	88fb      	ldrh	r3, [r7, #6]
 800d06a:	4618      	mov	r0, r3
 800d06c:	f001 f8a8 	bl	800e1c0 <lwip_htons>
 800d070:	4603      	mov	r3, r0
 800d072:	8063      	strh	r3, [r4, #2]
 800d074:	f107 0314 	add.w	r3, r7, #20
 800d078:	68ba      	ldr	r2, [r7, #8]
 800d07a:	6812      	ldr	r2, [r2, #0]
 800d07c:	605a      	str	r2, [r3, #4]
 800d07e:	f107 0314 	add.w	r3, r7, #20
 800d082:	3308      	adds	r3, #8
 800d084:	2208      	movs	r2, #8
 800d086:	2100      	movs	r1, #0
 800d088:	4618      	mov	r0, r3
 800d08a:	f00e febb 	bl	801be04 <memset>
  if (*fromlen < saddr.sa.sa_len) {
 800d08e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	7d3a      	ldrb	r2, [r7, #20]
 800d094:	4293      	cmp	r3, r2
 800d096:	d202      	bcs.n	800d09e <lwip_sock_make_addr+0x9a>
    truncated = 1;
 800d098:	2301      	movs	r3, #1
 800d09a:	627b      	str	r3, [r7, #36]	; 0x24
 800d09c:	e008      	b.n	800d0b0 <lwip_sock_make_addr+0xac>
  } else if (*fromlen > saddr.sa.sa_len) {
 800d09e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	7d3a      	ldrb	r2, [r7, #20]
 800d0a4:	4293      	cmp	r3, r2
 800d0a6:	d903      	bls.n	800d0b0 <lwip_sock_make_addr+0xac>
    *fromlen = saddr.sa.sa_len;
 800d0a8:	7d3b      	ldrb	r3, [r7, #20]
 800d0aa:	461a      	mov	r2, r3
 800d0ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0ae:	601a      	str	r2, [r3, #0]
  }
  MEMCPY(from, &saddr, *fromlen);
 800d0b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0b2:	681a      	ldr	r2, [r3, #0]
 800d0b4:	f107 0314 	add.w	r3, r7, #20
 800d0b8:	4619      	mov	r1, r3
 800d0ba:	6838      	ldr	r0, [r7, #0]
 800d0bc:	f00e fe7a 	bl	801bdb4 <memcpy>
  return truncated;
 800d0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	372c      	adds	r7, #44	; 0x2c
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bd90      	pop	{r4, r7, pc}
 800d0ca:	bf00      	nop
 800d0cc:	0801f68c 	.word	0x0801f68c
 800d0d0:	0801f7fc 	.word	0x0801f7fc
 800d0d4:	0801f6e0 	.word	0x0801f6e0
 800d0d8:	0801f810 	.word	0x0801f810
 800d0dc:	0801f820 	.word	0x0801f820

0800d0e0 <lwip_recv_tcp_from>:

#if LWIP_TCP
/* Helper function to get a tcp socket's remote address info */
static int
lwip_recv_tcp_from(struct lwip_sock *sock, struct sockaddr *from, socklen_t *fromlen, const char *dbg_fn, int dbg_s, ssize_t dbg_ret)
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b088      	sub	sp, #32
 800d0e4:	af02      	add	r7, sp, #8
 800d0e6:	60f8      	str	r0, [r7, #12]
 800d0e8:	60b9      	str	r1, [r7, #8]
 800d0ea:	607a      	str	r2, [r7, #4]
 800d0ec:	603b      	str	r3, [r7, #0]
  if (sock == NULL) {
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d101      	bne.n	800d0f8 <lwip_recv_tcp_from+0x18>
    return 0;
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	e021      	b.n	800d13c <lwip_recv_tcp_from+0x5c>
  LWIP_UNUSED_ARG(dbg_fn);
  LWIP_UNUSED_ARG(dbg_s);
  LWIP_UNUSED_ARG(dbg_ret);

#if !SOCKETS_DEBUG
  if (from && fromlen)
 800d0f8:	68bb      	ldr	r3, [r7, #8]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d01d      	beq.n	800d13a <lwip_recv_tcp_from+0x5a>
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d01a      	beq.n	800d13a <lwip_recv_tcp_from+0x5a>
#endif /* !SOCKETS_DEBUG */
  {
    /* get remote addr/port from tcp_pcb */
    u16_t port;
    ip_addr_t tmpaddr;
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	6818      	ldr	r0, [r3, #0]
 800d108:	f107 0216 	add.w	r2, r7, #22
 800d10c:	f107 0110 	add.w	r1, r7, #16
 800d110:	2300      	movs	r3, #0
 800d112:	f7fd f92b 	bl	800a36c <netconn_getaddr>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("%s(%d):  addr=", dbg_fn, dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, tmpaddr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, (int)dbg_ret));
    if (from && fromlen) {
 800d116:	68bb      	ldr	r3, [r7, #8]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d00e      	beq.n	800d13a <lwip_recv_tcp_from+0x5a>
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d00b      	beq.n	800d13a <lwip_recv_tcp_from+0x5a>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	6818      	ldr	r0, [r3, #0]
 800d126:	8afa      	ldrh	r2, [r7, #22]
 800d128:	f107 0110 	add.w	r1, r7, #16
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	9300      	str	r3, [sp, #0]
 800d130:	68bb      	ldr	r3, [r7, #8]
 800d132:	f7ff ff67 	bl	800d004 <lwip_sock_make_addr>
 800d136:	4603      	mov	r3, r0
 800d138:	e000      	b.n	800d13c <lwip_recv_tcp_from+0x5c>
    }
  }
  return 0;
 800d13a:	2300      	movs	r3, #0
}
 800d13c:	4618      	mov	r0, r3
 800d13e:	3718      	adds	r7, #24
 800d140:	46bd      	mov	sp, r7
 800d142:	bd80      	pop	{r7, pc}

0800d144 <lwip_recvfrom_udp_raw>:
/* Helper function to receive a netbuf from a udp or raw netconn.
 * Keeps sock->lastdata for peeking.
 */
static err_t
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
{
 800d144:	b590      	push	{r4, r7, lr}
 800d146:	b08d      	sub	sp, #52	; 0x34
 800d148:	af02      	add	r7, sp, #8
 800d14a:	60f8      	str	r0, [r7, #12]
 800d14c:	60b9      	str	r1, [r7, #8]
 800d14e:	607a      	str	r2, [r7, #4]
 800d150:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t buflen, copylen, copied;
  int i;

  LWIP_UNUSED_ARG(dbg_s);
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	689b      	ldr	r3, [r3, #8]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d10d      	bne.n	800d176 <lwip_recvfrom_udp_raw+0x32>
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	68db      	ldr	r3, [r3, #12]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	dd09      	ble.n	800d176 <lwip_recvfrom_udp_raw+0x32>
 800d162:	4b5e      	ldr	r3, [pc, #376]	; (800d2dc <lwip_recvfrom_udp_raw+0x198>)
 800d164:	f240 4249 	movw	r2, #1097	; 0x449
 800d168:	495d      	ldr	r1, [pc, #372]	; (800d2e0 <lwip_recvfrom_udp_raw+0x19c>)
 800d16a:	485e      	ldr	r0, [pc, #376]	; (800d2e4 <lwip_recvfrom_udp_raw+0x1a0>)
 800d16c:	f00f fcc0 	bl	801caf0 <iprintf>
 800d170:	f06f 030f 	mvn.w	r3, #15
 800d174:	e0ad      	b.n	800d2d2 <lwip_recvfrom_udp_raw+0x18e>

  if (flags & MSG_DONTWAIT) {
 800d176:	68bb      	ldr	r3, [r7, #8]
 800d178:	f003 0308 	and.w	r3, r3, #8
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d003      	beq.n	800d188 <lwip_recvfrom_udp_raw+0x44>
    apiflags = NETCONN_DONTBLOCK;
 800d180:	2304      	movs	r3, #4
 800d182:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d186:	e002      	b.n	800d18e <lwip_recvfrom_udp_raw+0x4a>
  } else {
    apiflags = 0;
 800d188:	2300      	movs	r3, #0
 800d18a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: top sock->lastdata=%p\n", (void *)sock->lastdata.netbuf));
  /* Check if there is data left from the last recv operation. */
  buf = sock->lastdata.netbuf;
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	685b      	ldr	r3, [r3, #4]
 800d192:	613b      	str	r3, [r7, #16]
  if (buf == NULL) {
 800d194:	693b      	ldr	r3, [r7, #16]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d11e      	bne.n	800d1d8 <lwip_recvfrom_udp_raw+0x94>
    /* No data was left from the previous operation, so we try to get
        some from the network. */
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d1a2:	f107 0110 	add.w	r1, r7, #16
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	f7fd fbf8 	bl	800a99c <netconn_recv_udp_raw_netbuf_flags>
 800d1ac:	4603      	mov	r3, r0
 800d1ae:	76fb      	strb	r3, [r7, #27]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: netconn_recv err=%d, netbuf=%p\n",
                                err, (void *)buf));

    if (err != ERR_OK) {
 800d1b0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d002      	beq.n	800d1be <lwip_recvfrom_udp_raw+0x7a>
      return err;
 800d1b8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d1bc:	e089      	b.n	800d2d2 <lwip_recvfrom_udp_raw+0x18e>
    }
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800d1be:	693b      	ldr	r3, [r7, #16]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d106      	bne.n	800d1d2 <lwip_recvfrom_udp_raw+0x8e>
 800d1c4:	4b45      	ldr	r3, [pc, #276]	; (800d2dc <lwip_recvfrom_udp_raw+0x198>)
 800d1c6:	f240 425e 	movw	r2, #1118	; 0x45e
 800d1ca:	4947      	ldr	r1, [pc, #284]	; (800d2e8 <lwip_recvfrom_udp_raw+0x1a4>)
 800d1cc:	4845      	ldr	r0, [pc, #276]	; (800d2e4 <lwip_recvfrom_udp_raw+0x1a0>)
 800d1ce:	f00f fc8f 	bl	801caf0 <iprintf>
    sock->lastdata.netbuf = buf;
 800d1d2:	693a      	ldr	r2, [r7, #16]
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	605a      	str	r2, [r3, #4]
  }
  buflen = buf->p->tot_len;
 800d1d8:	693b      	ldr	r3, [r7, #16]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	891b      	ldrh	r3, [r3, #8]
 800d1de:	833b      	strh	r3, [r7, #24]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw: buflen=%"U16_F"\n", buflen));

  copied = 0;
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	847b      	strh	r3, [r7, #34]	; 0x22
  /* copy the pbuf payload into the iovs */
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	61fb      	str	r3, [r7, #28]
 800d1e8:	e029      	b.n	800d23e <lwip_recvfrom_udp_raw+0xfa>
    u16_t len_left = (u16_t)(buflen - copied);
 800d1ea:	8b3a      	ldrh	r2, [r7, #24]
 800d1ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d1ee:	1ad3      	subs	r3, r2, r3
 800d1f0:	82fb      	strh	r3, [r7, #22]
    if (msg->msg_iov[i].iov_len > len_left) {
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	689a      	ldr	r2, [r3, #8]
 800d1f6:	69fb      	ldr	r3, [r7, #28]
 800d1f8:	00db      	lsls	r3, r3, #3
 800d1fa:	4413      	add	r3, r2
 800d1fc:	685a      	ldr	r2, [r3, #4]
 800d1fe:	8afb      	ldrh	r3, [r7, #22]
 800d200:	429a      	cmp	r2, r3
 800d202:	d902      	bls.n	800d20a <lwip_recvfrom_udp_raw+0xc6>
      copylen = len_left;
 800d204:	8afb      	ldrh	r3, [r7, #22]
 800d206:	84bb      	strh	r3, [r7, #36]	; 0x24
 800d208:	e006      	b.n	800d218 <lwip_recvfrom_udp_raw+0xd4>
    } else {
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	689a      	ldr	r2, [r3, #8]
 800d20e:	69fb      	ldr	r3, [r7, #28]
 800d210:	00db      	lsls	r3, r3, #3
 800d212:	4413      	add	r3, r2
 800d214:	685b      	ldr	r3, [r3, #4]
 800d216:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* copy the contents of the received buffer into
        the supplied memory buffer */
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 800d218:	693b      	ldr	r3, [r7, #16]
 800d21a:	6818      	ldr	r0, [r3, #0]
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	689a      	ldr	r2, [r3, #8]
 800d220:	69fb      	ldr	r3, [r7, #28]
 800d222:	00db      	lsls	r3, r3, #3
 800d224:	4413      	add	r3, r2
 800d226:	6819      	ldr	r1, [r3, #0]
 800d228:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d22a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d22c:	f002 fde4 	bl	800fdf8 <pbuf_copy_partial>
    copied = (u16_t)(copied + copylen);
 800d230:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d232:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d234:	4413      	add	r3, r2
 800d236:	847b      	strh	r3, [r7, #34]	; 0x22
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800d238:	69fb      	ldr	r3, [r7, #28]
 800d23a:	3301      	adds	r3, #1
 800d23c:	61fb      	str	r3, [r7, #28]
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	68db      	ldr	r3, [r3, #12]
 800d242:	69fa      	ldr	r2, [r7, #28]
 800d244:	429a      	cmp	r2, r3
 800d246:	da03      	bge.n	800d250 <lwip_recvfrom_udp_raw+0x10c>
 800d248:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d24a:	8b3b      	ldrh	r3, [r7, #24]
 800d24c:	429a      	cmp	r2, r3
 800d24e:	d3cc      	bcc.n	800d1ea <lwip_recvfrom_udp_raw+0xa6>
  }

  /* Check to see from where the data was.*/
#if !SOCKETS_DEBUG
  if (msg->msg_name && msg->msg_namelen)
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d01a      	beq.n	800d28e <lwip_recvfrom_udp_raw+0x14a>
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	685b      	ldr	r3, [r3, #4]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d016      	beq.n	800d28e <lwip_recvfrom_udp_raw+0x14a>
#endif /* !SOCKETS_DEBUG */
  {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw(%d):  addr=", dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, *netbuf_fromaddr(buf));
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", netbuf_fromport(buf), copied));
    if (msg->msg_name && msg->msg_namelen) {
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d012      	beq.n	800d28e <lwip_recvfrom_udp_raw+0x14a>
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	685b      	ldr	r3, [r3, #4]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d00e      	beq.n	800d28e <lwip_recvfrom_udp_raw+0x14a>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	6818      	ldr	r0, [r3, #0]
 800d274:	693b      	ldr	r3, [r7, #16]
 800d276:	f103 0108 	add.w	r1, r3, #8
 800d27a:	693b      	ldr	r3, [r7, #16]
 800d27c:	899a      	ldrh	r2, [r3, #12]
                          (struct sockaddr *)msg->msg_name, &msg->msg_namelen);
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	681c      	ldr	r4, [r3, #0]
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	3304      	adds	r3, #4
 800d286:	9300      	str	r3, [sp, #0]
 800d288:	4623      	mov	r3, r4
 800d28a:	f7ff febb 	bl	800d004 <lwip_sock_make_addr>
    }
  }

  /* Initialize flag output */
  msg->msg_flags = 0;
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	2200      	movs	r2, #0
 800d292:	619a      	str	r2, [r3, #24]

  if (msg->msg_control) {
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	691b      	ldr	r3, [r3, #16]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d007      	beq.n	800d2ac <lwip_recvfrom_udp_raw+0x168>
    u8_t wrote_msg = 0;
 800d29c:	2300      	movs	r3, #0
 800d29e:	757b      	strb	r3, [r7, #21]
#endif /* LWIP_IPV4 */
      }
    }
#endif /* LWIP_NETBUF_RECVINFO */

    if (!wrote_msg) {
 800d2a0:	7d7b      	ldrb	r3, [r7, #21]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d102      	bne.n	800d2ac <lwip_recvfrom_udp_raw+0x168>
      msg->msg_controllen = 0;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	615a      	str	r2, [r3, #20]
    }
  }

  /* If we don't peek the incoming message: zero lastdata pointer and free the netbuf */
  if ((flags & MSG_PEEK) == 0) {
 800d2ac:	68bb      	ldr	r3, [r7, #8]
 800d2ae:	f003 0301 	and.w	r3, r3, #1
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d106      	bne.n	800d2c4 <lwip_recvfrom_udp_raw+0x180>
    sock->lastdata.netbuf = NULL;
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	605a      	str	r2, [r3, #4]
    netbuf_delete(buf);
 800d2bc:	693b      	ldr	r3, [r7, #16]
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f7ff f9a6 	bl	800c610 <netbuf_delete>
  }
  if (datagram_len) {
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d002      	beq.n	800d2d0 <lwip_recvfrom_udp_raw+0x18c>
    *datagram_len = buflen;
 800d2ca:	683b      	ldr	r3, [r7, #0]
 800d2cc:	8b3a      	ldrh	r2, [r7, #24]
 800d2ce:	801a      	strh	r2, [r3, #0]
  }
  return ERR_OK;
 800d2d0:	2300      	movs	r3, #0
}
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	372c      	adds	r7, #44	; 0x2c
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	bd90      	pop	{r4, r7, pc}
 800d2da:	bf00      	nop
 800d2dc:	0801f68c 	.word	0x0801f68c
 800d2e0:	0801f830 	.word	0x0801f830
 800d2e4:	0801f6e0 	.word	0x0801f6e0
 800d2e8:	0801f85c 	.word	0x0801f85c

0800d2ec <lwip_recvfrom>:

ssize_t
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b096      	sub	sp, #88	; 0x58
 800d2f0:	af02      	add	r7, sp, #8
 800d2f2:	60f8      	str	r0, [r7, #12]
 800d2f4:	60b9      	str	r1, [r7, #8]
 800d2f6:	607a      	str	r2, [r7, #4]
 800d2f8:	603b      	str	r3, [r7, #0]
  struct lwip_sock *sock;
  ssize_t ret;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 800d2fa:	68f8      	ldr	r0, [r7, #12]
 800d2fc:	f7ff fa58 	bl	800c7b0 <get_socket>
 800d300:	64f8      	str	r0, [r7, #76]	; 0x4c
  if (!sock) {
 800d302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d304:	2b00      	cmp	r3, #0
 800d306:	d102      	bne.n	800d30e <lwip_recvfrom+0x22>
    return -1;
 800d308:	f04f 33ff 	mov.w	r3, #4294967295
 800d30c:	e078      	b.n	800d400 <lwip_recvfrom+0x114>
  }
#if LWIP_TCP
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800d30e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	781b      	ldrb	r3, [r3, #0]
 800d314:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d318:	2b10      	cmp	r3, #16
 800d31a:	d112      	bne.n	800d342 <lwip_recvfrom+0x56>
    ret = lwip_recv_tcp(sock, mem, len, flags);
 800d31c:	683b      	ldr	r3, [r7, #0]
 800d31e:	687a      	ldr	r2, [r7, #4]
 800d320:	68b9      	ldr	r1, [r7, #8]
 800d322:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d324:	f7ff fd5e 	bl	800cde4 <lwip_recv_tcp>
 800d328:	6478      	str	r0, [r7, #68]	; 0x44
    lwip_recv_tcp_from(sock, from, fromlen, "lwip_recvfrom", s, ret);
 800d32a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d32c:	9301      	str	r3, [sp, #4]
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	9300      	str	r3, [sp, #0]
 800d332:	4b35      	ldr	r3, [pc, #212]	; (800d408 <lwip_recvfrom+0x11c>)
 800d334:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d336:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d338:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d33a:	f7ff fed1 	bl	800d0e0 <lwip_recv_tcp_from>
    done_socket(sock);
    return ret;
 800d33e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d340:	e05e      	b.n	800d400 <lwip_recvfrom+0x114>
  } else
#endif
  {
    u16_t datagram_len = 0;
 800d342:	2300      	movs	r3, #0
 800d344:	877b      	strh	r3, [r7, #58]	; 0x3a
    struct iovec vec;
    struct msghdr msg;
    err_t err;
    vec.iov_base = mem;
 800d346:	68bb      	ldr	r3, [r7, #8]
 800d348:	633b      	str	r3, [r7, #48]	; 0x30
    vec.iov_len = len;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	637b      	str	r3, [r7, #52]	; 0x34
    msg.msg_control = NULL;
 800d34e:	2300      	movs	r3, #0
 800d350:	627b      	str	r3, [r7, #36]	; 0x24
    msg.msg_controllen = 0;
 800d352:	2300      	movs	r3, #0
 800d354:	62bb      	str	r3, [r7, #40]	; 0x28
    msg.msg_flags = 0;
 800d356:	2300      	movs	r3, #0
 800d358:	62fb      	str	r3, [r7, #44]	; 0x2c
    msg.msg_iov = &vec;
 800d35a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d35e:	61fb      	str	r3, [r7, #28]
    msg.msg_iovlen = 1;
 800d360:	2301      	movs	r3, #1
 800d362:	623b      	str	r3, [r7, #32]
    msg.msg_name = from;
 800d364:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d366:	617b      	str	r3, [r7, #20]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 800d368:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d002      	beq.n	800d374 <lwip_recvfrom+0x88>
 800d36e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	e000      	b.n	800d376 <lwip_recvfrom+0x8a>
 800d374:	2300      	movs	r3, #0
 800d376:	61bb      	str	r3, [r7, #24]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 800d378:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 800d37c:	f107 0214 	add.w	r2, r7, #20
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	9300      	str	r3, [sp, #0]
 800d384:	460b      	mov	r3, r1
 800d386:	6839      	ldr	r1, [r7, #0]
 800d388:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d38a:	f7ff fedb 	bl	800d144 <lwip_recvfrom_udp_raw>
 800d38e:	4603      	mov	r3, r0
 800d390:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    if (err != ERR_OK) {
 800d394:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d00e      	beq.n	800d3ba <lwip_recvfrom+0xce>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom[UDP/RAW](%d): buf == NULL, error is \"%s\"!\n",
                                  s, lwip_strerr(err)));
      sock_set_errno(sock, err_to_errno(err));
 800d39c:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	f7ff f917 	bl	800c5d4 <err_to_errno>
 800d3a6:	63f8      	str	r0, [r7, #60]	; 0x3c
 800d3a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d002      	beq.n	800d3b4 <lwip_recvfrom+0xc8>
 800d3ae:	4a17      	ldr	r2, [pc, #92]	; (800d40c <lwip_recvfrom+0x120>)
 800d3b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3b2:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 800d3b4:	f04f 33ff 	mov.w	r3, #4294967295
 800d3b8:	e022      	b.n	800d400 <lwip_recvfrom+0x114>
    }
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 800d3ba:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d3bc:	461a      	mov	r2, r3
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	4293      	cmp	r3, r2
 800d3c2:	bf28      	it	cs
 800d3c4:	4613      	movcs	r3, r2
 800d3c6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800d3ca:	4293      	cmp	r3, r2
 800d3cc:	d206      	bcs.n	800d3dc <lwip_recvfrom+0xf0>
 800d3ce:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d3d0:	461a      	mov	r2, r3
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	4293      	cmp	r3, r2
 800d3d6:	bf28      	it	cs
 800d3d8:	4613      	movcs	r3, r2
 800d3da:	e001      	b.n	800d3e0 <lwip_recvfrom+0xf4>
 800d3dc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d3e0:	647b      	str	r3, [r7, #68]	; 0x44
    if (fromlen) {
 800d3e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d002      	beq.n	800d3ee <lwip_recvfrom+0x102>
      *fromlen = msg.msg_namelen;
 800d3e8:	69ba      	ldr	r2, [r7, #24]
 800d3ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d3ec:	601a      	str	r2, [r3, #0]
    }
  }

  sock_set_errno(sock, 0);
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	643b      	str	r3, [r7, #64]	; 0x40
 800d3f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d002      	beq.n	800d3fe <lwip_recvfrom+0x112>
 800d3f8:	4a04      	ldr	r2, [pc, #16]	; (800d40c <lwip_recvfrom+0x120>)
 800d3fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3fc:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return ret;
 800d3fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800d400:	4618      	mov	r0, r3
 800d402:	3750      	adds	r7, #80	; 0x50
 800d404:	46bd      	mov	sp, r7
 800d406:	bd80      	pop	{r7, pc}
 800d408:	0801f868 	.word	0x0801f868
 800d40c:	20008334 	.word	0x20008334

0800d410 <lwip_recv>:
  return lwip_recvmsg(s, &msg, 0);
}

ssize_t
lwip_recv(int s, void *mem, size_t len, int flags)
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b086      	sub	sp, #24
 800d414:	af02      	add	r7, sp, #8
 800d416:	60f8      	str	r0, [r7, #12]
 800d418:	60b9      	str	r1, [r7, #8]
 800d41a:	607a      	str	r2, [r7, #4]
 800d41c:	603b      	str	r3, [r7, #0]
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
 800d41e:	2300      	movs	r3, #0
 800d420:	9301      	str	r3, [sp, #4]
 800d422:	2300      	movs	r3, #0
 800d424:	9300      	str	r3, [sp, #0]
 800d426:	683b      	ldr	r3, [r7, #0]
 800d428:	687a      	ldr	r2, [r7, #4]
 800d42a:	68b9      	ldr	r1, [r7, #8]
 800d42c:	68f8      	ldr	r0, [r7, #12]
 800d42e:	f7ff ff5d 	bl	800d2ec <lwip_recvfrom>
 800d432:	4603      	mov	r3, r0
}
 800d434:	4618      	mov	r0, r3
 800d436:	3710      	adds	r7, #16
 800d438:	46bd      	mov	sp, r7
 800d43a:	bd80      	pop	{r7, pc}

0800d43c <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b08a      	sub	sp, #40	; 0x28
 800d440:	af02      	add	r7, sp, #8
 800d442:	60f8      	str	r0, [r7, #12]
 800d444:	60b9      	str	r1, [r7, #8]
 800d446:	607a      	str	r2, [r7, #4]
 800d448:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 800d44a:	68f8      	ldr	r0, [r7, #12]
 800d44c:	f7ff f9b0 	bl	800c7b0 <get_socket>
 800d450:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800d452:	69fb      	ldr	r3, [r7, #28]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d102      	bne.n	800d45e <lwip_send+0x22>
    return -1;
 800d458:	f04f 33ff 	mov.w	r3, #4294967295
 800d45c:	e046      	b.n	800d4ec <lwip_send+0xb0>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800d45e:	69fb      	ldr	r3, [r7, #28]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	781b      	ldrb	r3, [r3, #0]
 800d464:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d468:	2b10      	cmp	r3, #16
 800d46a:	d00b      	beq.n	800d484 <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 800d46c:	2300      	movs	r3, #0
 800d46e:	9301      	str	r3, [sp, #4]
 800d470:	2300      	movs	r3, #0
 800d472:	9300      	str	r3, [sp, #0]
 800d474:	683b      	ldr	r3, [r7, #0]
 800d476:	687a      	ldr	r2, [r7, #4]
 800d478:	68b9      	ldr	r1, [r7, #8]
 800d47a:	68f8      	ldr	r0, [r7, #12]
 800d47c:	f000 f83c 	bl	800d4f8 <lwip_sendto>
 800d480:	4603      	mov	r3, r0
 800d482:	e033      	b.n	800d4ec <lwip_send+0xb0>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800d484:	683b      	ldr	r3, [r7, #0]
 800d486:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d001      	beq.n	800d492 <lwip_send+0x56>
 800d48e:	2203      	movs	r2, #3
 800d490:	e000      	b.n	800d494 <lwip_send+0x58>
 800d492:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800d494:	683b      	ldr	r3, [r7, #0]
 800d496:	105b      	asrs	r3, r3, #1
 800d498:	b25b      	sxtb	r3, r3
 800d49a:	f003 0304 	and.w	r3, r3, #4
 800d49e:	b25b      	sxtb	r3, r3
 800d4a0:	4313      	orrs	r3, r2
 800d4a2:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 800d4a4:	76fb      	strb	r3, [r7, #27]
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 800d4aa:	69fb      	ldr	r3, [r7, #28]
 800d4ac:	6818      	ldr	r0, [r3, #0]
 800d4ae:	7efa      	ldrb	r2, [r7, #27]
 800d4b0:	f107 0310 	add.w	r3, r7, #16
 800d4b4:	9300      	str	r3, [sp, #0]
 800d4b6:	4613      	mov	r3, r2
 800d4b8:	687a      	ldr	r2, [r7, #4]
 800d4ba:	68b9      	ldr	r1, [r7, #8]
 800d4bc:	f7fd fac8 	bl	800aa50 <netconn_write_partly>
 800d4c0:	4603      	mov	r3, r0
 800d4c2:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 800d4c4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	f7ff f883 	bl	800c5d4 <err_to_errno>
 800d4ce:	6178      	str	r0, [r7, #20]
 800d4d0:	697b      	ldr	r3, [r7, #20]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d002      	beq.n	800d4dc <lwip_send+0xa0>
 800d4d6:	4a07      	ldr	r2, [pc, #28]	; (800d4f4 <lwip_send+0xb8>)
 800d4d8:	697b      	ldr	r3, [r7, #20]
 800d4da:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 800d4dc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d101      	bne.n	800d4e8 <lwip_send+0xac>
 800d4e4:	693b      	ldr	r3, [r7, #16]
 800d4e6:	e001      	b.n	800d4ec <lwip_send+0xb0>
 800d4e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	3720      	adds	r7, #32
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	bd80      	pop	{r7, pc}
 800d4f4:	20008334 	.word	0x20008334

0800d4f8 <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b08e      	sub	sp, #56	; 0x38
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	60f8      	str	r0, [r7, #12]
 800d500:	60b9      	str	r1, [r7, #8]
 800d502:	607a      	str	r2, [r7, #4]
 800d504:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 800d506:	68f8      	ldr	r0, [r7, #12]
 800d508:	f7ff f952 	bl	800c7b0 <get_socket>
 800d50c:	6338      	str	r0, [r7, #48]	; 0x30
  if (!sock) {
 800d50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d510:	2b00      	cmp	r3, #0
 800d512:	d102      	bne.n	800d51a <lwip_sendto+0x22>
    return -1;
 800d514:	f04f 33ff 	mov.w	r3, #4294967295
 800d518:	e093      	b.n	800d642 <lwip_sendto+0x14a>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800d51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	781b      	ldrb	r3, [r3, #0]
 800d520:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d524:	2b10      	cmp	r3, #16
 800d526:	d107      	bne.n	800d538 <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 800d528:	683b      	ldr	r3, [r7, #0]
 800d52a:	687a      	ldr	r2, [r7, #4]
 800d52c:	68b9      	ldr	r1, [r7, #8]
 800d52e:	68f8      	ldr	r0, [r7, #12]
 800d530:	f7ff ff84 	bl	800d43c <lwip_send>
 800d534:	4603      	mov	r3, r0
 800d536:	e084      	b.n	800d642 <lwip_sendto+0x14a>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d53e:	d30a      	bcc.n	800d556 <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 800d540:	235a      	movs	r3, #90	; 0x5a
 800d542:	623b      	str	r3, [r7, #32]
 800d544:	6a3b      	ldr	r3, [r7, #32]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d002      	beq.n	800d550 <lwip_sendto+0x58>
 800d54a:	4a40      	ldr	r2, [pc, #256]	; (800d64c <lwip_sendto+0x154>)
 800d54c:	6a3b      	ldr	r3, [r7, #32]
 800d54e:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800d550:	f04f 33ff 	mov.w	r3, #4294967295
 800d554:	e075      	b.n	800d642 <lwip_sendto+0x14a>
  }
  short_size = (u16_t)size;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	85fb      	strh	r3, [r7, #46]	; 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 800d55a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d102      	bne.n	800d566 <lwip_sendto+0x6e>
 800d560:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d562:	2b00      	cmp	r3, #0
 800d564:	d023      	beq.n	800d5ae <lwip_sendto+0xb6>
 800d566:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d568:	2b10      	cmp	r3, #16
 800d56a:	d10b      	bne.n	800d584 <lwip_sendto+0x8c>
 800d56c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d008      	beq.n	800d584 <lwip_sendto+0x8c>
 800d572:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d574:	785b      	ldrb	r3, [r3, #1]
 800d576:	2b02      	cmp	r3, #2
 800d578:	d104      	bne.n	800d584 <lwip_sendto+0x8c>
 800d57a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d57c:	f003 0303 	and.w	r3, r3, #3
 800d580:	2b00      	cmp	r3, #0
 800d582:	d014      	beq.n	800d5ae <lwip_sendto+0xb6>
 800d584:	4b32      	ldr	r3, [pc, #200]	; (800d650 <lwip_sendto+0x158>)
 800d586:	f240 6252 	movw	r2, #1618	; 0x652
 800d58a:	4932      	ldr	r1, [pc, #200]	; (800d654 <lwip_sendto+0x15c>)
 800d58c:	4832      	ldr	r0, [pc, #200]	; (800d658 <lwip_sendto+0x160>)
 800d58e:	f00f faaf 	bl	801caf0 <iprintf>
 800d592:	f06f 000f 	mvn.w	r0, #15
 800d596:	f7ff f81d 	bl	800c5d4 <err_to_errno>
 800d59a:	62b8      	str	r0, [r7, #40]	; 0x28
 800d59c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d002      	beq.n	800d5a8 <lwip_sendto+0xb0>
 800d5a2:	4a2a      	ldr	r2, [pc, #168]	; (800d64c <lwip_sendto+0x154>)
 800d5a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5a6:	6013      	str	r3, [r2, #0]
 800d5a8:	f04f 33ff 	mov.w	r3, #4294967295
 800d5ac:	e049      	b.n	800d642 <lwip_sendto+0x14a>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	617b      	str	r3, [r7, #20]
 800d5b2:	697b      	ldr	r3, [r7, #20]
 800d5b4:	613b      	str	r3, [r7, #16]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 800d5b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d00a      	beq.n	800d5d2 <lwip_sendto+0xda>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 800d5bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5be:	685b      	ldr	r3, [r3, #4]
 800d5c0:	61bb      	str	r3, [r7, #24]
 800d5c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5c4:	885b      	ldrh	r3, [r3, #2]
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	f000 fdfa 	bl	800e1c0 <lwip_htons>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	86bb      	strh	r3, [r7, #52]	; 0x34
 800d5d0:	e003      	b.n	800d5da <lwip_sendto+0xe2>
  } else {
    remote_port = 0;
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	86bb      	strh	r3, [r7, #52]	; 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	61bb      	str	r3, [r7, #24]
  }
  netbuf_fromport(&buf) = remote_port;
 800d5da:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d5dc:	83bb      	strh	r3, [r7, #28]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 800d5de:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d5e0:	f107 0310 	add.w	r3, r7, #16
 800d5e4:	68b9      	ldr	r1, [r7, #8]
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	f7ff f85a 	bl	800c6a0 <netbuf_ref>
 800d5ec:	4603      	mov	r3, r0
 800d5ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 800d5f2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d10a      	bne.n	800d610 <lwip_sendto+0x118>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 800d5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	f107 0210 	add.w	r2, r7, #16
 800d602:	4611      	mov	r1, r2
 800d604:	4618      	mov	r0, r3
 800d606:	f7fd f9f5 	bl	800a9f4 <netconn_send>
 800d60a:	4603      	mov	r3, r0
 800d60c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 800d610:	f107 0310 	add.w	r3, r7, #16
 800d614:	4618      	mov	r0, r3
 800d616:	f7ff f81b 	bl	800c650 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 800d61a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800d61e:	4618      	mov	r0, r3
 800d620:	f7fe ffd8 	bl	800c5d4 <err_to_errno>
 800d624:	6278      	str	r0, [r7, #36]	; 0x24
 800d626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d002      	beq.n	800d632 <lwip_sendto+0x13a>
 800d62c:	4a07      	ldr	r2, [pc, #28]	; (800d64c <lwip_sendto+0x154>)
 800d62e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d630:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 800d632:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800d636:	2b00      	cmp	r3, #0
 800d638:	d101      	bne.n	800d63e <lwip_sendto+0x146>
 800d63a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d63c:	e001      	b.n	800d642 <lwip_sendto+0x14a>
 800d63e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d642:	4618      	mov	r0, r3
 800d644:	3738      	adds	r7, #56	; 0x38
 800d646:	46bd      	mov	sp, r7
 800d648:	bd80      	pop	{r7, pc}
 800d64a:	bf00      	nop
 800d64c:	20008334 	.word	0x20008334
 800d650:	0801f68c 	.word	0x0801f68c
 800d654:	0801f96c 	.word	0x0801f96c
 800d658:	0801f6e0 	.word	0x0801f6e0

0800d65c <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b086      	sub	sp, #24
 800d660:	af00      	add	r7, sp, #0
 800d662:	60f8      	str	r0, [r7, #12]
 800d664:	60b9      	str	r1, [r7, #8]
 800d666:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 800d668:	68bb      	ldr	r3, [r7, #8]
 800d66a:	2b03      	cmp	r3, #3
 800d66c:	d009      	beq.n	800d682 <lwip_socket+0x26>
 800d66e:	68bb      	ldr	r3, [r7, #8]
 800d670:	2b03      	cmp	r3, #3
 800d672:	dc23      	bgt.n	800d6bc <lwip_socket+0x60>
 800d674:	68bb      	ldr	r3, [r7, #8]
 800d676:	2b01      	cmp	r3, #1
 800d678:	d019      	beq.n	800d6ae <lwip_socket+0x52>
 800d67a:	68bb      	ldr	r3, [r7, #8]
 800d67c:	2b02      	cmp	r3, #2
 800d67e:	d009      	beq.n	800d694 <lwip_socket+0x38>
 800d680:	e01c      	b.n	800d6bc <lwip_socket+0x60>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	b2db      	uxtb	r3, r3
 800d686:	4a22      	ldr	r2, [pc, #136]	; (800d710 <lwip_socket+0xb4>)
 800d688:	4619      	mov	r1, r3
 800d68a:	2040      	movs	r0, #64	; 0x40
 800d68c:	f7fc fdb4 	bl	800a1f8 <netconn_new_with_proto_and_callback>
 800d690:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800d692:	e019      	b.n	800d6c8 <lwip_socket+0x6c>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	2b88      	cmp	r3, #136	; 0x88
 800d698:	d101      	bne.n	800d69e <lwip_socket+0x42>
 800d69a:	2321      	movs	r3, #33	; 0x21
 800d69c:	e000      	b.n	800d6a0 <lwip_socket+0x44>
 800d69e:	2320      	movs	r3, #32
 800d6a0:	4a1b      	ldr	r2, [pc, #108]	; (800d710 <lwip_socket+0xb4>)
 800d6a2:	2100      	movs	r1, #0
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	f7fc fda7 	bl	800a1f8 <netconn_new_with_proto_and_callback>
 800d6aa:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800d6ac:	e00c      	b.n	800d6c8 <lwip_socket+0x6c>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 800d6ae:	4a18      	ldr	r2, [pc, #96]	; (800d710 <lwip_socket+0xb4>)
 800d6b0:	2100      	movs	r1, #0
 800d6b2:	2010      	movs	r0, #16
 800d6b4:	f7fc fda0 	bl	800a1f8 <netconn_new_with_proto_and_callback>
 800d6b8:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800d6ba:	e005      	b.n	800d6c8 <lwip_socket+0x6c>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 800d6bc:	4b15      	ldr	r3, [pc, #84]	; (800d714 <lwip_socket+0xb8>)
 800d6be:	2216      	movs	r2, #22
 800d6c0:	601a      	str	r2, [r3, #0]
      return -1;
 800d6c2:	f04f 33ff 	mov.w	r3, #4294967295
 800d6c6:	e01e      	b.n	800d706 <lwip_socket+0xaa>
  }

  if (!conn) {
 800d6c8:	697b      	ldr	r3, [r7, #20]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d105      	bne.n	800d6da <lwip_socket+0x7e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 800d6ce:	4b11      	ldr	r3, [pc, #68]	; (800d714 <lwip_socket+0xb8>)
 800d6d0:	2269      	movs	r2, #105	; 0x69
 800d6d2:	601a      	str	r2, [r3, #0]
    return -1;
 800d6d4:	f04f 33ff 	mov.w	r3, #4294967295
 800d6d8:	e015      	b.n	800d706 <lwip_socket+0xaa>
  }

  i = alloc_socket(conn, 0);
 800d6da:	2100      	movs	r1, #0
 800d6dc:	6978      	ldr	r0, [r7, #20]
 800d6de:	f7ff f87f 	bl	800c7e0 <alloc_socket>
 800d6e2:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 800d6e4:	693b      	ldr	r3, [r7, #16]
 800d6e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6ea:	d108      	bne.n	800d6fe <lwip_socket+0xa2>
    netconn_delete(conn);
 800d6ec:	6978      	ldr	r0, [r7, #20]
 800d6ee:	f7fc fe21 	bl	800a334 <netconn_delete>
    set_errno(ENFILE);
 800d6f2:	4b08      	ldr	r3, [pc, #32]	; (800d714 <lwip_socket+0xb8>)
 800d6f4:	2217      	movs	r2, #23
 800d6f6:	601a      	str	r2, [r3, #0]
    return -1;
 800d6f8:	f04f 33ff 	mov.w	r3, #4294967295
 800d6fc:	e003      	b.n	800d706 <lwip_socket+0xaa>
  }
  conn->socket = i;
 800d6fe:	697b      	ldr	r3, [r7, #20]
 800d700:	693a      	ldr	r2, [r7, #16]
 800d702:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 800d704:	693b      	ldr	r3, [r7, #16]
}
 800d706:	4618      	mov	r0, r3
 800d708:	3718      	adds	r7, #24
 800d70a:	46bd      	mov	sp, r7
 800d70c:	bd80      	pop	{r7, pc}
 800d70e:	bf00      	nop
 800d710:	0800d7a1 	.word	0x0800d7a1
 800d714:	20008334 	.word	0x20008334

0800d718 <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 800d718:	b480      	push	{r7}
 800d71a:	b087      	sub	sp, #28
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	60f8      	str	r0, [r7, #12]
 800d720:	60b9      	str	r1, [r7, #8]
 800d722:	607a      	str	r2, [r7, #4]
 800d724:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800d726:	2300      	movs	r3, #0
 800d728:	617b      	str	r3, [r7, #20]
 800d72a:	e02c      	b.n	800d786 <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	695a      	ldr	r2, [r3, #20]
 800d730:	697b      	ldr	r3, [r7, #20]
 800d732:	00db      	lsls	r3, r3, #3
 800d734:	4413      	add	r3, r2
 800d736:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 800d738:	693b      	ldr	r3, [r7, #16]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	68ba      	ldr	r2, [r7, #8]
 800d73e:	429a      	cmp	r2, r3
 800d740:	d11e      	bne.n	800d780 <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d009      	beq.n	800d75c <lwip_poll_should_wake+0x44>
 800d748:	693b      	ldr	r3, [r7, #16]
 800d74a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d74e:	b29b      	uxth	r3, r3
 800d750:	f003 0301 	and.w	r3, r3, #1
 800d754:	2b00      	cmp	r3, #0
 800d756:	d001      	beq.n	800d75c <lwip_poll_should_wake+0x44>
        return 1;
 800d758:	2301      	movs	r3, #1
 800d75a:	e01a      	b.n	800d792 <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 800d75c:	683b      	ldr	r3, [r7, #0]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d009      	beq.n	800d776 <lwip_poll_should_wake+0x5e>
 800d762:	693b      	ldr	r3, [r7, #16]
 800d764:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d768:	b29b      	uxth	r3, r3
 800d76a:	f003 0302 	and.w	r3, r3, #2
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d001      	beq.n	800d776 <lwip_poll_should_wake+0x5e>
        return 1;
 800d772:	2301      	movs	r3, #1
 800d774:	e00d      	b.n	800d792 <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 800d776:	6a3b      	ldr	r3, [r7, #32]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d001      	beq.n	800d780 <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 800d77c:	2301      	movs	r3, #1
 800d77e:	e008      	b.n	800d792 <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800d780:	697b      	ldr	r3, [r7, #20]
 800d782:	3301      	adds	r3, #1
 800d784:	617b      	str	r3, [r7, #20]
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	699b      	ldr	r3, [r3, #24]
 800d78a:	697a      	ldr	r2, [r7, #20]
 800d78c:	429a      	cmp	r2, r3
 800d78e:	d3cd      	bcc.n	800d72c <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 800d790:	2300      	movs	r3, #0
}
 800d792:	4618      	mov	r0, r3
 800d794:	371c      	adds	r7, #28
 800d796:	46bd      	mov	sp, r7
 800d798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79c:	4770      	bx	lr
	...

0800d7a0 <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b08a      	sub	sp, #40	; 0x28
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
 800d7a8:	460b      	mov	r3, r1
 800d7aa:	70fb      	strb	r3, [r7, #3]
 800d7ac:	4613      	mov	r3, r2
 800d7ae:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	f000 80a4 	beq.w	800d900 <event_callback+0x160>
    s = conn->socket;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	699b      	ldr	r3, [r3, #24]
 800d7bc:	627b      	str	r3, [r7, #36]	; 0x24
    if (s < 0) {
 800d7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	da18      	bge.n	800d7f6 <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 800d7c4:	f00b ffb0 	bl	8019728 <sys_arch_protect>
 800d7c8:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	699b      	ldr	r3, [r3, #24]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	da0b      	bge.n	800d7ea <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 800d7d2:	78fb      	ldrb	r3, [r7, #3]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d104      	bne.n	800d7e2 <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	699b      	ldr	r3, [r3, #24]
 800d7dc:	1e5a      	subs	r2, r3, #1
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 800d7e2:	69f8      	ldr	r0, [r7, #28]
 800d7e4:	f00b ffae 	bl	8019744 <sys_arch_unprotect>
        return;
 800d7e8:	e08d      	b.n	800d906 <event_callback+0x166>
      }
      s = conn->socket;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	699b      	ldr	r3, [r3, #24]
 800d7ee:	627b      	str	r3, [r7, #36]	; 0x24
      SYS_ARCH_UNPROTECT(lev);
 800d7f0:	69f8      	ldr	r0, [r7, #28]
 800d7f2:	f00b ffa7 	bl	8019744 <sys_arch_unprotect>
    }

    sock = get_socket(s);
 800d7f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d7f8:	f7fe ffda 	bl	800c7b0 <get_socket>
 800d7fc:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 800d7fe:	69bb      	ldr	r3, [r7, #24]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d07f      	beq.n	800d904 <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 800d804:	2301      	movs	r3, #1
 800d806:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 800d808:	f00b ff8e 	bl	8019728 <sys_arch_protect>
 800d80c:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 800d80e:	78fb      	ldrb	r3, [r7, #3]
 800d810:	2b04      	cmp	r3, #4
 800d812:	d83e      	bhi.n	800d892 <event_callback+0xf2>
 800d814:	a201      	add	r2, pc, #4	; (adr r2, 800d81c <event_callback+0x7c>)
 800d816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d81a:	bf00      	nop
 800d81c:	0800d831 	.word	0x0800d831
 800d820:	0800d853 	.word	0x0800d853
 800d824:	0800d86b 	.word	0x0800d86b
 800d828:	0800d87f 	.word	0x0800d87f
 800d82c:	0800d88b 	.word	0x0800d88b
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 800d830:	69bb      	ldr	r3, [r7, #24]
 800d832:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d836:	b29b      	uxth	r3, r3
 800d838:	3301      	adds	r3, #1
 800d83a:	b29b      	uxth	r3, r3
 800d83c:	b21a      	sxth	r2, r3
 800d83e:	69bb      	ldr	r3, [r7, #24]
 800d840:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 800d842:	69bb      	ldr	r3, [r7, #24]
 800d844:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d848:	2b01      	cmp	r3, #1
 800d84a:	dd2a      	ble.n	800d8a2 <event_callback+0x102>
        check_waiters = 0;
 800d84c:	2300      	movs	r3, #0
 800d84e:	623b      	str	r3, [r7, #32]
      }
      break;
 800d850:	e027      	b.n	800d8a2 <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 800d852:	69bb      	ldr	r3, [r7, #24]
 800d854:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d858:	b29b      	uxth	r3, r3
 800d85a:	3b01      	subs	r3, #1
 800d85c:	b29b      	uxth	r3, r3
 800d85e:	b21a      	sxth	r2, r3
 800d860:	69bb      	ldr	r3, [r7, #24]
 800d862:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 800d864:	2300      	movs	r3, #0
 800d866:	623b      	str	r3, [r7, #32]
      break;
 800d868:	e01c      	b.n	800d8a4 <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 800d86a:	69bb      	ldr	r3, [r7, #24]
 800d86c:	895b      	ldrh	r3, [r3, #10]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d001      	beq.n	800d876 <event_callback+0xd6>
        check_waiters = 0;
 800d872:	2300      	movs	r3, #0
 800d874:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 800d876:	69bb      	ldr	r3, [r7, #24]
 800d878:	2201      	movs	r2, #1
 800d87a:	815a      	strh	r2, [r3, #10]
      break;
 800d87c:	e012      	b.n	800d8a4 <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 800d87e:	69bb      	ldr	r3, [r7, #24]
 800d880:	2200      	movs	r2, #0
 800d882:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 800d884:	2300      	movs	r3, #0
 800d886:	623b      	str	r3, [r7, #32]
      break;
 800d888:	e00c      	b.n	800d8a4 <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 800d88a:	69bb      	ldr	r3, [r7, #24]
 800d88c:	2201      	movs	r2, #1
 800d88e:	819a      	strh	r2, [r3, #12]
      break;
 800d890:	e008      	b.n	800d8a4 <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 800d892:	4b1e      	ldr	r3, [pc, #120]	; (800d90c <event_callback+0x16c>)
 800d894:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 800d898:	491d      	ldr	r1, [pc, #116]	; (800d910 <event_callback+0x170>)
 800d89a:	481e      	ldr	r0, [pc, #120]	; (800d914 <event_callback+0x174>)
 800d89c:	f00f f928 	bl	801caf0 <iprintf>
      break;
 800d8a0:	e000      	b.n	800d8a4 <event_callback+0x104>
      break;
 800d8a2:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 800d8a4:	69bb      	ldr	r3, [r7, #24]
 800d8a6:	7b9b      	ldrb	r3, [r3, #14]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d025      	beq.n	800d8f8 <event_callback+0x158>
 800d8ac:	6a3b      	ldr	r3, [r7, #32]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d022      	beq.n	800d8f8 <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 800d8b2:	69bb      	ldr	r3, [r7, #24]
 800d8b4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	bfcc      	ite	gt
 800d8bc:	2301      	movgt	r3, #1
 800d8be:	2300      	movle	r3, #0
 800d8c0:	b2db      	uxtb	r3, r3
 800d8c2:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 800d8c4:	69bb      	ldr	r3, [r7, #24]
 800d8c6:	895b      	ldrh	r3, [r3, #10]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	bf14      	ite	ne
 800d8cc:	2301      	movne	r3, #1
 800d8ce:	2300      	moveq	r3, #0
 800d8d0:	b2db      	uxtb	r3, r3
 800d8d2:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 800d8d4:	69bb      	ldr	r3, [r7, #24]
 800d8d6:	899b      	ldrh	r3, [r3, #12]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	bf14      	ite	ne
 800d8dc:	2301      	movne	r3, #1
 800d8de:	2300      	moveq	r3, #0
 800d8e0:	b2db      	uxtb	r3, r3
 800d8e2:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 800d8e4:	69f8      	ldr	r0, [r7, #28]
 800d8e6:	f00b ff2d 	bl	8019744 <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	693a      	ldr	r2, [r7, #16]
 800d8ee:	6979      	ldr	r1, [r7, #20]
 800d8f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d8f2:	f000 f811 	bl	800d918 <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 800d8f6:	e006      	b.n	800d906 <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 800d8f8:	69f8      	ldr	r0, [r7, #28]
 800d8fa:	f00b ff23 	bl	8019744 <sys_arch_unprotect>
 800d8fe:	e002      	b.n	800d906 <event_callback+0x166>
    return;
 800d900:	bf00      	nop
 800d902:	e000      	b.n	800d906 <event_callback+0x166>
      return;
 800d904:	bf00      	nop
  }
  done_socket(sock);
}
 800d906:	3728      	adds	r7, #40	; 0x28
 800d908:	46bd      	mov	sp, r7
 800d90a:	bd80      	pop	{r7, pc}
 800d90c:	0801f68c 	.word	0x0801f68c
 800d910:	0801fa08 	.word	0x0801fa08
 800d914:	0801f6e0 	.word	0x0801f6e0

0800d918 <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b088      	sub	sp, #32
 800d91c:	af02      	add	r7, sp, #8
 800d91e:	60f8      	str	r0, [r7, #12]
 800d920:	60b9      	str	r1, [r7, #8]
 800d922:	607a      	str	r2, [r7, #4]
 800d924:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800d926:	4b3e      	ldr	r3, [pc, #248]	; (800da20 <select_check_waiters+0x108>)
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	617b      	str	r3, [r7, #20]
 800d92c:	e06f      	b.n	800da0e <select_check_waiters+0xf6>
    if (scb->sem_signalled == 0) {
 800d92e:	697b      	ldr	r3, [r7, #20]
 800d930:	69db      	ldr	r3, [r3, #28]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d168      	bne.n	800da08 <select_check_waiters+0xf0>
      /* semaphore not signalled yet */
      int do_signal = 0;
 800d936:	2300      	movs	r3, #0
 800d938:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 800d93a:	697b      	ldr	r3, [r7, #20]
 800d93c:	695b      	ldr	r3, [r3, #20]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d009      	beq.n	800d956 <select_check_waiters+0x3e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 800d942:	683b      	ldr	r3, [r7, #0]
 800d944:	9300      	str	r3, [sp, #0]
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	68ba      	ldr	r2, [r7, #8]
 800d94a:	68f9      	ldr	r1, [r7, #12]
 800d94c:	6978      	ldr	r0, [r7, #20]
 800d94e:	f7ff fee3 	bl	800d718 <lwip_poll_should_wake>
 800d952:	6138      	str	r0, [r7, #16]
 800d954:	e04d      	b.n	800d9f2 <select_check_waiters+0xda>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 800d956:	68bb      	ldr	r3, [r7, #8]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d014      	beq.n	800d986 <select_check_waiters+0x6e>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 800d95c:	697b      	ldr	r3, [r7, #20]
 800d95e:	689b      	ldr	r3, [r3, #8]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d010      	beq.n	800d986 <select_check_waiters+0x6e>
 800d964:	697b      	ldr	r3, [r7, #20]
 800d966:	689b      	ldr	r3, [r3, #8]
 800d968:	68fa      	ldr	r2, [r7, #12]
 800d96a:	0952      	lsrs	r2, r2, #5
 800d96c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d970:	68fa      	ldr	r2, [r7, #12]
 800d972:	f002 021f 	and.w	r2, r2, #31
 800d976:	2101      	movs	r1, #1
 800d978:	fa01 f202 	lsl.w	r2, r1, r2
 800d97c:	4013      	ands	r3, r2
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d001      	beq.n	800d986 <select_check_waiters+0x6e>
            do_signal = 1;
 800d982:	2301      	movs	r3, #1
 800d984:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d017      	beq.n	800d9bc <select_check_waiters+0xa4>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 800d98c:	693b      	ldr	r3, [r7, #16]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d114      	bne.n	800d9bc <select_check_waiters+0xa4>
 800d992:	697b      	ldr	r3, [r7, #20]
 800d994:	68db      	ldr	r3, [r3, #12]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d010      	beq.n	800d9bc <select_check_waiters+0xa4>
 800d99a:	697b      	ldr	r3, [r7, #20]
 800d99c:	68db      	ldr	r3, [r3, #12]
 800d99e:	68fa      	ldr	r2, [r7, #12]
 800d9a0:	0952      	lsrs	r2, r2, #5
 800d9a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9a6:	68fa      	ldr	r2, [r7, #12]
 800d9a8:	f002 021f 	and.w	r2, r2, #31
 800d9ac:	2101      	movs	r1, #1
 800d9ae:	fa01 f202 	lsl.w	r2, r1, r2
 800d9b2:	4013      	ands	r3, r2
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d001      	beq.n	800d9bc <select_check_waiters+0xa4>
            do_signal = 1;
 800d9b8:	2301      	movs	r3, #1
 800d9ba:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 800d9bc:	683b      	ldr	r3, [r7, #0]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d017      	beq.n	800d9f2 <select_check_waiters+0xda>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 800d9c2:	693b      	ldr	r3, [r7, #16]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d114      	bne.n	800d9f2 <select_check_waiters+0xda>
 800d9c8:	697b      	ldr	r3, [r7, #20]
 800d9ca:	691b      	ldr	r3, [r3, #16]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d010      	beq.n	800d9f2 <select_check_waiters+0xda>
 800d9d0:	697b      	ldr	r3, [r7, #20]
 800d9d2:	691b      	ldr	r3, [r3, #16]
 800d9d4:	68fa      	ldr	r2, [r7, #12]
 800d9d6:	0952      	lsrs	r2, r2, #5
 800d9d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9dc:	68fa      	ldr	r2, [r7, #12]
 800d9de:	f002 021f 	and.w	r2, r2, #31
 800d9e2:	2101      	movs	r1, #1
 800d9e4:	fa01 f202 	lsl.w	r2, r1, r2
 800d9e8:	4013      	ands	r3, r2
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d001      	beq.n	800d9f2 <select_check_waiters+0xda>
            do_signal = 1;
 800d9ee:	2301      	movs	r3, #1
 800d9f0:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 800d9f2:	693b      	ldr	r3, [r7, #16]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d007      	beq.n	800da08 <select_check_waiters+0xf0>
        scb->sem_signalled = 1;
 800d9f8:	697b      	ldr	r3, [r7, #20]
 800d9fa:	2201      	movs	r2, #1
 800d9fc:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 800d9fe:	697b      	ldr	r3, [r7, #20]
 800da00:	3320      	adds	r3, #32
 800da02:	4618      	mov	r0, r3
 800da04:	f00b fdfa 	bl	80195fc <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800da08:	697b      	ldr	r3, [r7, #20]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	617b      	str	r3, [r7, #20]
 800da0e:	697b      	ldr	r3, [r7, #20]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d18c      	bne.n	800d92e <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 800da14:	bf00      	nop
 800da16:	bf00      	nop
 800da18:	3718      	adds	r7, #24
 800da1a:	46bd      	mov	sp, r7
 800da1c:	bd80      	pop	{r7, pc}
 800da1e:	bf00      	nop
 800da20:	20001438 	.word	0x20001438

0800da24 <lwip_sockopt_to_ipopt>:
}
#endif  /* LWIP_TCPIP_CORE_LOCKING */

static int
lwip_sockopt_to_ipopt(int optname)
{
 800da24:	b580      	push	{r7, lr}
 800da26:	b082      	sub	sp, #8
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
  /* Map SO_* values to our internal SOF_* values
   * We should not rely on #defines in socket.h
   * being in sync with ip.h.
   */
  switch (optname) {
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	2b20      	cmp	r3, #32
 800da30:	d009      	beq.n	800da46 <lwip_sockopt_to_ipopt+0x22>
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	2b20      	cmp	r3, #32
 800da36:	dc0c      	bgt.n	800da52 <lwip_sockopt_to_ipopt+0x2e>
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2b04      	cmp	r3, #4
 800da3c:	d007      	beq.n	800da4e <lwip_sockopt_to_ipopt+0x2a>
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	2b08      	cmp	r3, #8
 800da42:	d002      	beq.n	800da4a <lwip_sockopt_to_ipopt+0x26>
 800da44:	e005      	b.n	800da52 <lwip_sockopt_to_ipopt+0x2e>
  case SO_BROADCAST:
    return SOF_BROADCAST;
 800da46:	2320      	movs	r3, #32
 800da48:	e00b      	b.n	800da62 <lwip_sockopt_to_ipopt+0x3e>
  case SO_KEEPALIVE:
    return SOF_KEEPALIVE;
 800da4a:	2308      	movs	r3, #8
 800da4c:	e009      	b.n	800da62 <lwip_sockopt_to_ipopt+0x3e>
  case SO_REUSEADDR:
    return SOF_REUSEADDR;
 800da4e:	2304      	movs	r3, #4
 800da50:	e007      	b.n	800da62 <lwip_sockopt_to_ipopt+0x3e>
  default:
    LWIP_ASSERT("Unknown socket option", 0);
 800da52:	4b06      	ldr	r3, [pc, #24]	; (800da6c <lwip_sockopt_to_ipopt+0x48>)
 800da54:	f640 3239 	movw	r2, #2873	; 0xb39
 800da58:	4905      	ldr	r1, [pc, #20]	; (800da70 <lwip_sockopt_to_ipopt+0x4c>)
 800da5a:	4806      	ldr	r0, [pc, #24]	; (800da74 <lwip_sockopt_to_ipopt+0x50>)
 800da5c:	f00f f848 	bl	801caf0 <iprintf>
    return 0;
 800da60:	2300      	movs	r3, #0
  }
}
 800da62:	4618      	mov	r0, r3
 800da64:	3708      	adds	r7, #8
 800da66:	46bd      	mov	sp, r7
 800da68:	bd80      	pop	{r7, pc}
 800da6a:	bf00      	nop
 800da6c:	0801f68c 	.word	0x0801f68c
 800da70:	0801fa18 	.word	0x0801fa18
 800da74:	0801f6e0 	.word	0x0801f6e0

0800da78 <lwip_setsockopt>:
  return err;
}

int
lwip_setsockopt(int s, int level, int optname, const void *optval, socklen_t optlen)
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b08a      	sub	sp, #40	; 0x28
 800da7c:	af02      	add	r7, sp, #8
 800da7e:	60f8      	str	r0, [r7, #12]
 800da80:	60b9      	str	r1, [r7, #8]
 800da82:	607a      	str	r2, [r7, #4]
 800da84:	603b      	str	r3, [r7, #0]
  int err = 0;
 800da86:	2300      	movs	r3, #0
 800da88:	61fb      	str	r3, [r7, #28]
  struct lwip_sock *sock = get_socket(s);
 800da8a:	68f8      	ldr	r0, [r7, #12]
 800da8c:	f7fe fe90 	bl	800c7b0 <get_socket>
 800da90:	61b8      	str	r0, [r7, #24]
#if !LWIP_TCPIP_CORE_LOCKING
  err_t cberr;
  LWIP_SETGETSOCKOPT_DATA_VAR_DECLARE(data);
#endif /* !LWIP_TCPIP_CORE_LOCKING */

  if (!sock) {
 800da92:	69bb      	ldr	r3, [r7, #24]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d102      	bne.n	800da9e <lwip_setsockopt+0x26>
    return -1;
 800da98:	f04f 33ff 	mov.w	r3, #4294967295
 800da9c:	e02b      	b.n	800daf6 <lwip_setsockopt+0x7e>
  }

  if (NULL == optval) {
 800da9e:	683b      	ldr	r3, [r7, #0]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d10a      	bne.n	800daba <lwip_setsockopt+0x42>
    sock_set_errno(sock, EFAULT);
 800daa4:	230e      	movs	r3, #14
 800daa6:	613b      	str	r3, [r7, #16]
 800daa8:	693b      	ldr	r3, [r7, #16]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d002      	beq.n	800dab4 <lwip_setsockopt+0x3c>
 800daae:	4a14      	ldr	r2, [pc, #80]	; (800db00 <lwip_setsockopt+0x88>)
 800dab0:	693b      	ldr	r3, [r7, #16]
 800dab2:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800dab4:	f04f 33ff 	mov.w	r3, #4294967295
 800dab8:	e01d      	b.n	800daf6 <lwip_setsockopt+0x7e>
  }

#if LWIP_TCPIP_CORE_LOCKING
  /* core-locking can just call the -impl function */
  LOCK_TCPIP_CORE();
 800daba:	4812      	ldr	r0, [pc, #72]	; (800db04 <lwip_setsockopt+0x8c>)
 800dabc:	f00b fdf8 	bl	80196b0 <sys_mutex_lock>
  err = lwip_setsockopt_impl(s, level, optname, optval, optlen);
 800dac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dac2:	9300      	str	r3, [sp, #0]
 800dac4:	683b      	ldr	r3, [r7, #0]
 800dac6:	687a      	ldr	r2, [r7, #4]
 800dac8:	68b9      	ldr	r1, [r7, #8]
 800daca:	68f8      	ldr	r0, [r7, #12]
 800dacc:	f000 f81c 	bl	800db08 <lwip_setsockopt_impl>
 800dad0:	61f8      	str	r0, [r7, #28]
  UNLOCK_TCPIP_CORE();
 800dad2:	480c      	ldr	r0, [pc, #48]	; (800db04 <lwip_setsockopt+0x8c>)
 800dad4:	f00b fdfb 	bl	80196ce <sys_mutex_unlock>
  /* maybe lwip_getsockopt_internal has changed err */
  err = LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).err;
  LWIP_SETGETSOCKOPT_DATA_VAR_FREE(data);
#endif  /* LWIP_TCPIP_CORE_LOCKING */

  sock_set_errno(sock, err);
 800dad8:	69fb      	ldr	r3, [r7, #28]
 800dada:	617b      	str	r3, [r7, #20]
 800dadc:	697b      	ldr	r3, [r7, #20]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d002      	beq.n	800dae8 <lwip_setsockopt+0x70>
 800dae2:	4a07      	ldr	r2, [pc, #28]	; (800db00 <lwip_setsockopt+0x88>)
 800dae4:	697b      	ldr	r3, [r7, #20]
 800dae6:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return err ? -1 : 0;
 800dae8:	69fb      	ldr	r3, [r7, #28]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d002      	beq.n	800daf4 <lwip_setsockopt+0x7c>
 800daee:	f04f 33ff 	mov.w	r3, #4294967295
 800daf2:	e000      	b.n	800daf6 <lwip_setsockopt+0x7e>
 800daf4:	2300      	movs	r3, #0
}
 800daf6:	4618      	mov	r0, r3
 800daf8:	3720      	adds	r7, #32
 800dafa:	46bd      	mov	sp, r7
 800dafc:	bd80      	pop	{r7, pc}
 800dafe:	bf00      	nop
 800db00:	20008334 	.word	0x20008334
 800db04:	20004c00 	.word	0x20004c00

0800db08 <lwip_setsockopt_impl>:
/** lwip_setsockopt_impl: the actual implementation of setsockopt:
 * same argument as lwip_setsockopt, either called directly or through callback
 */
static int
lwip_setsockopt_impl(int s, int level, int optname, const void *optval, socklen_t optlen)
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b088      	sub	sp, #32
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	60f8      	str	r0, [r7, #12]
 800db10:	60b9      	str	r1, [r7, #8]
 800db12:	607a      	str	r2, [r7, #4]
 800db14:	603b      	str	r3, [r7, #0]
  int err = 0;
 800db16:	2300      	movs	r3, #0
 800db18:	61fb      	str	r3, [r7, #28]
  struct lwip_sock *sock = tryget_socket(s);
 800db1a:	68f8      	ldr	r0, [r7, #12]
 800db1c:	f7fe fe31 	bl	800c782 <tryget_socket>
 800db20:	6178      	str	r0, [r7, #20]
  if (!sock) {
 800db22:	697b      	ldr	r3, [r7, #20]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d101      	bne.n	800db2c <lwip_setsockopt_impl+0x24>
    return EBADF;
 800db28:	2309      	movs	r3, #9
 800db2a:	e187      	b.n	800de3c <lwip_setsockopt_impl+0x334>
  if (LWIP_HOOK_SOCKETS_SETSOCKOPT(s, sock, level, optname, optval, optlen, &err)) {
    return err;
  }
#endif

  switch (level) {
 800db2c:	68bb      	ldr	r3, [r7, #8]
 800db2e:	f640 72ff 	movw	r2, #4095	; 0xfff
 800db32:	4293      	cmp	r3, r2
 800db34:	d015      	beq.n	800db62 <lwip_setsockopt_impl+0x5a>
 800db36:	68bb      	ldr	r3, [r7, #8]
 800db38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db3c:	f280 817a 	bge.w	800de34 <lwip_setsockopt_impl+0x32c>
 800db40:	68bb      	ldr	r3, [r7, #8]
 800db42:	2bff      	cmp	r3, #255	; 0xff
 800db44:	f000 8172 	beq.w	800de2c <lwip_setsockopt_impl+0x324>
 800db48:	68bb      	ldr	r3, [r7, #8]
 800db4a:	2bff      	cmp	r3, #255	; 0xff
 800db4c:	f300 8172 	bgt.w	800de34 <lwip_setsockopt_impl+0x32c>
 800db50:	68bb      	ldr	r3, [r7, #8]
 800db52:	2b00      	cmp	r3, #0
 800db54:	f000 80e0 	beq.w	800dd18 <lwip_setsockopt_impl+0x210>
 800db58:	68bb      	ldr	r3, [r7, #8]
 800db5a:	2b06      	cmp	r3, #6
 800db5c:	f000 8116 	beq.w	800dd8c <lwip_setsockopt_impl+0x284>
 800db60:	e168      	b.n	800de34 <lwip_setsockopt_impl+0x32c>
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	f241 020b 	movw	r2, #4107	; 0x100b
 800db68:	4293      	cmp	r3, r2
 800db6a:	f000 8091 	beq.w	800dc90 <lwip_setsockopt_impl+0x188>
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	f241 020b 	movw	r2, #4107	; 0x100b
 800db74:	4293      	cmp	r3, r2
 800db76:	f300 80cb 	bgt.w	800dd10 <lwip_setsockopt_impl+0x208>
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	f241 020a 	movw	r2, #4106	; 0x100a
 800db80:	4293      	cmp	r3, r2
 800db82:	d050      	beq.n	800dc26 <lwip_setsockopt_impl+0x11e>
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	f241 020a 	movw	r2, #4106	; 0x100a
 800db8a:	4293      	cmp	r3, r2
 800db8c:	f300 80c0 	bgt.w	800dd10 <lwip_setsockopt_impl+0x208>
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	2b08      	cmp	r3, #8
 800db94:	d003      	beq.n	800db9e <lwip_setsockopt_impl+0x96>
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	2b20      	cmp	r3, #32
 800db9a:	f040 80b9 	bne.w	800dd10 <lwip_setsockopt_impl+0x208>
        case SO_BROADCAST:
        case SO_KEEPALIVE:
#if SO_REUSE
        case SO_REUSEADDR:
#endif /* SO_REUSE */
          if ((optname == SO_BROADCAST) &&
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	2b20      	cmp	r3, #32
 800dba2:	d108      	bne.n	800dbb6 <lwip_setsockopt_impl+0xae>
              (NETCONNTYPE_GROUP(sock->conn->type) != NETCONN_UDP)) {
 800dba4:	697b      	ldr	r3, [r7, #20]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	781b      	ldrb	r3, [r3, #0]
 800dbaa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if ((optname == SO_BROADCAST) &&
 800dbae:	2b20      	cmp	r3, #32
 800dbb0:	d001      	beq.n	800dbb6 <lwip_setsockopt_impl+0xae>
            done_socket(sock);
            return ENOPROTOOPT;
 800dbb2:	235c      	movs	r3, #92	; 0x5c
 800dbb4:	e142      	b.n	800de3c <lwip_setsockopt_impl+0x334>
          }

          optname = lwip_sockopt_to_ipopt(optname);
 800dbb6:	6878      	ldr	r0, [r7, #4]
 800dbb8:	f7ff ff34 	bl	800da24 <lwip_sockopt_to_ipopt>
 800dbbc:	6078      	str	r0, [r7, #4]

          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 800dbbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbc0:	2b03      	cmp	r3, #3
 800dbc2:	d801      	bhi.n	800dbc8 <lwip_setsockopt_impl+0xc0>
 800dbc4:	2316      	movs	r3, #22
 800dbc6:	e139      	b.n	800de3c <lwip_setsockopt_impl+0x334>
 800dbc8:	697b      	ldr	r3, [r7, #20]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d004      	beq.n	800dbda <lwip_setsockopt_impl+0xd2>
 800dbd0:	697b      	ldr	r3, [r7, #20]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	685b      	ldr	r3, [r3, #4]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d101      	bne.n	800dbde <lwip_setsockopt_impl+0xd6>
 800dbda:	2316      	movs	r3, #22
 800dbdc:	e12e      	b.n	800de3c <lwip_setsockopt_impl+0x334>
          if (*(const int *)optval) {
 800dbde:	683b      	ldr	r3, [r7, #0]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d00e      	beq.n	800dc04 <lwip_setsockopt_impl+0xfc>
            ip_set_option(sock->conn->pcb.ip, optname);
 800dbe6:	697b      	ldr	r3, [r7, #20]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	685b      	ldr	r3, [r3, #4]
 800dbec:	7a5b      	ldrb	r3, [r3, #9]
 800dbee:	b25a      	sxtb	r2, r3
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	b25b      	sxtb	r3, r3
 800dbf4:	4313      	orrs	r3, r2
 800dbf6:	b25a      	sxtb	r2, r3
 800dbf8:	697b      	ldr	r3, [r7, #20]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	685b      	ldr	r3, [r3, #4]
 800dbfe:	b2d2      	uxtb	r2, r2
 800dc00:	725a      	strb	r2, [r3, #9]
          } else {
            ip_reset_option(sock->conn->pcb.ip, optname);
          }
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, optname=0x%x, ..) -> %s\n",
                                      s, optname, (*(const int *)optval ? "on" : "off")));
          break;
 800dc02:	e088      	b.n	800dd16 <lwip_setsockopt_impl+0x20e>
            ip_reset_option(sock->conn->pcb.ip, optname);
 800dc04:	697b      	ldr	r3, [r7, #20]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	685b      	ldr	r3, [r3, #4]
 800dc0a:	7a5b      	ldrb	r3, [r3, #9]
 800dc0c:	b25a      	sxtb	r2, r3
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	b25b      	sxtb	r3, r3
 800dc12:	43db      	mvns	r3, r3
 800dc14:	b25b      	sxtb	r3, r3
 800dc16:	4013      	ands	r3, r2
 800dc18:	b25a      	sxtb	r2, r3
 800dc1a:	697b      	ldr	r3, [r7, #20]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	685b      	ldr	r3, [r3, #4]
 800dc20:	b2d2      	uxtb	r2, r2
 800dc22:	725a      	strb	r2, [r3, #9]
          break;
 800dc24:	e077      	b.n	800dd16 <lwip_setsockopt_impl+0x20e>
        }
        break;
#endif /* LWIP_SO_LINGER */
#if LWIP_UDP
        case SO_NO_CHECK:
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_UDP);
 800dc26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc28:	2b03      	cmp	r3, #3
 800dc2a:	d801      	bhi.n	800dc30 <lwip_setsockopt_impl+0x128>
 800dc2c:	2316      	movs	r3, #22
 800dc2e:	e105      	b.n	800de3c <lwip_setsockopt_impl+0x334>
 800dc30:	697b      	ldr	r3, [r7, #20]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d004      	beq.n	800dc42 <lwip_setsockopt_impl+0x13a>
 800dc38:	697b      	ldr	r3, [r7, #20]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	685b      	ldr	r3, [r3, #4]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d101      	bne.n	800dc46 <lwip_setsockopt_impl+0x13e>
 800dc42:	2316      	movs	r3, #22
 800dc44:	e0fa      	b.n	800de3c <lwip_setsockopt_impl+0x334>
 800dc46:	697b      	ldr	r3, [r7, #20]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	781b      	ldrb	r3, [r3, #0]
 800dc4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dc50:	2b20      	cmp	r3, #32
 800dc52:	d001      	beq.n	800dc58 <lwip_setsockopt_impl+0x150>
 800dc54:	235c      	movs	r3, #92	; 0x5c
 800dc56:	e0f1      	b.n	800de3c <lwip_setsockopt_impl+0x334>
            /* this flag is only available for UDP, not for UDP lite */
            done_socket(sock);
            return EAFNOSUPPORT;
          }
#endif /* LWIP_UDPLITE */
          if (*(const int *)optval) {
 800dc58:	683b      	ldr	r3, [r7, #0]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d00b      	beq.n	800dc78 <lwip_setsockopt_impl+0x170>
            udp_set_flags(sock->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800dc60:	697b      	ldr	r3, [r7, #20]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	685b      	ldr	r3, [r3, #4]
 800dc66:	7c1a      	ldrb	r2, [r3, #16]
 800dc68:	697b      	ldr	r3, [r7, #20]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	685b      	ldr	r3, [r3, #4]
 800dc6e:	f042 0201 	orr.w	r2, r2, #1
 800dc72:	b2d2      	uxtb	r2, r2
 800dc74:	741a      	strb	r2, [r3, #16]
          } else {
            udp_clear_flags(sock->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
          }
          break;
 800dc76:	e04e      	b.n	800dd16 <lwip_setsockopt_impl+0x20e>
            udp_clear_flags(sock->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800dc78:	697b      	ldr	r3, [r7, #20]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	685b      	ldr	r3, [r3, #4]
 800dc7e:	7c1a      	ldrb	r2, [r3, #16]
 800dc80:	697b      	ldr	r3, [r7, #20]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	685b      	ldr	r3, [r3, #4]
 800dc86:	f022 0201 	bic.w	r2, r2, #1
 800dc8a:	b2d2      	uxtb	r2, r2
 800dc8c:	741a      	strb	r2, [r3, #16]
          break;
 800dc8e:	e042      	b.n	800dd16 <lwip_setsockopt_impl+0x20e>
#endif /* LWIP_UDP */
        case SO_BINDTODEVICE: {
          const struct ifreq *iface;
          struct netif *n = NULL;
 800dc90:	2300      	movs	r3, #0
 800dc92:	61bb      	str	r3, [r7, #24]

          LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, optlen, struct ifreq);
 800dc94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc96:	2b05      	cmp	r3, #5
 800dc98:	d801      	bhi.n	800dc9e <lwip_setsockopt_impl+0x196>
 800dc9a:	2316      	movs	r3, #22
 800dc9c:	e0ce      	b.n	800de3c <lwip_setsockopt_impl+0x334>
 800dc9e:	697b      	ldr	r3, [r7, #20]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d101      	bne.n	800dcaa <lwip_setsockopt_impl+0x1a2>
 800dca6:	2316      	movs	r3, #22
 800dca8:	e0c8      	b.n	800de3c <lwip_setsockopt_impl+0x334>

          iface = (const struct ifreq *)optval;
 800dcaa:	683b      	ldr	r3, [r7, #0]
 800dcac:	613b      	str	r3, [r7, #16]
          if (iface->ifr_name[0] != 0) {
 800dcae:	693b      	ldr	r3, [r7, #16]
 800dcb0:	781b      	ldrb	r3, [r3, #0]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d009      	beq.n	800dcca <lwip_setsockopt_impl+0x1c2>
            n = netif_find(iface->ifr_name);
 800dcb6:	693b      	ldr	r3, [r7, #16]
 800dcb8:	4618      	mov	r0, r3
 800dcba:	f001 fac5 	bl	800f248 <netif_find>
 800dcbe:	61b8      	str	r0, [r7, #24]
            if (n == NULL) {
 800dcc0:	69bb      	ldr	r3, [r7, #24]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d101      	bne.n	800dcca <lwip_setsockopt_impl+0x1c2>
              done_socket(sock);
              return ENODEV;
 800dcc6:	2313      	movs	r3, #19
 800dcc8:	e0b8      	b.n	800de3c <lwip_setsockopt_impl+0x334>
            }
          }

          switch (NETCONNTYPE_GROUP(netconn_type(sock->conn))) {
 800dcca:	697b      	ldr	r3, [r7, #20]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	781b      	ldrb	r3, [r3, #0]
 800dcd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dcd4:	2b10      	cmp	r3, #16
 800dcd6:	d002      	beq.n	800dcde <lwip_setsockopt_impl+0x1d6>
 800dcd8:	2b20      	cmp	r3, #32
 800dcda:	d008      	beq.n	800dcee <lwip_setsockopt_impl+0x1e6>
 800dcdc:	e00f      	b.n	800dcfe <lwip_setsockopt_impl+0x1f6>
#if LWIP_TCP
            case NETCONN_TCP:
              tcp_bind_netif(sock->conn->pcb.tcp, n);
 800dcde:	697b      	ldr	r3, [r7, #20]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	685b      	ldr	r3, [r3, #4]
 800dce4:	69b9      	ldr	r1, [r7, #24]
 800dce6:	4618      	mov	r0, r3
 800dce8:	f002 fd24 	bl	8010734 <tcp_bind_netif>
              break;
 800dcec:	e00f      	b.n	800dd0e <lwip_setsockopt_impl+0x206>
#endif
#if LWIP_UDP
            case NETCONN_UDP:
              udp_bind_netif(sock->conn->pcb.udp, n);
 800dcee:	697b      	ldr	r3, [r7, #20]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	685b      	ldr	r3, [r3, #4]
 800dcf4:	69b9      	ldr	r1, [r7, #24]
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	f008 ff6c 	bl	8016bd4 <udp_bind_netif>
              break;
 800dcfc:	e007      	b.n	800dd0e <lwip_setsockopt_impl+0x206>
            case NETCONN_RAW:
              raw_bind_netif(sock->conn->pcb.raw, n);
              break;
#endif
            default:
              LWIP_ASSERT("Unhandled netconn type in SO_BINDTODEVICE", 0);
 800dcfe:	4b51      	ldr	r3, [pc, #324]	; (800de44 <lwip_setsockopt_impl+0x33c>)
 800dd00:	f640 527d 	movw	r2, #3453	; 0xd7d
 800dd04:	4950      	ldr	r1, [pc, #320]	; (800de48 <lwip_setsockopt_impl+0x340>)
 800dd06:	4851      	ldr	r0, [pc, #324]	; (800de4c <lwip_setsockopt_impl+0x344>)
 800dd08:	f00e fef2 	bl	801caf0 <iprintf>
              break;
 800dd0c:	bf00      	nop
          }
        }
        break;
 800dd0e:	e002      	b.n	800dd16 <lwip_setsockopt_impl+0x20e>
        default:
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",
                                      s, optname));
          err = ENOPROTOOPT;
 800dd10:	235c      	movs	r3, #92	; 0x5c
 800dd12:	61fb      	str	r3, [r7, #28]
          break;
 800dd14:	bf00      	nop
      }  /* switch (optname) */
      break;
 800dd16:	e090      	b.n	800de3a <lwip_setsockopt_impl+0x332>
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	2b01      	cmp	r3, #1
 800dd1c:	d01a      	beq.n	800dd54 <lwip_setsockopt_impl+0x24c>
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	2b02      	cmp	r3, #2
 800dd22:	d12f      	bne.n	800dd84 <lwip_setsockopt_impl+0x27c>

    /* Level: IPPROTO_IP */
    case IPPROTO_IP:
      switch (optname) {
        case IP_TTL:
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 800dd24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd26:	2b03      	cmp	r3, #3
 800dd28:	d801      	bhi.n	800dd2e <lwip_setsockopt_impl+0x226>
 800dd2a:	2316      	movs	r3, #22
 800dd2c:	e086      	b.n	800de3c <lwip_setsockopt_impl+0x334>
 800dd2e:	697b      	ldr	r3, [r7, #20]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d004      	beq.n	800dd40 <lwip_setsockopt_impl+0x238>
 800dd36:	697b      	ldr	r3, [r7, #20]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	685b      	ldr	r3, [r3, #4]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d101      	bne.n	800dd44 <lwip_setsockopt_impl+0x23c>
 800dd40:	2316      	movs	r3, #22
 800dd42:	e07b      	b.n	800de3c <lwip_setsockopt_impl+0x334>
          sock->conn->pcb.ip->ttl = (u8_t)(*(const int *)optval);
 800dd44:	683b      	ldr	r3, [r7, #0]
 800dd46:	681a      	ldr	r2, [r3, #0]
 800dd48:	697b      	ldr	r3, [r7, #20]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	685b      	ldr	r3, [r3, #4]
 800dd4e:	b2d2      	uxtb	r2, r2
 800dd50:	72da      	strb	r2, [r3, #11]
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TTL, ..) -> %d\n",
                                      s, sock->conn->pcb.ip->ttl));
          break;
 800dd52:	e01a      	b.n	800dd8a <lwip_setsockopt_impl+0x282>
        case IP_TOS:
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 800dd54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd56:	2b03      	cmp	r3, #3
 800dd58:	d801      	bhi.n	800dd5e <lwip_setsockopt_impl+0x256>
 800dd5a:	2316      	movs	r3, #22
 800dd5c:	e06e      	b.n	800de3c <lwip_setsockopt_impl+0x334>
 800dd5e:	697b      	ldr	r3, [r7, #20]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d004      	beq.n	800dd70 <lwip_setsockopt_impl+0x268>
 800dd66:	697b      	ldr	r3, [r7, #20]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	685b      	ldr	r3, [r3, #4]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d101      	bne.n	800dd74 <lwip_setsockopt_impl+0x26c>
 800dd70:	2316      	movs	r3, #22
 800dd72:	e063      	b.n	800de3c <lwip_setsockopt_impl+0x334>
          sock->conn->pcb.ip->tos = (u8_t)(*(const int *)optval);
 800dd74:	683b      	ldr	r3, [r7, #0]
 800dd76:	681a      	ldr	r2, [r3, #0]
 800dd78:	697b      	ldr	r3, [r7, #20]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	685b      	ldr	r3, [r3, #4]
 800dd7e:	b2d2      	uxtb	r2, r2
 800dd80:	729a      	strb	r2, [r3, #10]
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TOS, ..)-> %d\n",
                                      s, sock->conn->pcb.ip->tos));
          break;
 800dd82:	e002      	b.n	800dd8a <lwip_setsockopt_impl+0x282>
        break;
#endif /* LWIP_IGMP */
        default:
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",
                                      s, optname));
          err = ENOPROTOOPT;
 800dd84:	235c      	movs	r3, #92	; 0x5c
 800dd86:	61fb      	str	r3, [r7, #28]
          break;
 800dd88:	bf00      	nop
      }  /* switch (optname) */
      break;
 800dd8a:	e056      	b.n	800de3a <lwip_setsockopt_impl+0x332>

#if LWIP_TCP
    /* Level: IPPROTO_TCP */
    case IPPROTO_TCP:
      /* Special case: all IPPROTO_TCP option take an int */
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_TCP);
 800dd8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd8e:	2b03      	cmp	r3, #3
 800dd90:	d801      	bhi.n	800dd96 <lwip_setsockopt_impl+0x28e>
 800dd92:	2316      	movs	r3, #22
 800dd94:	e052      	b.n	800de3c <lwip_setsockopt_impl+0x334>
 800dd96:	697b      	ldr	r3, [r7, #20]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d004      	beq.n	800dda8 <lwip_setsockopt_impl+0x2a0>
 800dd9e:	697b      	ldr	r3, [r7, #20]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	685b      	ldr	r3, [r3, #4]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d101      	bne.n	800ddac <lwip_setsockopt_impl+0x2a4>
 800dda8:	2316      	movs	r3, #22
 800ddaa:	e047      	b.n	800de3c <lwip_setsockopt_impl+0x334>
 800ddac:	697b      	ldr	r3, [r7, #20]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	781b      	ldrb	r3, [r3, #0]
 800ddb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ddb6:	2b10      	cmp	r3, #16
 800ddb8:	d001      	beq.n	800ddbe <lwip_setsockopt_impl+0x2b6>
 800ddba:	235c      	movs	r3, #92	; 0x5c
 800ddbc:	e03e      	b.n	800de3c <lwip_setsockopt_impl+0x334>
      if (sock->conn->pcb.tcp->state == LISTEN) {
 800ddbe:	697b      	ldr	r3, [r7, #20]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	685b      	ldr	r3, [r3, #4]
 800ddc4:	7d1b      	ldrb	r3, [r3, #20]
 800ddc6:	2b01      	cmp	r3, #1
 800ddc8:	d101      	bne.n	800ddce <lwip_setsockopt_impl+0x2c6>
        done_socket(sock);
        return EINVAL;
 800ddca:	2316      	movs	r3, #22
 800ddcc:	e036      	b.n	800de3c <lwip_setsockopt_impl+0x334>
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	2b01      	cmp	r3, #1
 800ddd2:	d003      	beq.n	800dddc <lwip_setsockopt_impl+0x2d4>
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	2b02      	cmp	r3, #2
 800ddd8:	d01c      	beq.n	800de14 <lwip_setsockopt_impl+0x30c>
 800ddda:	e023      	b.n	800de24 <lwip_setsockopt_impl+0x31c>
      }
      switch (optname) {
        case TCP_NODELAY:
          if (*(const int *)optval) {
 800dddc:	683b      	ldr	r3, [r7, #0]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d00b      	beq.n	800ddfc <lwip_setsockopt_impl+0x2f4>
            tcp_nagle_disable(sock->conn->pcb.tcp);
 800dde4:	697b      	ldr	r3, [r7, #20]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	685b      	ldr	r3, [r3, #4]
 800ddea:	8b5a      	ldrh	r2, [r3, #26]
 800ddec:	697b      	ldr	r3, [r7, #20]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	685b      	ldr	r3, [r3, #4]
 800ddf2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ddf6:	b292      	uxth	r2, r2
 800ddf8:	835a      	strh	r2, [r3, #26]
          } else {
            tcp_nagle_enable(sock->conn->pcb.tcp);
          }
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_NODELAY) -> %s\n",
                                      s, (*(const int *)optval) ? "on" : "off") );
          break;
 800ddfa:	e016      	b.n	800de2a <lwip_setsockopt_impl+0x322>
            tcp_nagle_enable(sock->conn->pcb.tcp);
 800ddfc:	697b      	ldr	r3, [r7, #20]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	685b      	ldr	r3, [r3, #4]
 800de02:	8b5a      	ldrh	r2, [r3, #26]
 800de04:	697b      	ldr	r3, [r7, #20]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	685b      	ldr	r3, [r3, #4]
 800de0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800de0e:	b292      	uxth	r2, r2
 800de10:	835a      	strh	r2, [r3, #26]
          break;
 800de12:	e00a      	b.n	800de2a <lwip_setsockopt_impl+0x322>
        case TCP_KEEPALIVE:
          sock->conn->pcb.tcp->keep_idle = (u32_t)(*(const int *)optval);
 800de14:	683b      	ldr	r3, [r7, #0]
 800de16:	681a      	ldr	r2, [r3, #0]
 800de18:	697b      	ldr	r3, [r7, #20]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	685b      	ldr	r3, [r3, #4]
 800de1e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPALIVE) -> %"U32_F"\n",
                                      s, sock->conn->pcb.tcp->keep_idle));
          break;
 800de22:	e002      	b.n	800de2a <lwip_setsockopt_impl+0x322>
          break;
#endif /* LWIP_TCP_KEEPALIVE */
        default:
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",
                                      s, optname));
          err = ENOPROTOOPT;
 800de24:	235c      	movs	r3, #92	; 0x5c
 800de26:	61fb      	str	r3, [r7, #28]
          break;
 800de28:	bf00      	nop
      }  /* switch (optname) */
      break;
 800de2a:	e006      	b.n	800de3a <lwip_setsockopt_impl+0x332>
          break;
#endif /* LWIP_IPV6 && LWIP_RAW */
        default:
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_RAW, UNIMPL: optname=0x%x, ..)\n",
                                      s, optname));
          err = ENOPROTOOPT;
 800de2c:	235c      	movs	r3, #92	; 0x5c
 800de2e:	61fb      	str	r3, [r7, #28]
          break;
 800de30:	bf00      	nop
      }  /* switch (optname) */
      break;
 800de32:	e002      	b.n	800de3a <lwip_setsockopt_impl+0x332>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, level=0x%x, UNIMPL: optname=0x%x, ..)\n",
                                  s, level, optname));
      err = ENOPROTOOPT;
 800de34:	235c      	movs	r3, #92	; 0x5c
 800de36:	61fb      	str	r3, [r7, #28]
      break;
 800de38:	bf00      	nop
  }  /* switch (level) */

  done_socket(sock);
  return err;
 800de3a:	69fb      	ldr	r3, [r7, #28]
}
 800de3c:	4618      	mov	r0, r3
 800de3e:	3720      	adds	r7, #32
 800de40:	46bd      	mov	sp, r7
 800de42:	bd80      	pop	{r7, pc}
 800de44:	0801f68c 	.word	0x0801f68c
 800de48:	0801fa30 	.word	0x0801fa30
 800de4c:	0801f6e0 	.word	0x0801f6e0

0800de50 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800de50:	b580      	push	{r7, lr}
 800de52:	b084      	sub	sp, #16
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
 800de58:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800de5a:	f008 fa4f 	bl	80162fc <sys_timeouts_sleeptime>
 800de5e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de66:	d10b      	bne.n	800de80 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800de68:	4813      	ldr	r0, [pc, #76]	; (800deb8 <tcpip_timeouts_mbox_fetch+0x68>)
 800de6a:	f00b fc30 	bl	80196ce <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800de6e:	2200      	movs	r2, #0
 800de70:	6839      	ldr	r1, [r7, #0]
 800de72:	6878      	ldr	r0, [r7, #4]
 800de74:	f00b fb06 	bl	8019484 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800de78:	480f      	ldr	r0, [pc, #60]	; (800deb8 <tcpip_timeouts_mbox_fetch+0x68>)
 800de7a:	f00b fc19 	bl	80196b0 <sys_mutex_lock>
    return;
 800de7e:	e018      	b.n	800deb2 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d102      	bne.n	800de8c <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800de86:	f008 f9ff 	bl	8016288 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800de8a:	e7e6      	b.n	800de5a <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800de8c:	480a      	ldr	r0, [pc, #40]	; (800deb8 <tcpip_timeouts_mbox_fetch+0x68>)
 800de8e:	f00b fc1e 	bl	80196ce <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800de92:	68fa      	ldr	r2, [r7, #12]
 800de94:	6839      	ldr	r1, [r7, #0]
 800de96:	6878      	ldr	r0, [r7, #4]
 800de98:	f00b faf4 	bl	8019484 <sys_arch_mbox_fetch>
 800de9c:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800de9e:	4806      	ldr	r0, [pc, #24]	; (800deb8 <tcpip_timeouts_mbox_fetch+0x68>)
 800dea0:	f00b fc06 	bl	80196b0 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800dea4:	68bb      	ldr	r3, [r7, #8]
 800dea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800deaa:	d102      	bne.n	800deb2 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800deac:	f008 f9ec 	bl	8016288 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800deb0:	e7d3      	b.n	800de5a <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800deb2:	3710      	adds	r7, #16
 800deb4:	46bd      	mov	sp, r7
 800deb6:	bd80      	pop	{r7, pc}
 800deb8:	20004c00 	.word	0x20004c00

0800debc <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800debc:	b580      	push	{r7, lr}
 800debe:	b084      	sub	sp, #16
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800dec4:	4810      	ldr	r0, [pc, #64]	; (800df08 <tcpip_thread+0x4c>)
 800dec6:	f00b fbf3 	bl	80196b0 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800deca:	4b10      	ldr	r3, [pc, #64]	; (800df0c <tcpip_thread+0x50>)
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d005      	beq.n	800dede <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800ded2:	4b0e      	ldr	r3, [pc, #56]	; (800df0c <tcpip_thread+0x50>)
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	4a0e      	ldr	r2, [pc, #56]	; (800df10 <tcpip_thread+0x54>)
 800ded8:	6812      	ldr	r2, [r2, #0]
 800deda:	4610      	mov	r0, r2
 800dedc:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800dede:	f107 030c 	add.w	r3, r7, #12
 800dee2:	4619      	mov	r1, r3
 800dee4:	480b      	ldr	r0, [pc, #44]	; (800df14 <tcpip_thread+0x58>)
 800dee6:	f7ff ffb3 	bl	800de50 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	2b00      	cmp	r3, #0
 800deee:	d106      	bne.n	800defe <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800def0:	4b09      	ldr	r3, [pc, #36]	; (800df18 <tcpip_thread+0x5c>)
 800def2:	2291      	movs	r2, #145	; 0x91
 800def4:	4909      	ldr	r1, [pc, #36]	; (800df1c <tcpip_thread+0x60>)
 800def6:	480a      	ldr	r0, [pc, #40]	; (800df20 <tcpip_thread+0x64>)
 800def8:	f00e fdfa 	bl	801caf0 <iprintf>
      continue;
 800defc:	e003      	b.n	800df06 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	4618      	mov	r0, r3
 800df02:	f000 f80f 	bl	800df24 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800df06:	e7ea      	b.n	800dede <tcpip_thread+0x22>
 800df08:	20004c00 	.word	0x20004c00
 800df0c:	2000143c 	.word	0x2000143c
 800df10:	20001440 	.word	0x20001440
 800df14:	20001444 	.word	0x20001444
 800df18:	0801fa5c 	.word	0x0801fa5c
 800df1c:	0801fa8c 	.word	0x0801fa8c
 800df20:	0801faac 	.word	0x0801faac

0800df24 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800df24:	b580      	push	{r7, lr}
 800df26:	b082      	sub	sp, #8
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	781b      	ldrb	r3, [r3, #0]
 800df30:	2b02      	cmp	r3, #2
 800df32:	d026      	beq.n	800df82 <tcpip_thread_handle_msg+0x5e>
 800df34:	2b02      	cmp	r3, #2
 800df36:	dc2b      	bgt.n	800df90 <tcpip_thread_handle_msg+0x6c>
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d002      	beq.n	800df42 <tcpip_thread_handle_msg+0x1e>
 800df3c:	2b01      	cmp	r3, #1
 800df3e:	d015      	beq.n	800df6c <tcpip_thread_handle_msg+0x48>
 800df40:	e026      	b.n	800df90 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	68db      	ldr	r3, [r3, #12]
 800df46:	687a      	ldr	r2, [r7, #4]
 800df48:	6850      	ldr	r0, [r2, #4]
 800df4a:	687a      	ldr	r2, [r7, #4]
 800df4c:	6892      	ldr	r2, [r2, #8]
 800df4e:	4611      	mov	r1, r2
 800df50:	4798      	blx	r3
 800df52:	4603      	mov	r3, r0
 800df54:	2b00      	cmp	r3, #0
 800df56:	d004      	beq.n	800df62 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	685b      	ldr	r3, [r3, #4]
 800df5c:	4618      	mov	r0, r3
 800df5e:	f001 fd45 	bl	800f9ec <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800df62:	6879      	ldr	r1, [r7, #4]
 800df64:	2009      	movs	r0, #9
 800df66:	f000 fe33 	bl	800ebd0 <memp_free>
      break;
 800df6a:	e018      	b.n	800df9e <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	685b      	ldr	r3, [r3, #4]
 800df70:	687a      	ldr	r2, [r7, #4]
 800df72:	6892      	ldr	r2, [r2, #8]
 800df74:	4610      	mov	r0, r2
 800df76:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800df78:	6879      	ldr	r1, [r7, #4]
 800df7a:	2008      	movs	r0, #8
 800df7c:	f000 fe28 	bl	800ebd0 <memp_free>
      break;
 800df80:	e00d      	b.n	800df9e <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	685b      	ldr	r3, [r3, #4]
 800df86:	687a      	ldr	r2, [r7, #4]
 800df88:	6892      	ldr	r2, [r2, #8]
 800df8a:	4610      	mov	r0, r2
 800df8c:	4798      	blx	r3
      break;
 800df8e:	e006      	b.n	800df9e <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800df90:	4b05      	ldr	r3, [pc, #20]	; (800dfa8 <tcpip_thread_handle_msg+0x84>)
 800df92:	22cf      	movs	r2, #207	; 0xcf
 800df94:	4905      	ldr	r1, [pc, #20]	; (800dfac <tcpip_thread_handle_msg+0x88>)
 800df96:	4806      	ldr	r0, [pc, #24]	; (800dfb0 <tcpip_thread_handle_msg+0x8c>)
 800df98:	f00e fdaa 	bl	801caf0 <iprintf>
      break;
 800df9c:	bf00      	nop
  }
}
 800df9e:	bf00      	nop
 800dfa0:	3708      	adds	r7, #8
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	bd80      	pop	{r7, pc}
 800dfa6:	bf00      	nop
 800dfa8:	0801fa5c 	.word	0x0801fa5c
 800dfac:	0801fa8c 	.word	0x0801fa8c
 800dfb0:	0801faac 	.word	0x0801faac

0800dfb4 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b086      	sub	sp, #24
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	60f8      	str	r0, [r7, #12]
 800dfbc:	60b9      	str	r1, [r7, #8]
 800dfbe:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800dfc0:	481a      	ldr	r0, [pc, #104]	; (800e02c <tcpip_inpkt+0x78>)
 800dfc2:	f00b faa7 	bl	8019514 <sys_mbox_valid>
 800dfc6:	4603      	mov	r3, r0
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d105      	bne.n	800dfd8 <tcpip_inpkt+0x24>
 800dfcc:	4b18      	ldr	r3, [pc, #96]	; (800e030 <tcpip_inpkt+0x7c>)
 800dfce:	22fc      	movs	r2, #252	; 0xfc
 800dfd0:	4918      	ldr	r1, [pc, #96]	; (800e034 <tcpip_inpkt+0x80>)
 800dfd2:	4819      	ldr	r0, [pc, #100]	; (800e038 <tcpip_inpkt+0x84>)
 800dfd4:	f00e fd8c 	bl	801caf0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800dfd8:	2009      	movs	r0, #9
 800dfda:	f000 fda7 	bl	800eb2c <memp_malloc>
 800dfde:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800dfe0:	697b      	ldr	r3, [r7, #20]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d102      	bne.n	800dfec <tcpip_inpkt+0x38>
    return ERR_MEM;
 800dfe6:	f04f 33ff 	mov.w	r3, #4294967295
 800dfea:	e01a      	b.n	800e022 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800dfec:	697b      	ldr	r3, [r7, #20]
 800dfee:	2200      	movs	r2, #0
 800dff0:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800dff2:	697b      	ldr	r3, [r7, #20]
 800dff4:	68fa      	ldr	r2, [r7, #12]
 800dff6:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800dff8:	697b      	ldr	r3, [r7, #20]
 800dffa:	68ba      	ldr	r2, [r7, #8]
 800dffc:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800dffe:	697b      	ldr	r3, [r7, #20]
 800e000:	687a      	ldr	r2, [r7, #4]
 800e002:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800e004:	6979      	ldr	r1, [r7, #20]
 800e006:	4809      	ldr	r0, [pc, #36]	; (800e02c <tcpip_inpkt+0x78>)
 800e008:	f00b fa22 	bl	8019450 <sys_mbox_trypost>
 800e00c:	4603      	mov	r3, r0
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d006      	beq.n	800e020 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800e012:	6979      	ldr	r1, [r7, #20]
 800e014:	2009      	movs	r0, #9
 800e016:	f000 fddb 	bl	800ebd0 <memp_free>
    return ERR_MEM;
 800e01a:	f04f 33ff 	mov.w	r3, #4294967295
 800e01e:	e000      	b.n	800e022 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800e020:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800e022:	4618      	mov	r0, r3
 800e024:	3718      	adds	r7, #24
 800e026:	46bd      	mov	sp, r7
 800e028:	bd80      	pop	{r7, pc}
 800e02a:	bf00      	nop
 800e02c:	20001444 	.word	0x20001444
 800e030:	0801fa5c 	.word	0x0801fa5c
 800e034:	0801fad4 	.word	0x0801fad4
 800e038:	0801faac 	.word	0x0801faac

0800e03c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800e03c:	b580      	push	{r7, lr}
 800e03e:	b082      	sub	sp, #8
 800e040:	af00      	add	r7, sp, #0
 800e042:	6078      	str	r0, [r7, #4]
 800e044:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800e046:	683b      	ldr	r3, [r7, #0]
 800e048:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e04c:	f003 0318 	and.w	r3, r3, #24
 800e050:	2b00      	cmp	r3, #0
 800e052:	d006      	beq.n	800e062 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800e054:	4a08      	ldr	r2, [pc, #32]	; (800e078 <tcpip_input+0x3c>)
 800e056:	6839      	ldr	r1, [r7, #0]
 800e058:	6878      	ldr	r0, [r7, #4]
 800e05a:	f7ff ffab 	bl	800dfb4 <tcpip_inpkt>
 800e05e:	4603      	mov	r3, r0
 800e060:	e005      	b.n	800e06e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800e062:	4a06      	ldr	r2, [pc, #24]	; (800e07c <tcpip_input+0x40>)
 800e064:	6839      	ldr	r1, [r7, #0]
 800e066:	6878      	ldr	r0, [r7, #4]
 800e068:	f7ff ffa4 	bl	800dfb4 <tcpip_inpkt>
 800e06c:	4603      	mov	r3, r0
}
 800e06e:	4618      	mov	r0, r3
 800e070:	3708      	adds	r7, #8
 800e072:	46bd      	mov	sp, r7
 800e074:	bd80      	pop	{r7, pc}
 800e076:	bf00      	nop
 800e078:	0801924d 	.word	0x0801924d
 800e07c:	0801805d 	.word	0x0801805d

0800e080 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800e080:	b580      	push	{r7, lr}
 800e082:	b084      	sub	sp, #16
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
 800e088:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800e08a:	4819      	ldr	r0, [pc, #100]	; (800e0f0 <tcpip_try_callback+0x70>)
 800e08c:	f00b fa42 	bl	8019514 <sys_mbox_valid>
 800e090:	4603      	mov	r3, r0
 800e092:	2b00      	cmp	r3, #0
 800e094:	d106      	bne.n	800e0a4 <tcpip_try_callback+0x24>
 800e096:	4b17      	ldr	r3, [pc, #92]	; (800e0f4 <tcpip_try_callback+0x74>)
 800e098:	f240 125d 	movw	r2, #349	; 0x15d
 800e09c:	4916      	ldr	r1, [pc, #88]	; (800e0f8 <tcpip_try_callback+0x78>)
 800e09e:	4817      	ldr	r0, [pc, #92]	; (800e0fc <tcpip_try_callback+0x7c>)
 800e0a0:	f00e fd26 	bl	801caf0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800e0a4:	2008      	movs	r0, #8
 800e0a6:	f000 fd41 	bl	800eb2c <memp_malloc>
 800e0aa:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d102      	bne.n	800e0b8 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800e0b2:	f04f 33ff 	mov.w	r3, #4294967295
 800e0b6:	e017      	b.n	800e0e8 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	2201      	movs	r2, #1
 800e0bc:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	687a      	ldr	r2, [r7, #4]
 800e0c2:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	683a      	ldr	r2, [r7, #0]
 800e0c8:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800e0ca:	68f9      	ldr	r1, [r7, #12]
 800e0cc:	4808      	ldr	r0, [pc, #32]	; (800e0f0 <tcpip_try_callback+0x70>)
 800e0ce:	f00b f9bf 	bl	8019450 <sys_mbox_trypost>
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d006      	beq.n	800e0e6 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800e0d8:	68f9      	ldr	r1, [r7, #12]
 800e0da:	2008      	movs	r0, #8
 800e0dc:	f000 fd78 	bl	800ebd0 <memp_free>
    return ERR_MEM;
 800e0e0:	f04f 33ff 	mov.w	r3, #4294967295
 800e0e4:	e000      	b.n	800e0e8 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800e0e6:	2300      	movs	r3, #0
}
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	3710      	adds	r7, #16
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	bd80      	pop	{r7, pc}
 800e0f0:	20001444 	.word	0x20001444
 800e0f4:	0801fa5c 	.word	0x0801fa5c
 800e0f8:	0801fad4 	.word	0x0801fad4
 800e0fc:	0801faac 	.word	0x0801faac

0800e100 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b084      	sub	sp, #16
 800e104:	af00      	add	r7, sp, #0
 800e106:	60f8      	str	r0, [r7, #12]
 800e108:	60b9      	str	r1, [r7, #8]
 800e10a:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800e10c:	4806      	ldr	r0, [pc, #24]	; (800e128 <tcpip_send_msg_wait_sem+0x28>)
 800e10e:	f00b facf 	bl	80196b0 <sys_mutex_lock>
  fn(apimsg);
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	68b8      	ldr	r0, [r7, #8]
 800e116:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800e118:	4803      	ldr	r0, [pc, #12]	; (800e128 <tcpip_send_msg_wait_sem+0x28>)
 800e11a:	f00b fad8 	bl	80196ce <sys_mutex_unlock>
  return ERR_OK;
 800e11e:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800e120:	4618      	mov	r0, r3
 800e122:	3710      	adds	r7, #16
 800e124:	46bd      	mov	sp, r7
 800e126:	bd80      	pop	{r7, pc}
 800e128:	20004c00 	.word	0x20004c00

0800e12c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b084      	sub	sp, #16
 800e130:	af02      	add	r7, sp, #8
 800e132:	6078      	str	r0, [r7, #4]
 800e134:	6039      	str	r1, [r7, #0]
  lwip_init();
 800e136:	f000 f871 	bl	800e21c <lwip_init>

  tcpip_init_done = initfunc;
 800e13a:	4a17      	ldr	r2, [pc, #92]	; (800e198 <tcpip_init+0x6c>)
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800e140:	4a16      	ldr	r2, [pc, #88]	; (800e19c <tcpip_init+0x70>)
 800e142:	683b      	ldr	r3, [r7, #0]
 800e144:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800e146:	2106      	movs	r1, #6
 800e148:	4815      	ldr	r0, [pc, #84]	; (800e1a0 <tcpip_init+0x74>)
 800e14a:	f00b f955 	bl	80193f8 <sys_mbox_new>
 800e14e:	4603      	mov	r3, r0
 800e150:	2b00      	cmp	r3, #0
 800e152:	d006      	beq.n	800e162 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800e154:	4b13      	ldr	r3, [pc, #76]	; (800e1a4 <tcpip_init+0x78>)
 800e156:	f240 2261 	movw	r2, #609	; 0x261
 800e15a:	4913      	ldr	r1, [pc, #76]	; (800e1a8 <tcpip_init+0x7c>)
 800e15c:	4813      	ldr	r0, [pc, #76]	; (800e1ac <tcpip_init+0x80>)
 800e15e:	f00e fcc7 	bl	801caf0 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800e162:	4813      	ldr	r0, [pc, #76]	; (800e1b0 <tcpip_init+0x84>)
 800e164:	f00b fa8e 	bl	8019684 <sys_mutex_new>
 800e168:	4603      	mov	r3, r0
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d006      	beq.n	800e17c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800e16e:	4b0d      	ldr	r3, [pc, #52]	; (800e1a4 <tcpip_init+0x78>)
 800e170:	f240 2265 	movw	r2, #613	; 0x265
 800e174:	490f      	ldr	r1, [pc, #60]	; (800e1b4 <tcpip_init+0x88>)
 800e176:	480d      	ldr	r0, [pc, #52]	; (800e1ac <tcpip_init+0x80>)
 800e178:	f00e fcba 	bl	801caf0 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800e17c:	2318      	movs	r3, #24
 800e17e:	9300      	str	r3, [sp, #0]
 800e180:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e184:	2200      	movs	r2, #0
 800e186:	490c      	ldr	r1, [pc, #48]	; (800e1b8 <tcpip_init+0x8c>)
 800e188:	480c      	ldr	r0, [pc, #48]	; (800e1bc <tcpip_init+0x90>)
 800e18a:	f00b faad 	bl	80196e8 <sys_thread_new>
}
 800e18e:	bf00      	nop
 800e190:	3708      	adds	r7, #8
 800e192:	46bd      	mov	sp, r7
 800e194:	bd80      	pop	{r7, pc}
 800e196:	bf00      	nop
 800e198:	2000143c 	.word	0x2000143c
 800e19c:	20001440 	.word	0x20001440
 800e1a0:	20001444 	.word	0x20001444
 800e1a4:	0801fa5c 	.word	0x0801fa5c
 800e1a8:	0801fae4 	.word	0x0801fae4
 800e1ac:	0801faac 	.word	0x0801faac
 800e1b0:	20004c00 	.word	0x20004c00
 800e1b4:	0801fb08 	.word	0x0801fb08
 800e1b8:	0800debd 	.word	0x0800debd
 800e1bc:	0801fb2c 	.word	0x0801fb2c

0800e1c0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800e1c0:	b480      	push	{r7}
 800e1c2:	b083      	sub	sp, #12
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	4603      	mov	r3, r0
 800e1c8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800e1ca:	88fb      	ldrh	r3, [r7, #6]
 800e1cc:	021b      	lsls	r3, r3, #8
 800e1ce:	b21a      	sxth	r2, r3
 800e1d0:	88fb      	ldrh	r3, [r7, #6]
 800e1d2:	0a1b      	lsrs	r3, r3, #8
 800e1d4:	b29b      	uxth	r3, r3
 800e1d6:	b21b      	sxth	r3, r3
 800e1d8:	4313      	orrs	r3, r2
 800e1da:	b21b      	sxth	r3, r3
 800e1dc:	b29b      	uxth	r3, r3
}
 800e1de:	4618      	mov	r0, r3
 800e1e0:	370c      	adds	r7, #12
 800e1e2:	46bd      	mov	sp, r7
 800e1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e8:	4770      	bx	lr

0800e1ea <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800e1ea:	b480      	push	{r7}
 800e1ec:	b083      	sub	sp, #12
 800e1ee:	af00      	add	r7, sp, #0
 800e1f0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	061a      	lsls	r2, r3, #24
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	021b      	lsls	r3, r3, #8
 800e1fa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e1fe:	431a      	orrs	r2, r3
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	0a1b      	lsrs	r3, r3, #8
 800e204:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e208:	431a      	orrs	r2, r3
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	0e1b      	lsrs	r3, r3, #24
 800e20e:	4313      	orrs	r3, r2
}
 800e210:	4618      	mov	r0, r3
 800e212:	370c      	adds	r7, #12
 800e214:	46bd      	mov	sp, r7
 800e216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21a:	4770      	bx	lr

0800e21c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b082      	sub	sp, #8
 800e220:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800e222:	2300      	movs	r3, #0
 800e224:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800e226:	f00b fa21 	bl	801966c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800e22a:	f000 f8d5 	bl	800e3d8 <mem_init>
  memp_init();
 800e22e:	f000 fc31 	bl	800ea94 <memp_init>
  pbuf_init();
  netif_init();
 800e232:	f000 fcf7 	bl	800ec24 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800e236:	f008 f899 	bl	801636c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800e23a:	f001 fe81 	bl	800ff40 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800e23e:	f007 ffdb 	bl	80161f8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800e242:	bf00      	nop
 800e244:	3708      	adds	r7, #8
 800e246:	46bd      	mov	sp, r7
 800e248:	bd80      	pop	{r7, pc}
	...

0800e24c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800e24c:	b480      	push	{r7}
 800e24e:	b083      	sub	sp, #12
 800e250:	af00      	add	r7, sp, #0
 800e252:	4603      	mov	r3, r0
 800e254:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800e256:	4b05      	ldr	r3, [pc, #20]	; (800e26c <ptr_to_mem+0x20>)
 800e258:	681a      	ldr	r2, [r3, #0]
 800e25a:	88fb      	ldrh	r3, [r7, #6]
 800e25c:	4413      	add	r3, r2
}
 800e25e:	4618      	mov	r0, r3
 800e260:	370c      	adds	r7, #12
 800e262:	46bd      	mov	sp, r7
 800e264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e268:	4770      	bx	lr
 800e26a:	bf00      	nop
 800e26c:	20001448 	.word	0x20001448

0800e270 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800e270:	b480      	push	{r7}
 800e272:	b083      	sub	sp, #12
 800e274:	af00      	add	r7, sp, #0
 800e276:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800e278:	4b05      	ldr	r3, [pc, #20]	; (800e290 <mem_to_ptr+0x20>)
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	687a      	ldr	r2, [r7, #4]
 800e27e:	1ad3      	subs	r3, r2, r3
 800e280:	b29b      	uxth	r3, r3
}
 800e282:	4618      	mov	r0, r3
 800e284:	370c      	adds	r7, #12
 800e286:	46bd      	mov	sp, r7
 800e288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e28c:	4770      	bx	lr
 800e28e:	bf00      	nop
 800e290:	20001448 	.word	0x20001448

0800e294 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800e294:	b590      	push	{r4, r7, lr}
 800e296:	b085      	sub	sp, #20
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800e29c:	4b45      	ldr	r3, [pc, #276]	; (800e3b4 <plug_holes+0x120>)
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	687a      	ldr	r2, [r7, #4]
 800e2a2:	429a      	cmp	r2, r3
 800e2a4:	d206      	bcs.n	800e2b4 <plug_holes+0x20>
 800e2a6:	4b44      	ldr	r3, [pc, #272]	; (800e3b8 <plug_holes+0x124>)
 800e2a8:	f240 12df 	movw	r2, #479	; 0x1df
 800e2ac:	4943      	ldr	r1, [pc, #268]	; (800e3bc <plug_holes+0x128>)
 800e2ae:	4844      	ldr	r0, [pc, #272]	; (800e3c0 <plug_holes+0x12c>)
 800e2b0:	f00e fc1e 	bl	801caf0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800e2b4:	4b43      	ldr	r3, [pc, #268]	; (800e3c4 <plug_holes+0x130>)
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	687a      	ldr	r2, [r7, #4]
 800e2ba:	429a      	cmp	r2, r3
 800e2bc:	d306      	bcc.n	800e2cc <plug_holes+0x38>
 800e2be:	4b3e      	ldr	r3, [pc, #248]	; (800e3b8 <plug_holes+0x124>)
 800e2c0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800e2c4:	4940      	ldr	r1, [pc, #256]	; (800e3c8 <plug_holes+0x134>)
 800e2c6:	483e      	ldr	r0, [pc, #248]	; (800e3c0 <plug_holes+0x12c>)
 800e2c8:	f00e fc12 	bl	801caf0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	791b      	ldrb	r3, [r3, #4]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d006      	beq.n	800e2e2 <plug_holes+0x4e>
 800e2d4:	4b38      	ldr	r3, [pc, #224]	; (800e3b8 <plug_holes+0x124>)
 800e2d6:	f240 12e1 	movw	r2, #481	; 0x1e1
 800e2da:	493c      	ldr	r1, [pc, #240]	; (800e3cc <plug_holes+0x138>)
 800e2dc:	4838      	ldr	r0, [pc, #224]	; (800e3c0 <plug_holes+0x12c>)
 800e2de:	f00e fc07 	bl	801caf0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	881b      	ldrh	r3, [r3, #0]
 800e2e6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e2ea:	d906      	bls.n	800e2fa <plug_holes+0x66>
 800e2ec:	4b32      	ldr	r3, [pc, #200]	; (800e3b8 <plug_holes+0x124>)
 800e2ee:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800e2f2:	4937      	ldr	r1, [pc, #220]	; (800e3d0 <plug_holes+0x13c>)
 800e2f4:	4832      	ldr	r0, [pc, #200]	; (800e3c0 <plug_holes+0x12c>)
 800e2f6:	f00e fbfb 	bl	801caf0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	881b      	ldrh	r3, [r3, #0]
 800e2fe:	4618      	mov	r0, r3
 800e300:	f7ff ffa4 	bl	800e24c <ptr_to_mem>
 800e304:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800e306:	687a      	ldr	r2, [r7, #4]
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	429a      	cmp	r2, r3
 800e30c:	d024      	beq.n	800e358 <plug_holes+0xc4>
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	791b      	ldrb	r3, [r3, #4]
 800e312:	2b00      	cmp	r3, #0
 800e314:	d120      	bne.n	800e358 <plug_holes+0xc4>
 800e316:	4b2b      	ldr	r3, [pc, #172]	; (800e3c4 <plug_holes+0x130>)
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	68fa      	ldr	r2, [r7, #12]
 800e31c:	429a      	cmp	r2, r3
 800e31e:	d01b      	beq.n	800e358 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800e320:	4b2c      	ldr	r3, [pc, #176]	; (800e3d4 <plug_holes+0x140>)
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	68fa      	ldr	r2, [r7, #12]
 800e326:	429a      	cmp	r2, r3
 800e328:	d102      	bne.n	800e330 <plug_holes+0x9c>
      lfree = mem;
 800e32a:	4a2a      	ldr	r2, [pc, #168]	; (800e3d4 <plug_holes+0x140>)
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	881a      	ldrh	r2, [r3, #0]
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	881b      	ldrh	r3, [r3, #0]
 800e33c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e340:	d00a      	beq.n	800e358 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	881b      	ldrh	r3, [r3, #0]
 800e346:	4618      	mov	r0, r3
 800e348:	f7ff ff80 	bl	800e24c <ptr_to_mem>
 800e34c:	4604      	mov	r4, r0
 800e34e:	6878      	ldr	r0, [r7, #4]
 800e350:	f7ff ff8e 	bl	800e270 <mem_to_ptr>
 800e354:	4603      	mov	r3, r0
 800e356:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	885b      	ldrh	r3, [r3, #2]
 800e35c:	4618      	mov	r0, r3
 800e35e:	f7ff ff75 	bl	800e24c <ptr_to_mem>
 800e362:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800e364:	68ba      	ldr	r2, [r7, #8]
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	429a      	cmp	r2, r3
 800e36a:	d01f      	beq.n	800e3ac <plug_holes+0x118>
 800e36c:	68bb      	ldr	r3, [r7, #8]
 800e36e:	791b      	ldrb	r3, [r3, #4]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d11b      	bne.n	800e3ac <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800e374:	4b17      	ldr	r3, [pc, #92]	; (800e3d4 <plug_holes+0x140>)
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	687a      	ldr	r2, [r7, #4]
 800e37a:	429a      	cmp	r2, r3
 800e37c:	d102      	bne.n	800e384 <plug_holes+0xf0>
      lfree = pmem;
 800e37e:	4a15      	ldr	r2, [pc, #84]	; (800e3d4 <plug_holes+0x140>)
 800e380:	68bb      	ldr	r3, [r7, #8]
 800e382:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	881a      	ldrh	r2, [r3, #0]
 800e388:	68bb      	ldr	r3, [r7, #8]
 800e38a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	881b      	ldrh	r3, [r3, #0]
 800e390:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e394:	d00a      	beq.n	800e3ac <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	881b      	ldrh	r3, [r3, #0]
 800e39a:	4618      	mov	r0, r3
 800e39c:	f7ff ff56 	bl	800e24c <ptr_to_mem>
 800e3a0:	4604      	mov	r4, r0
 800e3a2:	68b8      	ldr	r0, [r7, #8]
 800e3a4:	f7ff ff64 	bl	800e270 <mem_to_ptr>
 800e3a8:	4603      	mov	r3, r0
 800e3aa:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800e3ac:	bf00      	nop
 800e3ae:	3714      	adds	r7, #20
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	bd90      	pop	{r4, r7, pc}
 800e3b4:	20001448 	.word	0x20001448
 800e3b8:	0801fb3c 	.word	0x0801fb3c
 800e3bc:	0801fb6c 	.word	0x0801fb6c
 800e3c0:	0801fb84 	.word	0x0801fb84
 800e3c4:	2000144c 	.word	0x2000144c
 800e3c8:	0801fbac 	.word	0x0801fbac
 800e3cc:	0801fbc8 	.word	0x0801fbc8
 800e3d0:	0801fbe4 	.word	0x0801fbe4
 800e3d4:	20001454 	.word	0x20001454

0800e3d8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b082      	sub	sp, #8
 800e3dc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800e3de:	4b1f      	ldr	r3, [pc, #124]	; (800e45c <mem_init+0x84>)
 800e3e0:	3303      	adds	r3, #3
 800e3e2:	f023 0303 	bic.w	r3, r3, #3
 800e3e6:	461a      	mov	r2, r3
 800e3e8:	4b1d      	ldr	r3, [pc, #116]	; (800e460 <mem_init+0x88>)
 800e3ea:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800e3ec:	4b1c      	ldr	r3, [pc, #112]	; (800e460 <mem_init+0x88>)
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800e3f8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	2200      	movs	r2, #0
 800e404:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800e406:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800e40a:	f7ff ff1f 	bl	800e24c <ptr_to_mem>
 800e40e:	4603      	mov	r3, r0
 800e410:	4a14      	ldr	r2, [pc, #80]	; (800e464 <mem_init+0x8c>)
 800e412:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800e414:	4b13      	ldr	r3, [pc, #76]	; (800e464 <mem_init+0x8c>)
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	2201      	movs	r2, #1
 800e41a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800e41c:	4b11      	ldr	r3, [pc, #68]	; (800e464 <mem_init+0x8c>)
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800e424:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800e426:	4b0f      	ldr	r3, [pc, #60]	; (800e464 <mem_init+0x8c>)
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800e42e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800e430:	4b0b      	ldr	r3, [pc, #44]	; (800e460 <mem_init+0x88>)
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	4a0c      	ldr	r2, [pc, #48]	; (800e468 <mem_init+0x90>)
 800e436:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800e438:	480c      	ldr	r0, [pc, #48]	; (800e46c <mem_init+0x94>)
 800e43a:	f00b f923 	bl	8019684 <sys_mutex_new>
 800e43e:	4603      	mov	r3, r0
 800e440:	2b00      	cmp	r3, #0
 800e442:	d006      	beq.n	800e452 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800e444:	4b0a      	ldr	r3, [pc, #40]	; (800e470 <mem_init+0x98>)
 800e446:	f240 221f 	movw	r2, #543	; 0x21f
 800e44a:	490a      	ldr	r1, [pc, #40]	; (800e474 <mem_init+0x9c>)
 800e44c:	480a      	ldr	r0, [pc, #40]	; (800e478 <mem_init+0xa0>)
 800e44e:	f00e fb4f 	bl	801caf0 <iprintf>
  }
}
 800e452:	bf00      	nop
 800e454:	3708      	adds	r7, #8
 800e456:	46bd      	mov	sp, r7
 800e458:	bd80      	pop	{r7, pc}
 800e45a:	bf00      	nop
 800e45c:	20004c1c 	.word	0x20004c1c
 800e460:	20001448 	.word	0x20001448
 800e464:	2000144c 	.word	0x2000144c
 800e468:	20001454 	.word	0x20001454
 800e46c:	20001450 	.word	0x20001450
 800e470:	0801fb3c 	.word	0x0801fb3c
 800e474:	0801fc10 	.word	0x0801fc10
 800e478:	0801fb84 	.word	0x0801fb84

0800e47c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b086      	sub	sp, #24
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800e484:	6878      	ldr	r0, [r7, #4]
 800e486:	f7ff fef3 	bl	800e270 <mem_to_ptr>
 800e48a:	4603      	mov	r3, r0
 800e48c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	881b      	ldrh	r3, [r3, #0]
 800e492:	4618      	mov	r0, r3
 800e494:	f7ff feda 	bl	800e24c <ptr_to_mem>
 800e498:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	885b      	ldrh	r3, [r3, #2]
 800e49e:	4618      	mov	r0, r3
 800e4a0:	f7ff fed4 	bl	800e24c <ptr_to_mem>
 800e4a4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	881b      	ldrh	r3, [r3, #0]
 800e4aa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e4ae:	d818      	bhi.n	800e4e2 <mem_link_valid+0x66>
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	885b      	ldrh	r3, [r3, #2]
 800e4b4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e4b8:	d813      	bhi.n	800e4e2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800e4be:	8afa      	ldrh	r2, [r7, #22]
 800e4c0:	429a      	cmp	r2, r3
 800e4c2:	d004      	beq.n	800e4ce <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	881b      	ldrh	r3, [r3, #0]
 800e4c8:	8afa      	ldrh	r2, [r7, #22]
 800e4ca:	429a      	cmp	r2, r3
 800e4cc:	d109      	bne.n	800e4e2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800e4ce:	4b08      	ldr	r3, [pc, #32]	; (800e4f0 <mem_link_valid+0x74>)
 800e4d0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800e4d2:	693a      	ldr	r2, [r7, #16]
 800e4d4:	429a      	cmp	r2, r3
 800e4d6:	d006      	beq.n	800e4e6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800e4d8:	693b      	ldr	r3, [r7, #16]
 800e4da:	885b      	ldrh	r3, [r3, #2]
 800e4dc:	8afa      	ldrh	r2, [r7, #22]
 800e4de:	429a      	cmp	r2, r3
 800e4e0:	d001      	beq.n	800e4e6 <mem_link_valid+0x6a>
    return 0;
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	e000      	b.n	800e4e8 <mem_link_valid+0x6c>
  }
  return 1;
 800e4e6:	2301      	movs	r3, #1
}
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	3718      	adds	r7, #24
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	bd80      	pop	{r7, pc}
 800e4f0:	2000144c 	.word	0x2000144c

0800e4f4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800e4f4:	b580      	push	{r7, lr}
 800e4f6:	b088      	sub	sp, #32
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d070      	beq.n	800e5e4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	f003 0303 	and.w	r3, r3, #3
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d00d      	beq.n	800e528 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800e50c:	4b37      	ldr	r3, [pc, #220]	; (800e5ec <mem_free+0xf8>)
 800e50e:	f240 2273 	movw	r2, #627	; 0x273
 800e512:	4937      	ldr	r1, [pc, #220]	; (800e5f0 <mem_free+0xfc>)
 800e514:	4837      	ldr	r0, [pc, #220]	; (800e5f4 <mem_free+0x100>)
 800e516:	f00e faeb 	bl	801caf0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e51a:	f00b f905 	bl	8019728 <sys_arch_protect>
 800e51e:	60f8      	str	r0, [r7, #12]
 800e520:	68f8      	ldr	r0, [r7, #12]
 800e522:	f00b f90f 	bl	8019744 <sys_arch_unprotect>
    return;
 800e526:	e05e      	b.n	800e5e6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	3b08      	subs	r3, #8
 800e52c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800e52e:	4b32      	ldr	r3, [pc, #200]	; (800e5f8 <mem_free+0x104>)
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	69fa      	ldr	r2, [r7, #28]
 800e534:	429a      	cmp	r2, r3
 800e536:	d306      	bcc.n	800e546 <mem_free+0x52>
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	f103 020c 	add.w	r2, r3, #12
 800e53e:	4b2f      	ldr	r3, [pc, #188]	; (800e5fc <mem_free+0x108>)
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	429a      	cmp	r2, r3
 800e544:	d90d      	bls.n	800e562 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800e546:	4b29      	ldr	r3, [pc, #164]	; (800e5ec <mem_free+0xf8>)
 800e548:	f240 227f 	movw	r2, #639	; 0x27f
 800e54c:	492c      	ldr	r1, [pc, #176]	; (800e600 <mem_free+0x10c>)
 800e54e:	4829      	ldr	r0, [pc, #164]	; (800e5f4 <mem_free+0x100>)
 800e550:	f00e face 	bl	801caf0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e554:	f00b f8e8 	bl	8019728 <sys_arch_protect>
 800e558:	6138      	str	r0, [r7, #16]
 800e55a:	6938      	ldr	r0, [r7, #16]
 800e55c:	f00b f8f2 	bl	8019744 <sys_arch_unprotect>
    return;
 800e560:	e041      	b.n	800e5e6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800e562:	4828      	ldr	r0, [pc, #160]	; (800e604 <mem_free+0x110>)
 800e564:	f00b f8a4 	bl	80196b0 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800e568:	69fb      	ldr	r3, [r7, #28]
 800e56a:	791b      	ldrb	r3, [r3, #4]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d110      	bne.n	800e592 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800e570:	4b1e      	ldr	r3, [pc, #120]	; (800e5ec <mem_free+0xf8>)
 800e572:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800e576:	4924      	ldr	r1, [pc, #144]	; (800e608 <mem_free+0x114>)
 800e578:	481e      	ldr	r0, [pc, #120]	; (800e5f4 <mem_free+0x100>)
 800e57a:	f00e fab9 	bl	801caf0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800e57e:	4821      	ldr	r0, [pc, #132]	; (800e604 <mem_free+0x110>)
 800e580:	f00b f8a5 	bl	80196ce <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e584:	f00b f8d0 	bl	8019728 <sys_arch_protect>
 800e588:	6178      	str	r0, [r7, #20]
 800e58a:	6978      	ldr	r0, [r7, #20]
 800e58c:	f00b f8da 	bl	8019744 <sys_arch_unprotect>
    return;
 800e590:	e029      	b.n	800e5e6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800e592:	69f8      	ldr	r0, [r7, #28]
 800e594:	f7ff ff72 	bl	800e47c <mem_link_valid>
 800e598:	4603      	mov	r3, r0
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d110      	bne.n	800e5c0 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800e59e:	4b13      	ldr	r3, [pc, #76]	; (800e5ec <mem_free+0xf8>)
 800e5a0:	f240 2295 	movw	r2, #661	; 0x295
 800e5a4:	4919      	ldr	r1, [pc, #100]	; (800e60c <mem_free+0x118>)
 800e5a6:	4813      	ldr	r0, [pc, #76]	; (800e5f4 <mem_free+0x100>)
 800e5a8:	f00e faa2 	bl	801caf0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800e5ac:	4815      	ldr	r0, [pc, #84]	; (800e604 <mem_free+0x110>)
 800e5ae:	f00b f88e 	bl	80196ce <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e5b2:	f00b f8b9 	bl	8019728 <sys_arch_protect>
 800e5b6:	61b8      	str	r0, [r7, #24]
 800e5b8:	69b8      	ldr	r0, [r7, #24]
 800e5ba:	f00b f8c3 	bl	8019744 <sys_arch_unprotect>
    return;
 800e5be:	e012      	b.n	800e5e6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800e5c0:	69fb      	ldr	r3, [r7, #28]
 800e5c2:	2200      	movs	r2, #0
 800e5c4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800e5c6:	4b12      	ldr	r3, [pc, #72]	; (800e610 <mem_free+0x11c>)
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	69fa      	ldr	r2, [r7, #28]
 800e5cc:	429a      	cmp	r2, r3
 800e5ce:	d202      	bcs.n	800e5d6 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800e5d0:	4a0f      	ldr	r2, [pc, #60]	; (800e610 <mem_free+0x11c>)
 800e5d2:	69fb      	ldr	r3, [r7, #28]
 800e5d4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800e5d6:	69f8      	ldr	r0, [r7, #28]
 800e5d8:	f7ff fe5c 	bl	800e294 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800e5dc:	4809      	ldr	r0, [pc, #36]	; (800e604 <mem_free+0x110>)
 800e5de:	f00b f876 	bl	80196ce <sys_mutex_unlock>
 800e5e2:	e000      	b.n	800e5e6 <mem_free+0xf2>
    return;
 800e5e4:	bf00      	nop
}
 800e5e6:	3720      	adds	r7, #32
 800e5e8:	46bd      	mov	sp, r7
 800e5ea:	bd80      	pop	{r7, pc}
 800e5ec:	0801fb3c 	.word	0x0801fb3c
 800e5f0:	0801fc2c 	.word	0x0801fc2c
 800e5f4:	0801fb84 	.word	0x0801fb84
 800e5f8:	20001448 	.word	0x20001448
 800e5fc:	2000144c 	.word	0x2000144c
 800e600:	0801fc50 	.word	0x0801fc50
 800e604:	20001450 	.word	0x20001450
 800e608:	0801fc6c 	.word	0x0801fc6c
 800e60c:	0801fc94 	.word	0x0801fc94
 800e610:	20001454 	.word	0x20001454

0800e614 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800e614:	b580      	push	{r7, lr}
 800e616:	b088      	sub	sp, #32
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
 800e61c:	460b      	mov	r3, r1
 800e61e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800e620:	887b      	ldrh	r3, [r7, #2]
 800e622:	3303      	adds	r3, #3
 800e624:	b29b      	uxth	r3, r3
 800e626:	f023 0303 	bic.w	r3, r3, #3
 800e62a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800e62c:	8bfb      	ldrh	r3, [r7, #30]
 800e62e:	2b0b      	cmp	r3, #11
 800e630:	d801      	bhi.n	800e636 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800e632:	230c      	movs	r3, #12
 800e634:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800e636:	8bfb      	ldrh	r3, [r7, #30]
 800e638:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e63c:	d803      	bhi.n	800e646 <mem_trim+0x32>
 800e63e:	8bfa      	ldrh	r2, [r7, #30]
 800e640:	887b      	ldrh	r3, [r7, #2]
 800e642:	429a      	cmp	r2, r3
 800e644:	d201      	bcs.n	800e64a <mem_trim+0x36>
    return NULL;
 800e646:	2300      	movs	r3, #0
 800e648:	e0d8      	b.n	800e7fc <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800e64a:	4b6e      	ldr	r3, [pc, #440]	; (800e804 <mem_trim+0x1f0>)
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	687a      	ldr	r2, [r7, #4]
 800e650:	429a      	cmp	r2, r3
 800e652:	d304      	bcc.n	800e65e <mem_trim+0x4a>
 800e654:	4b6c      	ldr	r3, [pc, #432]	; (800e808 <mem_trim+0x1f4>)
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	687a      	ldr	r2, [r7, #4]
 800e65a:	429a      	cmp	r2, r3
 800e65c:	d306      	bcc.n	800e66c <mem_trim+0x58>
 800e65e:	4b6b      	ldr	r3, [pc, #428]	; (800e80c <mem_trim+0x1f8>)
 800e660:	f240 22d1 	movw	r2, #721	; 0x2d1
 800e664:	496a      	ldr	r1, [pc, #424]	; (800e810 <mem_trim+0x1fc>)
 800e666:	486b      	ldr	r0, [pc, #428]	; (800e814 <mem_trim+0x200>)
 800e668:	f00e fa42 	bl	801caf0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800e66c:	4b65      	ldr	r3, [pc, #404]	; (800e804 <mem_trim+0x1f0>)
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	687a      	ldr	r2, [r7, #4]
 800e672:	429a      	cmp	r2, r3
 800e674:	d304      	bcc.n	800e680 <mem_trim+0x6c>
 800e676:	4b64      	ldr	r3, [pc, #400]	; (800e808 <mem_trim+0x1f4>)
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	687a      	ldr	r2, [r7, #4]
 800e67c:	429a      	cmp	r2, r3
 800e67e:	d307      	bcc.n	800e690 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e680:	f00b f852 	bl	8019728 <sys_arch_protect>
 800e684:	60b8      	str	r0, [r7, #8]
 800e686:	68b8      	ldr	r0, [r7, #8]
 800e688:	f00b f85c 	bl	8019744 <sys_arch_unprotect>
    return rmem;
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	e0b5      	b.n	800e7fc <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	3b08      	subs	r3, #8
 800e694:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800e696:	69b8      	ldr	r0, [r7, #24]
 800e698:	f7ff fdea 	bl	800e270 <mem_to_ptr>
 800e69c:	4603      	mov	r3, r0
 800e69e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800e6a0:	69bb      	ldr	r3, [r7, #24]
 800e6a2:	881a      	ldrh	r2, [r3, #0]
 800e6a4:	8afb      	ldrh	r3, [r7, #22]
 800e6a6:	1ad3      	subs	r3, r2, r3
 800e6a8:	b29b      	uxth	r3, r3
 800e6aa:	3b08      	subs	r3, #8
 800e6ac:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800e6ae:	8bfa      	ldrh	r2, [r7, #30]
 800e6b0:	8abb      	ldrh	r3, [r7, #20]
 800e6b2:	429a      	cmp	r2, r3
 800e6b4:	d906      	bls.n	800e6c4 <mem_trim+0xb0>
 800e6b6:	4b55      	ldr	r3, [pc, #340]	; (800e80c <mem_trim+0x1f8>)
 800e6b8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800e6bc:	4956      	ldr	r1, [pc, #344]	; (800e818 <mem_trim+0x204>)
 800e6be:	4855      	ldr	r0, [pc, #340]	; (800e814 <mem_trim+0x200>)
 800e6c0:	f00e fa16 	bl	801caf0 <iprintf>
  if (newsize > size) {
 800e6c4:	8bfa      	ldrh	r2, [r7, #30]
 800e6c6:	8abb      	ldrh	r3, [r7, #20]
 800e6c8:	429a      	cmp	r2, r3
 800e6ca:	d901      	bls.n	800e6d0 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	e095      	b.n	800e7fc <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800e6d0:	8bfa      	ldrh	r2, [r7, #30]
 800e6d2:	8abb      	ldrh	r3, [r7, #20]
 800e6d4:	429a      	cmp	r2, r3
 800e6d6:	d101      	bne.n	800e6dc <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	e08f      	b.n	800e7fc <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800e6dc:	484f      	ldr	r0, [pc, #316]	; (800e81c <mem_trim+0x208>)
 800e6de:	f00a ffe7 	bl	80196b0 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800e6e2:	69bb      	ldr	r3, [r7, #24]
 800e6e4:	881b      	ldrh	r3, [r3, #0]
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	f7ff fdb0 	bl	800e24c <ptr_to_mem>
 800e6ec:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800e6ee:	693b      	ldr	r3, [r7, #16]
 800e6f0:	791b      	ldrb	r3, [r3, #4]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d13f      	bne.n	800e776 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800e6f6:	69bb      	ldr	r3, [r7, #24]
 800e6f8:	881b      	ldrh	r3, [r3, #0]
 800e6fa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e6fe:	d106      	bne.n	800e70e <mem_trim+0xfa>
 800e700:	4b42      	ldr	r3, [pc, #264]	; (800e80c <mem_trim+0x1f8>)
 800e702:	f240 22f5 	movw	r2, #757	; 0x2f5
 800e706:	4946      	ldr	r1, [pc, #280]	; (800e820 <mem_trim+0x20c>)
 800e708:	4842      	ldr	r0, [pc, #264]	; (800e814 <mem_trim+0x200>)
 800e70a:	f00e f9f1 	bl	801caf0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800e70e:	693b      	ldr	r3, [r7, #16]
 800e710:	881b      	ldrh	r3, [r3, #0]
 800e712:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800e714:	8afa      	ldrh	r2, [r7, #22]
 800e716:	8bfb      	ldrh	r3, [r7, #30]
 800e718:	4413      	add	r3, r2
 800e71a:	b29b      	uxth	r3, r3
 800e71c:	3308      	adds	r3, #8
 800e71e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800e720:	4b40      	ldr	r3, [pc, #256]	; (800e824 <mem_trim+0x210>)
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	693a      	ldr	r2, [r7, #16]
 800e726:	429a      	cmp	r2, r3
 800e728:	d106      	bne.n	800e738 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800e72a:	89fb      	ldrh	r3, [r7, #14]
 800e72c:	4618      	mov	r0, r3
 800e72e:	f7ff fd8d 	bl	800e24c <ptr_to_mem>
 800e732:	4603      	mov	r3, r0
 800e734:	4a3b      	ldr	r2, [pc, #236]	; (800e824 <mem_trim+0x210>)
 800e736:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800e738:	89fb      	ldrh	r3, [r7, #14]
 800e73a:	4618      	mov	r0, r3
 800e73c:	f7ff fd86 	bl	800e24c <ptr_to_mem>
 800e740:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800e742:	693b      	ldr	r3, [r7, #16]
 800e744:	2200      	movs	r2, #0
 800e746:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800e748:	693b      	ldr	r3, [r7, #16]
 800e74a:	89ba      	ldrh	r2, [r7, #12]
 800e74c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800e74e:	693b      	ldr	r3, [r7, #16]
 800e750:	8afa      	ldrh	r2, [r7, #22]
 800e752:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800e754:	69bb      	ldr	r3, [r7, #24]
 800e756:	89fa      	ldrh	r2, [r7, #14]
 800e758:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800e75a:	693b      	ldr	r3, [r7, #16]
 800e75c:	881b      	ldrh	r3, [r3, #0]
 800e75e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e762:	d047      	beq.n	800e7f4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800e764:	693b      	ldr	r3, [r7, #16]
 800e766:	881b      	ldrh	r3, [r3, #0]
 800e768:	4618      	mov	r0, r3
 800e76a:	f7ff fd6f 	bl	800e24c <ptr_to_mem>
 800e76e:	4602      	mov	r2, r0
 800e770:	89fb      	ldrh	r3, [r7, #14]
 800e772:	8053      	strh	r3, [r2, #2]
 800e774:	e03e      	b.n	800e7f4 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800e776:	8bfb      	ldrh	r3, [r7, #30]
 800e778:	f103 0214 	add.w	r2, r3, #20
 800e77c:	8abb      	ldrh	r3, [r7, #20]
 800e77e:	429a      	cmp	r2, r3
 800e780:	d838      	bhi.n	800e7f4 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800e782:	8afa      	ldrh	r2, [r7, #22]
 800e784:	8bfb      	ldrh	r3, [r7, #30]
 800e786:	4413      	add	r3, r2
 800e788:	b29b      	uxth	r3, r3
 800e78a:	3308      	adds	r3, #8
 800e78c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800e78e:	69bb      	ldr	r3, [r7, #24]
 800e790:	881b      	ldrh	r3, [r3, #0]
 800e792:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e796:	d106      	bne.n	800e7a6 <mem_trim+0x192>
 800e798:	4b1c      	ldr	r3, [pc, #112]	; (800e80c <mem_trim+0x1f8>)
 800e79a:	f240 3216 	movw	r2, #790	; 0x316
 800e79e:	4920      	ldr	r1, [pc, #128]	; (800e820 <mem_trim+0x20c>)
 800e7a0:	481c      	ldr	r0, [pc, #112]	; (800e814 <mem_trim+0x200>)
 800e7a2:	f00e f9a5 	bl	801caf0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800e7a6:	89fb      	ldrh	r3, [r7, #14]
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	f7ff fd4f 	bl	800e24c <ptr_to_mem>
 800e7ae:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800e7b0:	4b1c      	ldr	r3, [pc, #112]	; (800e824 <mem_trim+0x210>)
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	693a      	ldr	r2, [r7, #16]
 800e7b6:	429a      	cmp	r2, r3
 800e7b8:	d202      	bcs.n	800e7c0 <mem_trim+0x1ac>
      lfree = mem2;
 800e7ba:	4a1a      	ldr	r2, [pc, #104]	; (800e824 <mem_trim+0x210>)
 800e7bc:	693b      	ldr	r3, [r7, #16]
 800e7be:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800e7c0:	693b      	ldr	r3, [r7, #16]
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800e7c6:	69bb      	ldr	r3, [r7, #24]
 800e7c8:	881a      	ldrh	r2, [r3, #0]
 800e7ca:	693b      	ldr	r3, [r7, #16]
 800e7cc:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800e7ce:	693b      	ldr	r3, [r7, #16]
 800e7d0:	8afa      	ldrh	r2, [r7, #22]
 800e7d2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800e7d4:	69bb      	ldr	r3, [r7, #24]
 800e7d6:	89fa      	ldrh	r2, [r7, #14]
 800e7d8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800e7da:	693b      	ldr	r3, [r7, #16]
 800e7dc:	881b      	ldrh	r3, [r3, #0]
 800e7de:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e7e2:	d007      	beq.n	800e7f4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800e7e4:	693b      	ldr	r3, [r7, #16]
 800e7e6:	881b      	ldrh	r3, [r3, #0]
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	f7ff fd2f 	bl	800e24c <ptr_to_mem>
 800e7ee:	4602      	mov	r2, r0
 800e7f0:	89fb      	ldrh	r3, [r7, #14]
 800e7f2:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800e7f4:	4809      	ldr	r0, [pc, #36]	; (800e81c <mem_trim+0x208>)
 800e7f6:	f00a ff6a 	bl	80196ce <sys_mutex_unlock>
  return rmem;
 800e7fa:	687b      	ldr	r3, [r7, #4]
}
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	3720      	adds	r7, #32
 800e800:	46bd      	mov	sp, r7
 800e802:	bd80      	pop	{r7, pc}
 800e804:	20001448 	.word	0x20001448
 800e808:	2000144c 	.word	0x2000144c
 800e80c:	0801fb3c 	.word	0x0801fb3c
 800e810:	0801fcc8 	.word	0x0801fcc8
 800e814:	0801fb84 	.word	0x0801fb84
 800e818:	0801fce0 	.word	0x0801fce0
 800e81c:	20001450 	.word	0x20001450
 800e820:	0801fd00 	.word	0x0801fd00
 800e824:	20001454 	.word	0x20001454

0800e828 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800e828:	b580      	push	{r7, lr}
 800e82a:	b088      	sub	sp, #32
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	4603      	mov	r3, r0
 800e830:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800e832:	88fb      	ldrh	r3, [r7, #6]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d101      	bne.n	800e83c <mem_malloc+0x14>
    return NULL;
 800e838:	2300      	movs	r3, #0
 800e83a:	e0e2      	b.n	800ea02 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800e83c:	88fb      	ldrh	r3, [r7, #6]
 800e83e:	3303      	adds	r3, #3
 800e840:	b29b      	uxth	r3, r3
 800e842:	f023 0303 	bic.w	r3, r3, #3
 800e846:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800e848:	8bbb      	ldrh	r3, [r7, #28]
 800e84a:	2b0b      	cmp	r3, #11
 800e84c:	d801      	bhi.n	800e852 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800e84e:	230c      	movs	r3, #12
 800e850:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800e852:	8bbb      	ldrh	r3, [r7, #28]
 800e854:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e858:	d803      	bhi.n	800e862 <mem_malloc+0x3a>
 800e85a:	8bba      	ldrh	r2, [r7, #28]
 800e85c:	88fb      	ldrh	r3, [r7, #6]
 800e85e:	429a      	cmp	r2, r3
 800e860:	d201      	bcs.n	800e866 <mem_malloc+0x3e>
    return NULL;
 800e862:	2300      	movs	r3, #0
 800e864:	e0cd      	b.n	800ea02 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800e866:	4869      	ldr	r0, [pc, #420]	; (800ea0c <mem_malloc+0x1e4>)
 800e868:	f00a ff22 	bl	80196b0 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800e86c:	4b68      	ldr	r3, [pc, #416]	; (800ea10 <mem_malloc+0x1e8>)
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	4618      	mov	r0, r3
 800e872:	f7ff fcfd 	bl	800e270 <mem_to_ptr>
 800e876:	4603      	mov	r3, r0
 800e878:	83fb      	strh	r3, [r7, #30]
 800e87a:	e0b7      	b.n	800e9ec <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800e87c:	8bfb      	ldrh	r3, [r7, #30]
 800e87e:	4618      	mov	r0, r3
 800e880:	f7ff fce4 	bl	800e24c <ptr_to_mem>
 800e884:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800e886:	697b      	ldr	r3, [r7, #20]
 800e888:	791b      	ldrb	r3, [r3, #4]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	f040 80a7 	bne.w	800e9de <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800e890:	697b      	ldr	r3, [r7, #20]
 800e892:	881b      	ldrh	r3, [r3, #0]
 800e894:	461a      	mov	r2, r3
 800e896:	8bfb      	ldrh	r3, [r7, #30]
 800e898:	1ad3      	subs	r3, r2, r3
 800e89a:	f1a3 0208 	sub.w	r2, r3, #8
 800e89e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800e8a0:	429a      	cmp	r2, r3
 800e8a2:	f0c0 809c 	bcc.w	800e9de <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800e8a6:	697b      	ldr	r3, [r7, #20]
 800e8a8:	881b      	ldrh	r3, [r3, #0]
 800e8aa:	461a      	mov	r2, r3
 800e8ac:	8bfb      	ldrh	r3, [r7, #30]
 800e8ae:	1ad3      	subs	r3, r2, r3
 800e8b0:	f1a3 0208 	sub.w	r2, r3, #8
 800e8b4:	8bbb      	ldrh	r3, [r7, #28]
 800e8b6:	3314      	adds	r3, #20
 800e8b8:	429a      	cmp	r2, r3
 800e8ba:	d333      	bcc.n	800e924 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800e8bc:	8bfa      	ldrh	r2, [r7, #30]
 800e8be:	8bbb      	ldrh	r3, [r7, #28]
 800e8c0:	4413      	add	r3, r2
 800e8c2:	b29b      	uxth	r3, r3
 800e8c4:	3308      	adds	r3, #8
 800e8c6:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800e8c8:	8a7b      	ldrh	r3, [r7, #18]
 800e8ca:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e8ce:	d106      	bne.n	800e8de <mem_malloc+0xb6>
 800e8d0:	4b50      	ldr	r3, [pc, #320]	; (800ea14 <mem_malloc+0x1ec>)
 800e8d2:	f240 3287 	movw	r2, #903	; 0x387
 800e8d6:	4950      	ldr	r1, [pc, #320]	; (800ea18 <mem_malloc+0x1f0>)
 800e8d8:	4850      	ldr	r0, [pc, #320]	; (800ea1c <mem_malloc+0x1f4>)
 800e8da:	f00e f909 	bl	801caf0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800e8de:	8a7b      	ldrh	r3, [r7, #18]
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	f7ff fcb3 	bl	800e24c <ptr_to_mem>
 800e8e6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800e8ee:	697b      	ldr	r3, [r7, #20]
 800e8f0:	881a      	ldrh	r2, [r3, #0]
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	8bfa      	ldrh	r2, [r7, #30]
 800e8fa:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800e8fc:	697b      	ldr	r3, [r7, #20]
 800e8fe:	8a7a      	ldrh	r2, [r7, #18]
 800e900:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800e902:	697b      	ldr	r3, [r7, #20]
 800e904:	2201      	movs	r2, #1
 800e906:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	881b      	ldrh	r3, [r3, #0]
 800e90c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e910:	d00b      	beq.n	800e92a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	881b      	ldrh	r3, [r3, #0]
 800e916:	4618      	mov	r0, r3
 800e918:	f7ff fc98 	bl	800e24c <ptr_to_mem>
 800e91c:	4602      	mov	r2, r0
 800e91e:	8a7b      	ldrh	r3, [r7, #18]
 800e920:	8053      	strh	r3, [r2, #2]
 800e922:	e002      	b.n	800e92a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800e924:	697b      	ldr	r3, [r7, #20]
 800e926:	2201      	movs	r2, #1
 800e928:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800e92a:	4b39      	ldr	r3, [pc, #228]	; (800ea10 <mem_malloc+0x1e8>)
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	697a      	ldr	r2, [r7, #20]
 800e930:	429a      	cmp	r2, r3
 800e932:	d127      	bne.n	800e984 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800e934:	4b36      	ldr	r3, [pc, #216]	; (800ea10 <mem_malloc+0x1e8>)
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800e93a:	e005      	b.n	800e948 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800e93c:	69bb      	ldr	r3, [r7, #24]
 800e93e:	881b      	ldrh	r3, [r3, #0]
 800e940:	4618      	mov	r0, r3
 800e942:	f7ff fc83 	bl	800e24c <ptr_to_mem>
 800e946:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800e948:	69bb      	ldr	r3, [r7, #24]
 800e94a:	791b      	ldrb	r3, [r3, #4]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d004      	beq.n	800e95a <mem_malloc+0x132>
 800e950:	4b33      	ldr	r3, [pc, #204]	; (800ea20 <mem_malloc+0x1f8>)
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	69ba      	ldr	r2, [r7, #24]
 800e956:	429a      	cmp	r2, r3
 800e958:	d1f0      	bne.n	800e93c <mem_malloc+0x114>
          }
          lfree = cur;
 800e95a:	4a2d      	ldr	r2, [pc, #180]	; (800ea10 <mem_malloc+0x1e8>)
 800e95c:	69bb      	ldr	r3, [r7, #24]
 800e95e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800e960:	4b2b      	ldr	r3, [pc, #172]	; (800ea10 <mem_malloc+0x1e8>)
 800e962:	681a      	ldr	r2, [r3, #0]
 800e964:	4b2e      	ldr	r3, [pc, #184]	; (800ea20 <mem_malloc+0x1f8>)
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	429a      	cmp	r2, r3
 800e96a:	d00b      	beq.n	800e984 <mem_malloc+0x15c>
 800e96c:	4b28      	ldr	r3, [pc, #160]	; (800ea10 <mem_malloc+0x1e8>)
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	791b      	ldrb	r3, [r3, #4]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d006      	beq.n	800e984 <mem_malloc+0x15c>
 800e976:	4b27      	ldr	r3, [pc, #156]	; (800ea14 <mem_malloc+0x1ec>)
 800e978:	f240 32b5 	movw	r2, #949	; 0x3b5
 800e97c:	4929      	ldr	r1, [pc, #164]	; (800ea24 <mem_malloc+0x1fc>)
 800e97e:	4827      	ldr	r0, [pc, #156]	; (800ea1c <mem_malloc+0x1f4>)
 800e980:	f00e f8b6 	bl	801caf0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800e984:	4821      	ldr	r0, [pc, #132]	; (800ea0c <mem_malloc+0x1e4>)
 800e986:	f00a fea2 	bl	80196ce <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800e98a:	8bba      	ldrh	r2, [r7, #28]
 800e98c:	697b      	ldr	r3, [r7, #20]
 800e98e:	4413      	add	r3, r2
 800e990:	3308      	adds	r3, #8
 800e992:	4a23      	ldr	r2, [pc, #140]	; (800ea20 <mem_malloc+0x1f8>)
 800e994:	6812      	ldr	r2, [r2, #0]
 800e996:	4293      	cmp	r3, r2
 800e998:	d906      	bls.n	800e9a8 <mem_malloc+0x180>
 800e99a:	4b1e      	ldr	r3, [pc, #120]	; (800ea14 <mem_malloc+0x1ec>)
 800e99c:	f240 32b9 	movw	r2, #953	; 0x3b9
 800e9a0:	4921      	ldr	r1, [pc, #132]	; (800ea28 <mem_malloc+0x200>)
 800e9a2:	481e      	ldr	r0, [pc, #120]	; (800ea1c <mem_malloc+0x1f4>)
 800e9a4:	f00e f8a4 	bl	801caf0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800e9a8:	697b      	ldr	r3, [r7, #20]
 800e9aa:	f003 0303 	and.w	r3, r3, #3
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d006      	beq.n	800e9c0 <mem_malloc+0x198>
 800e9b2:	4b18      	ldr	r3, [pc, #96]	; (800ea14 <mem_malloc+0x1ec>)
 800e9b4:	f240 32bb 	movw	r2, #955	; 0x3bb
 800e9b8:	491c      	ldr	r1, [pc, #112]	; (800ea2c <mem_malloc+0x204>)
 800e9ba:	4818      	ldr	r0, [pc, #96]	; (800ea1c <mem_malloc+0x1f4>)
 800e9bc:	f00e f898 	bl	801caf0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800e9c0:	697b      	ldr	r3, [r7, #20]
 800e9c2:	f003 0303 	and.w	r3, r3, #3
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d006      	beq.n	800e9d8 <mem_malloc+0x1b0>
 800e9ca:	4b12      	ldr	r3, [pc, #72]	; (800ea14 <mem_malloc+0x1ec>)
 800e9cc:	f240 32bd 	movw	r2, #957	; 0x3bd
 800e9d0:	4917      	ldr	r1, [pc, #92]	; (800ea30 <mem_malloc+0x208>)
 800e9d2:	4812      	ldr	r0, [pc, #72]	; (800ea1c <mem_malloc+0x1f4>)
 800e9d4:	f00e f88c 	bl	801caf0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800e9d8:	697b      	ldr	r3, [r7, #20]
 800e9da:	3308      	adds	r3, #8
 800e9dc:	e011      	b.n	800ea02 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800e9de:	8bfb      	ldrh	r3, [r7, #30]
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	f7ff fc33 	bl	800e24c <ptr_to_mem>
 800e9e6:	4603      	mov	r3, r0
 800e9e8:	881b      	ldrh	r3, [r3, #0]
 800e9ea:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800e9ec:	8bfa      	ldrh	r2, [r7, #30]
 800e9ee:	8bbb      	ldrh	r3, [r7, #28]
 800e9f0:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800e9f4:	429a      	cmp	r2, r3
 800e9f6:	f4ff af41 	bcc.w	800e87c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800e9fa:	4804      	ldr	r0, [pc, #16]	; (800ea0c <mem_malloc+0x1e4>)
 800e9fc:	f00a fe67 	bl	80196ce <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800ea00:	2300      	movs	r3, #0
}
 800ea02:	4618      	mov	r0, r3
 800ea04:	3720      	adds	r7, #32
 800ea06:	46bd      	mov	sp, r7
 800ea08:	bd80      	pop	{r7, pc}
 800ea0a:	bf00      	nop
 800ea0c:	20001450 	.word	0x20001450
 800ea10:	20001454 	.word	0x20001454
 800ea14:	0801fb3c 	.word	0x0801fb3c
 800ea18:	0801fd00 	.word	0x0801fd00
 800ea1c:	0801fb84 	.word	0x0801fb84
 800ea20:	2000144c 	.word	0x2000144c
 800ea24:	0801fd14 	.word	0x0801fd14
 800ea28:	0801fd30 	.word	0x0801fd30
 800ea2c:	0801fd60 	.word	0x0801fd60
 800ea30:	0801fd90 	.word	0x0801fd90

0800ea34 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800ea34:	b480      	push	{r7}
 800ea36:	b085      	sub	sp, #20
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	689b      	ldr	r3, [r3, #8]
 800ea40:	2200      	movs	r2, #0
 800ea42:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	685b      	ldr	r3, [r3, #4]
 800ea48:	3303      	adds	r3, #3
 800ea4a:	f023 0303 	bic.w	r3, r3, #3
 800ea4e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800ea50:	2300      	movs	r3, #0
 800ea52:	60fb      	str	r3, [r7, #12]
 800ea54:	e011      	b.n	800ea7a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	689b      	ldr	r3, [r3, #8]
 800ea5a:	681a      	ldr	r2, [r3, #0]
 800ea5c:	68bb      	ldr	r3, [r7, #8]
 800ea5e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	689b      	ldr	r3, [r3, #8]
 800ea64:	68ba      	ldr	r2, [r7, #8]
 800ea66:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	881b      	ldrh	r3, [r3, #0]
 800ea6c:	461a      	mov	r2, r3
 800ea6e:	68bb      	ldr	r3, [r7, #8]
 800ea70:	4413      	add	r3, r2
 800ea72:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	3301      	adds	r3, #1
 800ea78:	60fb      	str	r3, [r7, #12]
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	885b      	ldrh	r3, [r3, #2]
 800ea7e:	461a      	mov	r2, r3
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	4293      	cmp	r3, r2
 800ea84:	dbe7      	blt.n	800ea56 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800ea86:	bf00      	nop
 800ea88:	bf00      	nop
 800ea8a:	3714      	adds	r7, #20
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea92:	4770      	bx	lr

0800ea94 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800ea94:	b580      	push	{r7, lr}
 800ea96:	b082      	sub	sp, #8
 800ea98:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	80fb      	strh	r3, [r7, #6]
 800ea9e:	e009      	b.n	800eab4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800eaa0:	88fb      	ldrh	r3, [r7, #6]
 800eaa2:	4a08      	ldr	r2, [pc, #32]	; (800eac4 <memp_init+0x30>)
 800eaa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	f7ff ffc3 	bl	800ea34 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800eaae:	88fb      	ldrh	r3, [r7, #6]
 800eab0:	3301      	adds	r3, #1
 800eab2:	80fb      	strh	r3, [r7, #6]
 800eab4:	88fb      	ldrh	r3, [r7, #6]
 800eab6:	2b0c      	cmp	r3, #12
 800eab8:	d9f2      	bls.n	800eaa0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800eaba:	bf00      	nop
 800eabc:	bf00      	nop
 800eabe:	3708      	adds	r7, #8
 800eac0:	46bd      	mov	sp, r7
 800eac2:	bd80      	pop	{r7, pc}
 800eac4:	08022824 	.word	0x08022824

0800eac8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b084      	sub	sp, #16
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800ead0:	f00a fe2a 	bl	8019728 <sys_arch_protect>
 800ead4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	689b      	ldr	r3, [r3, #8]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800eade:	68bb      	ldr	r3, [r7, #8]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d015      	beq.n	800eb10 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	689b      	ldr	r3, [r3, #8]
 800eae8:	68ba      	ldr	r2, [r7, #8]
 800eaea:	6812      	ldr	r2, [r2, #0]
 800eaec:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800eaee:	68bb      	ldr	r3, [r7, #8]
 800eaf0:	f003 0303 	and.w	r3, r3, #3
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d006      	beq.n	800eb06 <do_memp_malloc_pool+0x3e>
 800eaf8:	4b09      	ldr	r3, [pc, #36]	; (800eb20 <do_memp_malloc_pool+0x58>)
 800eafa:	f44f 728c 	mov.w	r2, #280	; 0x118
 800eafe:	4909      	ldr	r1, [pc, #36]	; (800eb24 <do_memp_malloc_pool+0x5c>)
 800eb00:	4809      	ldr	r0, [pc, #36]	; (800eb28 <do_memp_malloc_pool+0x60>)
 800eb02:	f00d fff5 	bl	801caf0 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800eb06:	68f8      	ldr	r0, [r7, #12]
 800eb08:	f00a fe1c 	bl	8019744 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800eb0c:	68bb      	ldr	r3, [r7, #8]
 800eb0e:	e003      	b.n	800eb18 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800eb10:	68f8      	ldr	r0, [r7, #12]
 800eb12:	f00a fe17 	bl	8019744 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800eb16:	2300      	movs	r3, #0
}
 800eb18:	4618      	mov	r0, r3
 800eb1a:	3710      	adds	r7, #16
 800eb1c:	46bd      	mov	sp, r7
 800eb1e:	bd80      	pop	{r7, pc}
 800eb20:	0801fdb4 	.word	0x0801fdb4
 800eb24:	0801fde4 	.word	0x0801fde4
 800eb28:	0801fe08 	.word	0x0801fe08

0800eb2c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b084      	sub	sp, #16
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	4603      	mov	r3, r0
 800eb34:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800eb36:	79fb      	ldrb	r3, [r7, #7]
 800eb38:	2b0c      	cmp	r3, #12
 800eb3a:	d908      	bls.n	800eb4e <memp_malloc+0x22>
 800eb3c:	4b0a      	ldr	r3, [pc, #40]	; (800eb68 <memp_malloc+0x3c>)
 800eb3e:	f240 1257 	movw	r2, #343	; 0x157
 800eb42:	490a      	ldr	r1, [pc, #40]	; (800eb6c <memp_malloc+0x40>)
 800eb44:	480a      	ldr	r0, [pc, #40]	; (800eb70 <memp_malloc+0x44>)
 800eb46:	f00d ffd3 	bl	801caf0 <iprintf>
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	e008      	b.n	800eb60 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800eb4e:	79fb      	ldrb	r3, [r7, #7]
 800eb50:	4a08      	ldr	r2, [pc, #32]	; (800eb74 <memp_malloc+0x48>)
 800eb52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb56:	4618      	mov	r0, r3
 800eb58:	f7ff ffb6 	bl	800eac8 <do_memp_malloc_pool>
 800eb5c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800eb5e:	68fb      	ldr	r3, [r7, #12]
}
 800eb60:	4618      	mov	r0, r3
 800eb62:	3710      	adds	r7, #16
 800eb64:	46bd      	mov	sp, r7
 800eb66:	bd80      	pop	{r7, pc}
 800eb68:	0801fdb4 	.word	0x0801fdb4
 800eb6c:	0801fe44 	.word	0x0801fe44
 800eb70:	0801fe08 	.word	0x0801fe08
 800eb74:	08022824 	.word	0x08022824

0800eb78 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b084      	sub	sp, #16
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	6078      	str	r0, [r7, #4]
 800eb80:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800eb82:	683b      	ldr	r3, [r7, #0]
 800eb84:	f003 0303 	and.w	r3, r3, #3
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d006      	beq.n	800eb9a <do_memp_free_pool+0x22>
 800eb8c:	4b0d      	ldr	r3, [pc, #52]	; (800ebc4 <do_memp_free_pool+0x4c>)
 800eb8e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800eb92:	490d      	ldr	r1, [pc, #52]	; (800ebc8 <do_memp_free_pool+0x50>)
 800eb94:	480d      	ldr	r0, [pc, #52]	; (800ebcc <do_memp_free_pool+0x54>)
 800eb96:	f00d ffab 	bl	801caf0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800eb9a:	683b      	ldr	r3, [r7, #0]
 800eb9c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800eb9e:	f00a fdc3 	bl	8019728 <sys_arch_protect>
 800eba2:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	689b      	ldr	r3, [r3, #8]
 800eba8:	681a      	ldr	r2, [r3, #0]
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	689b      	ldr	r3, [r3, #8]
 800ebb2:	68fa      	ldr	r2, [r7, #12]
 800ebb4:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800ebb6:	68b8      	ldr	r0, [r7, #8]
 800ebb8:	f00a fdc4 	bl	8019744 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800ebbc:	bf00      	nop
 800ebbe:	3710      	adds	r7, #16
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	bd80      	pop	{r7, pc}
 800ebc4:	0801fdb4 	.word	0x0801fdb4
 800ebc8:	0801fe64 	.word	0x0801fe64
 800ebcc:	0801fe08 	.word	0x0801fe08

0800ebd0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b082      	sub	sp, #8
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	4603      	mov	r3, r0
 800ebd8:	6039      	str	r1, [r7, #0]
 800ebda:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800ebdc:	79fb      	ldrb	r3, [r7, #7]
 800ebde:	2b0c      	cmp	r3, #12
 800ebe0:	d907      	bls.n	800ebf2 <memp_free+0x22>
 800ebe2:	4b0c      	ldr	r3, [pc, #48]	; (800ec14 <memp_free+0x44>)
 800ebe4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800ebe8:	490b      	ldr	r1, [pc, #44]	; (800ec18 <memp_free+0x48>)
 800ebea:	480c      	ldr	r0, [pc, #48]	; (800ec1c <memp_free+0x4c>)
 800ebec:	f00d ff80 	bl	801caf0 <iprintf>
 800ebf0:	e00c      	b.n	800ec0c <memp_free+0x3c>

  if (mem == NULL) {
 800ebf2:	683b      	ldr	r3, [r7, #0]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d008      	beq.n	800ec0a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800ebf8:	79fb      	ldrb	r3, [r7, #7]
 800ebfa:	4a09      	ldr	r2, [pc, #36]	; (800ec20 <memp_free+0x50>)
 800ebfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec00:	6839      	ldr	r1, [r7, #0]
 800ec02:	4618      	mov	r0, r3
 800ec04:	f7ff ffb8 	bl	800eb78 <do_memp_free_pool>
 800ec08:	e000      	b.n	800ec0c <memp_free+0x3c>
    return;
 800ec0a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800ec0c:	3708      	adds	r7, #8
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	bd80      	pop	{r7, pc}
 800ec12:	bf00      	nop
 800ec14:	0801fdb4 	.word	0x0801fdb4
 800ec18:	0801fe84 	.word	0x0801fe84
 800ec1c:	0801fe08 	.word	0x0801fe08
 800ec20:	08022824 	.word	0x08022824

0800ec24 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800ec24:	b480      	push	{r7}
 800ec26:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800ec28:	bf00      	nop
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec30:	4770      	bx	lr
	...

0800ec34 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800ec34:	b580      	push	{r7, lr}
 800ec36:	b086      	sub	sp, #24
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	60f8      	str	r0, [r7, #12]
 800ec3c:	60b9      	str	r1, [r7, #8]
 800ec3e:	607a      	str	r2, [r7, #4]
 800ec40:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d108      	bne.n	800ec5a <netif_add+0x26>
 800ec48:	4b57      	ldr	r3, [pc, #348]	; (800eda8 <netif_add+0x174>)
 800ec4a:	f240 1227 	movw	r2, #295	; 0x127
 800ec4e:	4957      	ldr	r1, [pc, #348]	; (800edac <netif_add+0x178>)
 800ec50:	4857      	ldr	r0, [pc, #348]	; (800edb0 <netif_add+0x17c>)
 800ec52:	f00d ff4d 	bl	801caf0 <iprintf>
 800ec56:	2300      	movs	r3, #0
 800ec58:	e0a2      	b.n	800eda0 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800ec5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d108      	bne.n	800ec72 <netif_add+0x3e>
 800ec60:	4b51      	ldr	r3, [pc, #324]	; (800eda8 <netif_add+0x174>)
 800ec62:	f44f 7294 	mov.w	r2, #296	; 0x128
 800ec66:	4953      	ldr	r1, [pc, #332]	; (800edb4 <netif_add+0x180>)
 800ec68:	4851      	ldr	r0, [pc, #324]	; (800edb0 <netif_add+0x17c>)
 800ec6a:	f00d ff41 	bl	801caf0 <iprintf>
 800ec6e:	2300      	movs	r3, #0
 800ec70:	e096      	b.n	800eda0 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800ec72:	68bb      	ldr	r3, [r7, #8]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d101      	bne.n	800ec7c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800ec78:	4b4f      	ldr	r3, [pc, #316]	; (800edb8 <netif_add+0x184>)
 800ec7a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d101      	bne.n	800ec86 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800ec82:	4b4d      	ldr	r3, [pc, #308]	; (800edb8 <netif_add+0x184>)
 800ec84:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ec86:	683b      	ldr	r3, [r7, #0]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d101      	bne.n	800ec90 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800ec8c:	4b4a      	ldr	r3, [pc, #296]	; (800edb8 <netif_add+0x184>)
 800ec8e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	2200      	movs	r2, #0
 800ec94:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	2200      	movs	r2, #0
 800ec9a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	2200      	movs	r2, #0
 800eca0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	4a45      	ldr	r2, [pc, #276]	; (800edbc <netif_add+0x188>)
 800eca6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	2200      	movs	r2, #0
 800ecac:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	2200      	movs	r2, #0
 800ecb2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	2200      	movs	r2, #0
 800ecba:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	6a3a      	ldr	r2, [r7, #32]
 800ecc0:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800ecc2:	4b3f      	ldr	r3, [pc, #252]	; (800edc0 <netif_add+0x18c>)
 800ecc4:	781a      	ldrb	r2, [r3, #0]
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ecd0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800ecd2:	683b      	ldr	r3, [r7, #0]
 800ecd4:	687a      	ldr	r2, [r7, #4]
 800ecd6:	68b9      	ldr	r1, [r7, #8]
 800ecd8:	68f8      	ldr	r0, [r7, #12]
 800ecda:	f000 f913 	bl	800ef04 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800ecde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ece0:	68f8      	ldr	r0, [r7, #12]
 800ece2:	4798      	blx	r3
 800ece4:	4603      	mov	r3, r0
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d001      	beq.n	800ecee <netif_add+0xba>
    return NULL;
 800ecea:	2300      	movs	r3, #0
 800ecec:	e058      	b.n	800eda0 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ecf4:	2bff      	cmp	r3, #255	; 0xff
 800ecf6:	d103      	bne.n	800ed00 <netif_add+0xcc>
        netif->num = 0;
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	2200      	movs	r2, #0
 800ecfc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800ed00:	2300      	movs	r3, #0
 800ed02:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ed04:	4b2f      	ldr	r3, [pc, #188]	; (800edc4 <netif_add+0x190>)
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	617b      	str	r3, [r7, #20]
 800ed0a:	e02b      	b.n	800ed64 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800ed0c:	697a      	ldr	r2, [r7, #20]
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	429a      	cmp	r2, r3
 800ed12:	d106      	bne.n	800ed22 <netif_add+0xee>
 800ed14:	4b24      	ldr	r3, [pc, #144]	; (800eda8 <netif_add+0x174>)
 800ed16:	f240 128b 	movw	r2, #395	; 0x18b
 800ed1a:	492b      	ldr	r1, [pc, #172]	; (800edc8 <netif_add+0x194>)
 800ed1c:	4824      	ldr	r0, [pc, #144]	; (800edb0 <netif_add+0x17c>)
 800ed1e:	f00d fee7 	bl	801caf0 <iprintf>
        num_netifs++;
 800ed22:	693b      	ldr	r3, [r7, #16]
 800ed24:	3301      	adds	r3, #1
 800ed26:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800ed28:	693b      	ldr	r3, [r7, #16]
 800ed2a:	2bff      	cmp	r3, #255	; 0xff
 800ed2c:	dd06      	ble.n	800ed3c <netif_add+0x108>
 800ed2e:	4b1e      	ldr	r3, [pc, #120]	; (800eda8 <netif_add+0x174>)
 800ed30:	f240 128d 	movw	r2, #397	; 0x18d
 800ed34:	4925      	ldr	r1, [pc, #148]	; (800edcc <netif_add+0x198>)
 800ed36:	481e      	ldr	r0, [pc, #120]	; (800edb0 <netif_add+0x17c>)
 800ed38:	f00d feda 	bl	801caf0 <iprintf>
        if (netif2->num == netif->num) {
 800ed3c:	697b      	ldr	r3, [r7, #20]
 800ed3e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ed48:	429a      	cmp	r2, r3
 800ed4a:	d108      	bne.n	800ed5e <netif_add+0x12a>
          netif->num++;
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ed52:	3301      	adds	r3, #1
 800ed54:	b2da      	uxtb	r2, r3
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800ed5c:	e005      	b.n	800ed6a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ed5e:	697b      	ldr	r3, [r7, #20]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	617b      	str	r3, [r7, #20]
 800ed64:	697b      	ldr	r3, [r7, #20]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d1d0      	bne.n	800ed0c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800ed6a:	697b      	ldr	r3, [r7, #20]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d1be      	bne.n	800ecee <netif_add+0xba>
  }
  if (netif->num == 254) {
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ed76:	2bfe      	cmp	r3, #254	; 0xfe
 800ed78:	d103      	bne.n	800ed82 <netif_add+0x14e>
    netif_num = 0;
 800ed7a:	4b11      	ldr	r3, [pc, #68]	; (800edc0 <netif_add+0x18c>)
 800ed7c:	2200      	movs	r2, #0
 800ed7e:	701a      	strb	r2, [r3, #0]
 800ed80:	e006      	b.n	800ed90 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ed88:	3301      	adds	r3, #1
 800ed8a:	b2da      	uxtb	r2, r3
 800ed8c:	4b0c      	ldr	r3, [pc, #48]	; (800edc0 <netif_add+0x18c>)
 800ed8e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800ed90:	4b0c      	ldr	r3, [pc, #48]	; (800edc4 <netif_add+0x190>)
 800ed92:	681a      	ldr	r2, [r3, #0]
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800ed98:	4a0a      	ldr	r2, [pc, #40]	; (800edc4 <netif_add+0x190>)
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800ed9e:	68fb      	ldr	r3, [r7, #12]
}
 800eda0:	4618      	mov	r0, r3
 800eda2:	3718      	adds	r7, #24
 800eda4:	46bd      	mov	sp, r7
 800eda6:	bd80      	pop	{r7, pc}
 800eda8:	0801fea0 	.word	0x0801fea0
 800edac:	0801ff34 	.word	0x0801ff34
 800edb0:	0801fef0 	.word	0x0801fef0
 800edb4:	0801ff50 	.word	0x0801ff50
 800edb8:	08022898 	.word	0x08022898
 800edbc:	0800f1df 	.word	0x0800f1df
 800edc0:	2000148c 	.word	0x2000148c
 800edc4:	20008308 	.word	0x20008308
 800edc8:	0801ff74 	.word	0x0801ff74
 800edcc:	0801ff88 	.word	0x0801ff88

0800edd0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800edd0:	b580      	push	{r7, lr}
 800edd2:	b082      	sub	sp, #8
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	6078      	str	r0, [r7, #4]
 800edd8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800edda:	6839      	ldr	r1, [r7, #0]
 800eddc:	6878      	ldr	r0, [r7, #4]
 800edde:	f002 fee3 	bl	8011ba8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800ede2:	6839      	ldr	r1, [r7, #0]
 800ede4:	6878      	ldr	r0, [r7, #4]
 800ede6:	f007 ff95 	bl	8016d14 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800edea:	bf00      	nop
 800edec:	3708      	adds	r7, #8
 800edee:	46bd      	mov	sp, r7
 800edf0:	bd80      	pop	{r7, pc}
	...

0800edf4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800edf4:	b580      	push	{r7, lr}
 800edf6:	b086      	sub	sp, #24
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	60f8      	str	r0, [r7, #12]
 800edfc:	60b9      	str	r1, [r7, #8]
 800edfe:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800ee00:	68bb      	ldr	r3, [r7, #8]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d106      	bne.n	800ee14 <netif_do_set_ipaddr+0x20>
 800ee06:	4b1d      	ldr	r3, [pc, #116]	; (800ee7c <netif_do_set_ipaddr+0x88>)
 800ee08:	f240 12cb 	movw	r2, #459	; 0x1cb
 800ee0c:	491c      	ldr	r1, [pc, #112]	; (800ee80 <netif_do_set_ipaddr+0x8c>)
 800ee0e:	481d      	ldr	r0, [pc, #116]	; (800ee84 <netif_do_set_ipaddr+0x90>)
 800ee10:	f00d fe6e 	bl	801caf0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d106      	bne.n	800ee28 <netif_do_set_ipaddr+0x34>
 800ee1a:	4b18      	ldr	r3, [pc, #96]	; (800ee7c <netif_do_set_ipaddr+0x88>)
 800ee1c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800ee20:	4917      	ldr	r1, [pc, #92]	; (800ee80 <netif_do_set_ipaddr+0x8c>)
 800ee22:	4818      	ldr	r0, [pc, #96]	; (800ee84 <netif_do_set_ipaddr+0x90>)
 800ee24:	f00d fe64 	bl	801caf0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800ee28:	68bb      	ldr	r3, [r7, #8]
 800ee2a:	681a      	ldr	r2, [r3, #0]
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	3304      	adds	r3, #4
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	429a      	cmp	r2, r3
 800ee34:	d01c      	beq.n	800ee70 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800ee36:	68bb      	ldr	r3, [r7, #8]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	3304      	adds	r3, #4
 800ee40:	681a      	ldr	r2, [r3, #0]
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800ee46:	f107 0314 	add.w	r3, r7, #20
 800ee4a:	4619      	mov	r1, r3
 800ee4c:	6878      	ldr	r0, [r7, #4]
 800ee4e:	f7ff ffbf 	bl	800edd0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800ee52:	68bb      	ldr	r3, [r7, #8]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d002      	beq.n	800ee5e <netif_do_set_ipaddr+0x6a>
 800ee58:	68bb      	ldr	r3, [r7, #8]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	e000      	b.n	800ee60 <netif_do_set_ipaddr+0x6c>
 800ee5e:	2300      	movs	r3, #0
 800ee60:	68fa      	ldr	r2, [r7, #12]
 800ee62:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800ee64:	2101      	movs	r1, #1
 800ee66:	68f8      	ldr	r0, [r7, #12]
 800ee68:	f000 f8d2 	bl	800f010 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800ee6c:	2301      	movs	r3, #1
 800ee6e:	e000      	b.n	800ee72 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800ee70:	2300      	movs	r3, #0
}
 800ee72:	4618      	mov	r0, r3
 800ee74:	3718      	adds	r7, #24
 800ee76:	46bd      	mov	sp, r7
 800ee78:	bd80      	pop	{r7, pc}
 800ee7a:	bf00      	nop
 800ee7c:	0801fea0 	.word	0x0801fea0
 800ee80:	0801ffb8 	.word	0x0801ffb8
 800ee84:	0801fef0 	.word	0x0801fef0

0800ee88 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800ee88:	b480      	push	{r7}
 800ee8a:	b085      	sub	sp, #20
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	60f8      	str	r0, [r7, #12]
 800ee90:	60b9      	str	r1, [r7, #8]
 800ee92:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800ee94:	68bb      	ldr	r3, [r7, #8]
 800ee96:	681a      	ldr	r2, [r3, #0]
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	3308      	adds	r3, #8
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	429a      	cmp	r2, r3
 800eea0:	d00a      	beq.n	800eeb8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800eea2:	68bb      	ldr	r3, [r7, #8]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d002      	beq.n	800eeae <netif_do_set_netmask+0x26>
 800eea8:	68bb      	ldr	r3, [r7, #8]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	e000      	b.n	800eeb0 <netif_do_set_netmask+0x28>
 800eeae:	2300      	movs	r3, #0
 800eeb0:	68fa      	ldr	r2, [r7, #12]
 800eeb2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800eeb4:	2301      	movs	r3, #1
 800eeb6:	e000      	b.n	800eeba <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800eeb8:	2300      	movs	r3, #0
}
 800eeba:	4618      	mov	r0, r3
 800eebc:	3714      	adds	r7, #20
 800eebe:	46bd      	mov	sp, r7
 800eec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec4:	4770      	bx	lr

0800eec6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800eec6:	b480      	push	{r7}
 800eec8:	b085      	sub	sp, #20
 800eeca:	af00      	add	r7, sp, #0
 800eecc:	60f8      	str	r0, [r7, #12]
 800eece:	60b9      	str	r1, [r7, #8]
 800eed0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800eed2:	68bb      	ldr	r3, [r7, #8]
 800eed4:	681a      	ldr	r2, [r3, #0]
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	330c      	adds	r3, #12
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	429a      	cmp	r2, r3
 800eede:	d00a      	beq.n	800eef6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800eee0:	68bb      	ldr	r3, [r7, #8]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d002      	beq.n	800eeec <netif_do_set_gw+0x26>
 800eee6:	68bb      	ldr	r3, [r7, #8]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	e000      	b.n	800eeee <netif_do_set_gw+0x28>
 800eeec:	2300      	movs	r3, #0
 800eeee:	68fa      	ldr	r2, [r7, #12]
 800eef0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800eef2:	2301      	movs	r3, #1
 800eef4:	e000      	b.n	800eef8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800eef6:	2300      	movs	r3, #0
}
 800eef8:	4618      	mov	r0, r3
 800eefa:	3714      	adds	r7, #20
 800eefc:	46bd      	mov	sp, r7
 800eefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef02:	4770      	bx	lr

0800ef04 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800ef04:	b580      	push	{r7, lr}
 800ef06:	b088      	sub	sp, #32
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	60f8      	str	r0, [r7, #12]
 800ef0c:	60b9      	str	r1, [r7, #8]
 800ef0e:	607a      	str	r2, [r7, #4]
 800ef10:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800ef12:	2300      	movs	r3, #0
 800ef14:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800ef16:	2300      	movs	r3, #0
 800ef18:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ef1a:	68bb      	ldr	r3, [r7, #8]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d101      	bne.n	800ef24 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800ef20:	4b1c      	ldr	r3, [pc, #112]	; (800ef94 <netif_set_addr+0x90>)
 800ef22:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d101      	bne.n	800ef2e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800ef2a:	4b1a      	ldr	r3, [pc, #104]	; (800ef94 <netif_set_addr+0x90>)
 800ef2c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ef2e:	683b      	ldr	r3, [r7, #0]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d101      	bne.n	800ef38 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800ef34:	4b17      	ldr	r3, [pc, #92]	; (800ef94 <netif_set_addr+0x90>)
 800ef36:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800ef38:	68bb      	ldr	r3, [r7, #8]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d003      	beq.n	800ef46 <netif_set_addr+0x42>
 800ef3e:	68bb      	ldr	r3, [r7, #8]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d101      	bne.n	800ef4a <netif_set_addr+0x46>
 800ef46:	2301      	movs	r3, #1
 800ef48:	e000      	b.n	800ef4c <netif_set_addr+0x48>
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800ef4e:	697b      	ldr	r3, [r7, #20]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d006      	beq.n	800ef62 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ef54:	f107 0310 	add.w	r3, r7, #16
 800ef58:	461a      	mov	r2, r3
 800ef5a:	68b9      	ldr	r1, [r7, #8]
 800ef5c:	68f8      	ldr	r0, [r7, #12]
 800ef5e:	f7ff ff49 	bl	800edf4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800ef62:	69fa      	ldr	r2, [r7, #28]
 800ef64:	6879      	ldr	r1, [r7, #4]
 800ef66:	68f8      	ldr	r0, [r7, #12]
 800ef68:	f7ff ff8e 	bl	800ee88 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800ef6c:	69ba      	ldr	r2, [r7, #24]
 800ef6e:	6839      	ldr	r1, [r7, #0]
 800ef70:	68f8      	ldr	r0, [r7, #12]
 800ef72:	f7ff ffa8 	bl	800eec6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800ef76:	697b      	ldr	r3, [r7, #20]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d106      	bne.n	800ef8a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ef7c:	f107 0310 	add.w	r3, r7, #16
 800ef80:	461a      	mov	r2, r3
 800ef82:	68b9      	ldr	r1, [r7, #8]
 800ef84:	68f8      	ldr	r0, [r7, #12]
 800ef86:	f7ff ff35 	bl	800edf4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800ef8a:	bf00      	nop
 800ef8c:	3720      	adds	r7, #32
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	bd80      	pop	{r7, pc}
 800ef92:	bf00      	nop
 800ef94:	08022898 	.word	0x08022898

0800ef98 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800ef98:	b480      	push	{r7}
 800ef9a:	b083      	sub	sp, #12
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800efa0:	4a04      	ldr	r2, [pc, #16]	; (800efb4 <netif_set_default+0x1c>)
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800efa6:	bf00      	nop
 800efa8:	370c      	adds	r7, #12
 800efaa:	46bd      	mov	sp, r7
 800efac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb0:	4770      	bx	lr
 800efb2:	bf00      	nop
 800efb4:	2000830c 	.word	0x2000830c

0800efb8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800efb8:	b580      	push	{r7, lr}
 800efba:	b082      	sub	sp, #8
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d107      	bne.n	800efd6 <netif_set_up+0x1e>
 800efc6:	4b0f      	ldr	r3, [pc, #60]	; (800f004 <netif_set_up+0x4c>)
 800efc8:	f44f 7254 	mov.w	r2, #848	; 0x350
 800efcc:	490e      	ldr	r1, [pc, #56]	; (800f008 <netif_set_up+0x50>)
 800efce:	480f      	ldr	r0, [pc, #60]	; (800f00c <netif_set_up+0x54>)
 800efd0:	f00d fd8e 	bl	801caf0 <iprintf>
 800efd4:	e013      	b.n	800effe <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800efdc:	f003 0301 	and.w	r3, r3, #1
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d10c      	bne.n	800effe <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800efea:	f043 0301 	orr.w	r3, r3, #1
 800efee:	b2da      	uxtb	r2, r3
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800eff6:	2103      	movs	r1, #3
 800eff8:	6878      	ldr	r0, [r7, #4]
 800effa:	f000 f809 	bl	800f010 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800effe:	3708      	adds	r7, #8
 800f000:	46bd      	mov	sp, r7
 800f002:	bd80      	pop	{r7, pc}
 800f004:	0801fea0 	.word	0x0801fea0
 800f008:	08020028 	.word	0x08020028
 800f00c:	0801fef0 	.word	0x0801fef0

0800f010 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800f010:	b580      	push	{r7, lr}
 800f012:	b082      	sub	sp, #8
 800f014:	af00      	add	r7, sp, #0
 800f016:	6078      	str	r0, [r7, #4]
 800f018:	460b      	mov	r3, r1
 800f01a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d106      	bne.n	800f030 <netif_issue_reports+0x20>
 800f022:	4b18      	ldr	r3, [pc, #96]	; (800f084 <netif_issue_reports+0x74>)
 800f024:	f240 326d 	movw	r2, #877	; 0x36d
 800f028:	4917      	ldr	r1, [pc, #92]	; (800f088 <netif_issue_reports+0x78>)
 800f02a:	4818      	ldr	r0, [pc, #96]	; (800f08c <netif_issue_reports+0x7c>)
 800f02c:	f00d fd60 	bl	801caf0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f036:	f003 0304 	and.w	r3, r3, #4
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d01e      	beq.n	800f07c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f044:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d017      	beq.n	800f07c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800f04c:	78fb      	ldrb	r3, [r7, #3]
 800f04e:	f003 0301 	and.w	r3, r3, #1
 800f052:	2b00      	cmp	r3, #0
 800f054:	d013      	beq.n	800f07e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	3304      	adds	r3, #4
 800f05a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d00e      	beq.n	800f07e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f066:	f003 0308 	and.w	r3, r3, #8
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d007      	beq.n	800f07e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	3304      	adds	r3, #4
 800f072:	4619      	mov	r1, r3
 800f074:	6878      	ldr	r0, [r7, #4]
 800f076:	f008 fdb7 	bl	8017be8 <etharp_request>
 800f07a:	e000      	b.n	800f07e <netif_issue_reports+0x6e>
    return;
 800f07c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800f07e:	3708      	adds	r7, #8
 800f080:	46bd      	mov	sp, r7
 800f082:	bd80      	pop	{r7, pc}
 800f084:	0801fea0 	.word	0x0801fea0
 800f088:	08020044 	.word	0x08020044
 800f08c:	0801fef0 	.word	0x0801fef0

0800f090 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b082      	sub	sp, #8
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d107      	bne.n	800f0ae <netif_set_down+0x1e>
 800f09e:	4b12      	ldr	r3, [pc, #72]	; (800f0e8 <netif_set_down+0x58>)
 800f0a0:	f240 329b 	movw	r2, #923	; 0x39b
 800f0a4:	4911      	ldr	r1, [pc, #68]	; (800f0ec <netif_set_down+0x5c>)
 800f0a6:	4812      	ldr	r0, [pc, #72]	; (800f0f0 <netif_set_down+0x60>)
 800f0a8:	f00d fd22 	bl	801caf0 <iprintf>
 800f0ac:	e019      	b.n	800f0e2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f0b4:	f003 0301 	and.w	r3, r3, #1
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d012      	beq.n	800f0e2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f0c2:	f023 0301 	bic.w	r3, r3, #1
 800f0c6:	b2da      	uxtb	r2, r3
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f0d4:	f003 0308 	and.w	r3, r3, #8
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d002      	beq.n	800f0e2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800f0dc:	6878      	ldr	r0, [r7, #4]
 800f0de:	f008 f941 	bl	8017364 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800f0e2:	3708      	adds	r7, #8
 800f0e4:	46bd      	mov	sp, r7
 800f0e6:	bd80      	pop	{r7, pc}
 800f0e8:	0801fea0 	.word	0x0801fea0
 800f0ec:	08020068 	.word	0x08020068
 800f0f0:	0801fef0 	.word	0x0801fef0

0800f0f4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	b082      	sub	sp, #8
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d107      	bne.n	800f112 <netif_set_link_up+0x1e>
 800f102:	4b13      	ldr	r3, [pc, #76]	; (800f150 <netif_set_link_up+0x5c>)
 800f104:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800f108:	4912      	ldr	r1, [pc, #72]	; (800f154 <netif_set_link_up+0x60>)
 800f10a:	4813      	ldr	r0, [pc, #76]	; (800f158 <netif_set_link_up+0x64>)
 800f10c:	f00d fcf0 	bl	801caf0 <iprintf>
 800f110:	e01b      	b.n	800f14a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f118:	f003 0304 	and.w	r3, r3, #4
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d114      	bne.n	800f14a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f126:	f043 0304 	orr.w	r3, r3, #4
 800f12a:	b2da      	uxtb	r2, r3
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800f132:	2103      	movs	r1, #3
 800f134:	6878      	ldr	r0, [r7, #4]
 800f136:	f7ff ff6b 	bl	800f010 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	69db      	ldr	r3, [r3, #28]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d003      	beq.n	800f14a <netif_set_link_up+0x56>
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	69db      	ldr	r3, [r3, #28]
 800f146:	6878      	ldr	r0, [r7, #4]
 800f148:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800f14a:	3708      	adds	r7, #8
 800f14c:	46bd      	mov	sp, r7
 800f14e:	bd80      	pop	{r7, pc}
 800f150:	0801fea0 	.word	0x0801fea0
 800f154:	08020088 	.word	0x08020088
 800f158:	0801fef0 	.word	0x0801fef0

0800f15c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800f15c:	b580      	push	{r7, lr}
 800f15e:	b082      	sub	sp, #8
 800f160:	af00      	add	r7, sp, #0
 800f162:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d107      	bne.n	800f17a <netif_set_link_down+0x1e>
 800f16a:	4b11      	ldr	r3, [pc, #68]	; (800f1b0 <netif_set_link_down+0x54>)
 800f16c:	f240 4206 	movw	r2, #1030	; 0x406
 800f170:	4910      	ldr	r1, [pc, #64]	; (800f1b4 <netif_set_link_down+0x58>)
 800f172:	4811      	ldr	r0, [pc, #68]	; (800f1b8 <netif_set_link_down+0x5c>)
 800f174:	f00d fcbc 	bl	801caf0 <iprintf>
 800f178:	e017      	b.n	800f1aa <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f180:	f003 0304 	and.w	r3, r3, #4
 800f184:	2b00      	cmp	r3, #0
 800f186:	d010      	beq.n	800f1aa <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f18e:	f023 0304 	bic.w	r3, r3, #4
 800f192:	b2da      	uxtb	r2, r3
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	69db      	ldr	r3, [r3, #28]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d003      	beq.n	800f1aa <netif_set_link_down+0x4e>
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	69db      	ldr	r3, [r3, #28]
 800f1a6:	6878      	ldr	r0, [r7, #4]
 800f1a8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800f1aa:	3708      	adds	r7, #8
 800f1ac:	46bd      	mov	sp, r7
 800f1ae:	bd80      	pop	{r7, pc}
 800f1b0:	0801fea0 	.word	0x0801fea0
 800f1b4:	080200ac 	.word	0x080200ac
 800f1b8:	0801fef0 	.word	0x0801fef0

0800f1bc <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800f1bc:	b480      	push	{r7}
 800f1be:	b083      	sub	sp, #12
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	6078      	str	r0, [r7, #4]
 800f1c4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d002      	beq.n	800f1d2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	683a      	ldr	r2, [r7, #0]
 800f1d0:	61da      	str	r2, [r3, #28]
  }
}
 800f1d2:	bf00      	nop
 800f1d4:	370c      	adds	r7, #12
 800f1d6:	46bd      	mov	sp, r7
 800f1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1dc:	4770      	bx	lr

0800f1de <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800f1de:	b480      	push	{r7}
 800f1e0:	b085      	sub	sp, #20
 800f1e2:	af00      	add	r7, sp, #0
 800f1e4:	60f8      	str	r0, [r7, #12]
 800f1e6:	60b9      	str	r1, [r7, #8]
 800f1e8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800f1ea:	f06f 030b 	mvn.w	r3, #11
}
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	3714      	adds	r7, #20
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f8:	4770      	bx	lr
	...

0800f1fc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800f1fc:	b480      	push	{r7}
 800f1fe:	b085      	sub	sp, #20
 800f200:	af00      	add	r7, sp, #0
 800f202:	4603      	mov	r3, r0
 800f204:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800f206:	79fb      	ldrb	r3, [r7, #7]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d013      	beq.n	800f234 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800f20c:	4b0d      	ldr	r3, [pc, #52]	; (800f244 <netif_get_by_index+0x48>)
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	60fb      	str	r3, [r7, #12]
 800f212:	e00c      	b.n	800f22e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f21a:	3301      	adds	r3, #1
 800f21c:	b2db      	uxtb	r3, r3
 800f21e:	79fa      	ldrb	r2, [r7, #7]
 800f220:	429a      	cmp	r2, r3
 800f222:	d101      	bne.n	800f228 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	e006      	b.n	800f236 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	60fb      	str	r3, [r7, #12]
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d1ef      	bne.n	800f214 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800f234:	2300      	movs	r3, #0
}
 800f236:	4618      	mov	r0, r3
 800f238:	3714      	adds	r7, #20
 800f23a:	46bd      	mov	sp, r7
 800f23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f240:	4770      	bx	lr
 800f242:	bf00      	nop
 800f244:	20008308 	.word	0x20008308

0800f248 <netif_find>:
 * @param name the name of the netif (like netif->name) plus concatenated number
 * in ascii representation (e.g. 'en0')
 */
struct netif *
netif_find(const char *name)
{
 800f248:	b580      	push	{r7, lr}
 800f24a:	b084      	sub	sp, #16
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	6078      	str	r0, [r7, #4]
  struct netif *netif;
  u8_t num;

  LWIP_ASSERT_CORE_LOCKED();

  if (name == NULL) {
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d101      	bne.n	800f25a <netif_find+0x12>
    return NULL;
 800f256:	2300      	movs	r3, #0
 800f258:	e028      	b.n	800f2ac <netif_find+0x64>
  }

  num = (u8_t)atoi(&name[2]);
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	3302      	adds	r3, #2
 800f25e:	4618      	mov	r0, r3
 800f260:	f00c fc56 	bl	801bb10 <atoi>
 800f264:	4603      	mov	r3, r0
 800f266:	72fb      	strb	r3, [r7, #11]

  NETIF_FOREACH(netif) {
 800f268:	4b12      	ldr	r3, [pc, #72]	; (800f2b4 <netif_find+0x6c>)
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	60fb      	str	r3, [r7, #12]
 800f26e:	e019      	b.n	800f2a4 <netif_find+0x5c>
    if (num == netif->num &&
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f276:	7afa      	ldrb	r2, [r7, #11]
 800f278:	429a      	cmp	r2, r3
 800f27a:	d110      	bne.n	800f29e <netif_find+0x56>
        name[0] == netif->name[0] &&
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	781a      	ldrb	r2, [r3, #0]
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
    if (num == netif->num &&
 800f286:	429a      	cmp	r2, r3
 800f288:	d109      	bne.n	800f29e <netif_find+0x56>
        name[1] == netif->name[1]) {
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	3301      	adds	r3, #1
 800f28e:	781a      	ldrb	r2, [r3, #0]
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
        name[0] == netif->name[0] &&
 800f296:	429a      	cmp	r2, r3
 800f298:	d101      	bne.n	800f29e <netif_find+0x56>
      LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: found %c%c\n", name[0], name[1]));
      return netif;
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	e006      	b.n	800f2ac <netif_find+0x64>
  NETIF_FOREACH(netif) {
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	60fb      	str	r3, [r7, #12]
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d1e2      	bne.n	800f270 <netif_find+0x28>
    }
  }
  LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: didn't find %c%c\n", name[0], name[1]));
  return NULL;
 800f2aa:	2300      	movs	r3, #0
}
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	3710      	adds	r7, #16
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	bd80      	pop	{r7, pc}
 800f2b4:	20008308 	.word	0x20008308

0800f2b8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	b082      	sub	sp, #8
 800f2bc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800f2be:	f00a fa33 	bl	8019728 <sys_arch_protect>
 800f2c2:	6038      	str	r0, [r7, #0]
 800f2c4:	4b0d      	ldr	r3, [pc, #52]	; (800f2fc <pbuf_free_ooseq+0x44>)
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	701a      	strb	r2, [r3, #0]
 800f2ca:	6838      	ldr	r0, [r7, #0]
 800f2cc:	f00a fa3a 	bl	8019744 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800f2d0:	4b0b      	ldr	r3, [pc, #44]	; (800f300 <pbuf_free_ooseq+0x48>)
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	607b      	str	r3, [r7, #4]
 800f2d6:	e00a      	b.n	800f2ee <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d003      	beq.n	800f2e8 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800f2e0:	6878      	ldr	r0, [r7, #4]
 800f2e2:	f002 fc9f 	bl	8011c24 <tcp_free_ooseq>
      return;
 800f2e6:	e005      	b.n	800f2f4 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	68db      	ldr	r3, [r3, #12]
 800f2ec:	607b      	str	r3, [r7, #4]
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d1f1      	bne.n	800f2d8 <pbuf_free_ooseq+0x20>
    }
  }
}
 800f2f4:	3708      	adds	r7, #8
 800f2f6:	46bd      	mov	sp, r7
 800f2f8:	bd80      	pop	{r7, pc}
 800f2fa:	bf00      	nop
 800f2fc:	20008310 	.word	0x20008310
 800f300:	20008318 	.word	0x20008318

0800f304 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800f304:	b580      	push	{r7, lr}
 800f306:	b082      	sub	sp, #8
 800f308:	af00      	add	r7, sp, #0
 800f30a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800f30c:	f7ff ffd4 	bl	800f2b8 <pbuf_free_ooseq>
}
 800f310:	bf00      	nop
 800f312:	3708      	adds	r7, #8
 800f314:	46bd      	mov	sp, r7
 800f316:	bd80      	pop	{r7, pc}

0800f318 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800f318:	b580      	push	{r7, lr}
 800f31a:	b082      	sub	sp, #8
 800f31c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800f31e:	f00a fa03 	bl	8019728 <sys_arch_protect>
 800f322:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800f324:	4b0f      	ldr	r3, [pc, #60]	; (800f364 <pbuf_pool_is_empty+0x4c>)
 800f326:	781b      	ldrb	r3, [r3, #0]
 800f328:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800f32a:	4b0e      	ldr	r3, [pc, #56]	; (800f364 <pbuf_pool_is_empty+0x4c>)
 800f32c:	2201      	movs	r2, #1
 800f32e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800f330:	6878      	ldr	r0, [r7, #4]
 800f332:	f00a fa07 	bl	8019744 <sys_arch_unprotect>

  if (!queued) {
 800f336:	78fb      	ldrb	r3, [r7, #3]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d10f      	bne.n	800f35c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800f33c:	2100      	movs	r1, #0
 800f33e:	480a      	ldr	r0, [pc, #40]	; (800f368 <pbuf_pool_is_empty+0x50>)
 800f340:	f7fe fe9e 	bl	800e080 <tcpip_try_callback>
 800f344:	4603      	mov	r3, r0
 800f346:	2b00      	cmp	r3, #0
 800f348:	d008      	beq.n	800f35c <pbuf_pool_is_empty+0x44>
 800f34a:	f00a f9ed 	bl	8019728 <sys_arch_protect>
 800f34e:	6078      	str	r0, [r7, #4]
 800f350:	4b04      	ldr	r3, [pc, #16]	; (800f364 <pbuf_pool_is_empty+0x4c>)
 800f352:	2200      	movs	r2, #0
 800f354:	701a      	strb	r2, [r3, #0]
 800f356:	6878      	ldr	r0, [r7, #4]
 800f358:	f00a f9f4 	bl	8019744 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800f35c:	bf00      	nop
 800f35e:	3708      	adds	r7, #8
 800f360:	46bd      	mov	sp, r7
 800f362:	bd80      	pop	{r7, pc}
 800f364:	20008310 	.word	0x20008310
 800f368:	0800f305 	.word	0x0800f305

0800f36c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800f36c:	b480      	push	{r7}
 800f36e:	b085      	sub	sp, #20
 800f370:	af00      	add	r7, sp, #0
 800f372:	60f8      	str	r0, [r7, #12]
 800f374:	60b9      	str	r1, [r7, #8]
 800f376:	4611      	mov	r1, r2
 800f378:	461a      	mov	r2, r3
 800f37a:	460b      	mov	r3, r1
 800f37c:	80fb      	strh	r3, [r7, #6]
 800f37e:	4613      	mov	r3, r2
 800f380:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	2200      	movs	r2, #0
 800f386:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	68ba      	ldr	r2, [r7, #8]
 800f38c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	88fa      	ldrh	r2, [r7, #6]
 800f392:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	88ba      	ldrh	r2, [r7, #4]
 800f398:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800f39a:	8b3b      	ldrh	r3, [r7, #24]
 800f39c:	b2da      	uxtb	r2, r3
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	7f3a      	ldrb	r2, [r7, #28]
 800f3a6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	2201      	movs	r2, #1
 800f3ac:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	2200      	movs	r2, #0
 800f3b2:	73da      	strb	r2, [r3, #15]
}
 800f3b4:	bf00      	nop
 800f3b6:	3714      	adds	r7, #20
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3be:	4770      	bx	lr

0800f3c0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800f3c0:	b580      	push	{r7, lr}
 800f3c2:	b08c      	sub	sp, #48	; 0x30
 800f3c4:	af02      	add	r7, sp, #8
 800f3c6:	4603      	mov	r3, r0
 800f3c8:	71fb      	strb	r3, [r7, #7]
 800f3ca:	460b      	mov	r3, r1
 800f3cc:	80bb      	strh	r3, [r7, #4]
 800f3ce:	4613      	mov	r3, r2
 800f3d0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800f3d2:	79fb      	ldrb	r3, [r7, #7]
 800f3d4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800f3d6:	887b      	ldrh	r3, [r7, #2]
 800f3d8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800f3dc:	d07f      	beq.n	800f4de <pbuf_alloc+0x11e>
 800f3de:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800f3e2:	f300 80c8 	bgt.w	800f576 <pbuf_alloc+0x1b6>
 800f3e6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800f3ea:	d010      	beq.n	800f40e <pbuf_alloc+0x4e>
 800f3ec:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800f3f0:	f300 80c1 	bgt.w	800f576 <pbuf_alloc+0x1b6>
 800f3f4:	2b01      	cmp	r3, #1
 800f3f6:	d002      	beq.n	800f3fe <pbuf_alloc+0x3e>
 800f3f8:	2b41      	cmp	r3, #65	; 0x41
 800f3fa:	f040 80bc 	bne.w	800f576 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800f3fe:	887a      	ldrh	r2, [r7, #2]
 800f400:	88bb      	ldrh	r3, [r7, #4]
 800f402:	4619      	mov	r1, r3
 800f404:	2000      	movs	r0, #0
 800f406:	f000 f8d1 	bl	800f5ac <pbuf_alloc_reference>
 800f40a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800f40c:	e0bd      	b.n	800f58a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800f40e:	2300      	movs	r3, #0
 800f410:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800f412:	2300      	movs	r3, #0
 800f414:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800f416:	88bb      	ldrh	r3, [r7, #4]
 800f418:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800f41a:	200c      	movs	r0, #12
 800f41c:	f7ff fb86 	bl	800eb2c <memp_malloc>
 800f420:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800f422:	693b      	ldr	r3, [r7, #16]
 800f424:	2b00      	cmp	r3, #0
 800f426:	d109      	bne.n	800f43c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800f428:	f7ff ff76 	bl	800f318 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800f42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d002      	beq.n	800f438 <pbuf_alloc+0x78>
            pbuf_free(p);
 800f432:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f434:	f000 fada 	bl	800f9ec <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800f438:	2300      	movs	r3, #0
 800f43a:	e0a7      	b.n	800f58c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800f43c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f43e:	3303      	adds	r3, #3
 800f440:	b29b      	uxth	r3, r3
 800f442:	f023 0303 	bic.w	r3, r3, #3
 800f446:	b29b      	uxth	r3, r3
 800f448:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800f44c:	b29b      	uxth	r3, r3
 800f44e:	8b7a      	ldrh	r2, [r7, #26]
 800f450:	4293      	cmp	r3, r2
 800f452:	bf28      	it	cs
 800f454:	4613      	movcs	r3, r2
 800f456:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800f458:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f45a:	3310      	adds	r3, #16
 800f45c:	693a      	ldr	r2, [r7, #16]
 800f45e:	4413      	add	r3, r2
 800f460:	3303      	adds	r3, #3
 800f462:	f023 0303 	bic.w	r3, r3, #3
 800f466:	4618      	mov	r0, r3
 800f468:	89f9      	ldrh	r1, [r7, #14]
 800f46a:	8b7a      	ldrh	r2, [r7, #26]
 800f46c:	2300      	movs	r3, #0
 800f46e:	9301      	str	r3, [sp, #4]
 800f470:	887b      	ldrh	r3, [r7, #2]
 800f472:	9300      	str	r3, [sp, #0]
 800f474:	460b      	mov	r3, r1
 800f476:	4601      	mov	r1, r0
 800f478:	6938      	ldr	r0, [r7, #16]
 800f47a:	f7ff ff77 	bl	800f36c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800f47e:	693b      	ldr	r3, [r7, #16]
 800f480:	685b      	ldr	r3, [r3, #4]
 800f482:	f003 0303 	and.w	r3, r3, #3
 800f486:	2b00      	cmp	r3, #0
 800f488:	d006      	beq.n	800f498 <pbuf_alloc+0xd8>
 800f48a:	4b42      	ldr	r3, [pc, #264]	; (800f594 <pbuf_alloc+0x1d4>)
 800f48c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f490:	4941      	ldr	r1, [pc, #260]	; (800f598 <pbuf_alloc+0x1d8>)
 800f492:	4842      	ldr	r0, [pc, #264]	; (800f59c <pbuf_alloc+0x1dc>)
 800f494:	f00d fb2c 	bl	801caf0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800f498:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f49a:	3303      	adds	r3, #3
 800f49c:	f023 0303 	bic.w	r3, r3, #3
 800f4a0:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800f4a4:	d106      	bne.n	800f4b4 <pbuf_alloc+0xf4>
 800f4a6:	4b3b      	ldr	r3, [pc, #236]	; (800f594 <pbuf_alloc+0x1d4>)
 800f4a8:	f44f 7281 	mov.w	r2, #258	; 0x102
 800f4ac:	493c      	ldr	r1, [pc, #240]	; (800f5a0 <pbuf_alloc+0x1e0>)
 800f4ae:	483b      	ldr	r0, [pc, #236]	; (800f59c <pbuf_alloc+0x1dc>)
 800f4b0:	f00d fb1e 	bl	801caf0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800f4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d102      	bne.n	800f4c0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800f4ba:	693b      	ldr	r3, [r7, #16]
 800f4bc:	627b      	str	r3, [r7, #36]	; 0x24
 800f4be:	e002      	b.n	800f4c6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800f4c0:	69fb      	ldr	r3, [r7, #28]
 800f4c2:	693a      	ldr	r2, [r7, #16]
 800f4c4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800f4c6:	693b      	ldr	r3, [r7, #16]
 800f4c8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800f4ca:	8b7a      	ldrh	r2, [r7, #26]
 800f4cc:	89fb      	ldrh	r3, [r7, #14]
 800f4ce:	1ad3      	subs	r3, r2, r3
 800f4d0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800f4d6:	8b7b      	ldrh	r3, [r7, #26]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d19e      	bne.n	800f41a <pbuf_alloc+0x5a>
      break;
 800f4dc:	e055      	b.n	800f58a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800f4de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f4e0:	3303      	adds	r3, #3
 800f4e2:	b29b      	uxth	r3, r3
 800f4e4:	f023 0303 	bic.w	r3, r3, #3
 800f4e8:	b29a      	uxth	r2, r3
 800f4ea:	88bb      	ldrh	r3, [r7, #4]
 800f4ec:	3303      	adds	r3, #3
 800f4ee:	b29b      	uxth	r3, r3
 800f4f0:	f023 0303 	bic.w	r3, r3, #3
 800f4f4:	b29b      	uxth	r3, r3
 800f4f6:	4413      	add	r3, r2
 800f4f8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800f4fa:	8b3b      	ldrh	r3, [r7, #24]
 800f4fc:	3310      	adds	r3, #16
 800f4fe:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800f500:	8b3a      	ldrh	r2, [r7, #24]
 800f502:	88bb      	ldrh	r3, [r7, #4]
 800f504:	3303      	adds	r3, #3
 800f506:	f023 0303 	bic.w	r3, r3, #3
 800f50a:	429a      	cmp	r2, r3
 800f50c:	d306      	bcc.n	800f51c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800f50e:	8afa      	ldrh	r2, [r7, #22]
 800f510:	88bb      	ldrh	r3, [r7, #4]
 800f512:	3303      	adds	r3, #3
 800f514:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800f518:	429a      	cmp	r2, r3
 800f51a:	d201      	bcs.n	800f520 <pbuf_alloc+0x160>
        return NULL;
 800f51c:	2300      	movs	r3, #0
 800f51e:	e035      	b.n	800f58c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800f520:	8afb      	ldrh	r3, [r7, #22]
 800f522:	4618      	mov	r0, r3
 800f524:	f7ff f980 	bl	800e828 <mem_malloc>
 800f528:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800f52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d101      	bne.n	800f534 <pbuf_alloc+0x174>
        return NULL;
 800f530:	2300      	movs	r3, #0
 800f532:	e02b      	b.n	800f58c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800f534:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f536:	3310      	adds	r3, #16
 800f538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f53a:	4413      	add	r3, r2
 800f53c:	3303      	adds	r3, #3
 800f53e:	f023 0303 	bic.w	r3, r3, #3
 800f542:	4618      	mov	r0, r3
 800f544:	88b9      	ldrh	r1, [r7, #4]
 800f546:	88ba      	ldrh	r2, [r7, #4]
 800f548:	2300      	movs	r3, #0
 800f54a:	9301      	str	r3, [sp, #4]
 800f54c:	887b      	ldrh	r3, [r7, #2]
 800f54e:	9300      	str	r3, [sp, #0]
 800f550:	460b      	mov	r3, r1
 800f552:	4601      	mov	r1, r0
 800f554:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f556:	f7ff ff09 	bl	800f36c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800f55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f55c:	685b      	ldr	r3, [r3, #4]
 800f55e:	f003 0303 	and.w	r3, r3, #3
 800f562:	2b00      	cmp	r3, #0
 800f564:	d010      	beq.n	800f588 <pbuf_alloc+0x1c8>
 800f566:	4b0b      	ldr	r3, [pc, #44]	; (800f594 <pbuf_alloc+0x1d4>)
 800f568:	f44f 7291 	mov.w	r2, #290	; 0x122
 800f56c:	490d      	ldr	r1, [pc, #52]	; (800f5a4 <pbuf_alloc+0x1e4>)
 800f56e:	480b      	ldr	r0, [pc, #44]	; (800f59c <pbuf_alloc+0x1dc>)
 800f570:	f00d fabe 	bl	801caf0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800f574:	e008      	b.n	800f588 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800f576:	4b07      	ldr	r3, [pc, #28]	; (800f594 <pbuf_alloc+0x1d4>)
 800f578:	f240 1227 	movw	r2, #295	; 0x127
 800f57c:	490a      	ldr	r1, [pc, #40]	; (800f5a8 <pbuf_alloc+0x1e8>)
 800f57e:	4807      	ldr	r0, [pc, #28]	; (800f59c <pbuf_alloc+0x1dc>)
 800f580:	f00d fab6 	bl	801caf0 <iprintf>
      return NULL;
 800f584:	2300      	movs	r3, #0
 800f586:	e001      	b.n	800f58c <pbuf_alloc+0x1cc>
      break;
 800f588:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800f58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f58c:	4618      	mov	r0, r3
 800f58e:	3728      	adds	r7, #40	; 0x28
 800f590:	46bd      	mov	sp, r7
 800f592:	bd80      	pop	{r7, pc}
 800f594:	080200d0 	.word	0x080200d0
 800f598:	08020100 	.word	0x08020100
 800f59c:	08020130 	.word	0x08020130
 800f5a0:	08020158 	.word	0x08020158
 800f5a4:	0802018c 	.word	0x0802018c
 800f5a8:	080201b8 	.word	0x080201b8

0800f5ac <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800f5ac:	b580      	push	{r7, lr}
 800f5ae:	b086      	sub	sp, #24
 800f5b0:	af02      	add	r7, sp, #8
 800f5b2:	6078      	str	r0, [r7, #4]
 800f5b4:	460b      	mov	r3, r1
 800f5b6:	807b      	strh	r3, [r7, #2]
 800f5b8:	4613      	mov	r3, r2
 800f5ba:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800f5bc:	883b      	ldrh	r3, [r7, #0]
 800f5be:	2b41      	cmp	r3, #65	; 0x41
 800f5c0:	d009      	beq.n	800f5d6 <pbuf_alloc_reference+0x2a>
 800f5c2:	883b      	ldrh	r3, [r7, #0]
 800f5c4:	2b01      	cmp	r3, #1
 800f5c6:	d006      	beq.n	800f5d6 <pbuf_alloc_reference+0x2a>
 800f5c8:	4b0f      	ldr	r3, [pc, #60]	; (800f608 <pbuf_alloc_reference+0x5c>)
 800f5ca:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800f5ce:	490f      	ldr	r1, [pc, #60]	; (800f60c <pbuf_alloc_reference+0x60>)
 800f5d0:	480f      	ldr	r0, [pc, #60]	; (800f610 <pbuf_alloc_reference+0x64>)
 800f5d2:	f00d fa8d 	bl	801caf0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800f5d6:	200b      	movs	r0, #11
 800f5d8:	f7ff faa8 	bl	800eb2c <memp_malloc>
 800f5dc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d101      	bne.n	800f5e8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	e00b      	b.n	800f600 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800f5e8:	8879      	ldrh	r1, [r7, #2]
 800f5ea:	887a      	ldrh	r2, [r7, #2]
 800f5ec:	2300      	movs	r3, #0
 800f5ee:	9301      	str	r3, [sp, #4]
 800f5f0:	883b      	ldrh	r3, [r7, #0]
 800f5f2:	9300      	str	r3, [sp, #0]
 800f5f4:	460b      	mov	r3, r1
 800f5f6:	6879      	ldr	r1, [r7, #4]
 800f5f8:	68f8      	ldr	r0, [r7, #12]
 800f5fa:	f7ff feb7 	bl	800f36c <pbuf_init_alloced_pbuf>
  return p;
 800f5fe:	68fb      	ldr	r3, [r7, #12]
}
 800f600:	4618      	mov	r0, r3
 800f602:	3710      	adds	r7, #16
 800f604:	46bd      	mov	sp, r7
 800f606:	bd80      	pop	{r7, pc}
 800f608:	080200d0 	.word	0x080200d0
 800f60c:	080201d4 	.word	0x080201d4
 800f610:	08020130 	.word	0x08020130

0800f614 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800f614:	b580      	push	{r7, lr}
 800f616:	b088      	sub	sp, #32
 800f618:	af02      	add	r7, sp, #8
 800f61a:	607b      	str	r3, [r7, #4]
 800f61c:	4603      	mov	r3, r0
 800f61e:	73fb      	strb	r3, [r7, #15]
 800f620:	460b      	mov	r3, r1
 800f622:	81bb      	strh	r3, [r7, #12]
 800f624:	4613      	mov	r3, r2
 800f626:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800f628:	7bfb      	ldrb	r3, [r7, #15]
 800f62a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800f62c:	8a7b      	ldrh	r3, [r7, #18]
 800f62e:	3303      	adds	r3, #3
 800f630:	f023 0203 	bic.w	r2, r3, #3
 800f634:	89bb      	ldrh	r3, [r7, #12]
 800f636:	441a      	add	r2, r3
 800f638:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f63a:	429a      	cmp	r2, r3
 800f63c:	d901      	bls.n	800f642 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800f63e:	2300      	movs	r3, #0
 800f640:	e018      	b.n	800f674 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800f642:	6a3b      	ldr	r3, [r7, #32]
 800f644:	2b00      	cmp	r3, #0
 800f646:	d007      	beq.n	800f658 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800f648:	8a7b      	ldrh	r3, [r7, #18]
 800f64a:	3303      	adds	r3, #3
 800f64c:	f023 0303 	bic.w	r3, r3, #3
 800f650:	6a3a      	ldr	r2, [r7, #32]
 800f652:	4413      	add	r3, r2
 800f654:	617b      	str	r3, [r7, #20]
 800f656:	e001      	b.n	800f65c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800f658:	2300      	movs	r3, #0
 800f65a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800f65c:	6878      	ldr	r0, [r7, #4]
 800f65e:	89b9      	ldrh	r1, [r7, #12]
 800f660:	89ba      	ldrh	r2, [r7, #12]
 800f662:	2302      	movs	r3, #2
 800f664:	9301      	str	r3, [sp, #4]
 800f666:	897b      	ldrh	r3, [r7, #10]
 800f668:	9300      	str	r3, [sp, #0]
 800f66a:	460b      	mov	r3, r1
 800f66c:	6979      	ldr	r1, [r7, #20]
 800f66e:	f7ff fe7d 	bl	800f36c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800f672:	687b      	ldr	r3, [r7, #4]
}
 800f674:	4618      	mov	r0, r3
 800f676:	3718      	adds	r7, #24
 800f678:	46bd      	mov	sp, r7
 800f67a:	bd80      	pop	{r7, pc}

0800f67c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800f67c:	b580      	push	{r7, lr}
 800f67e:	b084      	sub	sp, #16
 800f680:	af00      	add	r7, sp, #0
 800f682:	6078      	str	r0, [r7, #4]
 800f684:	460b      	mov	r3, r1
 800f686:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d106      	bne.n	800f69c <pbuf_realloc+0x20>
 800f68e:	4b3a      	ldr	r3, [pc, #232]	; (800f778 <pbuf_realloc+0xfc>)
 800f690:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800f694:	4939      	ldr	r1, [pc, #228]	; (800f77c <pbuf_realloc+0x100>)
 800f696:	483a      	ldr	r0, [pc, #232]	; (800f780 <pbuf_realloc+0x104>)
 800f698:	f00d fa2a 	bl	801caf0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	891b      	ldrh	r3, [r3, #8]
 800f6a0:	887a      	ldrh	r2, [r7, #2]
 800f6a2:	429a      	cmp	r2, r3
 800f6a4:	d263      	bcs.n	800f76e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	891a      	ldrh	r2, [r3, #8]
 800f6aa:	887b      	ldrh	r3, [r7, #2]
 800f6ac:	1ad3      	subs	r3, r2, r3
 800f6ae:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800f6b0:	887b      	ldrh	r3, [r7, #2]
 800f6b2:	817b      	strh	r3, [r7, #10]
  q = p;
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800f6b8:	e018      	b.n	800f6ec <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	895b      	ldrh	r3, [r3, #10]
 800f6be:	897a      	ldrh	r2, [r7, #10]
 800f6c0:	1ad3      	subs	r3, r2, r3
 800f6c2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	891a      	ldrh	r2, [r3, #8]
 800f6c8:	893b      	ldrh	r3, [r7, #8]
 800f6ca:	1ad3      	subs	r3, r2, r3
 800f6cc:	b29a      	uxth	r2, r3
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d106      	bne.n	800f6ec <pbuf_realloc+0x70>
 800f6de:	4b26      	ldr	r3, [pc, #152]	; (800f778 <pbuf_realloc+0xfc>)
 800f6e0:	f240 12af 	movw	r2, #431	; 0x1af
 800f6e4:	4927      	ldr	r1, [pc, #156]	; (800f784 <pbuf_realloc+0x108>)
 800f6e6:	4826      	ldr	r0, [pc, #152]	; (800f780 <pbuf_realloc+0x104>)
 800f6e8:	f00d fa02 	bl	801caf0 <iprintf>
  while (rem_len > q->len) {
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	895b      	ldrh	r3, [r3, #10]
 800f6f0:	897a      	ldrh	r2, [r7, #10]
 800f6f2:	429a      	cmp	r2, r3
 800f6f4:	d8e1      	bhi.n	800f6ba <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	7b1b      	ldrb	r3, [r3, #12]
 800f6fa:	f003 030f 	and.w	r3, r3, #15
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d121      	bne.n	800f746 <pbuf_realloc+0xca>
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	895b      	ldrh	r3, [r3, #10]
 800f706:	897a      	ldrh	r2, [r7, #10]
 800f708:	429a      	cmp	r2, r3
 800f70a:	d01c      	beq.n	800f746 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	7b5b      	ldrb	r3, [r3, #13]
 800f710:	f003 0302 	and.w	r3, r3, #2
 800f714:	2b00      	cmp	r3, #0
 800f716:	d116      	bne.n	800f746 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	685a      	ldr	r2, [r3, #4]
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	1ad3      	subs	r3, r2, r3
 800f720:	b29a      	uxth	r2, r3
 800f722:	897b      	ldrh	r3, [r7, #10]
 800f724:	4413      	add	r3, r2
 800f726:	b29b      	uxth	r3, r3
 800f728:	4619      	mov	r1, r3
 800f72a:	68f8      	ldr	r0, [r7, #12]
 800f72c:	f7fe ff72 	bl	800e614 <mem_trim>
 800f730:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	2b00      	cmp	r3, #0
 800f736:	d106      	bne.n	800f746 <pbuf_realloc+0xca>
 800f738:	4b0f      	ldr	r3, [pc, #60]	; (800f778 <pbuf_realloc+0xfc>)
 800f73a:	f240 12bd 	movw	r2, #445	; 0x1bd
 800f73e:	4912      	ldr	r1, [pc, #72]	; (800f788 <pbuf_realloc+0x10c>)
 800f740:	480f      	ldr	r0, [pc, #60]	; (800f780 <pbuf_realloc+0x104>)
 800f742:	f00d f9d5 	bl	801caf0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	897a      	ldrh	r2, [r7, #10]
 800f74a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	895a      	ldrh	r2, [r3, #10]
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d004      	beq.n	800f766 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	4618      	mov	r0, r3
 800f762:	f000 f943 	bl	800f9ec <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	2200      	movs	r2, #0
 800f76a:	601a      	str	r2, [r3, #0]
 800f76c:	e000      	b.n	800f770 <pbuf_realloc+0xf4>
    return;
 800f76e:	bf00      	nop

}
 800f770:	3710      	adds	r7, #16
 800f772:	46bd      	mov	sp, r7
 800f774:	bd80      	pop	{r7, pc}
 800f776:	bf00      	nop
 800f778:	080200d0 	.word	0x080200d0
 800f77c:	080201e8 	.word	0x080201e8
 800f780:	08020130 	.word	0x08020130
 800f784:	08020200 	.word	0x08020200
 800f788:	08020218 	.word	0x08020218

0800f78c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800f78c:	b580      	push	{r7, lr}
 800f78e:	b086      	sub	sp, #24
 800f790:	af00      	add	r7, sp, #0
 800f792:	60f8      	str	r0, [r7, #12]
 800f794:	60b9      	str	r1, [r7, #8]
 800f796:	4613      	mov	r3, r2
 800f798:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d106      	bne.n	800f7ae <pbuf_add_header_impl+0x22>
 800f7a0:	4b2b      	ldr	r3, [pc, #172]	; (800f850 <pbuf_add_header_impl+0xc4>)
 800f7a2:	f240 12df 	movw	r2, #479	; 0x1df
 800f7a6:	492b      	ldr	r1, [pc, #172]	; (800f854 <pbuf_add_header_impl+0xc8>)
 800f7a8:	482b      	ldr	r0, [pc, #172]	; (800f858 <pbuf_add_header_impl+0xcc>)
 800f7aa:	f00d f9a1 	bl	801caf0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d003      	beq.n	800f7bc <pbuf_add_header_impl+0x30>
 800f7b4:	68bb      	ldr	r3, [r7, #8]
 800f7b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f7ba:	d301      	bcc.n	800f7c0 <pbuf_add_header_impl+0x34>
    return 1;
 800f7bc:	2301      	movs	r3, #1
 800f7be:	e043      	b.n	800f848 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800f7c0:	68bb      	ldr	r3, [r7, #8]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d101      	bne.n	800f7ca <pbuf_add_header_impl+0x3e>
    return 0;
 800f7c6:	2300      	movs	r3, #0
 800f7c8:	e03e      	b.n	800f848 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800f7ca:	68bb      	ldr	r3, [r7, #8]
 800f7cc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	891a      	ldrh	r2, [r3, #8]
 800f7d2:	8a7b      	ldrh	r3, [r7, #18]
 800f7d4:	4413      	add	r3, r2
 800f7d6:	b29b      	uxth	r3, r3
 800f7d8:	8a7a      	ldrh	r2, [r7, #18]
 800f7da:	429a      	cmp	r2, r3
 800f7dc:	d901      	bls.n	800f7e2 <pbuf_add_header_impl+0x56>
    return 1;
 800f7de:	2301      	movs	r3, #1
 800f7e0:	e032      	b.n	800f848 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	7b1b      	ldrb	r3, [r3, #12]
 800f7e6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800f7e8:	8a3b      	ldrh	r3, [r7, #16]
 800f7ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d00c      	beq.n	800f80c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	685a      	ldr	r2, [r3, #4]
 800f7f6:	68bb      	ldr	r3, [r7, #8]
 800f7f8:	425b      	negs	r3, r3
 800f7fa:	4413      	add	r3, r2
 800f7fc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	3310      	adds	r3, #16
 800f802:	697a      	ldr	r2, [r7, #20]
 800f804:	429a      	cmp	r2, r3
 800f806:	d20d      	bcs.n	800f824 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800f808:	2301      	movs	r3, #1
 800f80a:	e01d      	b.n	800f848 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800f80c:	79fb      	ldrb	r3, [r7, #7]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d006      	beq.n	800f820 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	685a      	ldr	r2, [r3, #4]
 800f816:	68bb      	ldr	r3, [r7, #8]
 800f818:	425b      	negs	r3, r3
 800f81a:	4413      	add	r3, r2
 800f81c:	617b      	str	r3, [r7, #20]
 800f81e:	e001      	b.n	800f824 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800f820:	2301      	movs	r3, #1
 800f822:	e011      	b.n	800f848 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	697a      	ldr	r2, [r7, #20]
 800f828:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	895a      	ldrh	r2, [r3, #10]
 800f82e:	8a7b      	ldrh	r3, [r7, #18]
 800f830:	4413      	add	r3, r2
 800f832:	b29a      	uxth	r2, r3
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	891a      	ldrh	r2, [r3, #8]
 800f83c:	8a7b      	ldrh	r3, [r7, #18]
 800f83e:	4413      	add	r3, r2
 800f840:	b29a      	uxth	r2, r3
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	811a      	strh	r2, [r3, #8]


  return 0;
 800f846:	2300      	movs	r3, #0
}
 800f848:	4618      	mov	r0, r3
 800f84a:	3718      	adds	r7, #24
 800f84c:	46bd      	mov	sp, r7
 800f84e:	bd80      	pop	{r7, pc}
 800f850:	080200d0 	.word	0x080200d0
 800f854:	08020234 	.word	0x08020234
 800f858:	08020130 	.word	0x08020130

0800f85c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b082      	sub	sp, #8
 800f860:	af00      	add	r7, sp, #0
 800f862:	6078      	str	r0, [r7, #4]
 800f864:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800f866:	2200      	movs	r2, #0
 800f868:	6839      	ldr	r1, [r7, #0]
 800f86a:	6878      	ldr	r0, [r7, #4]
 800f86c:	f7ff ff8e 	bl	800f78c <pbuf_add_header_impl>
 800f870:	4603      	mov	r3, r0
}
 800f872:	4618      	mov	r0, r3
 800f874:	3708      	adds	r7, #8
 800f876:	46bd      	mov	sp, r7
 800f878:	bd80      	pop	{r7, pc}
	...

0800f87c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800f87c:	b580      	push	{r7, lr}
 800f87e:	b084      	sub	sp, #16
 800f880:	af00      	add	r7, sp, #0
 800f882:	6078      	str	r0, [r7, #4]
 800f884:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d106      	bne.n	800f89a <pbuf_remove_header+0x1e>
 800f88c:	4b20      	ldr	r3, [pc, #128]	; (800f910 <pbuf_remove_header+0x94>)
 800f88e:	f240 224b 	movw	r2, #587	; 0x24b
 800f892:	4920      	ldr	r1, [pc, #128]	; (800f914 <pbuf_remove_header+0x98>)
 800f894:	4820      	ldr	r0, [pc, #128]	; (800f918 <pbuf_remove_header+0x9c>)
 800f896:	f00d f92b 	bl	801caf0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d003      	beq.n	800f8a8 <pbuf_remove_header+0x2c>
 800f8a0:	683b      	ldr	r3, [r7, #0]
 800f8a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f8a6:	d301      	bcc.n	800f8ac <pbuf_remove_header+0x30>
    return 1;
 800f8a8:	2301      	movs	r3, #1
 800f8aa:	e02c      	b.n	800f906 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800f8ac:	683b      	ldr	r3, [r7, #0]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d101      	bne.n	800f8b6 <pbuf_remove_header+0x3a>
    return 0;
 800f8b2:	2300      	movs	r3, #0
 800f8b4:	e027      	b.n	800f906 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800f8b6:	683b      	ldr	r3, [r7, #0]
 800f8b8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	895b      	ldrh	r3, [r3, #10]
 800f8be:	89fa      	ldrh	r2, [r7, #14]
 800f8c0:	429a      	cmp	r2, r3
 800f8c2:	d908      	bls.n	800f8d6 <pbuf_remove_header+0x5a>
 800f8c4:	4b12      	ldr	r3, [pc, #72]	; (800f910 <pbuf_remove_header+0x94>)
 800f8c6:	f240 2255 	movw	r2, #597	; 0x255
 800f8ca:	4914      	ldr	r1, [pc, #80]	; (800f91c <pbuf_remove_header+0xa0>)
 800f8cc:	4812      	ldr	r0, [pc, #72]	; (800f918 <pbuf_remove_header+0x9c>)
 800f8ce:	f00d f90f 	bl	801caf0 <iprintf>
 800f8d2:	2301      	movs	r3, #1
 800f8d4:	e017      	b.n	800f906 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	685b      	ldr	r3, [r3, #4]
 800f8da:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	685a      	ldr	r2, [r3, #4]
 800f8e0:	683b      	ldr	r3, [r7, #0]
 800f8e2:	441a      	add	r2, r3
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	895a      	ldrh	r2, [r3, #10]
 800f8ec:	89fb      	ldrh	r3, [r7, #14]
 800f8ee:	1ad3      	subs	r3, r2, r3
 800f8f0:	b29a      	uxth	r2, r3
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	891a      	ldrh	r2, [r3, #8]
 800f8fa:	89fb      	ldrh	r3, [r7, #14]
 800f8fc:	1ad3      	subs	r3, r2, r3
 800f8fe:	b29a      	uxth	r2, r3
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800f904:	2300      	movs	r3, #0
}
 800f906:	4618      	mov	r0, r3
 800f908:	3710      	adds	r7, #16
 800f90a:	46bd      	mov	sp, r7
 800f90c:	bd80      	pop	{r7, pc}
 800f90e:	bf00      	nop
 800f910:	080200d0 	.word	0x080200d0
 800f914:	08020234 	.word	0x08020234
 800f918:	08020130 	.word	0x08020130
 800f91c:	08020240 	.word	0x08020240

0800f920 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800f920:	b580      	push	{r7, lr}
 800f922:	b082      	sub	sp, #8
 800f924:	af00      	add	r7, sp, #0
 800f926:	6078      	str	r0, [r7, #4]
 800f928:	460b      	mov	r3, r1
 800f92a:	807b      	strh	r3, [r7, #2]
 800f92c:	4613      	mov	r3, r2
 800f92e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800f930:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f934:	2b00      	cmp	r3, #0
 800f936:	da08      	bge.n	800f94a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800f938:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f93c:	425b      	negs	r3, r3
 800f93e:	4619      	mov	r1, r3
 800f940:	6878      	ldr	r0, [r7, #4]
 800f942:	f7ff ff9b 	bl	800f87c <pbuf_remove_header>
 800f946:	4603      	mov	r3, r0
 800f948:	e007      	b.n	800f95a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800f94a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f94e:	787a      	ldrb	r2, [r7, #1]
 800f950:	4619      	mov	r1, r3
 800f952:	6878      	ldr	r0, [r7, #4]
 800f954:	f7ff ff1a 	bl	800f78c <pbuf_add_header_impl>
 800f958:	4603      	mov	r3, r0
  }
}
 800f95a:	4618      	mov	r0, r3
 800f95c:	3708      	adds	r7, #8
 800f95e:	46bd      	mov	sp, r7
 800f960:	bd80      	pop	{r7, pc}

0800f962 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800f962:	b580      	push	{r7, lr}
 800f964:	b082      	sub	sp, #8
 800f966:	af00      	add	r7, sp, #0
 800f968:	6078      	str	r0, [r7, #4]
 800f96a:	460b      	mov	r3, r1
 800f96c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800f96e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f972:	2201      	movs	r2, #1
 800f974:	4619      	mov	r1, r3
 800f976:	6878      	ldr	r0, [r7, #4]
 800f978:	f7ff ffd2 	bl	800f920 <pbuf_header_impl>
 800f97c:	4603      	mov	r3, r0
}
 800f97e:	4618      	mov	r0, r3
 800f980:	3708      	adds	r7, #8
 800f982:	46bd      	mov	sp, r7
 800f984:	bd80      	pop	{r7, pc}

0800f986 <pbuf_free_header>:
 *                   takes an u16_t not s16_t!
 * @return the new head pbuf
 */
struct pbuf *
pbuf_free_header(struct pbuf *q, u16_t size)
{
 800f986:	b580      	push	{r7, lr}
 800f988:	b086      	sub	sp, #24
 800f98a:	af00      	add	r7, sp, #0
 800f98c:	6078      	str	r0, [r7, #4]
 800f98e:	460b      	mov	r3, r1
 800f990:	807b      	strh	r3, [r7, #2]
  struct pbuf *p = q;
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	617b      	str	r3, [r7, #20]
  u16_t free_left = size;
 800f996:	887b      	ldrh	r3, [r7, #2]
 800f998:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 800f99a:	e01c      	b.n	800f9d6 <pbuf_free_header+0x50>
    if (free_left >= p->len) {
 800f99c:	697b      	ldr	r3, [r7, #20]
 800f99e:	895b      	ldrh	r3, [r3, #10]
 800f9a0:	8a7a      	ldrh	r2, [r7, #18]
 800f9a2:	429a      	cmp	r2, r3
 800f9a4:	d310      	bcc.n	800f9c8 <pbuf_free_header+0x42>
      struct pbuf *f = p;
 800f9a6:	697b      	ldr	r3, [r7, #20]
 800f9a8:	60fb      	str	r3, [r7, #12]
      free_left = (u16_t)(free_left - p->len);
 800f9aa:	697b      	ldr	r3, [r7, #20]
 800f9ac:	895b      	ldrh	r3, [r3, #10]
 800f9ae:	8a7a      	ldrh	r2, [r7, #18]
 800f9b0:	1ad3      	subs	r3, r2, r3
 800f9b2:	827b      	strh	r3, [r7, #18]
      p = p->next;
 800f9b4:	697b      	ldr	r3, [r7, #20]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	617b      	str	r3, [r7, #20]
      f->next = 0;
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	2200      	movs	r2, #0
 800f9be:	601a      	str	r2, [r3, #0]
      pbuf_free(f);
 800f9c0:	68f8      	ldr	r0, [r7, #12]
 800f9c2:	f000 f813 	bl	800f9ec <pbuf_free>
 800f9c6:	e006      	b.n	800f9d6 <pbuf_free_header+0x50>
    } else {
      pbuf_remove_header(p, free_left);
 800f9c8:	8a7b      	ldrh	r3, [r7, #18]
 800f9ca:	4619      	mov	r1, r3
 800f9cc:	6978      	ldr	r0, [r7, #20]
 800f9ce:	f7ff ff55 	bl	800f87c <pbuf_remove_header>
      free_left = 0;
 800f9d2:	2300      	movs	r3, #0
 800f9d4:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 800f9d6:	8a7b      	ldrh	r3, [r7, #18]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d002      	beq.n	800f9e2 <pbuf_free_header+0x5c>
 800f9dc:	697b      	ldr	r3, [r7, #20]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d1dc      	bne.n	800f99c <pbuf_free_header+0x16>
    }
  }
  return p;
 800f9e2:	697b      	ldr	r3, [r7, #20]
}
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	3718      	adds	r7, #24
 800f9e8:	46bd      	mov	sp, r7
 800f9ea:	bd80      	pop	{r7, pc}

0800f9ec <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800f9ec:	b580      	push	{r7, lr}
 800f9ee:	b088      	sub	sp, #32
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d10b      	bne.n	800fa12 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d106      	bne.n	800fa0e <pbuf_free+0x22>
 800fa00:	4b3b      	ldr	r3, [pc, #236]	; (800faf0 <pbuf_free+0x104>)
 800fa02:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800fa06:	493b      	ldr	r1, [pc, #236]	; (800faf4 <pbuf_free+0x108>)
 800fa08:	483b      	ldr	r0, [pc, #236]	; (800faf8 <pbuf_free+0x10c>)
 800fa0a:	f00d f871 	bl	801caf0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800fa0e:	2300      	movs	r3, #0
 800fa10:	e069      	b.n	800fae6 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800fa12:	2300      	movs	r3, #0
 800fa14:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800fa16:	e062      	b.n	800fade <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800fa18:	f009 fe86 	bl	8019728 <sys_arch_protect>
 800fa1c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	7b9b      	ldrb	r3, [r3, #14]
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d106      	bne.n	800fa34 <pbuf_free+0x48>
 800fa26:	4b32      	ldr	r3, [pc, #200]	; (800faf0 <pbuf_free+0x104>)
 800fa28:	f240 22f1 	movw	r2, #753	; 0x2f1
 800fa2c:	4933      	ldr	r1, [pc, #204]	; (800fafc <pbuf_free+0x110>)
 800fa2e:	4832      	ldr	r0, [pc, #200]	; (800faf8 <pbuf_free+0x10c>)
 800fa30:	f00d f85e 	bl	801caf0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	7b9b      	ldrb	r3, [r3, #14]
 800fa38:	3b01      	subs	r3, #1
 800fa3a:	b2da      	uxtb	r2, r3
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	739a      	strb	r2, [r3, #14]
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	7b9b      	ldrb	r3, [r3, #14]
 800fa44:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800fa46:	69b8      	ldr	r0, [r7, #24]
 800fa48:	f009 fe7c 	bl	8019744 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800fa4c:	7dfb      	ldrb	r3, [r7, #23]
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d143      	bne.n	800fada <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	7b1b      	ldrb	r3, [r3, #12]
 800fa5c:	f003 030f 	and.w	r3, r3, #15
 800fa60:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	7b5b      	ldrb	r3, [r3, #13]
 800fa66:	f003 0302 	and.w	r3, r3, #2
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d011      	beq.n	800fa92 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800fa72:	68bb      	ldr	r3, [r7, #8]
 800fa74:	691b      	ldr	r3, [r3, #16]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d106      	bne.n	800fa88 <pbuf_free+0x9c>
 800fa7a:	4b1d      	ldr	r3, [pc, #116]	; (800faf0 <pbuf_free+0x104>)
 800fa7c:	f240 22ff 	movw	r2, #767	; 0x2ff
 800fa80:	491f      	ldr	r1, [pc, #124]	; (800fb00 <pbuf_free+0x114>)
 800fa82:	481d      	ldr	r0, [pc, #116]	; (800faf8 <pbuf_free+0x10c>)
 800fa84:	f00d f834 	bl	801caf0 <iprintf>
        pc->custom_free_function(p);
 800fa88:	68bb      	ldr	r3, [r7, #8]
 800fa8a:	691b      	ldr	r3, [r3, #16]
 800fa8c:	6878      	ldr	r0, [r7, #4]
 800fa8e:	4798      	blx	r3
 800fa90:	e01d      	b.n	800face <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800fa92:	7bfb      	ldrb	r3, [r7, #15]
 800fa94:	2b02      	cmp	r3, #2
 800fa96:	d104      	bne.n	800faa2 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800fa98:	6879      	ldr	r1, [r7, #4]
 800fa9a:	200c      	movs	r0, #12
 800fa9c:	f7ff f898 	bl	800ebd0 <memp_free>
 800faa0:	e015      	b.n	800face <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800faa2:	7bfb      	ldrb	r3, [r7, #15]
 800faa4:	2b01      	cmp	r3, #1
 800faa6:	d104      	bne.n	800fab2 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800faa8:	6879      	ldr	r1, [r7, #4]
 800faaa:	200b      	movs	r0, #11
 800faac:	f7ff f890 	bl	800ebd0 <memp_free>
 800fab0:	e00d      	b.n	800face <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800fab2:	7bfb      	ldrb	r3, [r7, #15]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d103      	bne.n	800fac0 <pbuf_free+0xd4>
          mem_free(p);
 800fab8:	6878      	ldr	r0, [r7, #4]
 800faba:	f7fe fd1b 	bl	800e4f4 <mem_free>
 800fabe:	e006      	b.n	800face <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800fac0:	4b0b      	ldr	r3, [pc, #44]	; (800faf0 <pbuf_free+0x104>)
 800fac2:	f240 320f 	movw	r2, #783	; 0x30f
 800fac6:	490f      	ldr	r1, [pc, #60]	; (800fb04 <pbuf_free+0x118>)
 800fac8:	480b      	ldr	r0, [pc, #44]	; (800faf8 <pbuf_free+0x10c>)
 800faca:	f00d f811 	bl	801caf0 <iprintf>
        }
      }
      count++;
 800face:	7ffb      	ldrb	r3, [r7, #31]
 800fad0:	3301      	adds	r3, #1
 800fad2:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800fad4:	693b      	ldr	r3, [r7, #16]
 800fad6:	607b      	str	r3, [r7, #4]
 800fad8:	e001      	b.n	800fade <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800fada:	2300      	movs	r3, #0
 800fadc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d199      	bne.n	800fa18 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800fae4:	7ffb      	ldrb	r3, [r7, #31]
}
 800fae6:	4618      	mov	r0, r3
 800fae8:	3720      	adds	r7, #32
 800faea:	46bd      	mov	sp, r7
 800faec:	bd80      	pop	{r7, pc}
 800faee:	bf00      	nop
 800faf0:	080200d0 	.word	0x080200d0
 800faf4:	08020234 	.word	0x08020234
 800faf8:	08020130 	.word	0x08020130
 800fafc:	08020260 	.word	0x08020260
 800fb00:	08020278 	.word	0x08020278
 800fb04:	0802029c 	.word	0x0802029c

0800fb08 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800fb08:	b480      	push	{r7}
 800fb0a:	b085      	sub	sp, #20
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800fb10:	2300      	movs	r3, #0
 800fb12:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800fb14:	e005      	b.n	800fb22 <pbuf_clen+0x1a>
    ++len;
 800fb16:	89fb      	ldrh	r3, [r7, #14]
 800fb18:	3301      	adds	r3, #1
 800fb1a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d1f6      	bne.n	800fb16 <pbuf_clen+0xe>
  }
  return len;
 800fb28:	89fb      	ldrh	r3, [r7, #14]
}
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	3714      	adds	r7, #20
 800fb2e:	46bd      	mov	sp, r7
 800fb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb34:	4770      	bx	lr
	...

0800fb38 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800fb38:	b580      	push	{r7, lr}
 800fb3a:	b084      	sub	sp, #16
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d016      	beq.n	800fb74 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800fb46:	f009 fdef 	bl	8019728 <sys_arch_protect>
 800fb4a:	60f8      	str	r0, [r7, #12]
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	7b9b      	ldrb	r3, [r3, #14]
 800fb50:	3301      	adds	r3, #1
 800fb52:	b2da      	uxtb	r2, r3
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	739a      	strb	r2, [r3, #14]
 800fb58:	68f8      	ldr	r0, [r7, #12]
 800fb5a:	f009 fdf3 	bl	8019744 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	7b9b      	ldrb	r3, [r3, #14]
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d106      	bne.n	800fb74 <pbuf_ref+0x3c>
 800fb66:	4b05      	ldr	r3, [pc, #20]	; (800fb7c <pbuf_ref+0x44>)
 800fb68:	f240 3242 	movw	r2, #834	; 0x342
 800fb6c:	4904      	ldr	r1, [pc, #16]	; (800fb80 <pbuf_ref+0x48>)
 800fb6e:	4805      	ldr	r0, [pc, #20]	; (800fb84 <pbuf_ref+0x4c>)
 800fb70:	f00c ffbe 	bl	801caf0 <iprintf>
  }
}
 800fb74:	bf00      	nop
 800fb76:	3710      	adds	r7, #16
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	bd80      	pop	{r7, pc}
 800fb7c:	080200d0 	.word	0x080200d0
 800fb80:	080202b0 	.word	0x080202b0
 800fb84:	08020130 	.word	0x08020130

0800fb88 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800fb88:	b580      	push	{r7, lr}
 800fb8a:	b084      	sub	sp, #16
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	6078      	str	r0, [r7, #4]
 800fb90:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d002      	beq.n	800fb9e <pbuf_cat+0x16>
 800fb98:	683b      	ldr	r3, [r7, #0]
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d107      	bne.n	800fbae <pbuf_cat+0x26>
 800fb9e:	4b20      	ldr	r3, [pc, #128]	; (800fc20 <pbuf_cat+0x98>)
 800fba0:	f240 3259 	movw	r2, #857	; 0x359
 800fba4:	491f      	ldr	r1, [pc, #124]	; (800fc24 <pbuf_cat+0x9c>)
 800fba6:	4820      	ldr	r0, [pc, #128]	; (800fc28 <pbuf_cat+0xa0>)
 800fba8:	f00c ffa2 	bl	801caf0 <iprintf>
 800fbac:	e034      	b.n	800fc18 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	60fb      	str	r3, [r7, #12]
 800fbb2:	e00a      	b.n	800fbca <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	891a      	ldrh	r2, [r3, #8]
 800fbb8:	683b      	ldr	r3, [r7, #0]
 800fbba:	891b      	ldrh	r3, [r3, #8]
 800fbbc:	4413      	add	r3, r2
 800fbbe:	b29a      	uxth	r2, r3
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	60fb      	str	r3, [r7, #12]
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d1f0      	bne.n	800fbb4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	891a      	ldrh	r2, [r3, #8]
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	895b      	ldrh	r3, [r3, #10]
 800fbda:	429a      	cmp	r2, r3
 800fbdc:	d006      	beq.n	800fbec <pbuf_cat+0x64>
 800fbde:	4b10      	ldr	r3, [pc, #64]	; (800fc20 <pbuf_cat+0x98>)
 800fbe0:	f240 3262 	movw	r2, #866	; 0x362
 800fbe4:	4911      	ldr	r1, [pc, #68]	; (800fc2c <pbuf_cat+0xa4>)
 800fbe6:	4810      	ldr	r0, [pc, #64]	; (800fc28 <pbuf_cat+0xa0>)
 800fbe8:	f00c ff82 	bl	801caf0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d006      	beq.n	800fc02 <pbuf_cat+0x7a>
 800fbf4:	4b0a      	ldr	r3, [pc, #40]	; (800fc20 <pbuf_cat+0x98>)
 800fbf6:	f240 3263 	movw	r2, #867	; 0x363
 800fbfa:	490d      	ldr	r1, [pc, #52]	; (800fc30 <pbuf_cat+0xa8>)
 800fbfc:	480a      	ldr	r0, [pc, #40]	; (800fc28 <pbuf_cat+0xa0>)
 800fbfe:	f00c ff77 	bl	801caf0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	891a      	ldrh	r2, [r3, #8]
 800fc06:	683b      	ldr	r3, [r7, #0]
 800fc08:	891b      	ldrh	r3, [r3, #8]
 800fc0a:	4413      	add	r3, r2
 800fc0c:	b29a      	uxth	r2, r3
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	683a      	ldr	r2, [r7, #0]
 800fc16:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800fc18:	3710      	adds	r7, #16
 800fc1a:	46bd      	mov	sp, r7
 800fc1c:	bd80      	pop	{r7, pc}
 800fc1e:	bf00      	nop
 800fc20:	080200d0 	.word	0x080200d0
 800fc24:	080202c4 	.word	0x080202c4
 800fc28:	08020130 	.word	0x08020130
 800fc2c:	080202fc 	.word	0x080202fc
 800fc30:	0802032c 	.word	0x0802032c

0800fc34 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800fc34:	b580      	push	{r7, lr}
 800fc36:	b082      	sub	sp, #8
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	6078      	str	r0, [r7, #4]
 800fc3c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800fc3e:	6839      	ldr	r1, [r7, #0]
 800fc40:	6878      	ldr	r0, [r7, #4]
 800fc42:	f7ff ffa1 	bl	800fb88 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800fc46:	6838      	ldr	r0, [r7, #0]
 800fc48:	f7ff ff76 	bl	800fb38 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800fc4c:	bf00      	nop
 800fc4e:	3708      	adds	r7, #8
 800fc50:	46bd      	mov	sp, r7
 800fc52:	bd80      	pop	{r7, pc}

0800fc54 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800fc54:	b580      	push	{r7, lr}
 800fc56:	b086      	sub	sp, #24
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	6078      	str	r0, [r7, #4]
 800fc5c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800fc5e:	2300      	movs	r3, #0
 800fc60:	617b      	str	r3, [r7, #20]
 800fc62:	2300      	movs	r3, #0
 800fc64:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d008      	beq.n	800fc7e <pbuf_copy+0x2a>
 800fc6c:	683b      	ldr	r3, [r7, #0]
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d005      	beq.n	800fc7e <pbuf_copy+0x2a>
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	891a      	ldrh	r2, [r3, #8]
 800fc76:	683b      	ldr	r3, [r7, #0]
 800fc78:	891b      	ldrh	r3, [r3, #8]
 800fc7a:	429a      	cmp	r2, r3
 800fc7c:	d209      	bcs.n	800fc92 <pbuf_copy+0x3e>
 800fc7e:	4b57      	ldr	r3, [pc, #348]	; (800fddc <pbuf_copy+0x188>)
 800fc80:	f240 32c9 	movw	r2, #969	; 0x3c9
 800fc84:	4956      	ldr	r1, [pc, #344]	; (800fde0 <pbuf_copy+0x18c>)
 800fc86:	4857      	ldr	r0, [pc, #348]	; (800fde4 <pbuf_copy+0x190>)
 800fc88:	f00c ff32 	bl	801caf0 <iprintf>
 800fc8c:	f06f 030f 	mvn.w	r3, #15
 800fc90:	e09f      	b.n	800fdd2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	895b      	ldrh	r3, [r3, #10]
 800fc96:	461a      	mov	r2, r3
 800fc98:	697b      	ldr	r3, [r7, #20]
 800fc9a:	1ad2      	subs	r2, r2, r3
 800fc9c:	683b      	ldr	r3, [r7, #0]
 800fc9e:	895b      	ldrh	r3, [r3, #10]
 800fca0:	4619      	mov	r1, r3
 800fca2:	693b      	ldr	r3, [r7, #16]
 800fca4:	1acb      	subs	r3, r1, r3
 800fca6:	429a      	cmp	r2, r3
 800fca8:	d306      	bcc.n	800fcb8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800fcaa:	683b      	ldr	r3, [r7, #0]
 800fcac:	895b      	ldrh	r3, [r3, #10]
 800fcae:	461a      	mov	r2, r3
 800fcb0:	693b      	ldr	r3, [r7, #16]
 800fcb2:	1ad3      	subs	r3, r2, r3
 800fcb4:	60fb      	str	r3, [r7, #12]
 800fcb6:	e005      	b.n	800fcc4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	895b      	ldrh	r3, [r3, #10]
 800fcbc:	461a      	mov	r2, r3
 800fcbe:	697b      	ldr	r3, [r7, #20]
 800fcc0:	1ad3      	subs	r3, r2, r3
 800fcc2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	685a      	ldr	r2, [r3, #4]
 800fcc8:	697b      	ldr	r3, [r7, #20]
 800fcca:	18d0      	adds	r0, r2, r3
 800fccc:	683b      	ldr	r3, [r7, #0]
 800fcce:	685a      	ldr	r2, [r3, #4]
 800fcd0:	693b      	ldr	r3, [r7, #16]
 800fcd2:	4413      	add	r3, r2
 800fcd4:	68fa      	ldr	r2, [r7, #12]
 800fcd6:	4619      	mov	r1, r3
 800fcd8:	f00c f86c 	bl	801bdb4 <memcpy>
    offset_to += len;
 800fcdc:	697a      	ldr	r2, [r7, #20]
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	4413      	add	r3, r2
 800fce2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800fce4:	693a      	ldr	r2, [r7, #16]
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	4413      	add	r3, r2
 800fcea:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	895b      	ldrh	r3, [r3, #10]
 800fcf0:	461a      	mov	r2, r3
 800fcf2:	697b      	ldr	r3, [r7, #20]
 800fcf4:	4293      	cmp	r3, r2
 800fcf6:	d906      	bls.n	800fd06 <pbuf_copy+0xb2>
 800fcf8:	4b38      	ldr	r3, [pc, #224]	; (800fddc <pbuf_copy+0x188>)
 800fcfa:	f240 32d9 	movw	r2, #985	; 0x3d9
 800fcfe:	493a      	ldr	r1, [pc, #232]	; (800fde8 <pbuf_copy+0x194>)
 800fd00:	4838      	ldr	r0, [pc, #224]	; (800fde4 <pbuf_copy+0x190>)
 800fd02:	f00c fef5 	bl	801caf0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800fd06:	683b      	ldr	r3, [r7, #0]
 800fd08:	895b      	ldrh	r3, [r3, #10]
 800fd0a:	461a      	mov	r2, r3
 800fd0c:	693b      	ldr	r3, [r7, #16]
 800fd0e:	4293      	cmp	r3, r2
 800fd10:	d906      	bls.n	800fd20 <pbuf_copy+0xcc>
 800fd12:	4b32      	ldr	r3, [pc, #200]	; (800fddc <pbuf_copy+0x188>)
 800fd14:	f240 32da 	movw	r2, #986	; 0x3da
 800fd18:	4934      	ldr	r1, [pc, #208]	; (800fdec <pbuf_copy+0x198>)
 800fd1a:	4832      	ldr	r0, [pc, #200]	; (800fde4 <pbuf_copy+0x190>)
 800fd1c:	f00c fee8 	bl	801caf0 <iprintf>
    if (offset_from >= p_from->len) {
 800fd20:	683b      	ldr	r3, [r7, #0]
 800fd22:	895b      	ldrh	r3, [r3, #10]
 800fd24:	461a      	mov	r2, r3
 800fd26:	693b      	ldr	r3, [r7, #16]
 800fd28:	4293      	cmp	r3, r2
 800fd2a:	d304      	bcc.n	800fd36 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800fd2c:	2300      	movs	r3, #0
 800fd2e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800fd30:	683b      	ldr	r3, [r7, #0]
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	895b      	ldrh	r3, [r3, #10]
 800fd3a:	461a      	mov	r2, r3
 800fd3c:	697b      	ldr	r3, [r7, #20]
 800fd3e:	4293      	cmp	r3, r2
 800fd40:	d114      	bne.n	800fd6c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800fd42:	2300      	movs	r3, #0
 800fd44:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d10c      	bne.n	800fd6c <pbuf_copy+0x118>
 800fd52:	683b      	ldr	r3, [r7, #0]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d009      	beq.n	800fd6c <pbuf_copy+0x118>
 800fd58:	4b20      	ldr	r3, [pc, #128]	; (800fddc <pbuf_copy+0x188>)
 800fd5a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800fd5e:	4924      	ldr	r1, [pc, #144]	; (800fdf0 <pbuf_copy+0x19c>)
 800fd60:	4820      	ldr	r0, [pc, #128]	; (800fde4 <pbuf_copy+0x190>)
 800fd62:	f00c fec5 	bl	801caf0 <iprintf>
 800fd66:	f06f 030f 	mvn.w	r3, #15
 800fd6a:	e032      	b.n	800fdd2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800fd6c:	683b      	ldr	r3, [r7, #0]
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d013      	beq.n	800fd9a <pbuf_copy+0x146>
 800fd72:	683b      	ldr	r3, [r7, #0]
 800fd74:	895a      	ldrh	r2, [r3, #10]
 800fd76:	683b      	ldr	r3, [r7, #0]
 800fd78:	891b      	ldrh	r3, [r3, #8]
 800fd7a:	429a      	cmp	r2, r3
 800fd7c:	d10d      	bne.n	800fd9a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800fd7e:	683b      	ldr	r3, [r7, #0]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d009      	beq.n	800fd9a <pbuf_copy+0x146>
 800fd86:	4b15      	ldr	r3, [pc, #84]	; (800fddc <pbuf_copy+0x188>)
 800fd88:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800fd8c:	4919      	ldr	r1, [pc, #100]	; (800fdf4 <pbuf_copy+0x1a0>)
 800fd8e:	4815      	ldr	r0, [pc, #84]	; (800fde4 <pbuf_copy+0x190>)
 800fd90:	f00c feae 	bl	801caf0 <iprintf>
 800fd94:	f06f 0305 	mvn.w	r3, #5
 800fd98:	e01b      	b.n	800fdd2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d013      	beq.n	800fdc8 <pbuf_copy+0x174>
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	895a      	ldrh	r2, [r3, #10]
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	891b      	ldrh	r3, [r3, #8]
 800fda8:	429a      	cmp	r2, r3
 800fdaa:	d10d      	bne.n	800fdc8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d009      	beq.n	800fdc8 <pbuf_copy+0x174>
 800fdb4:	4b09      	ldr	r3, [pc, #36]	; (800fddc <pbuf_copy+0x188>)
 800fdb6:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800fdba:	490e      	ldr	r1, [pc, #56]	; (800fdf4 <pbuf_copy+0x1a0>)
 800fdbc:	4809      	ldr	r0, [pc, #36]	; (800fde4 <pbuf_copy+0x190>)
 800fdbe:	f00c fe97 	bl	801caf0 <iprintf>
 800fdc2:	f06f 0305 	mvn.w	r3, #5
 800fdc6:	e004      	b.n	800fdd2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800fdc8:	683b      	ldr	r3, [r7, #0]
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	f47f af61 	bne.w	800fc92 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800fdd0:	2300      	movs	r3, #0
}
 800fdd2:	4618      	mov	r0, r3
 800fdd4:	3718      	adds	r7, #24
 800fdd6:	46bd      	mov	sp, r7
 800fdd8:	bd80      	pop	{r7, pc}
 800fdda:	bf00      	nop
 800fddc:	080200d0 	.word	0x080200d0
 800fde0:	08020378 	.word	0x08020378
 800fde4:	08020130 	.word	0x08020130
 800fde8:	080203a8 	.word	0x080203a8
 800fdec:	080203c0 	.word	0x080203c0
 800fdf0:	080203dc 	.word	0x080203dc
 800fdf4:	080203ec 	.word	0x080203ec

0800fdf8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800fdf8:	b580      	push	{r7, lr}
 800fdfa:	b088      	sub	sp, #32
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	60f8      	str	r0, [r7, #12]
 800fe00:	60b9      	str	r1, [r7, #8]
 800fe02:	4611      	mov	r1, r2
 800fe04:	461a      	mov	r2, r3
 800fe06:	460b      	mov	r3, r1
 800fe08:	80fb      	strh	r3, [r7, #6]
 800fe0a:	4613      	mov	r3, r2
 800fe0c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800fe0e:	2300      	movs	r3, #0
 800fe10:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800fe12:	2300      	movs	r3, #0
 800fe14:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d108      	bne.n	800fe2e <pbuf_copy_partial+0x36>
 800fe1c:	4b2b      	ldr	r3, [pc, #172]	; (800fecc <pbuf_copy_partial+0xd4>)
 800fe1e:	f240 420a 	movw	r2, #1034	; 0x40a
 800fe22:	492b      	ldr	r1, [pc, #172]	; (800fed0 <pbuf_copy_partial+0xd8>)
 800fe24:	482b      	ldr	r0, [pc, #172]	; (800fed4 <pbuf_copy_partial+0xdc>)
 800fe26:	f00c fe63 	bl	801caf0 <iprintf>
 800fe2a:	2300      	movs	r3, #0
 800fe2c:	e04a      	b.n	800fec4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800fe2e:	68bb      	ldr	r3, [r7, #8]
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d108      	bne.n	800fe46 <pbuf_copy_partial+0x4e>
 800fe34:	4b25      	ldr	r3, [pc, #148]	; (800fecc <pbuf_copy_partial+0xd4>)
 800fe36:	f240 420b 	movw	r2, #1035	; 0x40b
 800fe3a:	4927      	ldr	r1, [pc, #156]	; (800fed8 <pbuf_copy_partial+0xe0>)
 800fe3c:	4825      	ldr	r0, [pc, #148]	; (800fed4 <pbuf_copy_partial+0xdc>)
 800fe3e:	f00c fe57 	bl	801caf0 <iprintf>
 800fe42:	2300      	movs	r3, #0
 800fe44:	e03e      	b.n	800fec4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	61fb      	str	r3, [r7, #28]
 800fe4a:	e034      	b.n	800feb6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800fe4c:	88bb      	ldrh	r3, [r7, #4]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d00a      	beq.n	800fe68 <pbuf_copy_partial+0x70>
 800fe52:	69fb      	ldr	r3, [r7, #28]
 800fe54:	895b      	ldrh	r3, [r3, #10]
 800fe56:	88ba      	ldrh	r2, [r7, #4]
 800fe58:	429a      	cmp	r2, r3
 800fe5a:	d305      	bcc.n	800fe68 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800fe5c:	69fb      	ldr	r3, [r7, #28]
 800fe5e:	895b      	ldrh	r3, [r3, #10]
 800fe60:	88ba      	ldrh	r2, [r7, #4]
 800fe62:	1ad3      	subs	r3, r2, r3
 800fe64:	80bb      	strh	r3, [r7, #4]
 800fe66:	e023      	b.n	800feb0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800fe68:	69fb      	ldr	r3, [r7, #28]
 800fe6a:	895a      	ldrh	r2, [r3, #10]
 800fe6c:	88bb      	ldrh	r3, [r7, #4]
 800fe6e:	1ad3      	subs	r3, r2, r3
 800fe70:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800fe72:	8b3a      	ldrh	r2, [r7, #24]
 800fe74:	88fb      	ldrh	r3, [r7, #6]
 800fe76:	429a      	cmp	r2, r3
 800fe78:	d901      	bls.n	800fe7e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800fe7a:	88fb      	ldrh	r3, [r7, #6]
 800fe7c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800fe7e:	8b7b      	ldrh	r3, [r7, #26]
 800fe80:	68ba      	ldr	r2, [r7, #8]
 800fe82:	18d0      	adds	r0, r2, r3
 800fe84:	69fb      	ldr	r3, [r7, #28]
 800fe86:	685a      	ldr	r2, [r3, #4]
 800fe88:	88bb      	ldrh	r3, [r7, #4]
 800fe8a:	4413      	add	r3, r2
 800fe8c:	8b3a      	ldrh	r2, [r7, #24]
 800fe8e:	4619      	mov	r1, r3
 800fe90:	f00b ff90 	bl	801bdb4 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800fe94:	8afa      	ldrh	r2, [r7, #22]
 800fe96:	8b3b      	ldrh	r3, [r7, #24]
 800fe98:	4413      	add	r3, r2
 800fe9a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800fe9c:	8b7a      	ldrh	r2, [r7, #26]
 800fe9e:	8b3b      	ldrh	r3, [r7, #24]
 800fea0:	4413      	add	r3, r2
 800fea2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800fea4:	88fa      	ldrh	r2, [r7, #6]
 800fea6:	8b3b      	ldrh	r3, [r7, #24]
 800fea8:	1ad3      	subs	r3, r2, r3
 800feaa:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800feac:	2300      	movs	r3, #0
 800feae:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800feb0:	69fb      	ldr	r3, [r7, #28]
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	61fb      	str	r3, [r7, #28]
 800feb6:	88fb      	ldrh	r3, [r7, #6]
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d002      	beq.n	800fec2 <pbuf_copy_partial+0xca>
 800febc:	69fb      	ldr	r3, [r7, #28]
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d1c4      	bne.n	800fe4c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800fec2:	8afb      	ldrh	r3, [r7, #22]
}
 800fec4:	4618      	mov	r0, r3
 800fec6:	3720      	adds	r7, #32
 800fec8:	46bd      	mov	sp, r7
 800feca:	bd80      	pop	{r7, pc}
 800fecc:	080200d0 	.word	0x080200d0
 800fed0:	08020418 	.word	0x08020418
 800fed4:	08020130 	.word	0x08020130
 800fed8:	08020438 	.word	0x08020438

0800fedc <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800fedc:	b580      	push	{r7, lr}
 800fede:	b084      	sub	sp, #16
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	4603      	mov	r3, r0
 800fee4:	603a      	str	r2, [r7, #0]
 800fee6:	71fb      	strb	r3, [r7, #7]
 800fee8:	460b      	mov	r3, r1
 800feea:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800feec:	683b      	ldr	r3, [r7, #0]
 800feee:	8919      	ldrh	r1, [r3, #8]
 800fef0:	88ba      	ldrh	r2, [r7, #4]
 800fef2:	79fb      	ldrb	r3, [r7, #7]
 800fef4:	4618      	mov	r0, r3
 800fef6:	f7ff fa63 	bl	800f3c0 <pbuf_alloc>
 800fefa:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d101      	bne.n	800ff06 <pbuf_clone+0x2a>
    return NULL;
 800ff02:	2300      	movs	r3, #0
 800ff04:	e011      	b.n	800ff2a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800ff06:	6839      	ldr	r1, [r7, #0]
 800ff08:	68f8      	ldr	r0, [r7, #12]
 800ff0a:	f7ff fea3 	bl	800fc54 <pbuf_copy>
 800ff0e:	4603      	mov	r3, r0
 800ff10:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800ff12:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d006      	beq.n	800ff28 <pbuf_clone+0x4c>
 800ff1a:	4b06      	ldr	r3, [pc, #24]	; (800ff34 <pbuf_clone+0x58>)
 800ff1c:	f240 5224 	movw	r2, #1316	; 0x524
 800ff20:	4905      	ldr	r1, [pc, #20]	; (800ff38 <pbuf_clone+0x5c>)
 800ff22:	4806      	ldr	r0, [pc, #24]	; (800ff3c <pbuf_clone+0x60>)
 800ff24:	f00c fde4 	bl	801caf0 <iprintf>
  return q;
 800ff28:	68fb      	ldr	r3, [r7, #12]
}
 800ff2a:	4618      	mov	r0, r3
 800ff2c:	3710      	adds	r7, #16
 800ff2e:	46bd      	mov	sp, r7
 800ff30:	bd80      	pop	{r7, pc}
 800ff32:	bf00      	nop
 800ff34:	080200d0 	.word	0x080200d0
 800ff38:	08020544 	.word	0x08020544
 800ff3c:	08020130 	.word	0x08020130

0800ff40 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800ff40:	b580      	push	{r7, lr}
 800ff42:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ff44:	f00c fdec 	bl	801cb20 <rand>
 800ff48:	4603      	mov	r3, r0
 800ff4a:	b29b      	uxth	r3, r3
 800ff4c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ff50:	b29b      	uxth	r3, r3
 800ff52:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800ff56:	b29a      	uxth	r2, r3
 800ff58:	4b01      	ldr	r3, [pc, #4]	; (800ff60 <tcp_init+0x20>)
 800ff5a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ff5c:	bf00      	nop
 800ff5e:	bd80      	pop	{r7, pc}
 800ff60:	10000010 	.word	0x10000010

0800ff64 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800ff64:	b580      	push	{r7, lr}
 800ff66:	b082      	sub	sp, #8
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	7d1b      	ldrb	r3, [r3, #20]
 800ff70:	2b01      	cmp	r3, #1
 800ff72:	d105      	bne.n	800ff80 <tcp_free+0x1c>
 800ff74:	4b06      	ldr	r3, [pc, #24]	; (800ff90 <tcp_free+0x2c>)
 800ff76:	22d4      	movs	r2, #212	; 0xd4
 800ff78:	4906      	ldr	r1, [pc, #24]	; (800ff94 <tcp_free+0x30>)
 800ff7a:	4807      	ldr	r0, [pc, #28]	; (800ff98 <tcp_free+0x34>)
 800ff7c:	f00c fdb8 	bl	801caf0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800ff80:	6879      	ldr	r1, [r7, #4]
 800ff82:	2001      	movs	r0, #1
 800ff84:	f7fe fe24 	bl	800ebd0 <memp_free>
}
 800ff88:	bf00      	nop
 800ff8a:	3708      	adds	r7, #8
 800ff8c:	46bd      	mov	sp, r7
 800ff8e:	bd80      	pop	{r7, pc}
 800ff90:	080205d0 	.word	0x080205d0
 800ff94:	08020600 	.word	0x08020600
 800ff98:	08020614 	.word	0x08020614

0800ff9c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800ff9c:	b580      	push	{r7, lr}
 800ff9e:	b082      	sub	sp, #8
 800ffa0:	af00      	add	r7, sp, #0
 800ffa2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	7d1b      	ldrb	r3, [r3, #20]
 800ffa8:	2b01      	cmp	r3, #1
 800ffaa:	d105      	bne.n	800ffb8 <tcp_free_listen+0x1c>
 800ffac:	4b06      	ldr	r3, [pc, #24]	; (800ffc8 <tcp_free_listen+0x2c>)
 800ffae:	22df      	movs	r2, #223	; 0xdf
 800ffb0:	4906      	ldr	r1, [pc, #24]	; (800ffcc <tcp_free_listen+0x30>)
 800ffb2:	4807      	ldr	r0, [pc, #28]	; (800ffd0 <tcp_free_listen+0x34>)
 800ffb4:	f00c fd9c 	bl	801caf0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800ffb8:	6879      	ldr	r1, [r7, #4]
 800ffba:	2002      	movs	r0, #2
 800ffbc:	f7fe fe08 	bl	800ebd0 <memp_free>
}
 800ffc0:	bf00      	nop
 800ffc2:	3708      	adds	r7, #8
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	bd80      	pop	{r7, pc}
 800ffc8:	080205d0 	.word	0x080205d0
 800ffcc:	0802063c 	.word	0x0802063c
 800ffd0:	08020614 	.word	0x08020614

0800ffd4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800ffd4:	b580      	push	{r7, lr}
 800ffd6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800ffd8:	f001 f8c0 	bl	801115c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800ffdc:	4b07      	ldr	r3, [pc, #28]	; (800fffc <tcp_tmr+0x28>)
 800ffde:	781b      	ldrb	r3, [r3, #0]
 800ffe0:	3301      	adds	r3, #1
 800ffe2:	b2da      	uxtb	r2, r3
 800ffe4:	4b05      	ldr	r3, [pc, #20]	; (800fffc <tcp_tmr+0x28>)
 800ffe6:	701a      	strb	r2, [r3, #0]
 800ffe8:	4b04      	ldr	r3, [pc, #16]	; (800fffc <tcp_tmr+0x28>)
 800ffea:	781b      	ldrb	r3, [r3, #0]
 800ffec:	f003 0301 	and.w	r3, r3, #1
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d001      	beq.n	800fff8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800fff4:	f000 fd72 	bl	8010adc <tcp_slowtmr>
  }
}
 800fff8:	bf00      	nop
 800fffa:	bd80      	pop	{r7, pc}
 800fffc:	2000148d 	.word	0x2000148d

08010000 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8010000:	b580      	push	{r7, lr}
 8010002:	b084      	sub	sp, #16
 8010004:	af00      	add	r7, sp, #0
 8010006:	6078      	str	r0, [r7, #4]
 8010008:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801000a:	683b      	ldr	r3, [r7, #0]
 801000c:	2b00      	cmp	r3, #0
 801000e:	d105      	bne.n	801001c <tcp_remove_listener+0x1c>
 8010010:	4b0d      	ldr	r3, [pc, #52]	; (8010048 <tcp_remove_listener+0x48>)
 8010012:	22ff      	movs	r2, #255	; 0xff
 8010014:	490d      	ldr	r1, [pc, #52]	; (801004c <tcp_remove_listener+0x4c>)
 8010016:	480e      	ldr	r0, [pc, #56]	; (8010050 <tcp_remove_listener+0x50>)
 8010018:	f00c fd6a 	bl	801caf0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	60fb      	str	r3, [r7, #12]
 8010020:	e00a      	b.n	8010038 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010026:	683a      	ldr	r2, [r7, #0]
 8010028:	429a      	cmp	r2, r3
 801002a:	d102      	bne.n	8010032 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	2200      	movs	r2, #0
 8010030:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	68db      	ldr	r3, [r3, #12]
 8010036:	60fb      	str	r3, [r7, #12]
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	2b00      	cmp	r3, #0
 801003c:	d1f1      	bne.n	8010022 <tcp_remove_listener+0x22>
    }
  }
}
 801003e:	bf00      	nop
 8010040:	bf00      	nop
 8010042:	3710      	adds	r7, #16
 8010044:	46bd      	mov	sp, r7
 8010046:	bd80      	pop	{r7, pc}
 8010048:	080205d0 	.word	0x080205d0
 801004c:	08020658 	.word	0x08020658
 8010050:	08020614 	.word	0x08020614

08010054 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8010054:	b580      	push	{r7, lr}
 8010056:	b084      	sub	sp, #16
 8010058:	af00      	add	r7, sp, #0
 801005a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	2b00      	cmp	r3, #0
 8010060:	d106      	bne.n	8010070 <tcp_listen_closed+0x1c>
 8010062:	4b14      	ldr	r3, [pc, #80]	; (80100b4 <tcp_listen_closed+0x60>)
 8010064:	f240 1211 	movw	r2, #273	; 0x111
 8010068:	4913      	ldr	r1, [pc, #76]	; (80100b8 <tcp_listen_closed+0x64>)
 801006a:	4814      	ldr	r0, [pc, #80]	; (80100bc <tcp_listen_closed+0x68>)
 801006c:	f00c fd40 	bl	801caf0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	7d1b      	ldrb	r3, [r3, #20]
 8010074:	2b01      	cmp	r3, #1
 8010076:	d006      	beq.n	8010086 <tcp_listen_closed+0x32>
 8010078:	4b0e      	ldr	r3, [pc, #56]	; (80100b4 <tcp_listen_closed+0x60>)
 801007a:	f44f 7289 	mov.w	r2, #274	; 0x112
 801007e:	4910      	ldr	r1, [pc, #64]	; (80100c0 <tcp_listen_closed+0x6c>)
 8010080:	480e      	ldr	r0, [pc, #56]	; (80100bc <tcp_listen_closed+0x68>)
 8010082:	f00c fd35 	bl	801caf0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010086:	2301      	movs	r3, #1
 8010088:	60fb      	str	r3, [r7, #12]
 801008a:	e00b      	b.n	80100a4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801008c:	4a0d      	ldr	r2, [pc, #52]	; (80100c4 <tcp_listen_closed+0x70>)
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	6879      	ldr	r1, [r7, #4]
 8010098:	4618      	mov	r0, r3
 801009a:	f7ff ffb1 	bl	8010000 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	3301      	adds	r3, #1
 80100a2:	60fb      	str	r3, [r7, #12]
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	2b03      	cmp	r3, #3
 80100a8:	d9f0      	bls.n	801008c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80100aa:	bf00      	nop
 80100ac:	bf00      	nop
 80100ae:	3710      	adds	r7, #16
 80100b0:	46bd      	mov	sp, r7
 80100b2:	bd80      	pop	{r7, pc}
 80100b4:	080205d0 	.word	0x080205d0
 80100b8:	08020680 	.word	0x08020680
 80100bc:	08020614 	.word	0x08020614
 80100c0:	0802068c 	.word	0x0802068c
 80100c4:	08022870 	.word	0x08022870

080100c8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80100c8:	b5b0      	push	{r4, r5, r7, lr}
 80100ca:	b088      	sub	sp, #32
 80100cc:	af04      	add	r7, sp, #16
 80100ce:	6078      	str	r0, [r7, #4]
 80100d0:	460b      	mov	r3, r1
 80100d2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d106      	bne.n	80100e8 <tcp_close_shutdown+0x20>
 80100da:	4b63      	ldr	r3, [pc, #396]	; (8010268 <tcp_close_shutdown+0x1a0>)
 80100dc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80100e0:	4962      	ldr	r1, [pc, #392]	; (801026c <tcp_close_shutdown+0x1a4>)
 80100e2:	4863      	ldr	r0, [pc, #396]	; (8010270 <tcp_close_shutdown+0x1a8>)
 80100e4:	f00c fd04 	bl	801caf0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80100e8:	78fb      	ldrb	r3, [r7, #3]
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d066      	beq.n	80101bc <tcp_close_shutdown+0xf4>
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	7d1b      	ldrb	r3, [r3, #20]
 80100f2:	2b04      	cmp	r3, #4
 80100f4:	d003      	beq.n	80100fe <tcp_close_shutdown+0x36>
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	7d1b      	ldrb	r3, [r3, #20]
 80100fa:	2b07      	cmp	r3, #7
 80100fc:	d15e      	bne.n	80101bc <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010102:	2b00      	cmp	r3, #0
 8010104:	d104      	bne.n	8010110 <tcp_close_shutdown+0x48>
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801010a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801010e:	d055      	beq.n	80101bc <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	8b5b      	ldrh	r3, [r3, #26]
 8010114:	f003 0310 	and.w	r3, r3, #16
 8010118:	2b00      	cmp	r3, #0
 801011a:	d106      	bne.n	801012a <tcp_close_shutdown+0x62>
 801011c:	4b52      	ldr	r3, [pc, #328]	; (8010268 <tcp_close_shutdown+0x1a0>)
 801011e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8010122:	4954      	ldr	r1, [pc, #336]	; (8010274 <tcp_close_shutdown+0x1ac>)
 8010124:	4852      	ldr	r0, [pc, #328]	; (8010270 <tcp_close_shutdown+0x1a8>)
 8010126:	f00c fce3 	bl	801caf0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8010132:	687d      	ldr	r5, [r7, #4]
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	3304      	adds	r3, #4
 8010138:	687a      	ldr	r2, [r7, #4]
 801013a:	8ad2      	ldrh	r2, [r2, #22]
 801013c:	6879      	ldr	r1, [r7, #4]
 801013e:	8b09      	ldrh	r1, [r1, #24]
 8010140:	9102      	str	r1, [sp, #8]
 8010142:	9201      	str	r2, [sp, #4]
 8010144:	9300      	str	r3, [sp, #0]
 8010146:	462b      	mov	r3, r5
 8010148:	4622      	mov	r2, r4
 801014a:	4601      	mov	r1, r0
 801014c:	6878      	ldr	r0, [r7, #4]
 801014e:	f005 fdd1 	bl	8015cf4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8010152:	6878      	ldr	r0, [r7, #4]
 8010154:	f001 fbb2 	bl	80118bc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8010158:	4b47      	ldr	r3, [pc, #284]	; (8010278 <tcp_close_shutdown+0x1b0>)
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	687a      	ldr	r2, [r7, #4]
 801015e:	429a      	cmp	r2, r3
 8010160:	d105      	bne.n	801016e <tcp_close_shutdown+0xa6>
 8010162:	4b45      	ldr	r3, [pc, #276]	; (8010278 <tcp_close_shutdown+0x1b0>)
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	68db      	ldr	r3, [r3, #12]
 8010168:	4a43      	ldr	r2, [pc, #268]	; (8010278 <tcp_close_shutdown+0x1b0>)
 801016a:	6013      	str	r3, [r2, #0]
 801016c:	e013      	b.n	8010196 <tcp_close_shutdown+0xce>
 801016e:	4b42      	ldr	r3, [pc, #264]	; (8010278 <tcp_close_shutdown+0x1b0>)
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	60fb      	str	r3, [r7, #12]
 8010174:	e00c      	b.n	8010190 <tcp_close_shutdown+0xc8>
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	68db      	ldr	r3, [r3, #12]
 801017a:	687a      	ldr	r2, [r7, #4]
 801017c:	429a      	cmp	r2, r3
 801017e:	d104      	bne.n	801018a <tcp_close_shutdown+0xc2>
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	68da      	ldr	r2, [r3, #12]
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	60da      	str	r2, [r3, #12]
 8010188:	e005      	b.n	8010196 <tcp_close_shutdown+0xce>
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	68db      	ldr	r3, [r3, #12]
 801018e:	60fb      	str	r3, [r7, #12]
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	2b00      	cmp	r3, #0
 8010194:	d1ef      	bne.n	8010176 <tcp_close_shutdown+0xae>
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	2200      	movs	r2, #0
 801019a:	60da      	str	r2, [r3, #12]
 801019c:	4b37      	ldr	r3, [pc, #220]	; (801027c <tcp_close_shutdown+0x1b4>)
 801019e:	2201      	movs	r2, #1
 80101a0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80101a2:	4b37      	ldr	r3, [pc, #220]	; (8010280 <tcp_close_shutdown+0x1b8>)
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	687a      	ldr	r2, [r7, #4]
 80101a8:	429a      	cmp	r2, r3
 80101aa:	d102      	bne.n	80101b2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80101ac:	f004 f846 	bl	801423c <tcp_trigger_input_pcb_close>
 80101b0:	e002      	b.n	80101b8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80101b2:	6878      	ldr	r0, [r7, #4]
 80101b4:	f7ff fed6 	bl	800ff64 <tcp_free>
      }
      return ERR_OK;
 80101b8:	2300      	movs	r3, #0
 80101ba:	e050      	b.n	801025e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	7d1b      	ldrb	r3, [r3, #20]
 80101c0:	2b02      	cmp	r3, #2
 80101c2:	d03b      	beq.n	801023c <tcp_close_shutdown+0x174>
 80101c4:	2b02      	cmp	r3, #2
 80101c6:	dc44      	bgt.n	8010252 <tcp_close_shutdown+0x18a>
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d002      	beq.n	80101d2 <tcp_close_shutdown+0x10a>
 80101cc:	2b01      	cmp	r3, #1
 80101ce:	d02a      	beq.n	8010226 <tcp_close_shutdown+0x15e>
 80101d0:	e03f      	b.n	8010252 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	8adb      	ldrh	r3, [r3, #22]
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d021      	beq.n	801021e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80101da:	4b2a      	ldr	r3, [pc, #168]	; (8010284 <tcp_close_shutdown+0x1bc>)
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	687a      	ldr	r2, [r7, #4]
 80101e0:	429a      	cmp	r2, r3
 80101e2:	d105      	bne.n	80101f0 <tcp_close_shutdown+0x128>
 80101e4:	4b27      	ldr	r3, [pc, #156]	; (8010284 <tcp_close_shutdown+0x1bc>)
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	68db      	ldr	r3, [r3, #12]
 80101ea:	4a26      	ldr	r2, [pc, #152]	; (8010284 <tcp_close_shutdown+0x1bc>)
 80101ec:	6013      	str	r3, [r2, #0]
 80101ee:	e013      	b.n	8010218 <tcp_close_shutdown+0x150>
 80101f0:	4b24      	ldr	r3, [pc, #144]	; (8010284 <tcp_close_shutdown+0x1bc>)
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	60bb      	str	r3, [r7, #8]
 80101f6:	e00c      	b.n	8010212 <tcp_close_shutdown+0x14a>
 80101f8:	68bb      	ldr	r3, [r7, #8]
 80101fa:	68db      	ldr	r3, [r3, #12]
 80101fc:	687a      	ldr	r2, [r7, #4]
 80101fe:	429a      	cmp	r2, r3
 8010200:	d104      	bne.n	801020c <tcp_close_shutdown+0x144>
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	68da      	ldr	r2, [r3, #12]
 8010206:	68bb      	ldr	r3, [r7, #8]
 8010208:	60da      	str	r2, [r3, #12]
 801020a:	e005      	b.n	8010218 <tcp_close_shutdown+0x150>
 801020c:	68bb      	ldr	r3, [r7, #8]
 801020e:	68db      	ldr	r3, [r3, #12]
 8010210:	60bb      	str	r3, [r7, #8]
 8010212:	68bb      	ldr	r3, [r7, #8]
 8010214:	2b00      	cmp	r3, #0
 8010216:	d1ef      	bne.n	80101f8 <tcp_close_shutdown+0x130>
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	2200      	movs	r2, #0
 801021c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 801021e:	6878      	ldr	r0, [r7, #4]
 8010220:	f7ff fea0 	bl	800ff64 <tcp_free>
      break;
 8010224:	e01a      	b.n	801025c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8010226:	6878      	ldr	r0, [r7, #4]
 8010228:	f7ff ff14 	bl	8010054 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801022c:	6879      	ldr	r1, [r7, #4]
 801022e:	4816      	ldr	r0, [pc, #88]	; (8010288 <tcp_close_shutdown+0x1c0>)
 8010230:	f001 fb94 	bl	801195c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8010234:	6878      	ldr	r0, [r7, #4]
 8010236:	f7ff feb1 	bl	800ff9c <tcp_free_listen>
      break;
 801023a:	e00f      	b.n	801025c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801023c:	6879      	ldr	r1, [r7, #4]
 801023e:	480e      	ldr	r0, [pc, #56]	; (8010278 <tcp_close_shutdown+0x1b0>)
 8010240:	f001 fb8c 	bl	801195c <tcp_pcb_remove>
 8010244:	4b0d      	ldr	r3, [pc, #52]	; (801027c <tcp_close_shutdown+0x1b4>)
 8010246:	2201      	movs	r2, #1
 8010248:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 801024a:	6878      	ldr	r0, [r7, #4]
 801024c:	f7ff fe8a 	bl	800ff64 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8010250:	e004      	b.n	801025c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8010252:	6878      	ldr	r0, [r7, #4]
 8010254:	f000 f81a 	bl	801028c <tcp_close_shutdown_fin>
 8010258:	4603      	mov	r3, r0
 801025a:	e000      	b.n	801025e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 801025c:	2300      	movs	r3, #0
}
 801025e:	4618      	mov	r0, r3
 8010260:	3710      	adds	r7, #16
 8010262:	46bd      	mov	sp, r7
 8010264:	bdb0      	pop	{r4, r5, r7, pc}
 8010266:	bf00      	nop
 8010268:	080205d0 	.word	0x080205d0
 801026c:	080206a4 	.word	0x080206a4
 8010270:	08020614 	.word	0x08020614
 8010274:	080206c4 	.word	0x080206c4
 8010278:	20008318 	.word	0x20008318
 801027c:	20008314 	.word	0x20008314
 8010280:	2000832c 	.word	0x2000832c
 8010284:	20008324 	.word	0x20008324
 8010288:	20008320 	.word	0x20008320

0801028c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 801028c:	b580      	push	{r7, lr}
 801028e:	b084      	sub	sp, #16
 8010290:	af00      	add	r7, sp, #0
 8010292:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d106      	bne.n	80102a8 <tcp_close_shutdown_fin+0x1c>
 801029a:	4b2e      	ldr	r3, [pc, #184]	; (8010354 <tcp_close_shutdown_fin+0xc8>)
 801029c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80102a0:	492d      	ldr	r1, [pc, #180]	; (8010358 <tcp_close_shutdown_fin+0xcc>)
 80102a2:	482e      	ldr	r0, [pc, #184]	; (801035c <tcp_close_shutdown_fin+0xd0>)
 80102a4:	f00c fc24 	bl	801caf0 <iprintf>

  switch (pcb->state) {
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	7d1b      	ldrb	r3, [r3, #20]
 80102ac:	2b07      	cmp	r3, #7
 80102ae:	d020      	beq.n	80102f2 <tcp_close_shutdown_fin+0x66>
 80102b0:	2b07      	cmp	r3, #7
 80102b2:	dc2b      	bgt.n	801030c <tcp_close_shutdown_fin+0x80>
 80102b4:	2b03      	cmp	r3, #3
 80102b6:	d002      	beq.n	80102be <tcp_close_shutdown_fin+0x32>
 80102b8:	2b04      	cmp	r3, #4
 80102ba:	d00d      	beq.n	80102d8 <tcp_close_shutdown_fin+0x4c>
 80102bc:	e026      	b.n	801030c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80102be:	6878      	ldr	r0, [r7, #4]
 80102c0:	f004 fe26 	bl	8014f10 <tcp_send_fin>
 80102c4:	4603      	mov	r3, r0
 80102c6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80102c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d11f      	bne.n	8010310 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	2205      	movs	r2, #5
 80102d4:	751a      	strb	r2, [r3, #20]
      }
      break;
 80102d6:	e01b      	b.n	8010310 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80102d8:	6878      	ldr	r0, [r7, #4]
 80102da:	f004 fe19 	bl	8014f10 <tcp_send_fin>
 80102de:	4603      	mov	r3, r0
 80102e0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80102e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d114      	bne.n	8010314 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	2205      	movs	r2, #5
 80102ee:	751a      	strb	r2, [r3, #20]
      }
      break;
 80102f0:	e010      	b.n	8010314 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80102f2:	6878      	ldr	r0, [r7, #4]
 80102f4:	f004 fe0c 	bl	8014f10 <tcp_send_fin>
 80102f8:	4603      	mov	r3, r0
 80102fa:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80102fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010300:	2b00      	cmp	r3, #0
 8010302:	d109      	bne.n	8010318 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	2209      	movs	r2, #9
 8010308:	751a      	strb	r2, [r3, #20]
      }
      break;
 801030a:	e005      	b.n	8010318 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 801030c:	2300      	movs	r3, #0
 801030e:	e01c      	b.n	801034a <tcp_close_shutdown_fin+0xbe>
      break;
 8010310:	bf00      	nop
 8010312:	e002      	b.n	801031a <tcp_close_shutdown_fin+0x8e>
      break;
 8010314:	bf00      	nop
 8010316:	e000      	b.n	801031a <tcp_close_shutdown_fin+0x8e>
      break;
 8010318:	bf00      	nop
  }

  if (err == ERR_OK) {
 801031a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d103      	bne.n	801032a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8010322:	6878      	ldr	r0, [r7, #4]
 8010324:	f004 ff32 	bl	801518c <tcp_output>
 8010328:	e00d      	b.n	8010346 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 801032a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801032e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010332:	d108      	bne.n	8010346 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	8b5b      	ldrh	r3, [r3, #26]
 8010338:	f043 0308 	orr.w	r3, r3, #8
 801033c:	b29a      	uxth	r2, r3
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8010342:	2300      	movs	r3, #0
 8010344:	e001      	b.n	801034a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8010346:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801034a:	4618      	mov	r0, r3
 801034c:	3710      	adds	r7, #16
 801034e:	46bd      	mov	sp, r7
 8010350:	bd80      	pop	{r7, pc}
 8010352:	bf00      	nop
 8010354:	080205d0 	.word	0x080205d0
 8010358:	08020680 	.word	0x08020680
 801035c:	08020614 	.word	0x08020614

08010360 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8010360:	b580      	push	{r7, lr}
 8010362:	b082      	sub	sp, #8
 8010364:	af00      	add	r7, sp, #0
 8010366:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	2b00      	cmp	r3, #0
 801036c:	d109      	bne.n	8010382 <tcp_close+0x22>
 801036e:	4b0f      	ldr	r3, [pc, #60]	; (80103ac <tcp_close+0x4c>)
 8010370:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8010374:	490e      	ldr	r1, [pc, #56]	; (80103b0 <tcp_close+0x50>)
 8010376:	480f      	ldr	r0, [pc, #60]	; (80103b4 <tcp_close+0x54>)
 8010378:	f00c fbba 	bl	801caf0 <iprintf>
 801037c:	f06f 030f 	mvn.w	r3, #15
 8010380:	e00f      	b.n	80103a2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	7d1b      	ldrb	r3, [r3, #20]
 8010386:	2b01      	cmp	r3, #1
 8010388:	d006      	beq.n	8010398 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	8b5b      	ldrh	r3, [r3, #26]
 801038e:	f043 0310 	orr.w	r3, r3, #16
 8010392:	b29a      	uxth	r2, r3
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8010398:	2101      	movs	r1, #1
 801039a:	6878      	ldr	r0, [r7, #4]
 801039c:	f7ff fe94 	bl	80100c8 <tcp_close_shutdown>
 80103a0:	4603      	mov	r3, r0
}
 80103a2:	4618      	mov	r0, r3
 80103a4:	3708      	adds	r7, #8
 80103a6:	46bd      	mov	sp, r7
 80103a8:	bd80      	pop	{r7, pc}
 80103aa:	bf00      	nop
 80103ac:	080205d0 	.word	0x080205d0
 80103b0:	080206e0 	.word	0x080206e0
 80103b4:	08020614 	.word	0x08020614

080103b8 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 80103b8:	b580      	push	{r7, lr}
 80103ba:	b084      	sub	sp, #16
 80103bc:	af00      	add	r7, sp, #0
 80103be:	60f8      	str	r0, [r7, #12]
 80103c0:	60b9      	str	r1, [r7, #8]
 80103c2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d109      	bne.n	80103de <tcp_shutdown+0x26>
 80103ca:	4b26      	ldr	r3, [pc, #152]	; (8010464 <tcp_shutdown+0xac>)
 80103cc:	f240 2207 	movw	r2, #519	; 0x207
 80103d0:	4925      	ldr	r1, [pc, #148]	; (8010468 <tcp_shutdown+0xb0>)
 80103d2:	4826      	ldr	r0, [pc, #152]	; (801046c <tcp_shutdown+0xb4>)
 80103d4:	f00c fb8c 	bl	801caf0 <iprintf>
 80103d8:	f06f 030f 	mvn.w	r3, #15
 80103dc:	e03d      	b.n	801045a <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	7d1b      	ldrb	r3, [r3, #20]
 80103e2:	2b01      	cmp	r3, #1
 80103e4:	d102      	bne.n	80103ec <tcp_shutdown+0x34>
    return ERR_CONN;
 80103e6:	f06f 030a 	mvn.w	r3, #10
 80103ea:	e036      	b.n	801045a <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 80103ec:	68bb      	ldr	r3, [r7, #8]
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d01b      	beq.n	801042a <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	8b5b      	ldrh	r3, [r3, #26]
 80103f6:	f043 0310 	orr.w	r3, r3, #16
 80103fa:	b29a      	uxth	r2, r3
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	2b00      	cmp	r3, #0
 8010404:	d005      	beq.n	8010412 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8010406:	2101      	movs	r1, #1
 8010408:	68f8      	ldr	r0, [r7, #12]
 801040a:	f7ff fe5d 	bl	80100c8 <tcp_close_shutdown>
 801040e:	4603      	mov	r3, r0
 8010410:	e023      	b.n	801045a <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010416:	2b00      	cmp	r3, #0
 8010418:	d007      	beq.n	801042a <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801041e:	4618      	mov	r0, r3
 8010420:	f7ff fae4 	bl	800f9ec <pbuf_free>
      pcb->refused_data = NULL;
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	2200      	movs	r2, #0
 8010428:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	2b00      	cmp	r3, #0
 801042e:	d013      	beq.n	8010458 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	7d1b      	ldrb	r3, [r3, #20]
 8010434:	2b04      	cmp	r3, #4
 8010436:	dc02      	bgt.n	801043e <tcp_shutdown+0x86>
 8010438:	2b03      	cmp	r3, #3
 801043a:	da02      	bge.n	8010442 <tcp_shutdown+0x8a>
 801043c:	e009      	b.n	8010452 <tcp_shutdown+0x9a>
 801043e:	2b07      	cmp	r3, #7
 8010440:	d107      	bne.n	8010452 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8010442:	68bb      	ldr	r3, [r7, #8]
 8010444:	b2db      	uxtb	r3, r3
 8010446:	4619      	mov	r1, r3
 8010448:	68f8      	ldr	r0, [r7, #12]
 801044a:	f7ff fe3d 	bl	80100c8 <tcp_close_shutdown>
 801044e:	4603      	mov	r3, r0
 8010450:	e003      	b.n	801045a <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8010452:	f06f 030a 	mvn.w	r3, #10
 8010456:	e000      	b.n	801045a <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8010458:	2300      	movs	r3, #0
}
 801045a:	4618      	mov	r0, r3
 801045c:	3710      	adds	r7, #16
 801045e:	46bd      	mov	sp, r7
 8010460:	bd80      	pop	{r7, pc}
 8010462:	bf00      	nop
 8010464:	080205d0 	.word	0x080205d0
 8010468:	080206f8 	.word	0x080206f8
 801046c:	08020614 	.word	0x08020614

08010470 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8010470:	b580      	push	{r7, lr}
 8010472:	b08e      	sub	sp, #56	; 0x38
 8010474:	af04      	add	r7, sp, #16
 8010476:	6078      	str	r0, [r7, #4]
 8010478:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	2b00      	cmp	r3, #0
 801047e:	d107      	bne.n	8010490 <tcp_abandon+0x20>
 8010480:	4b52      	ldr	r3, [pc, #328]	; (80105cc <tcp_abandon+0x15c>)
 8010482:	f240 223d 	movw	r2, #573	; 0x23d
 8010486:	4952      	ldr	r1, [pc, #328]	; (80105d0 <tcp_abandon+0x160>)
 8010488:	4852      	ldr	r0, [pc, #328]	; (80105d4 <tcp_abandon+0x164>)
 801048a:	f00c fb31 	bl	801caf0 <iprintf>
 801048e:	e099      	b.n	80105c4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	7d1b      	ldrb	r3, [r3, #20]
 8010494:	2b01      	cmp	r3, #1
 8010496:	d106      	bne.n	80104a6 <tcp_abandon+0x36>
 8010498:	4b4c      	ldr	r3, [pc, #304]	; (80105cc <tcp_abandon+0x15c>)
 801049a:	f44f 7210 	mov.w	r2, #576	; 0x240
 801049e:	494e      	ldr	r1, [pc, #312]	; (80105d8 <tcp_abandon+0x168>)
 80104a0:	484c      	ldr	r0, [pc, #304]	; (80105d4 <tcp_abandon+0x164>)
 80104a2:	f00c fb25 	bl	801caf0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	7d1b      	ldrb	r3, [r3, #20]
 80104aa:	2b0a      	cmp	r3, #10
 80104ac:	d107      	bne.n	80104be <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80104ae:	6879      	ldr	r1, [r7, #4]
 80104b0:	484a      	ldr	r0, [pc, #296]	; (80105dc <tcp_abandon+0x16c>)
 80104b2:	f001 fa53 	bl	801195c <tcp_pcb_remove>
    tcp_free(pcb);
 80104b6:	6878      	ldr	r0, [r7, #4]
 80104b8:	f7ff fd54 	bl	800ff64 <tcp_free>
 80104bc:	e082      	b.n	80105c4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80104be:	2300      	movs	r3, #0
 80104c0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80104c2:	2300      	movs	r3, #0
 80104c4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80104ca:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104d0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80104d8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	691b      	ldr	r3, [r3, #16]
 80104de:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	7d1b      	ldrb	r3, [r3, #20]
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d126      	bne.n	8010536 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	8adb      	ldrh	r3, [r3, #22]
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d02e      	beq.n	801054e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80104f0:	4b3b      	ldr	r3, [pc, #236]	; (80105e0 <tcp_abandon+0x170>)
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	687a      	ldr	r2, [r7, #4]
 80104f6:	429a      	cmp	r2, r3
 80104f8:	d105      	bne.n	8010506 <tcp_abandon+0x96>
 80104fa:	4b39      	ldr	r3, [pc, #228]	; (80105e0 <tcp_abandon+0x170>)
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	68db      	ldr	r3, [r3, #12]
 8010500:	4a37      	ldr	r2, [pc, #220]	; (80105e0 <tcp_abandon+0x170>)
 8010502:	6013      	str	r3, [r2, #0]
 8010504:	e013      	b.n	801052e <tcp_abandon+0xbe>
 8010506:	4b36      	ldr	r3, [pc, #216]	; (80105e0 <tcp_abandon+0x170>)
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	61fb      	str	r3, [r7, #28]
 801050c:	e00c      	b.n	8010528 <tcp_abandon+0xb8>
 801050e:	69fb      	ldr	r3, [r7, #28]
 8010510:	68db      	ldr	r3, [r3, #12]
 8010512:	687a      	ldr	r2, [r7, #4]
 8010514:	429a      	cmp	r2, r3
 8010516:	d104      	bne.n	8010522 <tcp_abandon+0xb2>
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	68da      	ldr	r2, [r3, #12]
 801051c:	69fb      	ldr	r3, [r7, #28]
 801051e:	60da      	str	r2, [r3, #12]
 8010520:	e005      	b.n	801052e <tcp_abandon+0xbe>
 8010522:	69fb      	ldr	r3, [r7, #28]
 8010524:	68db      	ldr	r3, [r3, #12]
 8010526:	61fb      	str	r3, [r7, #28]
 8010528:	69fb      	ldr	r3, [r7, #28]
 801052a:	2b00      	cmp	r3, #0
 801052c:	d1ef      	bne.n	801050e <tcp_abandon+0x9e>
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	2200      	movs	r2, #0
 8010532:	60da      	str	r2, [r3, #12]
 8010534:	e00b      	b.n	801054e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8010536:	683b      	ldr	r3, [r7, #0]
 8010538:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	8adb      	ldrh	r3, [r3, #22]
 801053e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8010540:	6879      	ldr	r1, [r7, #4]
 8010542:	4828      	ldr	r0, [pc, #160]	; (80105e4 <tcp_abandon+0x174>)
 8010544:	f001 fa0a 	bl	801195c <tcp_pcb_remove>
 8010548:	4b27      	ldr	r3, [pc, #156]	; (80105e8 <tcp_abandon+0x178>)
 801054a:	2201      	movs	r2, #1
 801054c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010552:	2b00      	cmp	r3, #0
 8010554:	d004      	beq.n	8010560 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801055a:	4618      	mov	r0, r3
 801055c:	f000 fede 	bl	801131c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010564:	2b00      	cmp	r3, #0
 8010566:	d004      	beq.n	8010572 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801056c:	4618      	mov	r0, r3
 801056e:	f000 fed5 	bl	801131c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010576:	2b00      	cmp	r3, #0
 8010578:	d004      	beq.n	8010584 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801057e:	4618      	mov	r0, r3
 8010580:	f000 fecc 	bl	801131c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8010584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010586:	2b00      	cmp	r3, #0
 8010588:	d00e      	beq.n	80105a8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801058a:	6879      	ldr	r1, [r7, #4]
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	3304      	adds	r3, #4
 8010590:	687a      	ldr	r2, [r7, #4]
 8010592:	8b12      	ldrh	r2, [r2, #24]
 8010594:	9202      	str	r2, [sp, #8]
 8010596:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010598:	9201      	str	r2, [sp, #4]
 801059a:	9300      	str	r3, [sp, #0]
 801059c:	460b      	mov	r3, r1
 801059e:	697a      	ldr	r2, [r7, #20]
 80105a0:	69b9      	ldr	r1, [r7, #24]
 80105a2:	6878      	ldr	r0, [r7, #4]
 80105a4:	f005 fba6 	bl	8015cf4 <tcp_rst>
    }
    last_state = pcb->state;
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	7d1b      	ldrb	r3, [r3, #20]
 80105ac:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80105ae:	6878      	ldr	r0, [r7, #4]
 80105b0:	f7ff fcd8 	bl	800ff64 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80105b4:	693b      	ldr	r3, [r7, #16]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d004      	beq.n	80105c4 <tcp_abandon+0x154>
 80105ba:	693b      	ldr	r3, [r7, #16]
 80105bc:	f06f 010c 	mvn.w	r1, #12
 80105c0:	68f8      	ldr	r0, [r7, #12]
 80105c2:	4798      	blx	r3
  }
}
 80105c4:	3728      	adds	r7, #40	; 0x28
 80105c6:	46bd      	mov	sp, r7
 80105c8:	bd80      	pop	{r7, pc}
 80105ca:	bf00      	nop
 80105cc:	080205d0 	.word	0x080205d0
 80105d0:	08020714 	.word	0x08020714
 80105d4:	08020614 	.word	0x08020614
 80105d8:	08020730 	.word	0x08020730
 80105dc:	20008328 	.word	0x20008328
 80105e0:	20008324 	.word	0x20008324
 80105e4:	20008318 	.word	0x20008318
 80105e8:	20008314 	.word	0x20008314

080105ec <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80105ec:	b580      	push	{r7, lr}
 80105ee:	b082      	sub	sp, #8
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80105f4:	2101      	movs	r1, #1
 80105f6:	6878      	ldr	r0, [r7, #4]
 80105f8:	f7ff ff3a 	bl	8010470 <tcp_abandon>
}
 80105fc:	bf00      	nop
 80105fe:	3708      	adds	r7, #8
 8010600:	46bd      	mov	sp, r7
 8010602:	bd80      	pop	{r7, pc}

08010604 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8010604:	b580      	push	{r7, lr}
 8010606:	b088      	sub	sp, #32
 8010608:	af00      	add	r7, sp, #0
 801060a:	60f8      	str	r0, [r7, #12]
 801060c:	60b9      	str	r1, [r7, #8]
 801060e:	4613      	mov	r3, r2
 8010610:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8010612:	2304      	movs	r3, #4
 8010614:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8010616:	68bb      	ldr	r3, [r7, #8]
 8010618:	2b00      	cmp	r3, #0
 801061a:	d101      	bne.n	8010620 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 801061c:	4b3e      	ldr	r3, [pc, #248]	; (8010718 <tcp_bind+0x114>)
 801061e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	2b00      	cmp	r3, #0
 8010624:	d109      	bne.n	801063a <tcp_bind+0x36>
 8010626:	4b3d      	ldr	r3, [pc, #244]	; (801071c <tcp_bind+0x118>)
 8010628:	f240 22a9 	movw	r2, #681	; 0x2a9
 801062c:	493c      	ldr	r1, [pc, #240]	; (8010720 <tcp_bind+0x11c>)
 801062e:	483d      	ldr	r0, [pc, #244]	; (8010724 <tcp_bind+0x120>)
 8010630:	f00c fa5e 	bl	801caf0 <iprintf>
 8010634:	f06f 030f 	mvn.w	r3, #15
 8010638:	e06a      	b.n	8010710 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	7d1b      	ldrb	r3, [r3, #20]
 801063e:	2b00      	cmp	r3, #0
 8010640:	d009      	beq.n	8010656 <tcp_bind+0x52>
 8010642:	4b36      	ldr	r3, [pc, #216]	; (801071c <tcp_bind+0x118>)
 8010644:	f240 22ab 	movw	r2, #683	; 0x2ab
 8010648:	4937      	ldr	r1, [pc, #220]	; (8010728 <tcp_bind+0x124>)
 801064a:	4836      	ldr	r0, [pc, #216]	; (8010724 <tcp_bind+0x120>)
 801064c:	f00c fa50 	bl	801caf0 <iprintf>
 8010650:	f06f 0305 	mvn.w	r3, #5
 8010654:	e05c      	b.n	8010710 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8010656:	88fb      	ldrh	r3, [r7, #6]
 8010658:	2b00      	cmp	r3, #0
 801065a:	d109      	bne.n	8010670 <tcp_bind+0x6c>
    port = tcp_new_port();
 801065c:	f000 f9f8 	bl	8010a50 <tcp_new_port>
 8010660:	4603      	mov	r3, r0
 8010662:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8010664:	88fb      	ldrh	r3, [r7, #6]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d135      	bne.n	80106d6 <tcp_bind+0xd2>
      return ERR_BUF;
 801066a:	f06f 0301 	mvn.w	r3, #1
 801066e:	e04f      	b.n	8010710 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8010670:	2300      	movs	r3, #0
 8010672:	61fb      	str	r3, [r7, #28]
 8010674:	e02b      	b.n	80106ce <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8010676:	4a2d      	ldr	r2, [pc, #180]	; (801072c <tcp_bind+0x128>)
 8010678:	69fb      	ldr	r3, [r7, #28]
 801067a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	61bb      	str	r3, [r7, #24]
 8010682:	e01e      	b.n	80106c2 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8010684:	69bb      	ldr	r3, [r7, #24]
 8010686:	8adb      	ldrh	r3, [r3, #22]
 8010688:	88fa      	ldrh	r2, [r7, #6]
 801068a:	429a      	cmp	r2, r3
 801068c:	d116      	bne.n	80106bc <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 801068e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8010690:	2b00      	cmp	r3, #0
 8010692:	d010      	beq.n	80106b6 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8010694:	69bb      	ldr	r3, [r7, #24]
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d00c      	beq.n	80106b6 <tcp_bind+0xb2>
 801069c:	68bb      	ldr	r3, [r7, #8]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d009      	beq.n	80106b6 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 80106a2:	68bb      	ldr	r3, [r7, #8]
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d005      	beq.n	80106b6 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 80106aa:	69bb      	ldr	r3, [r7, #24]
 80106ac:	681a      	ldr	r2, [r3, #0]
 80106ae:	68bb      	ldr	r3, [r7, #8]
 80106b0:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80106b2:	429a      	cmp	r2, r3
 80106b4:	d102      	bne.n	80106bc <tcp_bind+0xb8>
              return ERR_USE;
 80106b6:	f06f 0307 	mvn.w	r3, #7
 80106ba:	e029      	b.n	8010710 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80106bc:	69bb      	ldr	r3, [r7, #24]
 80106be:	68db      	ldr	r3, [r3, #12]
 80106c0:	61bb      	str	r3, [r7, #24]
 80106c2:	69bb      	ldr	r3, [r7, #24]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d1dd      	bne.n	8010684 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 80106c8:	69fb      	ldr	r3, [r7, #28]
 80106ca:	3301      	adds	r3, #1
 80106cc:	61fb      	str	r3, [r7, #28]
 80106ce:	69fa      	ldr	r2, [r7, #28]
 80106d0:	697b      	ldr	r3, [r7, #20]
 80106d2:	429a      	cmp	r2, r3
 80106d4:	dbcf      	blt.n	8010676 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 80106d6:	68bb      	ldr	r3, [r7, #8]
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d00c      	beq.n	80106f6 <tcp_bind+0xf2>
 80106dc:	68bb      	ldr	r3, [r7, #8]
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d008      	beq.n	80106f6 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 80106e4:	68bb      	ldr	r3, [r7, #8]
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d002      	beq.n	80106f0 <tcp_bind+0xec>
 80106ea:	68bb      	ldr	r3, [r7, #8]
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	e000      	b.n	80106f2 <tcp_bind+0xee>
 80106f0:	2300      	movs	r3, #0
 80106f2:	68fa      	ldr	r2, [r7, #12]
 80106f4:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	88fa      	ldrh	r2, [r7, #6]
 80106fa:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80106fc:	4b0c      	ldr	r3, [pc, #48]	; (8010730 <tcp_bind+0x12c>)
 80106fe:	681a      	ldr	r2, [r3, #0]
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	60da      	str	r2, [r3, #12]
 8010704:	4a0a      	ldr	r2, [pc, #40]	; (8010730 <tcp_bind+0x12c>)
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	6013      	str	r3, [r2, #0]
 801070a:	f005 fcb5 	bl	8016078 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 801070e:	2300      	movs	r3, #0
}
 8010710:	4618      	mov	r0, r3
 8010712:	3720      	adds	r7, #32
 8010714:	46bd      	mov	sp, r7
 8010716:	bd80      	pop	{r7, pc}
 8010718:	08022898 	.word	0x08022898
 801071c:	080205d0 	.word	0x080205d0
 8010720:	08020764 	.word	0x08020764
 8010724:	08020614 	.word	0x08020614
 8010728:	0802077c 	.word	0x0802077c
 801072c:	08022870 	.word	0x08022870
 8010730:	20008324 	.word	0x20008324

08010734 <tcp_bind_netif>:
 * @param pcb the tcp_pcb to bind.
 * @param netif the netif to bind to. Can be NULL.
 */
void
tcp_bind_netif(struct tcp_pcb *pcb, const struct netif *netif)
{
 8010734:	b480      	push	{r7}
 8010736:	b083      	sub	sp, #12
 8010738:	af00      	add	r7, sp, #0
 801073a:	6078      	str	r0, [r7, #4]
 801073c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (netif != NULL) {
 801073e:	683b      	ldr	r3, [r7, #0]
 8010740:	2b00      	cmp	r3, #0
 8010742:	d007      	beq.n	8010754 <tcp_bind_netif+0x20>
    pcb->netif_idx = netif_get_index(netif);
 8010744:	683b      	ldr	r3, [r7, #0]
 8010746:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801074a:	3301      	adds	r3, #1
 801074c:	b2da      	uxtb	r2, r3
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	721a      	strb	r2, [r3, #8]
  } else {
    pcb->netif_idx = NETIF_NO_INDEX;
  }
}
 8010752:	e002      	b.n	801075a <tcp_bind_netif+0x26>
    pcb->netif_idx = NETIF_NO_INDEX;
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	2200      	movs	r2, #0
 8010758:	721a      	strb	r2, [r3, #8]
}
 801075a:	bf00      	nop
 801075c:	370c      	adds	r7, #12
 801075e:	46bd      	mov	sp, r7
 8010760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010764:	4770      	bx	lr
	...

08010768 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8010768:	b580      	push	{r7, lr}
 801076a:	b084      	sub	sp, #16
 801076c:	af00      	add	r7, sp, #0
 801076e:	60f8      	str	r0, [r7, #12]
 8010770:	60b9      	str	r1, [r7, #8]
 8010772:	4613      	mov	r3, r2
 8010774:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8010776:	68bb      	ldr	r3, [r7, #8]
 8010778:	2b00      	cmp	r3, #0
 801077a:	d106      	bne.n	801078a <tcp_accept_null+0x22>
 801077c:	4b07      	ldr	r3, [pc, #28]	; (801079c <tcp_accept_null+0x34>)
 801077e:	f240 320f 	movw	r2, #783	; 0x30f
 8010782:	4907      	ldr	r1, [pc, #28]	; (80107a0 <tcp_accept_null+0x38>)
 8010784:	4807      	ldr	r0, [pc, #28]	; (80107a4 <tcp_accept_null+0x3c>)
 8010786:	f00c f9b3 	bl	801caf0 <iprintf>

  tcp_abort(pcb);
 801078a:	68b8      	ldr	r0, [r7, #8]
 801078c:	f7ff ff2e 	bl	80105ec <tcp_abort>

  return ERR_ABRT;
 8010790:	f06f 030c 	mvn.w	r3, #12
}
 8010794:	4618      	mov	r0, r3
 8010796:	3710      	adds	r7, #16
 8010798:	46bd      	mov	sp, r7
 801079a:	bd80      	pop	{r7, pc}
 801079c:	080205d0 	.word	0x080205d0
 80107a0:	080207a4 	.word	0x080207a4
 80107a4:	08020614 	.word	0x08020614

080107a8 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 80107a8:	b580      	push	{r7, lr}
 80107aa:	b088      	sub	sp, #32
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	60f8      	str	r0, [r7, #12]
 80107b0:	460b      	mov	r3, r1
 80107b2:	607a      	str	r2, [r7, #4]
 80107b4:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 80107b6:	2300      	movs	r3, #0
 80107b8:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d109      	bne.n	80107d4 <tcp_listen_with_backlog_and_err+0x2c>
 80107c0:	4b47      	ldr	r3, [pc, #284]	; (80108e0 <tcp_listen_with_backlog_and_err+0x138>)
 80107c2:	f240 3259 	movw	r2, #857	; 0x359
 80107c6:	4947      	ldr	r1, [pc, #284]	; (80108e4 <tcp_listen_with_backlog_and_err+0x13c>)
 80107c8:	4847      	ldr	r0, [pc, #284]	; (80108e8 <tcp_listen_with_backlog_and_err+0x140>)
 80107ca:	f00c f991 	bl	801caf0 <iprintf>
 80107ce:	23f0      	movs	r3, #240	; 0xf0
 80107d0:	76fb      	strb	r3, [r7, #27]
 80107d2:	e079      	b.n	80108c8 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	7d1b      	ldrb	r3, [r3, #20]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d009      	beq.n	80107f0 <tcp_listen_with_backlog_and_err+0x48>
 80107dc:	4b40      	ldr	r3, [pc, #256]	; (80108e0 <tcp_listen_with_backlog_and_err+0x138>)
 80107de:	f240 325a 	movw	r2, #858	; 0x35a
 80107e2:	4942      	ldr	r1, [pc, #264]	; (80108ec <tcp_listen_with_backlog_and_err+0x144>)
 80107e4:	4840      	ldr	r0, [pc, #256]	; (80108e8 <tcp_listen_with_backlog_and_err+0x140>)
 80107e6:	f00c f983 	bl	801caf0 <iprintf>
 80107ea:	23f1      	movs	r3, #241	; 0xf1
 80107ec:	76fb      	strb	r3, [r7, #27]
 80107ee:	e06b      	b.n	80108c8 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	7d1b      	ldrb	r3, [r3, #20]
 80107f4:	2b01      	cmp	r3, #1
 80107f6:	d104      	bne.n	8010802 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 80107fc:	23f7      	movs	r3, #247	; 0xf7
 80107fe:	76fb      	strb	r3, [r7, #27]
    goto done;
 8010800:	e062      	b.n	80108c8 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8010802:	2002      	movs	r0, #2
 8010804:	f7fe f992 	bl	800eb2c <memp_malloc>
 8010808:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 801080a:	69fb      	ldr	r3, [r7, #28]
 801080c:	2b00      	cmp	r3, #0
 801080e:	d102      	bne.n	8010816 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8010810:	23ff      	movs	r3, #255	; 0xff
 8010812:	76fb      	strb	r3, [r7, #27]
    goto done;
 8010814:	e058      	b.n	80108c8 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	691a      	ldr	r2, [r3, #16]
 801081a:	69fb      	ldr	r3, [r7, #28]
 801081c:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	8ada      	ldrh	r2, [r3, #22]
 8010822:	69fb      	ldr	r3, [r7, #28]
 8010824:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8010826:	69fb      	ldr	r3, [r7, #28]
 8010828:	2201      	movs	r2, #1
 801082a:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	7d5a      	ldrb	r2, [r3, #21]
 8010830:	69fb      	ldr	r3, [r7, #28]
 8010832:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	7a5a      	ldrb	r2, [r3, #9]
 8010838:	69fb      	ldr	r3, [r7, #28]
 801083a:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 801083c:	69fb      	ldr	r3, [r7, #28]
 801083e:	2200      	movs	r2, #0
 8010840:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	7ada      	ldrb	r2, [r3, #11]
 8010846:	69fb      	ldr	r3, [r7, #28]
 8010848:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	7a9a      	ldrb	r2, [r3, #10]
 801084e:	69fb      	ldr	r3, [r7, #28]
 8010850:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	681a      	ldr	r2, [r3, #0]
 8010856:	69fb      	ldr	r3, [r7, #28]
 8010858:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	8adb      	ldrh	r3, [r3, #22]
 801085e:	2b00      	cmp	r3, #0
 8010860:	d021      	beq.n	80108a6 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8010862:	4b23      	ldr	r3, [pc, #140]	; (80108f0 <tcp_listen_with_backlog_and_err+0x148>)
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	68fa      	ldr	r2, [r7, #12]
 8010868:	429a      	cmp	r2, r3
 801086a:	d105      	bne.n	8010878 <tcp_listen_with_backlog_and_err+0xd0>
 801086c:	4b20      	ldr	r3, [pc, #128]	; (80108f0 <tcp_listen_with_backlog_and_err+0x148>)
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	68db      	ldr	r3, [r3, #12]
 8010872:	4a1f      	ldr	r2, [pc, #124]	; (80108f0 <tcp_listen_with_backlog_and_err+0x148>)
 8010874:	6013      	str	r3, [r2, #0]
 8010876:	e013      	b.n	80108a0 <tcp_listen_with_backlog_and_err+0xf8>
 8010878:	4b1d      	ldr	r3, [pc, #116]	; (80108f0 <tcp_listen_with_backlog_and_err+0x148>)
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	617b      	str	r3, [r7, #20]
 801087e:	e00c      	b.n	801089a <tcp_listen_with_backlog_and_err+0xf2>
 8010880:	697b      	ldr	r3, [r7, #20]
 8010882:	68db      	ldr	r3, [r3, #12]
 8010884:	68fa      	ldr	r2, [r7, #12]
 8010886:	429a      	cmp	r2, r3
 8010888:	d104      	bne.n	8010894 <tcp_listen_with_backlog_and_err+0xec>
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	68da      	ldr	r2, [r3, #12]
 801088e:	697b      	ldr	r3, [r7, #20]
 8010890:	60da      	str	r2, [r3, #12]
 8010892:	e005      	b.n	80108a0 <tcp_listen_with_backlog_and_err+0xf8>
 8010894:	697b      	ldr	r3, [r7, #20]
 8010896:	68db      	ldr	r3, [r3, #12]
 8010898:	617b      	str	r3, [r7, #20]
 801089a:	697b      	ldr	r3, [r7, #20]
 801089c:	2b00      	cmp	r3, #0
 801089e:	d1ef      	bne.n	8010880 <tcp_listen_with_backlog_and_err+0xd8>
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	2200      	movs	r2, #0
 80108a4:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 80108a6:	68f8      	ldr	r0, [r7, #12]
 80108a8:	f7ff fb5c 	bl	800ff64 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 80108ac:	69fb      	ldr	r3, [r7, #28]
 80108ae:	4a11      	ldr	r2, [pc, #68]	; (80108f4 <tcp_listen_with_backlog_and_err+0x14c>)
 80108b0:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 80108b2:	4b11      	ldr	r3, [pc, #68]	; (80108f8 <tcp_listen_with_backlog_and_err+0x150>)
 80108b4:	681a      	ldr	r2, [r3, #0]
 80108b6:	69fb      	ldr	r3, [r7, #28]
 80108b8:	60da      	str	r2, [r3, #12]
 80108ba:	4a0f      	ldr	r2, [pc, #60]	; (80108f8 <tcp_listen_with_backlog_and_err+0x150>)
 80108bc:	69fb      	ldr	r3, [r7, #28]
 80108be:	6013      	str	r3, [r2, #0]
 80108c0:	f005 fbda 	bl	8016078 <tcp_timer_needed>
  res = ERR_OK;
 80108c4:	2300      	movs	r3, #0
 80108c6:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d002      	beq.n	80108d4 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	7efa      	ldrb	r2, [r7, #27]
 80108d2:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 80108d4:	69fb      	ldr	r3, [r7, #28]
}
 80108d6:	4618      	mov	r0, r3
 80108d8:	3720      	adds	r7, #32
 80108da:	46bd      	mov	sp, r7
 80108dc:	bd80      	pop	{r7, pc}
 80108de:	bf00      	nop
 80108e0:	080205d0 	.word	0x080205d0
 80108e4:	080207c4 	.word	0x080207c4
 80108e8:	08020614 	.word	0x08020614
 80108ec:	080207f4 	.word	0x080207f4
 80108f0:	20008324 	.word	0x20008324
 80108f4:	08010769 	.word	0x08010769
 80108f8:	20008320 	.word	0x20008320

080108fc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80108fc:	b580      	push	{r7, lr}
 80108fe:	b084      	sub	sp, #16
 8010900:	af00      	add	r7, sp, #0
 8010902:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	2b00      	cmp	r3, #0
 8010908:	d106      	bne.n	8010918 <tcp_update_rcv_ann_wnd+0x1c>
 801090a:	4b25      	ldr	r3, [pc, #148]	; (80109a0 <tcp_update_rcv_ann_wnd+0xa4>)
 801090c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8010910:	4924      	ldr	r1, [pc, #144]	; (80109a4 <tcp_update_rcv_ann_wnd+0xa8>)
 8010912:	4825      	ldr	r0, [pc, #148]	; (80109a8 <tcp_update_rcv_ann_wnd+0xac>)
 8010914:	f00c f8ec 	bl	801caf0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801091c:	687a      	ldr	r2, [r7, #4]
 801091e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8010920:	4413      	add	r3, r2
 8010922:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010928:	687a      	ldr	r2, [r7, #4]
 801092a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 801092c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8010930:	bf28      	it	cs
 8010932:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8010936:	b292      	uxth	r2, r2
 8010938:	4413      	add	r3, r2
 801093a:	68fa      	ldr	r2, [r7, #12]
 801093c:	1ad3      	subs	r3, r2, r3
 801093e:	2b00      	cmp	r3, #0
 8010940:	db08      	blt.n	8010954 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801094e:	68fa      	ldr	r2, [r7, #12]
 8010950:	1ad3      	subs	r3, r2, r3
 8010952:	e020      	b.n	8010996 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801095c:	1ad3      	subs	r3, r2, r3
 801095e:	2b00      	cmp	r3, #0
 8010960:	dd03      	ble.n	801096a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	2200      	movs	r2, #0
 8010966:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010968:	e014      	b.n	8010994 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010972:	1ad3      	subs	r3, r2, r3
 8010974:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8010976:	68bb      	ldr	r3, [r7, #8]
 8010978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801097c:	d306      	bcc.n	801098c <tcp_update_rcv_ann_wnd+0x90>
 801097e:	4b08      	ldr	r3, [pc, #32]	; (80109a0 <tcp_update_rcv_ann_wnd+0xa4>)
 8010980:	f240 32b6 	movw	r2, #950	; 0x3b6
 8010984:	4909      	ldr	r1, [pc, #36]	; (80109ac <tcp_update_rcv_ann_wnd+0xb0>)
 8010986:	4808      	ldr	r0, [pc, #32]	; (80109a8 <tcp_update_rcv_ann_wnd+0xac>)
 8010988:	f00c f8b2 	bl	801caf0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801098c:	68bb      	ldr	r3, [r7, #8]
 801098e:	b29a      	uxth	r2, r3
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8010994:	2300      	movs	r3, #0
  }
}
 8010996:	4618      	mov	r0, r3
 8010998:	3710      	adds	r7, #16
 801099a:	46bd      	mov	sp, r7
 801099c:	bd80      	pop	{r7, pc}
 801099e:	bf00      	nop
 80109a0:	080205d0 	.word	0x080205d0
 80109a4:	0802082c 	.word	0x0802082c
 80109a8:	08020614 	.word	0x08020614
 80109ac:	08020850 	.word	0x08020850

080109b0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80109b0:	b580      	push	{r7, lr}
 80109b2:	b084      	sub	sp, #16
 80109b4:	af00      	add	r7, sp, #0
 80109b6:	6078      	str	r0, [r7, #4]
 80109b8:	460b      	mov	r3, r1
 80109ba:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d107      	bne.n	80109d2 <tcp_recved+0x22>
 80109c2:	4b1f      	ldr	r3, [pc, #124]	; (8010a40 <tcp_recved+0x90>)
 80109c4:	f240 32cf 	movw	r2, #975	; 0x3cf
 80109c8:	491e      	ldr	r1, [pc, #120]	; (8010a44 <tcp_recved+0x94>)
 80109ca:	481f      	ldr	r0, [pc, #124]	; (8010a48 <tcp_recved+0x98>)
 80109cc:	f00c f890 	bl	801caf0 <iprintf>
 80109d0:	e032      	b.n	8010a38 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	7d1b      	ldrb	r3, [r3, #20]
 80109d6:	2b01      	cmp	r3, #1
 80109d8:	d106      	bne.n	80109e8 <tcp_recved+0x38>
 80109da:	4b19      	ldr	r3, [pc, #100]	; (8010a40 <tcp_recved+0x90>)
 80109dc:	f240 32d2 	movw	r2, #978	; 0x3d2
 80109e0:	491a      	ldr	r1, [pc, #104]	; (8010a4c <tcp_recved+0x9c>)
 80109e2:	4819      	ldr	r0, [pc, #100]	; (8010a48 <tcp_recved+0x98>)
 80109e4:	f00c f884 	bl	801caf0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80109ec:	887b      	ldrh	r3, [r7, #2]
 80109ee:	4413      	add	r3, r2
 80109f0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80109f2:	89fb      	ldrh	r3, [r7, #14]
 80109f4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80109f8:	d804      	bhi.n	8010a04 <tcp_recved+0x54>
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80109fe:	89fa      	ldrh	r2, [r7, #14]
 8010a00:	429a      	cmp	r2, r3
 8010a02:	d204      	bcs.n	8010a0e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8010a0a:	851a      	strh	r2, [r3, #40]	; 0x28
 8010a0c:	e002      	b.n	8010a14 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	89fa      	ldrh	r2, [r7, #14]
 8010a12:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8010a14:	6878      	ldr	r0, [r7, #4]
 8010a16:	f7ff ff71 	bl	80108fc <tcp_update_rcv_ann_wnd>
 8010a1a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8010a1c:	68bb      	ldr	r3, [r7, #8]
 8010a1e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8010a22:	d309      	bcc.n	8010a38 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	8b5b      	ldrh	r3, [r3, #26]
 8010a28:	f043 0302 	orr.w	r3, r3, #2
 8010a2c:	b29a      	uxth	r2, r3
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010a32:	6878      	ldr	r0, [r7, #4]
 8010a34:	f004 fbaa 	bl	801518c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8010a38:	3710      	adds	r7, #16
 8010a3a:	46bd      	mov	sp, r7
 8010a3c:	bd80      	pop	{r7, pc}
 8010a3e:	bf00      	nop
 8010a40:	080205d0 	.word	0x080205d0
 8010a44:	0802086c 	.word	0x0802086c
 8010a48:	08020614 	.word	0x08020614
 8010a4c:	08020884 	.word	0x08020884

08010a50 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8010a50:	b480      	push	{r7}
 8010a52:	b083      	sub	sp, #12
 8010a54:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8010a56:	2300      	movs	r3, #0
 8010a58:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8010a5a:	4b1e      	ldr	r3, [pc, #120]	; (8010ad4 <tcp_new_port+0x84>)
 8010a5c:	881b      	ldrh	r3, [r3, #0]
 8010a5e:	3301      	adds	r3, #1
 8010a60:	b29a      	uxth	r2, r3
 8010a62:	4b1c      	ldr	r3, [pc, #112]	; (8010ad4 <tcp_new_port+0x84>)
 8010a64:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8010a66:	4b1b      	ldr	r3, [pc, #108]	; (8010ad4 <tcp_new_port+0x84>)
 8010a68:	881b      	ldrh	r3, [r3, #0]
 8010a6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010a6e:	4293      	cmp	r3, r2
 8010a70:	d103      	bne.n	8010a7a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8010a72:	4b18      	ldr	r3, [pc, #96]	; (8010ad4 <tcp_new_port+0x84>)
 8010a74:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8010a78:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8010a7a:	2300      	movs	r3, #0
 8010a7c:	71fb      	strb	r3, [r7, #7]
 8010a7e:	e01e      	b.n	8010abe <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8010a80:	79fb      	ldrb	r3, [r7, #7]
 8010a82:	4a15      	ldr	r2, [pc, #84]	; (8010ad8 <tcp_new_port+0x88>)
 8010a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	603b      	str	r3, [r7, #0]
 8010a8c:	e011      	b.n	8010ab2 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8010a8e:	683b      	ldr	r3, [r7, #0]
 8010a90:	8ada      	ldrh	r2, [r3, #22]
 8010a92:	4b10      	ldr	r3, [pc, #64]	; (8010ad4 <tcp_new_port+0x84>)
 8010a94:	881b      	ldrh	r3, [r3, #0]
 8010a96:	429a      	cmp	r2, r3
 8010a98:	d108      	bne.n	8010aac <tcp_new_port+0x5c>
        n++;
 8010a9a:	88bb      	ldrh	r3, [r7, #4]
 8010a9c:	3301      	adds	r3, #1
 8010a9e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8010aa0:	88bb      	ldrh	r3, [r7, #4]
 8010aa2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010aa6:	d3d8      	bcc.n	8010a5a <tcp_new_port+0xa>
          return 0;
 8010aa8:	2300      	movs	r3, #0
 8010aaa:	e00d      	b.n	8010ac8 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8010aac:	683b      	ldr	r3, [r7, #0]
 8010aae:	68db      	ldr	r3, [r3, #12]
 8010ab0:	603b      	str	r3, [r7, #0]
 8010ab2:	683b      	ldr	r3, [r7, #0]
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d1ea      	bne.n	8010a8e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8010ab8:	79fb      	ldrb	r3, [r7, #7]
 8010aba:	3301      	adds	r3, #1
 8010abc:	71fb      	strb	r3, [r7, #7]
 8010abe:	79fb      	ldrb	r3, [r7, #7]
 8010ac0:	2b03      	cmp	r3, #3
 8010ac2:	d9dd      	bls.n	8010a80 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8010ac4:	4b03      	ldr	r3, [pc, #12]	; (8010ad4 <tcp_new_port+0x84>)
 8010ac6:	881b      	ldrh	r3, [r3, #0]
}
 8010ac8:	4618      	mov	r0, r3
 8010aca:	370c      	adds	r7, #12
 8010acc:	46bd      	mov	sp, r7
 8010ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad2:	4770      	bx	lr
 8010ad4:	10000010 	.word	0x10000010
 8010ad8:	08022870 	.word	0x08022870

08010adc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8010adc:	b5b0      	push	{r4, r5, r7, lr}
 8010ade:	b090      	sub	sp, #64	; 0x40
 8010ae0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8010ae2:	2300      	movs	r3, #0
 8010ae4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8010ae8:	4b94      	ldr	r3, [pc, #592]	; (8010d3c <tcp_slowtmr+0x260>)
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	3301      	adds	r3, #1
 8010aee:	4a93      	ldr	r2, [pc, #588]	; (8010d3c <tcp_slowtmr+0x260>)
 8010af0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8010af2:	4b93      	ldr	r3, [pc, #588]	; (8010d40 <tcp_slowtmr+0x264>)
 8010af4:	781b      	ldrb	r3, [r3, #0]
 8010af6:	3301      	adds	r3, #1
 8010af8:	b2da      	uxtb	r2, r3
 8010afa:	4b91      	ldr	r3, [pc, #580]	; (8010d40 <tcp_slowtmr+0x264>)
 8010afc:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8010afe:	2300      	movs	r3, #0
 8010b00:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8010b02:	4b90      	ldr	r3, [pc, #576]	; (8010d44 <tcp_slowtmr+0x268>)
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8010b08:	e29f      	b.n	801104a <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8010b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b0c:	7d1b      	ldrb	r3, [r3, #20]
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d106      	bne.n	8010b20 <tcp_slowtmr+0x44>
 8010b12:	4b8d      	ldr	r3, [pc, #564]	; (8010d48 <tcp_slowtmr+0x26c>)
 8010b14:	f240 42be 	movw	r2, #1214	; 0x4be
 8010b18:	498c      	ldr	r1, [pc, #560]	; (8010d4c <tcp_slowtmr+0x270>)
 8010b1a:	488d      	ldr	r0, [pc, #564]	; (8010d50 <tcp_slowtmr+0x274>)
 8010b1c:	f00b ffe8 	bl	801caf0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8010b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b22:	7d1b      	ldrb	r3, [r3, #20]
 8010b24:	2b01      	cmp	r3, #1
 8010b26:	d106      	bne.n	8010b36 <tcp_slowtmr+0x5a>
 8010b28:	4b87      	ldr	r3, [pc, #540]	; (8010d48 <tcp_slowtmr+0x26c>)
 8010b2a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8010b2e:	4989      	ldr	r1, [pc, #548]	; (8010d54 <tcp_slowtmr+0x278>)
 8010b30:	4887      	ldr	r0, [pc, #540]	; (8010d50 <tcp_slowtmr+0x274>)
 8010b32:	f00b ffdd 	bl	801caf0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8010b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b38:	7d1b      	ldrb	r3, [r3, #20]
 8010b3a:	2b0a      	cmp	r3, #10
 8010b3c:	d106      	bne.n	8010b4c <tcp_slowtmr+0x70>
 8010b3e:	4b82      	ldr	r3, [pc, #520]	; (8010d48 <tcp_slowtmr+0x26c>)
 8010b40:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8010b44:	4984      	ldr	r1, [pc, #528]	; (8010d58 <tcp_slowtmr+0x27c>)
 8010b46:	4882      	ldr	r0, [pc, #520]	; (8010d50 <tcp_slowtmr+0x274>)
 8010b48:	f00b ffd2 	bl	801caf0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8010b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b4e:	7f9a      	ldrb	r2, [r3, #30]
 8010b50:	4b7b      	ldr	r3, [pc, #492]	; (8010d40 <tcp_slowtmr+0x264>)
 8010b52:	781b      	ldrb	r3, [r3, #0]
 8010b54:	429a      	cmp	r2, r3
 8010b56:	d105      	bne.n	8010b64 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8010b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b5a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8010b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b5e:	68db      	ldr	r3, [r3, #12]
 8010b60:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8010b62:	e272      	b.n	801104a <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8010b64:	4b76      	ldr	r3, [pc, #472]	; (8010d40 <tcp_slowtmr+0x264>)
 8010b66:	781a      	ldrb	r2, [r3, #0]
 8010b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b6a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8010b6c:	2300      	movs	r3, #0
 8010b6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8010b72:	2300      	movs	r3, #0
 8010b74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8010b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b7a:	7d1b      	ldrb	r3, [r3, #20]
 8010b7c:	2b02      	cmp	r3, #2
 8010b7e:	d10a      	bne.n	8010b96 <tcp_slowtmr+0xba>
 8010b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010b86:	2b05      	cmp	r3, #5
 8010b88:	d905      	bls.n	8010b96 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8010b8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010b8e:	3301      	adds	r3, #1
 8010b90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010b94:	e11e      	b.n	8010dd4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8010b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b98:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010b9c:	2b0b      	cmp	r3, #11
 8010b9e:	d905      	bls.n	8010bac <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8010ba0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010ba4:	3301      	adds	r3, #1
 8010ba6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010baa:	e113      	b.n	8010dd4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8010bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bae:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d075      	beq.n	8010ca2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8010bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d006      	beq.n	8010bcc <tcp_slowtmr+0xf0>
 8010bbe:	4b62      	ldr	r3, [pc, #392]	; (8010d48 <tcp_slowtmr+0x26c>)
 8010bc0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8010bc4:	4965      	ldr	r1, [pc, #404]	; (8010d5c <tcp_slowtmr+0x280>)
 8010bc6:	4862      	ldr	r0, [pc, #392]	; (8010d50 <tcp_slowtmr+0x274>)
 8010bc8:	f00b ff92 	bl	801caf0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8010bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d106      	bne.n	8010be2 <tcp_slowtmr+0x106>
 8010bd4:	4b5c      	ldr	r3, [pc, #368]	; (8010d48 <tcp_slowtmr+0x26c>)
 8010bd6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8010bda:	4961      	ldr	r1, [pc, #388]	; (8010d60 <tcp_slowtmr+0x284>)
 8010bdc:	485c      	ldr	r0, [pc, #368]	; (8010d50 <tcp_slowtmr+0x274>)
 8010bde:	f00b ff87 	bl	801caf0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8010be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010be4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8010be8:	2b0b      	cmp	r3, #11
 8010bea:	d905      	bls.n	8010bf8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8010bec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010bf0:	3301      	adds	r3, #1
 8010bf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010bf6:	e0ed      	b.n	8010dd4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8010bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bfa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010bfe:	3b01      	subs	r3, #1
 8010c00:	4a58      	ldr	r2, [pc, #352]	; (8010d64 <tcp_slowtmr+0x288>)
 8010c02:	5cd3      	ldrb	r3, [r2, r3]
 8010c04:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8010c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c08:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8010c0c:	7c7a      	ldrb	r2, [r7, #17]
 8010c0e:	429a      	cmp	r2, r3
 8010c10:	d907      	bls.n	8010c22 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8010c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c14:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8010c18:	3301      	adds	r3, #1
 8010c1a:	b2da      	uxtb	r2, r3
 8010c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c1e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8010c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c24:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8010c28:	7c7a      	ldrb	r2, [r7, #17]
 8010c2a:	429a      	cmp	r2, r3
 8010c2c:	f200 80d2 	bhi.w	8010dd4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8010c30:	2301      	movs	r3, #1
 8010c32:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8010c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c36:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d108      	bne.n	8010c50 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8010c3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010c40:	f005 f94c 	bl	8015edc <tcp_zero_window_probe>
 8010c44:	4603      	mov	r3, r0
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d014      	beq.n	8010c74 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	623b      	str	r3, [r7, #32]
 8010c4e:	e011      	b.n	8010c74 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8010c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010c56:	4619      	mov	r1, r3
 8010c58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010c5a:	f004 f811 	bl	8014c80 <tcp_split_unsent_seg>
 8010c5e:	4603      	mov	r3, r0
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d107      	bne.n	8010c74 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8010c64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010c66:	f004 fa91 	bl	801518c <tcp_output>
 8010c6a:	4603      	mov	r3, r0
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d101      	bne.n	8010c74 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8010c70:	2300      	movs	r3, #0
 8010c72:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8010c74:	6a3b      	ldr	r3, [r7, #32]
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	f000 80ac 	beq.w	8010dd4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8010c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c7e:	2200      	movs	r2, #0
 8010c80:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8010c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c86:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010c8a:	2b06      	cmp	r3, #6
 8010c8c:	f200 80a2 	bhi.w	8010dd4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8010c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c92:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010c96:	3301      	adds	r3, #1
 8010c98:	b2da      	uxtb	r2, r3
 8010c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c9c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8010ca0:	e098      	b.n	8010dd4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8010ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ca4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	db0f      	blt.n	8010ccc <tcp_slowtmr+0x1f0>
 8010cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cae:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010cb2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8010cb6:	4293      	cmp	r3, r2
 8010cb8:	d008      	beq.n	8010ccc <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8010cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cbc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010cc0:	b29b      	uxth	r3, r3
 8010cc2:	3301      	adds	r3, #1
 8010cc4:	b29b      	uxth	r3, r3
 8010cc6:	b21a      	sxth	r2, r3
 8010cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cca:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8010ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cce:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8010cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cd4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8010cd8:	429a      	cmp	r2, r3
 8010cda:	db7b      	blt.n	8010dd4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8010cdc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010cde:	f004 fd47 	bl	8015770 <tcp_rexmit_rto_prepare>
 8010ce2:	4603      	mov	r3, r0
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d007      	beq.n	8010cf8 <tcp_slowtmr+0x21c>
 8010ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d171      	bne.n	8010dd4 <tcp_slowtmr+0x2f8>
 8010cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d06d      	beq.n	8010dd4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8010cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cfa:	7d1b      	ldrb	r3, [r3, #20]
 8010cfc:	2b02      	cmp	r3, #2
 8010cfe:	d03a      	beq.n	8010d76 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8010d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010d06:	2b0c      	cmp	r3, #12
 8010d08:	bf28      	it	cs
 8010d0a:	230c      	movcs	r3, #12
 8010d0c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8010d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d10:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010d14:	10db      	asrs	r3, r3, #3
 8010d16:	b21b      	sxth	r3, r3
 8010d18:	461a      	mov	r2, r3
 8010d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d1c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010d20:	4413      	add	r3, r2
 8010d22:	7efa      	ldrb	r2, [r7, #27]
 8010d24:	4910      	ldr	r1, [pc, #64]	; (8010d68 <tcp_slowtmr+0x28c>)
 8010d26:	5c8a      	ldrb	r2, [r1, r2]
 8010d28:	4093      	lsls	r3, r2
 8010d2a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8010d2c:	697b      	ldr	r3, [r7, #20]
 8010d2e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8010d32:	4293      	cmp	r3, r2
 8010d34:	dc1a      	bgt.n	8010d6c <tcp_slowtmr+0x290>
 8010d36:	697b      	ldr	r3, [r7, #20]
 8010d38:	b21a      	sxth	r2, r3
 8010d3a:	e019      	b.n	8010d70 <tcp_slowtmr+0x294>
 8010d3c:	2000831c 	.word	0x2000831c
 8010d40:	2000148e 	.word	0x2000148e
 8010d44:	20008318 	.word	0x20008318
 8010d48:	080205d0 	.word	0x080205d0
 8010d4c:	08020914 	.word	0x08020914
 8010d50:	08020614 	.word	0x08020614
 8010d54:	08020940 	.word	0x08020940
 8010d58:	0802096c 	.word	0x0802096c
 8010d5c:	0802099c 	.word	0x0802099c
 8010d60:	080209d0 	.word	0x080209d0
 8010d64:	08022868 	.word	0x08022868
 8010d68:	08022858 	.word	0x08022858
 8010d6c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8010d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d72:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8010d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d78:	2200      	movs	r2, #0
 8010d7a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8010d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d7e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d84:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010d88:	4293      	cmp	r3, r2
 8010d8a:	bf28      	it	cs
 8010d8c:	4613      	movcs	r3, r2
 8010d8e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8010d90:	8a7b      	ldrh	r3, [r7, #18]
 8010d92:	085b      	lsrs	r3, r3, #1
 8010d94:	b29a      	uxth	r2, r3
 8010d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d98:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8010d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d9e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010da4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010da6:	005b      	lsls	r3, r3, #1
 8010da8:	b29b      	uxth	r3, r3
 8010daa:	429a      	cmp	r2, r3
 8010dac:	d206      	bcs.n	8010dbc <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8010dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010db0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010db2:	005b      	lsls	r3, r3, #1
 8010db4:	b29a      	uxth	r2, r3
 8010db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010db8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8010dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dbe:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8010dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dc2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8010dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dc8:	2200      	movs	r2, #0
 8010dca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8010dce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010dd0:	f004 fd3e 	bl	8015850 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8010dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dd6:	7d1b      	ldrb	r3, [r3, #20]
 8010dd8:	2b06      	cmp	r3, #6
 8010dda:	d111      	bne.n	8010e00 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8010ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dde:	8b5b      	ldrh	r3, [r3, #26]
 8010de0:	f003 0310 	and.w	r3, r3, #16
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d00b      	beq.n	8010e00 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010de8:	4b9d      	ldr	r3, [pc, #628]	; (8011060 <tcp_slowtmr+0x584>)
 8010dea:	681a      	ldr	r2, [r3, #0]
 8010dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dee:	6a1b      	ldr	r3, [r3, #32]
 8010df0:	1ad3      	subs	r3, r2, r3
 8010df2:	2b28      	cmp	r3, #40	; 0x28
 8010df4:	d904      	bls.n	8010e00 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8010df6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010dfa:	3301      	adds	r3, #1
 8010dfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e02:	7a5b      	ldrb	r3, [r3, #9]
 8010e04:	f003 0308 	and.w	r3, r3, #8
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d04c      	beq.n	8010ea6 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8010e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e0e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010e10:	2b04      	cmp	r3, #4
 8010e12:	d003      	beq.n	8010e1c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8010e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e16:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8010e18:	2b07      	cmp	r3, #7
 8010e1a:	d144      	bne.n	8010ea6 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010e1c:	4b90      	ldr	r3, [pc, #576]	; (8011060 <tcp_slowtmr+0x584>)
 8010e1e:	681a      	ldr	r2, [r3, #0]
 8010e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e22:	6a1b      	ldr	r3, [r3, #32]
 8010e24:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8010e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010e2c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8010e30:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8010e34:	498b      	ldr	r1, [pc, #556]	; (8011064 <tcp_slowtmr+0x588>)
 8010e36:	fba1 1303 	umull	r1, r3, r1, r3
 8010e3a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010e3c:	429a      	cmp	r2, r3
 8010e3e:	d90a      	bls.n	8010e56 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8010e40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010e44:	3301      	adds	r3, #1
 8010e46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8010e4a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010e4e:	3301      	adds	r3, #1
 8010e50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8010e54:	e027      	b.n	8010ea6 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010e56:	4b82      	ldr	r3, [pc, #520]	; (8011060 <tcp_slowtmr+0x584>)
 8010e58:	681a      	ldr	r2, [r3, #0]
 8010e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e5c:	6a1b      	ldr	r3, [r3, #32]
 8010e5e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8010e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e62:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8010e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e68:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	4b7e      	ldr	r3, [pc, #504]	; (8011068 <tcp_slowtmr+0x58c>)
 8010e70:	fb03 f300 	mul.w	r3, r3, r0
 8010e74:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8010e76:	497b      	ldr	r1, [pc, #492]	; (8011064 <tcp_slowtmr+0x588>)
 8010e78:	fba1 1303 	umull	r1, r3, r1, r3
 8010e7c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010e7e:	429a      	cmp	r2, r3
 8010e80:	d911      	bls.n	8010ea6 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8010e82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010e84:	f004 ffea 	bl	8015e5c <tcp_keepalive>
 8010e88:	4603      	mov	r3, r0
 8010e8a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8010e8e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d107      	bne.n	8010ea6 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8010e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e98:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8010e9c:	3301      	adds	r3, #1
 8010e9e:	b2da      	uxtb	r2, r3
 8010ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ea2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8010ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ea8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d011      	beq.n	8010ed2 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8010eae:	4b6c      	ldr	r3, [pc, #432]	; (8011060 <tcp_slowtmr+0x584>)
 8010eb0:	681a      	ldr	r2, [r3, #0]
 8010eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eb4:	6a1b      	ldr	r3, [r3, #32]
 8010eb6:	1ad2      	subs	r2, r2, r3
 8010eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eba:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8010ebe:	4619      	mov	r1, r3
 8010ec0:	460b      	mov	r3, r1
 8010ec2:	005b      	lsls	r3, r3, #1
 8010ec4:	440b      	add	r3, r1
 8010ec6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8010ec8:	429a      	cmp	r2, r3
 8010eca:	d302      	bcc.n	8010ed2 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8010ecc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010ece:	f000 fea9 	bl	8011c24 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8010ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ed4:	7d1b      	ldrb	r3, [r3, #20]
 8010ed6:	2b03      	cmp	r3, #3
 8010ed8:	d10b      	bne.n	8010ef2 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010eda:	4b61      	ldr	r3, [pc, #388]	; (8011060 <tcp_slowtmr+0x584>)
 8010edc:	681a      	ldr	r2, [r3, #0]
 8010ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ee0:	6a1b      	ldr	r3, [r3, #32]
 8010ee2:	1ad3      	subs	r3, r2, r3
 8010ee4:	2b28      	cmp	r3, #40	; 0x28
 8010ee6:	d904      	bls.n	8010ef2 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8010ee8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010eec:	3301      	adds	r3, #1
 8010eee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8010ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ef4:	7d1b      	ldrb	r3, [r3, #20]
 8010ef6:	2b09      	cmp	r3, #9
 8010ef8:	d10b      	bne.n	8010f12 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8010efa:	4b59      	ldr	r3, [pc, #356]	; (8011060 <tcp_slowtmr+0x584>)
 8010efc:	681a      	ldr	r2, [r3, #0]
 8010efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f00:	6a1b      	ldr	r3, [r3, #32]
 8010f02:	1ad3      	subs	r3, r2, r3
 8010f04:	2bf0      	cmp	r3, #240	; 0xf0
 8010f06:	d904      	bls.n	8010f12 <tcp_slowtmr+0x436>
        ++pcb_remove;
 8010f08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010f0c:	3301      	adds	r3, #1
 8010f0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8010f12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d060      	beq.n	8010fdc <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8010f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010f20:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8010f22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010f24:	f000 fcca 	bl	80118bc <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8010f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d010      	beq.n	8010f50 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8010f2e:	4b4f      	ldr	r3, [pc, #316]	; (801106c <tcp_slowtmr+0x590>)
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010f34:	429a      	cmp	r2, r3
 8010f36:	d106      	bne.n	8010f46 <tcp_slowtmr+0x46a>
 8010f38:	4b4d      	ldr	r3, [pc, #308]	; (8011070 <tcp_slowtmr+0x594>)
 8010f3a:	f240 526d 	movw	r2, #1389	; 0x56d
 8010f3e:	494d      	ldr	r1, [pc, #308]	; (8011074 <tcp_slowtmr+0x598>)
 8010f40:	484d      	ldr	r0, [pc, #308]	; (8011078 <tcp_slowtmr+0x59c>)
 8010f42:	f00b fdd5 	bl	801caf0 <iprintf>
        prev->next = pcb->next;
 8010f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f48:	68da      	ldr	r2, [r3, #12]
 8010f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f4c:	60da      	str	r2, [r3, #12]
 8010f4e:	e00f      	b.n	8010f70 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8010f50:	4b46      	ldr	r3, [pc, #280]	; (801106c <tcp_slowtmr+0x590>)
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010f56:	429a      	cmp	r2, r3
 8010f58:	d006      	beq.n	8010f68 <tcp_slowtmr+0x48c>
 8010f5a:	4b45      	ldr	r3, [pc, #276]	; (8011070 <tcp_slowtmr+0x594>)
 8010f5c:	f240 5271 	movw	r2, #1393	; 0x571
 8010f60:	4946      	ldr	r1, [pc, #280]	; (801107c <tcp_slowtmr+0x5a0>)
 8010f62:	4845      	ldr	r0, [pc, #276]	; (8011078 <tcp_slowtmr+0x59c>)
 8010f64:	f00b fdc4 	bl	801caf0 <iprintf>
        tcp_active_pcbs = pcb->next;
 8010f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f6a:	68db      	ldr	r3, [r3, #12]
 8010f6c:	4a3f      	ldr	r2, [pc, #252]	; (801106c <tcp_slowtmr+0x590>)
 8010f6e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8010f70:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d013      	beq.n	8010fa0 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8010f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f7a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8010f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f7e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8010f80:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8010f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f84:	3304      	adds	r3, #4
 8010f86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010f88:	8ad2      	ldrh	r2, [r2, #22]
 8010f8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010f8c:	8b09      	ldrh	r1, [r1, #24]
 8010f8e:	9102      	str	r1, [sp, #8]
 8010f90:	9201      	str	r2, [sp, #4]
 8010f92:	9300      	str	r3, [sp, #0]
 8010f94:	462b      	mov	r3, r5
 8010f96:	4622      	mov	r2, r4
 8010f98:	4601      	mov	r1, r0
 8010f9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010f9c:	f004 feaa 	bl	8015cf4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8010fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fa2:	691b      	ldr	r3, [r3, #16]
 8010fa4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8010fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fa8:	7d1b      	ldrb	r3, [r3, #20]
 8010faa:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8010fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fae:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8010fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fb2:	68db      	ldr	r3, [r3, #12]
 8010fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8010fb6:	6838      	ldr	r0, [r7, #0]
 8010fb8:	f7fe ffd4 	bl	800ff64 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8010fbc:	4b30      	ldr	r3, [pc, #192]	; (8011080 <tcp_slowtmr+0x5a4>)
 8010fbe:	2200      	movs	r2, #0
 8010fc0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d004      	beq.n	8010fd2 <tcp_slowtmr+0x4f6>
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	f06f 010c 	mvn.w	r1, #12
 8010fce:	68b8      	ldr	r0, [r7, #8]
 8010fd0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8010fd2:	4b2b      	ldr	r3, [pc, #172]	; (8011080 <tcp_slowtmr+0x5a4>)
 8010fd4:	781b      	ldrb	r3, [r3, #0]
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d037      	beq.n	801104a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8010fda:	e590      	b.n	8010afe <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8010fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fde:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8010fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fe2:	68db      	ldr	r3, [r3, #12]
 8010fe4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8010fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fe8:	7f1b      	ldrb	r3, [r3, #28]
 8010fea:	3301      	adds	r3, #1
 8010fec:	b2da      	uxtb	r2, r3
 8010fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ff0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8010ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ff4:	7f1a      	ldrb	r2, [r3, #28]
 8010ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ff8:	7f5b      	ldrb	r3, [r3, #29]
 8010ffa:	429a      	cmp	r2, r3
 8010ffc:	d325      	bcc.n	801104a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8010ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011000:	2200      	movs	r2, #0
 8011002:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8011004:	4b1e      	ldr	r3, [pc, #120]	; (8011080 <tcp_slowtmr+0x5a4>)
 8011006:	2200      	movs	r2, #0
 8011008:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801100a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801100c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011010:	2b00      	cmp	r3, #0
 8011012:	d00b      	beq.n	801102c <tcp_slowtmr+0x550>
 8011014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011016:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801101a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801101c:	6912      	ldr	r2, [r2, #16]
 801101e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011020:	4610      	mov	r0, r2
 8011022:	4798      	blx	r3
 8011024:	4603      	mov	r3, r0
 8011026:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801102a:	e002      	b.n	8011032 <tcp_slowtmr+0x556>
 801102c:	2300      	movs	r3, #0
 801102e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8011032:	4b13      	ldr	r3, [pc, #76]	; (8011080 <tcp_slowtmr+0x5a4>)
 8011034:	781b      	ldrb	r3, [r3, #0]
 8011036:	2b00      	cmp	r3, #0
 8011038:	d000      	beq.n	801103c <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 801103a:	e560      	b.n	8010afe <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801103c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8011040:	2b00      	cmp	r3, #0
 8011042:	d102      	bne.n	801104a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8011044:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011046:	f004 f8a1 	bl	801518c <tcp_output>
  while (pcb != NULL) {
 801104a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801104c:	2b00      	cmp	r3, #0
 801104e:	f47f ad5c 	bne.w	8010b0a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8011052:	2300      	movs	r3, #0
 8011054:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8011056:	4b0b      	ldr	r3, [pc, #44]	; (8011084 <tcp_slowtmr+0x5a8>)
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801105c:	e067      	b.n	801112e <tcp_slowtmr+0x652>
 801105e:	bf00      	nop
 8011060:	2000831c 	.word	0x2000831c
 8011064:	10624dd3 	.word	0x10624dd3
 8011068:	000124f8 	.word	0x000124f8
 801106c:	20008318 	.word	0x20008318
 8011070:	080205d0 	.word	0x080205d0
 8011074:	08020a08 	.word	0x08020a08
 8011078:	08020614 	.word	0x08020614
 801107c:	08020a34 	.word	0x08020a34
 8011080:	20008314 	.word	0x20008314
 8011084:	20008328 	.word	0x20008328
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801108a:	7d1b      	ldrb	r3, [r3, #20]
 801108c:	2b0a      	cmp	r3, #10
 801108e:	d006      	beq.n	801109e <tcp_slowtmr+0x5c2>
 8011090:	4b2b      	ldr	r3, [pc, #172]	; (8011140 <tcp_slowtmr+0x664>)
 8011092:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8011096:	492b      	ldr	r1, [pc, #172]	; (8011144 <tcp_slowtmr+0x668>)
 8011098:	482b      	ldr	r0, [pc, #172]	; (8011148 <tcp_slowtmr+0x66c>)
 801109a:	f00b fd29 	bl	801caf0 <iprintf>
    pcb_remove = 0;
 801109e:	2300      	movs	r3, #0
 80110a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80110a4:	4b29      	ldr	r3, [pc, #164]	; (801114c <tcp_slowtmr+0x670>)
 80110a6:	681a      	ldr	r2, [r3, #0]
 80110a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110aa:	6a1b      	ldr	r3, [r3, #32]
 80110ac:	1ad3      	subs	r3, r2, r3
 80110ae:	2bf0      	cmp	r3, #240	; 0xf0
 80110b0:	d904      	bls.n	80110bc <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80110b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80110b6:	3301      	adds	r3, #1
 80110b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80110bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d02f      	beq.n	8011124 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80110c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80110c6:	f000 fbf9 	bl	80118bc <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80110ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d010      	beq.n	80110f2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80110d0:	4b1f      	ldr	r3, [pc, #124]	; (8011150 <tcp_slowtmr+0x674>)
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80110d6:	429a      	cmp	r2, r3
 80110d8:	d106      	bne.n	80110e8 <tcp_slowtmr+0x60c>
 80110da:	4b19      	ldr	r3, [pc, #100]	; (8011140 <tcp_slowtmr+0x664>)
 80110dc:	f240 52af 	movw	r2, #1455	; 0x5af
 80110e0:	491c      	ldr	r1, [pc, #112]	; (8011154 <tcp_slowtmr+0x678>)
 80110e2:	4819      	ldr	r0, [pc, #100]	; (8011148 <tcp_slowtmr+0x66c>)
 80110e4:	f00b fd04 	bl	801caf0 <iprintf>
        prev->next = pcb->next;
 80110e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110ea:	68da      	ldr	r2, [r3, #12]
 80110ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110ee:	60da      	str	r2, [r3, #12]
 80110f0:	e00f      	b.n	8011112 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80110f2:	4b17      	ldr	r3, [pc, #92]	; (8011150 <tcp_slowtmr+0x674>)
 80110f4:	681b      	ldr	r3, [r3, #0]
 80110f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80110f8:	429a      	cmp	r2, r3
 80110fa:	d006      	beq.n	801110a <tcp_slowtmr+0x62e>
 80110fc:	4b10      	ldr	r3, [pc, #64]	; (8011140 <tcp_slowtmr+0x664>)
 80110fe:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8011102:	4915      	ldr	r1, [pc, #84]	; (8011158 <tcp_slowtmr+0x67c>)
 8011104:	4810      	ldr	r0, [pc, #64]	; (8011148 <tcp_slowtmr+0x66c>)
 8011106:	f00b fcf3 	bl	801caf0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801110a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801110c:	68db      	ldr	r3, [r3, #12]
 801110e:	4a10      	ldr	r2, [pc, #64]	; (8011150 <tcp_slowtmr+0x674>)
 8011110:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8011112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011114:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8011116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011118:	68db      	ldr	r3, [r3, #12]
 801111a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801111c:	69f8      	ldr	r0, [r7, #28]
 801111e:	f7fe ff21 	bl	800ff64 <tcp_free>
 8011122:	e004      	b.n	801112e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8011124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011126:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801112a:	68db      	ldr	r3, [r3, #12]
 801112c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801112e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011130:	2b00      	cmp	r3, #0
 8011132:	d1a9      	bne.n	8011088 <tcp_slowtmr+0x5ac>
    }
  }
}
 8011134:	bf00      	nop
 8011136:	bf00      	nop
 8011138:	3730      	adds	r7, #48	; 0x30
 801113a:	46bd      	mov	sp, r7
 801113c:	bdb0      	pop	{r4, r5, r7, pc}
 801113e:	bf00      	nop
 8011140:	080205d0 	.word	0x080205d0
 8011144:	08020a60 	.word	0x08020a60
 8011148:	08020614 	.word	0x08020614
 801114c:	2000831c 	.word	0x2000831c
 8011150:	20008328 	.word	0x20008328
 8011154:	08020a90 	.word	0x08020a90
 8011158:	08020ab8 	.word	0x08020ab8

0801115c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801115c:	b580      	push	{r7, lr}
 801115e:	b082      	sub	sp, #8
 8011160:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8011162:	4b2d      	ldr	r3, [pc, #180]	; (8011218 <tcp_fasttmr+0xbc>)
 8011164:	781b      	ldrb	r3, [r3, #0]
 8011166:	3301      	adds	r3, #1
 8011168:	b2da      	uxtb	r2, r3
 801116a:	4b2b      	ldr	r3, [pc, #172]	; (8011218 <tcp_fasttmr+0xbc>)
 801116c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801116e:	4b2b      	ldr	r3, [pc, #172]	; (801121c <tcp_fasttmr+0xc0>)
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8011174:	e048      	b.n	8011208 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	7f9a      	ldrb	r2, [r3, #30]
 801117a:	4b27      	ldr	r3, [pc, #156]	; (8011218 <tcp_fasttmr+0xbc>)
 801117c:	781b      	ldrb	r3, [r3, #0]
 801117e:	429a      	cmp	r2, r3
 8011180:	d03f      	beq.n	8011202 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8011182:	4b25      	ldr	r3, [pc, #148]	; (8011218 <tcp_fasttmr+0xbc>)
 8011184:	781a      	ldrb	r2, [r3, #0]
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	8b5b      	ldrh	r3, [r3, #26]
 801118e:	f003 0301 	and.w	r3, r3, #1
 8011192:	2b00      	cmp	r3, #0
 8011194:	d010      	beq.n	80111b8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	8b5b      	ldrh	r3, [r3, #26]
 801119a:	f043 0302 	orr.w	r3, r3, #2
 801119e:	b29a      	uxth	r2, r3
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80111a4:	6878      	ldr	r0, [r7, #4]
 80111a6:	f003 fff1 	bl	801518c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	8b5b      	ldrh	r3, [r3, #26]
 80111ae:	f023 0303 	bic.w	r3, r3, #3
 80111b2:	b29a      	uxth	r2, r3
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	8b5b      	ldrh	r3, [r3, #26]
 80111bc:	f003 0308 	and.w	r3, r3, #8
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d009      	beq.n	80111d8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	8b5b      	ldrh	r3, [r3, #26]
 80111c8:	f023 0308 	bic.w	r3, r3, #8
 80111cc:	b29a      	uxth	r2, r3
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80111d2:	6878      	ldr	r0, [r7, #4]
 80111d4:	f7ff f85a 	bl	801028c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	68db      	ldr	r3, [r3, #12]
 80111dc:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d00a      	beq.n	80111fc <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80111e6:	4b0e      	ldr	r3, [pc, #56]	; (8011220 <tcp_fasttmr+0xc4>)
 80111e8:	2200      	movs	r2, #0
 80111ea:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80111ec:	6878      	ldr	r0, [r7, #4]
 80111ee:	f000 f819 	bl	8011224 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80111f2:	4b0b      	ldr	r3, [pc, #44]	; (8011220 <tcp_fasttmr+0xc4>)
 80111f4:	781b      	ldrb	r3, [r3, #0]
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d000      	beq.n	80111fc <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80111fa:	e7b8      	b.n	801116e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80111fc:	683b      	ldr	r3, [r7, #0]
 80111fe:	607b      	str	r3, [r7, #4]
 8011200:	e002      	b.n	8011208 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	68db      	ldr	r3, [r3, #12]
 8011206:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	2b00      	cmp	r3, #0
 801120c:	d1b3      	bne.n	8011176 <tcp_fasttmr+0x1a>
    }
  }
}
 801120e:	bf00      	nop
 8011210:	bf00      	nop
 8011212:	3708      	adds	r7, #8
 8011214:	46bd      	mov	sp, r7
 8011216:	bd80      	pop	{r7, pc}
 8011218:	2000148e 	.word	0x2000148e
 801121c:	20008318 	.word	0x20008318
 8011220:	20008314 	.word	0x20008314

08011224 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8011224:	b590      	push	{r4, r7, lr}
 8011226:	b085      	sub	sp, #20
 8011228:	af00      	add	r7, sp, #0
 801122a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	2b00      	cmp	r3, #0
 8011230:	d109      	bne.n	8011246 <tcp_process_refused_data+0x22>
 8011232:	4b37      	ldr	r3, [pc, #220]	; (8011310 <tcp_process_refused_data+0xec>)
 8011234:	f240 6209 	movw	r2, #1545	; 0x609
 8011238:	4936      	ldr	r1, [pc, #216]	; (8011314 <tcp_process_refused_data+0xf0>)
 801123a:	4837      	ldr	r0, [pc, #220]	; (8011318 <tcp_process_refused_data+0xf4>)
 801123c:	f00b fc58 	bl	801caf0 <iprintf>
 8011240:	f06f 030f 	mvn.w	r3, #15
 8011244:	e060      	b.n	8011308 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801124a:	7b5b      	ldrb	r3, [r3, #13]
 801124c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011252:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	2200      	movs	r2, #0
 8011258:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011260:	2b00      	cmp	r3, #0
 8011262:	d00b      	beq.n	801127c <tcp_process_refused_data+0x58>
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	6918      	ldr	r0, [r3, #16]
 801126e:	2300      	movs	r3, #0
 8011270:	68ba      	ldr	r2, [r7, #8]
 8011272:	6879      	ldr	r1, [r7, #4]
 8011274:	47a0      	blx	r4
 8011276:	4603      	mov	r3, r0
 8011278:	73fb      	strb	r3, [r7, #15]
 801127a:	e007      	b.n	801128c <tcp_process_refused_data+0x68>
 801127c:	2300      	movs	r3, #0
 801127e:	68ba      	ldr	r2, [r7, #8]
 8011280:	6879      	ldr	r1, [r7, #4]
 8011282:	2000      	movs	r0, #0
 8011284:	f000 f8a4 	bl	80113d0 <tcp_recv_null>
 8011288:	4603      	mov	r3, r0
 801128a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801128c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011290:	2b00      	cmp	r3, #0
 8011292:	d12a      	bne.n	80112ea <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8011294:	7bbb      	ldrb	r3, [r7, #14]
 8011296:	f003 0320 	and.w	r3, r3, #32
 801129a:	2b00      	cmp	r3, #0
 801129c:	d033      	beq.n	8011306 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80112a2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80112a6:	d005      	beq.n	80112b4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80112ac:	3301      	adds	r3, #1
 80112ae:	b29a      	uxth	r2, r3
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d00b      	beq.n	80112d6 <tcp_process_refused_data+0xb2>
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	6918      	ldr	r0, [r3, #16]
 80112c8:	2300      	movs	r3, #0
 80112ca:	2200      	movs	r2, #0
 80112cc:	6879      	ldr	r1, [r7, #4]
 80112ce:	47a0      	blx	r4
 80112d0:	4603      	mov	r3, r0
 80112d2:	73fb      	strb	r3, [r7, #15]
 80112d4:	e001      	b.n	80112da <tcp_process_refused_data+0xb6>
 80112d6:	2300      	movs	r3, #0
 80112d8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80112da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80112de:	f113 0f0d 	cmn.w	r3, #13
 80112e2:	d110      	bne.n	8011306 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80112e4:	f06f 030c 	mvn.w	r3, #12
 80112e8:	e00e      	b.n	8011308 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80112ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80112ee:	f113 0f0d 	cmn.w	r3, #13
 80112f2:	d102      	bne.n	80112fa <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80112f4:	f06f 030c 	mvn.w	r3, #12
 80112f8:	e006      	b.n	8011308 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	68ba      	ldr	r2, [r7, #8]
 80112fe:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8011300:	f06f 0304 	mvn.w	r3, #4
 8011304:	e000      	b.n	8011308 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8011306:	2300      	movs	r3, #0
}
 8011308:	4618      	mov	r0, r3
 801130a:	3714      	adds	r7, #20
 801130c:	46bd      	mov	sp, r7
 801130e:	bd90      	pop	{r4, r7, pc}
 8011310:	080205d0 	.word	0x080205d0
 8011314:	08020ae0 	.word	0x08020ae0
 8011318:	08020614 	.word	0x08020614

0801131c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801131c:	b580      	push	{r7, lr}
 801131e:	b084      	sub	sp, #16
 8011320:	af00      	add	r7, sp, #0
 8011322:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8011324:	e007      	b.n	8011336 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801132c:	6878      	ldr	r0, [r7, #4]
 801132e:	f000 f80a 	bl	8011346 <tcp_seg_free>
    seg = next;
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	2b00      	cmp	r3, #0
 801133a:	d1f4      	bne.n	8011326 <tcp_segs_free+0xa>
  }
}
 801133c:	bf00      	nop
 801133e:	bf00      	nop
 8011340:	3710      	adds	r7, #16
 8011342:	46bd      	mov	sp, r7
 8011344:	bd80      	pop	{r7, pc}

08011346 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8011346:	b580      	push	{r7, lr}
 8011348:	b082      	sub	sp, #8
 801134a:	af00      	add	r7, sp, #0
 801134c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	2b00      	cmp	r3, #0
 8011352:	d00c      	beq.n	801136e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	685b      	ldr	r3, [r3, #4]
 8011358:	2b00      	cmp	r3, #0
 801135a:	d004      	beq.n	8011366 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	685b      	ldr	r3, [r3, #4]
 8011360:	4618      	mov	r0, r3
 8011362:	f7fe fb43 	bl	800f9ec <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8011366:	6879      	ldr	r1, [r7, #4]
 8011368:	2003      	movs	r0, #3
 801136a:	f7fd fc31 	bl	800ebd0 <memp_free>
  }
}
 801136e:	bf00      	nop
 8011370:	3708      	adds	r7, #8
 8011372:	46bd      	mov	sp, r7
 8011374:	bd80      	pop	{r7, pc}
	...

08011378 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8011378:	b580      	push	{r7, lr}
 801137a:	b084      	sub	sp, #16
 801137c:	af00      	add	r7, sp, #0
 801137e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	2b00      	cmp	r3, #0
 8011384:	d106      	bne.n	8011394 <tcp_seg_copy+0x1c>
 8011386:	4b0f      	ldr	r3, [pc, #60]	; (80113c4 <tcp_seg_copy+0x4c>)
 8011388:	f240 6282 	movw	r2, #1666	; 0x682
 801138c:	490e      	ldr	r1, [pc, #56]	; (80113c8 <tcp_seg_copy+0x50>)
 801138e:	480f      	ldr	r0, [pc, #60]	; (80113cc <tcp_seg_copy+0x54>)
 8011390:	f00b fbae 	bl	801caf0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8011394:	2003      	movs	r0, #3
 8011396:	f7fd fbc9 	bl	800eb2c <memp_malloc>
 801139a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d101      	bne.n	80113a6 <tcp_seg_copy+0x2e>
    return NULL;
 80113a2:	2300      	movs	r3, #0
 80113a4:	e00a      	b.n	80113bc <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80113a6:	2210      	movs	r2, #16
 80113a8:	6879      	ldr	r1, [r7, #4]
 80113aa:	68f8      	ldr	r0, [r7, #12]
 80113ac:	f00a fd02 	bl	801bdb4 <memcpy>
  pbuf_ref(cseg->p);
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	685b      	ldr	r3, [r3, #4]
 80113b4:	4618      	mov	r0, r3
 80113b6:	f7fe fbbf 	bl	800fb38 <pbuf_ref>
  return cseg;
 80113ba:	68fb      	ldr	r3, [r7, #12]
}
 80113bc:	4618      	mov	r0, r3
 80113be:	3710      	adds	r7, #16
 80113c0:	46bd      	mov	sp, r7
 80113c2:	bd80      	pop	{r7, pc}
 80113c4:	080205d0 	.word	0x080205d0
 80113c8:	08020b24 	.word	0x08020b24
 80113cc:	08020614 	.word	0x08020614

080113d0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80113d0:	b580      	push	{r7, lr}
 80113d2:	b084      	sub	sp, #16
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	60f8      	str	r0, [r7, #12]
 80113d8:	60b9      	str	r1, [r7, #8]
 80113da:	607a      	str	r2, [r7, #4]
 80113dc:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80113de:	68bb      	ldr	r3, [r7, #8]
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d109      	bne.n	80113f8 <tcp_recv_null+0x28>
 80113e4:	4b12      	ldr	r3, [pc, #72]	; (8011430 <tcp_recv_null+0x60>)
 80113e6:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80113ea:	4912      	ldr	r1, [pc, #72]	; (8011434 <tcp_recv_null+0x64>)
 80113ec:	4812      	ldr	r0, [pc, #72]	; (8011438 <tcp_recv_null+0x68>)
 80113ee:	f00b fb7f 	bl	801caf0 <iprintf>
 80113f2:	f06f 030f 	mvn.w	r3, #15
 80113f6:	e016      	b.n	8011426 <tcp_recv_null+0x56>

  if (p != NULL) {
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d009      	beq.n	8011412 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	891b      	ldrh	r3, [r3, #8]
 8011402:	4619      	mov	r1, r3
 8011404:	68b8      	ldr	r0, [r7, #8]
 8011406:	f7ff fad3 	bl	80109b0 <tcp_recved>
    pbuf_free(p);
 801140a:	6878      	ldr	r0, [r7, #4]
 801140c:	f7fe faee 	bl	800f9ec <pbuf_free>
 8011410:	e008      	b.n	8011424 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8011412:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011416:	2b00      	cmp	r3, #0
 8011418:	d104      	bne.n	8011424 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801141a:	68b8      	ldr	r0, [r7, #8]
 801141c:	f7fe ffa0 	bl	8010360 <tcp_close>
 8011420:	4603      	mov	r3, r0
 8011422:	e000      	b.n	8011426 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8011424:	2300      	movs	r3, #0
}
 8011426:	4618      	mov	r0, r3
 8011428:	3710      	adds	r7, #16
 801142a:	46bd      	mov	sp, r7
 801142c:	bd80      	pop	{r7, pc}
 801142e:	bf00      	nop
 8011430:	080205d0 	.word	0x080205d0
 8011434:	08020b40 	.word	0x08020b40
 8011438:	08020614 	.word	0x08020614

0801143c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801143c:	b580      	push	{r7, lr}
 801143e:	b086      	sub	sp, #24
 8011440:	af00      	add	r7, sp, #0
 8011442:	4603      	mov	r3, r0
 8011444:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8011446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801144a:	2b00      	cmp	r3, #0
 801144c:	db01      	blt.n	8011452 <tcp_kill_prio+0x16>
 801144e:	79fb      	ldrb	r3, [r7, #7]
 8011450:	e000      	b.n	8011454 <tcp_kill_prio+0x18>
 8011452:	237f      	movs	r3, #127	; 0x7f
 8011454:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8011456:	7afb      	ldrb	r3, [r7, #11]
 8011458:	2b00      	cmp	r3, #0
 801145a:	d034      	beq.n	80114c6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 801145c:	7afb      	ldrb	r3, [r7, #11]
 801145e:	3b01      	subs	r3, #1
 8011460:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8011462:	2300      	movs	r3, #0
 8011464:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8011466:	2300      	movs	r3, #0
 8011468:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801146a:	4b19      	ldr	r3, [pc, #100]	; (80114d0 <tcp_kill_prio+0x94>)
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	617b      	str	r3, [r7, #20]
 8011470:	e01f      	b.n	80114b2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8011472:	697b      	ldr	r3, [r7, #20]
 8011474:	7d5b      	ldrb	r3, [r3, #21]
 8011476:	7afa      	ldrb	r2, [r7, #11]
 8011478:	429a      	cmp	r2, r3
 801147a:	d80c      	bhi.n	8011496 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801147c:	697b      	ldr	r3, [r7, #20]
 801147e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8011480:	7afa      	ldrb	r2, [r7, #11]
 8011482:	429a      	cmp	r2, r3
 8011484:	d112      	bne.n	80114ac <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8011486:	4b13      	ldr	r3, [pc, #76]	; (80114d4 <tcp_kill_prio+0x98>)
 8011488:	681a      	ldr	r2, [r3, #0]
 801148a:	697b      	ldr	r3, [r7, #20]
 801148c:	6a1b      	ldr	r3, [r3, #32]
 801148e:	1ad3      	subs	r3, r2, r3
 8011490:	68fa      	ldr	r2, [r7, #12]
 8011492:	429a      	cmp	r2, r3
 8011494:	d80a      	bhi.n	80114ac <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8011496:	4b0f      	ldr	r3, [pc, #60]	; (80114d4 <tcp_kill_prio+0x98>)
 8011498:	681a      	ldr	r2, [r3, #0]
 801149a:	697b      	ldr	r3, [r7, #20]
 801149c:	6a1b      	ldr	r3, [r3, #32]
 801149e:	1ad3      	subs	r3, r2, r3
 80114a0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80114a2:	697b      	ldr	r3, [r7, #20]
 80114a4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80114a6:	697b      	ldr	r3, [r7, #20]
 80114a8:	7d5b      	ldrb	r3, [r3, #21]
 80114aa:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80114ac:	697b      	ldr	r3, [r7, #20]
 80114ae:	68db      	ldr	r3, [r3, #12]
 80114b0:	617b      	str	r3, [r7, #20]
 80114b2:	697b      	ldr	r3, [r7, #20]
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d1dc      	bne.n	8011472 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80114b8:	693b      	ldr	r3, [r7, #16]
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d004      	beq.n	80114c8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80114be:	6938      	ldr	r0, [r7, #16]
 80114c0:	f7ff f894 	bl	80105ec <tcp_abort>
 80114c4:	e000      	b.n	80114c8 <tcp_kill_prio+0x8c>
    return;
 80114c6:	bf00      	nop
  }
}
 80114c8:	3718      	adds	r7, #24
 80114ca:	46bd      	mov	sp, r7
 80114cc:	bd80      	pop	{r7, pc}
 80114ce:	bf00      	nop
 80114d0:	20008318 	.word	0x20008318
 80114d4:	2000831c 	.word	0x2000831c

080114d8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80114d8:	b580      	push	{r7, lr}
 80114da:	b086      	sub	sp, #24
 80114dc:	af00      	add	r7, sp, #0
 80114de:	4603      	mov	r3, r0
 80114e0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80114e2:	79fb      	ldrb	r3, [r7, #7]
 80114e4:	2b08      	cmp	r3, #8
 80114e6:	d009      	beq.n	80114fc <tcp_kill_state+0x24>
 80114e8:	79fb      	ldrb	r3, [r7, #7]
 80114ea:	2b09      	cmp	r3, #9
 80114ec:	d006      	beq.n	80114fc <tcp_kill_state+0x24>
 80114ee:	4b1a      	ldr	r3, [pc, #104]	; (8011558 <tcp_kill_state+0x80>)
 80114f0:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80114f4:	4919      	ldr	r1, [pc, #100]	; (801155c <tcp_kill_state+0x84>)
 80114f6:	481a      	ldr	r0, [pc, #104]	; (8011560 <tcp_kill_state+0x88>)
 80114f8:	f00b fafa 	bl	801caf0 <iprintf>

  inactivity = 0;
 80114fc:	2300      	movs	r3, #0
 80114fe:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8011500:	2300      	movs	r3, #0
 8011502:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011504:	4b17      	ldr	r3, [pc, #92]	; (8011564 <tcp_kill_state+0x8c>)
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	617b      	str	r3, [r7, #20]
 801150a:	e017      	b.n	801153c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801150c:	697b      	ldr	r3, [r7, #20]
 801150e:	7d1b      	ldrb	r3, [r3, #20]
 8011510:	79fa      	ldrb	r2, [r7, #7]
 8011512:	429a      	cmp	r2, r3
 8011514:	d10f      	bne.n	8011536 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011516:	4b14      	ldr	r3, [pc, #80]	; (8011568 <tcp_kill_state+0x90>)
 8011518:	681a      	ldr	r2, [r3, #0]
 801151a:	697b      	ldr	r3, [r7, #20]
 801151c:	6a1b      	ldr	r3, [r3, #32]
 801151e:	1ad3      	subs	r3, r2, r3
 8011520:	68fa      	ldr	r2, [r7, #12]
 8011522:	429a      	cmp	r2, r3
 8011524:	d807      	bhi.n	8011536 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8011526:	4b10      	ldr	r3, [pc, #64]	; (8011568 <tcp_kill_state+0x90>)
 8011528:	681a      	ldr	r2, [r3, #0]
 801152a:	697b      	ldr	r3, [r7, #20]
 801152c:	6a1b      	ldr	r3, [r3, #32]
 801152e:	1ad3      	subs	r3, r2, r3
 8011530:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8011532:	697b      	ldr	r3, [r7, #20]
 8011534:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011536:	697b      	ldr	r3, [r7, #20]
 8011538:	68db      	ldr	r3, [r3, #12]
 801153a:	617b      	str	r3, [r7, #20]
 801153c:	697b      	ldr	r3, [r7, #20]
 801153e:	2b00      	cmp	r3, #0
 8011540:	d1e4      	bne.n	801150c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8011542:	693b      	ldr	r3, [r7, #16]
 8011544:	2b00      	cmp	r3, #0
 8011546:	d003      	beq.n	8011550 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8011548:	2100      	movs	r1, #0
 801154a:	6938      	ldr	r0, [r7, #16]
 801154c:	f7fe ff90 	bl	8010470 <tcp_abandon>
  }
}
 8011550:	bf00      	nop
 8011552:	3718      	adds	r7, #24
 8011554:	46bd      	mov	sp, r7
 8011556:	bd80      	pop	{r7, pc}
 8011558:	080205d0 	.word	0x080205d0
 801155c:	08020b5c 	.word	0x08020b5c
 8011560:	08020614 	.word	0x08020614
 8011564:	20008318 	.word	0x20008318
 8011568:	2000831c 	.word	0x2000831c

0801156c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801156c:	b580      	push	{r7, lr}
 801156e:	b084      	sub	sp, #16
 8011570:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8011572:	2300      	movs	r3, #0
 8011574:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8011576:	2300      	movs	r3, #0
 8011578:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801157a:	4b12      	ldr	r3, [pc, #72]	; (80115c4 <tcp_kill_timewait+0x58>)
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	60fb      	str	r3, [r7, #12]
 8011580:	e012      	b.n	80115a8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011582:	4b11      	ldr	r3, [pc, #68]	; (80115c8 <tcp_kill_timewait+0x5c>)
 8011584:	681a      	ldr	r2, [r3, #0]
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	6a1b      	ldr	r3, [r3, #32]
 801158a:	1ad3      	subs	r3, r2, r3
 801158c:	687a      	ldr	r2, [r7, #4]
 801158e:	429a      	cmp	r2, r3
 8011590:	d807      	bhi.n	80115a2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8011592:	4b0d      	ldr	r3, [pc, #52]	; (80115c8 <tcp_kill_timewait+0x5c>)
 8011594:	681a      	ldr	r2, [r3, #0]
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	6a1b      	ldr	r3, [r3, #32]
 801159a:	1ad3      	subs	r3, r2, r3
 801159c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80115a2:	68fb      	ldr	r3, [r7, #12]
 80115a4:	68db      	ldr	r3, [r3, #12]
 80115a6:	60fb      	str	r3, [r7, #12]
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d1e9      	bne.n	8011582 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80115ae:	68bb      	ldr	r3, [r7, #8]
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d002      	beq.n	80115ba <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80115b4:	68b8      	ldr	r0, [r7, #8]
 80115b6:	f7ff f819 	bl	80105ec <tcp_abort>
  }
}
 80115ba:	bf00      	nop
 80115bc:	3710      	adds	r7, #16
 80115be:	46bd      	mov	sp, r7
 80115c0:	bd80      	pop	{r7, pc}
 80115c2:	bf00      	nop
 80115c4:	20008328 	.word	0x20008328
 80115c8:	2000831c 	.word	0x2000831c

080115cc <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80115cc:	b580      	push	{r7, lr}
 80115ce:	b082      	sub	sp, #8
 80115d0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80115d2:	4b10      	ldr	r3, [pc, #64]	; (8011614 <tcp_handle_closepend+0x48>)
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80115d8:	e014      	b.n	8011604 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	68db      	ldr	r3, [r3, #12]
 80115de:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	8b5b      	ldrh	r3, [r3, #26]
 80115e4:	f003 0308 	and.w	r3, r3, #8
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d009      	beq.n	8011600 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	8b5b      	ldrh	r3, [r3, #26]
 80115f0:	f023 0308 	bic.w	r3, r3, #8
 80115f4:	b29a      	uxth	r2, r3
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80115fa:	6878      	ldr	r0, [r7, #4]
 80115fc:	f7fe fe46 	bl	801028c <tcp_close_shutdown_fin>
    }
    pcb = next;
 8011600:	683b      	ldr	r3, [r7, #0]
 8011602:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	2b00      	cmp	r3, #0
 8011608:	d1e7      	bne.n	80115da <tcp_handle_closepend+0xe>
  }
}
 801160a:	bf00      	nop
 801160c:	bf00      	nop
 801160e:	3708      	adds	r7, #8
 8011610:	46bd      	mov	sp, r7
 8011612:	bd80      	pop	{r7, pc}
 8011614:	20008318 	.word	0x20008318

08011618 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8011618:	b580      	push	{r7, lr}
 801161a:	b084      	sub	sp, #16
 801161c:	af00      	add	r7, sp, #0
 801161e:	4603      	mov	r3, r0
 8011620:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011622:	2001      	movs	r0, #1
 8011624:	f7fd fa82 	bl	800eb2c <memp_malloc>
 8011628:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	2b00      	cmp	r3, #0
 801162e:	d126      	bne.n	801167e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8011630:	f7ff ffcc 	bl	80115cc <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8011634:	f7ff ff9a 	bl	801156c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011638:	2001      	movs	r0, #1
 801163a:	f7fd fa77 	bl	800eb2c <memp_malloc>
 801163e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	2b00      	cmp	r3, #0
 8011644:	d11b      	bne.n	801167e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8011646:	2009      	movs	r0, #9
 8011648:	f7ff ff46 	bl	80114d8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801164c:	2001      	movs	r0, #1
 801164e:	f7fd fa6d 	bl	800eb2c <memp_malloc>
 8011652:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	2b00      	cmp	r3, #0
 8011658:	d111      	bne.n	801167e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801165a:	2008      	movs	r0, #8
 801165c:	f7ff ff3c 	bl	80114d8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011660:	2001      	movs	r0, #1
 8011662:	f7fd fa63 	bl	800eb2c <memp_malloc>
 8011666:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	2b00      	cmp	r3, #0
 801166c:	d107      	bne.n	801167e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801166e:	79fb      	ldrb	r3, [r7, #7]
 8011670:	4618      	mov	r0, r3
 8011672:	f7ff fee3 	bl	801143c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011676:	2001      	movs	r0, #1
 8011678:	f7fd fa58 	bl	800eb2c <memp_malloc>
 801167c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	2b00      	cmp	r3, #0
 8011682:	d03f      	beq.n	8011704 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8011684:	229c      	movs	r2, #156	; 0x9c
 8011686:	2100      	movs	r1, #0
 8011688:	68f8      	ldr	r0, [r7, #12]
 801168a:	f00a fbbb 	bl	801be04 <memset>
    pcb->prio = prio;
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	79fa      	ldrb	r2, [r7, #7]
 8011692:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801169a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80116a4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	22ff      	movs	r2, #255	; 0xff
 80116b2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	f44f 7206 	mov.w	r2, #536	; 0x218
 80116ba:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	2206      	movs	r2, #6
 80116c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	2206      	movs	r2, #6
 80116c8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80116d0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	2201      	movs	r2, #1
 80116d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80116da:	4b0d      	ldr	r3, [pc, #52]	; (8011710 <tcp_alloc+0xf8>)
 80116dc:	681a      	ldr	r2, [r3, #0]
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80116e2:	4b0c      	ldr	r3, [pc, #48]	; (8011714 <tcp_alloc+0xfc>)
 80116e4:	781a      	ldrb	r2, [r3, #0]
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80116f0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	4a08      	ldr	r2, [pc, #32]	; (8011718 <tcp_alloc+0x100>)
 80116f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	4a07      	ldr	r2, [pc, #28]	; (801171c <tcp_alloc+0x104>)
 8011700:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8011704:	68fb      	ldr	r3, [r7, #12]
}
 8011706:	4618      	mov	r0, r3
 8011708:	3710      	adds	r7, #16
 801170a:	46bd      	mov	sp, r7
 801170c:	bd80      	pop	{r7, pc}
 801170e:	bf00      	nop
 8011710:	2000831c 	.word	0x2000831c
 8011714:	2000148e 	.word	0x2000148e
 8011718:	080113d1 	.word	0x080113d1
 801171c:	006ddd00 	.word	0x006ddd00

08011720 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8011720:	b580      	push	{r7, lr}
 8011722:	b084      	sub	sp, #16
 8011724:	af00      	add	r7, sp, #0
 8011726:	4603      	mov	r3, r0
 8011728:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801172a:	2040      	movs	r0, #64	; 0x40
 801172c:	f7ff ff74 	bl	8011618 <tcp_alloc>
 8011730:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8011732:	68fb      	ldr	r3, [r7, #12]
}
 8011734:	4618      	mov	r0, r3
 8011736:	3710      	adds	r7, #16
 8011738:	46bd      	mov	sp, r7
 801173a:	bd80      	pop	{r7, pc}

0801173c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 801173c:	b480      	push	{r7}
 801173e:	b083      	sub	sp, #12
 8011740:	af00      	add	r7, sp, #0
 8011742:	6078      	str	r0, [r7, #4]
 8011744:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	2b00      	cmp	r3, #0
 801174a:	d002      	beq.n	8011752 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	683a      	ldr	r2, [r7, #0]
 8011750:	611a      	str	r2, [r3, #16]
  }
}
 8011752:	bf00      	nop
 8011754:	370c      	adds	r7, #12
 8011756:	46bd      	mov	sp, r7
 8011758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801175c:	4770      	bx	lr
	...

08011760 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8011760:	b580      	push	{r7, lr}
 8011762:	b082      	sub	sp, #8
 8011764:	af00      	add	r7, sp, #0
 8011766:	6078      	str	r0, [r7, #4]
 8011768:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	2b00      	cmp	r3, #0
 801176e:	d00e      	beq.n	801178e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	7d1b      	ldrb	r3, [r3, #20]
 8011774:	2b01      	cmp	r3, #1
 8011776:	d106      	bne.n	8011786 <tcp_recv+0x26>
 8011778:	4b07      	ldr	r3, [pc, #28]	; (8011798 <tcp_recv+0x38>)
 801177a:	f240 72df 	movw	r2, #2015	; 0x7df
 801177e:	4907      	ldr	r1, [pc, #28]	; (801179c <tcp_recv+0x3c>)
 8011780:	4807      	ldr	r0, [pc, #28]	; (80117a0 <tcp_recv+0x40>)
 8011782:	f00b f9b5 	bl	801caf0 <iprintf>
    pcb->recv = recv;
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	683a      	ldr	r2, [r7, #0]
 801178a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 801178e:	bf00      	nop
 8011790:	3708      	adds	r7, #8
 8011792:	46bd      	mov	sp, r7
 8011794:	bd80      	pop	{r7, pc}
 8011796:	bf00      	nop
 8011798:	080205d0 	.word	0x080205d0
 801179c:	08020b6c 	.word	0x08020b6c
 80117a0:	08020614 	.word	0x08020614

080117a4 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80117a4:	b580      	push	{r7, lr}
 80117a6:	b082      	sub	sp, #8
 80117a8:	af00      	add	r7, sp, #0
 80117aa:	6078      	str	r0, [r7, #4]
 80117ac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d00e      	beq.n	80117d2 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	7d1b      	ldrb	r3, [r3, #20]
 80117b8:	2b01      	cmp	r3, #1
 80117ba:	d106      	bne.n	80117ca <tcp_sent+0x26>
 80117bc:	4b07      	ldr	r3, [pc, #28]	; (80117dc <tcp_sent+0x38>)
 80117be:	f240 72f3 	movw	r2, #2035	; 0x7f3
 80117c2:	4907      	ldr	r1, [pc, #28]	; (80117e0 <tcp_sent+0x3c>)
 80117c4:	4807      	ldr	r0, [pc, #28]	; (80117e4 <tcp_sent+0x40>)
 80117c6:	f00b f993 	bl	801caf0 <iprintf>
    pcb->sent = sent;
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	683a      	ldr	r2, [r7, #0]
 80117ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 80117d2:	bf00      	nop
 80117d4:	3708      	adds	r7, #8
 80117d6:	46bd      	mov	sp, r7
 80117d8:	bd80      	pop	{r7, pc}
 80117da:	bf00      	nop
 80117dc:	080205d0 	.word	0x080205d0
 80117e0:	08020b94 	.word	0x08020b94
 80117e4:	08020614 	.word	0x08020614

080117e8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80117e8:	b580      	push	{r7, lr}
 80117ea:	b082      	sub	sp, #8
 80117ec:	af00      	add	r7, sp, #0
 80117ee:	6078      	str	r0, [r7, #4]
 80117f0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d00e      	beq.n	8011816 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	7d1b      	ldrb	r3, [r3, #20]
 80117fc:	2b01      	cmp	r3, #1
 80117fe:	d106      	bne.n	801180e <tcp_err+0x26>
 8011800:	4b07      	ldr	r3, [pc, #28]	; (8011820 <tcp_err+0x38>)
 8011802:	f640 020d 	movw	r2, #2061	; 0x80d
 8011806:	4907      	ldr	r1, [pc, #28]	; (8011824 <tcp_err+0x3c>)
 8011808:	4807      	ldr	r0, [pc, #28]	; (8011828 <tcp_err+0x40>)
 801180a:	f00b f971 	bl	801caf0 <iprintf>
    pcb->errf = err;
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	683a      	ldr	r2, [r7, #0]
 8011812:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8011816:	bf00      	nop
 8011818:	3708      	adds	r7, #8
 801181a:	46bd      	mov	sp, r7
 801181c:	bd80      	pop	{r7, pc}
 801181e:	bf00      	nop
 8011820:	080205d0 	.word	0x080205d0
 8011824:	08020bbc 	.word	0x08020bbc
 8011828:	08020614 	.word	0x08020614

0801182c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 801182c:	b480      	push	{r7}
 801182e:	b085      	sub	sp, #20
 8011830:	af00      	add	r7, sp, #0
 8011832:	6078      	str	r0, [r7, #4]
 8011834:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	2b00      	cmp	r3, #0
 801183a:	d008      	beq.n	801184e <tcp_accept+0x22>
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	7d1b      	ldrb	r3, [r3, #20]
 8011840:	2b01      	cmp	r3, #1
 8011842:	d104      	bne.n	801184e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	683a      	ldr	r2, [r7, #0]
 801184c:	619a      	str	r2, [r3, #24]
  }
}
 801184e:	bf00      	nop
 8011850:	3714      	adds	r7, #20
 8011852:	46bd      	mov	sp, r7
 8011854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011858:	4770      	bx	lr
	...

0801185c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801185c:	b580      	push	{r7, lr}
 801185e:	b084      	sub	sp, #16
 8011860:	af00      	add	r7, sp, #0
 8011862:	60f8      	str	r0, [r7, #12]
 8011864:	60b9      	str	r1, [r7, #8]
 8011866:	4613      	mov	r3, r2
 8011868:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	2b00      	cmp	r3, #0
 801186e:	d107      	bne.n	8011880 <tcp_poll+0x24>
 8011870:	4b0e      	ldr	r3, [pc, #56]	; (80118ac <tcp_poll+0x50>)
 8011872:	f640 023d 	movw	r2, #2109	; 0x83d
 8011876:	490e      	ldr	r1, [pc, #56]	; (80118b0 <tcp_poll+0x54>)
 8011878:	480e      	ldr	r0, [pc, #56]	; (80118b4 <tcp_poll+0x58>)
 801187a:	f00b f939 	bl	801caf0 <iprintf>
 801187e:	e011      	b.n	80118a4 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	7d1b      	ldrb	r3, [r3, #20]
 8011884:	2b01      	cmp	r3, #1
 8011886:	d106      	bne.n	8011896 <tcp_poll+0x3a>
 8011888:	4b08      	ldr	r3, [pc, #32]	; (80118ac <tcp_poll+0x50>)
 801188a:	f640 023e 	movw	r2, #2110	; 0x83e
 801188e:	490a      	ldr	r1, [pc, #40]	; (80118b8 <tcp_poll+0x5c>)
 8011890:	4808      	ldr	r0, [pc, #32]	; (80118b4 <tcp_poll+0x58>)
 8011892:	f00b f92d 	bl	801caf0 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	68ba      	ldr	r2, [r7, #8]
 801189a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	79fa      	ldrb	r2, [r7, #7]
 80118a2:	775a      	strb	r2, [r3, #29]
}
 80118a4:	3710      	adds	r7, #16
 80118a6:	46bd      	mov	sp, r7
 80118a8:	bd80      	pop	{r7, pc}
 80118aa:	bf00      	nop
 80118ac:	080205d0 	.word	0x080205d0
 80118b0:	08020be4 	.word	0x08020be4
 80118b4:	08020614 	.word	0x08020614
 80118b8:	08020bfc 	.word	0x08020bfc

080118bc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80118bc:	b580      	push	{r7, lr}
 80118be:	b082      	sub	sp, #8
 80118c0:	af00      	add	r7, sp, #0
 80118c2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d107      	bne.n	80118da <tcp_pcb_purge+0x1e>
 80118ca:	4b21      	ldr	r3, [pc, #132]	; (8011950 <tcp_pcb_purge+0x94>)
 80118cc:	f640 0251 	movw	r2, #2129	; 0x851
 80118d0:	4920      	ldr	r1, [pc, #128]	; (8011954 <tcp_pcb_purge+0x98>)
 80118d2:	4821      	ldr	r0, [pc, #132]	; (8011958 <tcp_pcb_purge+0x9c>)
 80118d4:	f00b f90c 	bl	801caf0 <iprintf>
 80118d8:	e037      	b.n	801194a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	7d1b      	ldrb	r3, [r3, #20]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d033      	beq.n	801194a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80118e6:	2b0a      	cmp	r3, #10
 80118e8:	d02f      	beq.n	801194a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80118ee:	2b01      	cmp	r3, #1
 80118f0:	d02b      	beq.n	801194a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d007      	beq.n	801190a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80118fe:	4618      	mov	r0, r3
 8011900:	f7fe f874 	bl	800f9ec <pbuf_free>
      pcb->refused_data = NULL;
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	2200      	movs	r2, #0
 8011908:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801190e:	2b00      	cmp	r3, #0
 8011910:	d002      	beq.n	8011918 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8011912:	6878      	ldr	r0, [r7, #4]
 8011914:	f000 f986 	bl	8011c24 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801191e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011924:	4618      	mov	r0, r3
 8011926:	f7ff fcf9 	bl	801131c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801192e:	4618      	mov	r0, r3
 8011930:	f7ff fcf4 	bl	801131c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	2200      	movs	r2, #0
 8011938:	66da      	str	r2, [r3, #108]	; 0x6c
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	2200      	movs	r2, #0
 8011946:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801194a:	3708      	adds	r7, #8
 801194c:	46bd      	mov	sp, r7
 801194e:	bd80      	pop	{r7, pc}
 8011950:	080205d0 	.word	0x080205d0
 8011954:	08020c1c 	.word	0x08020c1c
 8011958:	08020614 	.word	0x08020614

0801195c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801195c:	b580      	push	{r7, lr}
 801195e:	b084      	sub	sp, #16
 8011960:	af00      	add	r7, sp, #0
 8011962:	6078      	str	r0, [r7, #4]
 8011964:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8011966:	683b      	ldr	r3, [r7, #0]
 8011968:	2b00      	cmp	r3, #0
 801196a:	d106      	bne.n	801197a <tcp_pcb_remove+0x1e>
 801196c:	4b3e      	ldr	r3, [pc, #248]	; (8011a68 <tcp_pcb_remove+0x10c>)
 801196e:	f640 0283 	movw	r2, #2179	; 0x883
 8011972:	493e      	ldr	r1, [pc, #248]	; (8011a6c <tcp_pcb_remove+0x110>)
 8011974:	483e      	ldr	r0, [pc, #248]	; (8011a70 <tcp_pcb_remove+0x114>)
 8011976:	f00b f8bb 	bl	801caf0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	2b00      	cmp	r3, #0
 801197e:	d106      	bne.n	801198e <tcp_pcb_remove+0x32>
 8011980:	4b39      	ldr	r3, [pc, #228]	; (8011a68 <tcp_pcb_remove+0x10c>)
 8011982:	f640 0284 	movw	r2, #2180	; 0x884
 8011986:	493b      	ldr	r1, [pc, #236]	; (8011a74 <tcp_pcb_remove+0x118>)
 8011988:	4839      	ldr	r0, [pc, #228]	; (8011a70 <tcp_pcb_remove+0x114>)
 801198a:	f00b f8b1 	bl	801caf0 <iprintf>

  TCP_RMV(pcblist, pcb);
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	683a      	ldr	r2, [r7, #0]
 8011994:	429a      	cmp	r2, r3
 8011996:	d105      	bne.n	80119a4 <tcp_pcb_remove+0x48>
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	68da      	ldr	r2, [r3, #12]
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	601a      	str	r2, [r3, #0]
 80119a2:	e013      	b.n	80119cc <tcp_pcb_remove+0x70>
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	60fb      	str	r3, [r7, #12]
 80119aa:	e00c      	b.n	80119c6 <tcp_pcb_remove+0x6a>
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	68db      	ldr	r3, [r3, #12]
 80119b0:	683a      	ldr	r2, [r7, #0]
 80119b2:	429a      	cmp	r2, r3
 80119b4:	d104      	bne.n	80119c0 <tcp_pcb_remove+0x64>
 80119b6:	683b      	ldr	r3, [r7, #0]
 80119b8:	68da      	ldr	r2, [r3, #12]
 80119ba:	68fb      	ldr	r3, [r7, #12]
 80119bc:	60da      	str	r2, [r3, #12]
 80119be:	e005      	b.n	80119cc <tcp_pcb_remove+0x70>
 80119c0:	68fb      	ldr	r3, [r7, #12]
 80119c2:	68db      	ldr	r3, [r3, #12]
 80119c4:	60fb      	str	r3, [r7, #12]
 80119c6:	68fb      	ldr	r3, [r7, #12]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d1ef      	bne.n	80119ac <tcp_pcb_remove+0x50>
 80119cc:	683b      	ldr	r3, [r7, #0]
 80119ce:	2200      	movs	r2, #0
 80119d0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80119d2:	6838      	ldr	r0, [r7, #0]
 80119d4:	f7ff ff72 	bl	80118bc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80119d8:	683b      	ldr	r3, [r7, #0]
 80119da:	7d1b      	ldrb	r3, [r3, #20]
 80119dc:	2b0a      	cmp	r3, #10
 80119de:	d013      	beq.n	8011a08 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80119e0:	683b      	ldr	r3, [r7, #0]
 80119e2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80119e4:	2b01      	cmp	r3, #1
 80119e6:	d00f      	beq.n	8011a08 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80119e8:	683b      	ldr	r3, [r7, #0]
 80119ea:	8b5b      	ldrh	r3, [r3, #26]
 80119ec:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d009      	beq.n	8011a08 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80119f4:	683b      	ldr	r3, [r7, #0]
 80119f6:	8b5b      	ldrh	r3, [r3, #26]
 80119f8:	f043 0302 	orr.w	r3, r3, #2
 80119fc:	b29a      	uxth	r2, r3
 80119fe:	683b      	ldr	r3, [r7, #0]
 8011a00:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011a02:	6838      	ldr	r0, [r7, #0]
 8011a04:	f003 fbc2 	bl	801518c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8011a08:	683b      	ldr	r3, [r7, #0]
 8011a0a:	7d1b      	ldrb	r3, [r3, #20]
 8011a0c:	2b01      	cmp	r3, #1
 8011a0e:	d020      	beq.n	8011a52 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8011a10:	683b      	ldr	r3, [r7, #0]
 8011a12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d006      	beq.n	8011a26 <tcp_pcb_remove+0xca>
 8011a18:	4b13      	ldr	r3, [pc, #76]	; (8011a68 <tcp_pcb_remove+0x10c>)
 8011a1a:	f640 0293 	movw	r2, #2195	; 0x893
 8011a1e:	4916      	ldr	r1, [pc, #88]	; (8011a78 <tcp_pcb_remove+0x11c>)
 8011a20:	4813      	ldr	r0, [pc, #76]	; (8011a70 <tcp_pcb_remove+0x114>)
 8011a22:	f00b f865 	bl	801caf0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8011a26:	683b      	ldr	r3, [r7, #0]
 8011a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d006      	beq.n	8011a3c <tcp_pcb_remove+0xe0>
 8011a2e:	4b0e      	ldr	r3, [pc, #56]	; (8011a68 <tcp_pcb_remove+0x10c>)
 8011a30:	f640 0294 	movw	r2, #2196	; 0x894
 8011a34:	4911      	ldr	r1, [pc, #68]	; (8011a7c <tcp_pcb_remove+0x120>)
 8011a36:	480e      	ldr	r0, [pc, #56]	; (8011a70 <tcp_pcb_remove+0x114>)
 8011a38:	f00b f85a 	bl	801caf0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8011a3c:	683b      	ldr	r3, [r7, #0]
 8011a3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d006      	beq.n	8011a52 <tcp_pcb_remove+0xf6>
 8011a44:	4b08      	ldr	r3, [pc, #32]	; (8011a68 <tcp_pcb_remove+0x10c>)
 8011a46:	f640 0296 	movw	r2, #2198	; 0x896
 8011a4a:	490d      	ldr	r1, [pc, #52]	; (8011a80 <tcp_pcb_remove+0x124>)
 8011a4c:	4808      	ldr	r0, [pc, #32]	; (8011a70 <tcp_pcb_remove+0x114>)
 8011a4e:	f00b f84f 	bl	801caf0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8011a52:	683b      	ldr	r3, [r7, #0]
 8011a54:	2200      	movs	r2, #0
 8011a56:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8011a58:	683b      	ldr	r3, [r7, #0]
 8011a5a:	2200      	movs	r2, #0
 8011a5c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8011a5e:	bf00      	nop
 8011a60:	3710      	adds	r7, #16
 8011a62:	46bd      	mov	sp, r7
 8011a64:	bd80      	pop	{r7, pc}
 8011a66:	bf00      	nop
 8011a68:	080205d0 	.word	0x080205d0
 8011a6c:	08020c38 	.word	0x08020c38
 8011a70:	08020614 	.word	0x08020614
 8011a74:	08020c54 	.word	0x08020c54
 8011a78:	08020c74 	.word	0x08020c74
 8011a7c:	08020c8c 	.word	0x08020c8c
 8011a80:	08020ca8 	.word	0x08020ca8

08011a84 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8011a84:	b580      	push	{r7, lr}
 8011a86:	b082      	sub	sp, #8
 8011a88:	af00      	add	r7, sp, #0
 8011a8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d106      	bne.n	8011aa0 <tcp_next_iss+0x1c>
 8011a92:	4b0a      	ldr	r3, [pc, #40]	; (8011abc <tcp_next_iss+0x38>)
 8011a94:	f640 02af 	movw	r2, #2223	; 0x8af
 8011a98:	4909      	ldr	r1, [pc, #36]	; (8011ac0 <tcp_next_iss+0x3c>)
 8011a9a:	480a      	ldr	r0, [pc, #40]	; (8011ac4 <tcp_next_iss+0x40>)
 8011a9c:	f00b f828 	bl	801caf0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8011aa0:	4b09      	ldr	r3, [pc, #36]	; (8011ac8 <tcp_next_iss+0x44>)
 8011aa2:	681a      	ldr	r2, [r3, #0]
 8011aa4:	4b09      	ldr	r3, [pc, #36]	; (8011acc <tcp_next_iss+0x48>)
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	4413      	add	r3, r2
 8011aaa:	4a07      	ldr	r2, [pc, #28]	; (8011ac8 <tcp_next_iss+0x44>)
 8011aac:	6013      	str	r3, [r2, #0]
  return iss;
 8011aae:	4b06      	ldr	r3, [pc, #24]	; (8011ac8 <tcp_next_iss+0x44>)
 8011ab0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8011ab2:	4618      	mov	r0, r3
 8011ab4:	3708      	adds	r7, #8
 8011ab6:	46bd      	mov	sp, r7
 8011ab8:	bd80      	pop	{r7, pc}
 8011aba:	bf00      	nop
 8011abc:	080205d0 	.word	0x080205d0
 8011ac0:	08020cc0 	.word	0x08020cc0
 8011ac4:	08020614 	.word	0x08020614
 8011ac8:	10000014 	.word	0x10000014
 8011acc:	2000831c 	.word	0x2000831c

08011ad0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8011ad0:	b580      	push	{r7, lr}
 8011ad2:	b086      	sub	sp, #24
 8011ad4:	af00      	add	r7, sp, #0
 8011ad6:	4603      	mov	r3, r0
 8011ad8:	60b9      	str	r1, [r7, #8]
 8011ada:	607a      	str	r2, [r7, #4]
 8011adc:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d106      	bne.n	8011af2 <tcp_eff_send_mss_netif+0x22>
 8011ae4:	4b14      	ldr	r3, [pc, #80]	; (8011b38 <tcp_eff_send_mss_netif+0x68>)
 8011ae6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8011aea:	4914      	ldr	r1, [pc, #80]	; (8011b3c <tcp_eff_send_mss_netif+0x6c>)
 8011aec:	4814      	ldr	r0, [pc, #80]	; (8011b40 <tcp_eff_send_mss_netif+0x70>)
 8011aee:	f00a ffff 	bl	801caf0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8011af2:	68bb      	ldr	r3, [r7, #8]
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d101      	bne.n	8011afc <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8011af8:	89fb      	ldrh	r3, [r7, #14]
 8011afa:	e019      	b.n	8011b30 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8011afc:	68bb      	ldr	r3, [r7, #8]
 8011afe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011b00:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8011b02:	8afb      	ldrh	r3, [r7, #22]
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d012      	beq.n	8011b2e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8011b08:	2328      	movs	r3, #40	; 0x28
 8011b0a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8011b0c:	8afa      	ldrh	r2, [r7, #22]
 8011b0e:	8abb      	ldrh	r3, [r7, #20]
 8011b10:	429a      	cmp	r2, r3
 8011b12:	d904      	bls.n	8011b1e <tcp_eff_send_mss_netif+0x4e>
 8011b14:	8afa      	ldrh	r2, [r7, #22]
 8011b16:	8abb      	ldrh	r3, [r7, #20]
 8011b18:	1ad3      	subs	r3, r2, r3
 8011b1a:	b29b      	uxth	r3, r3
 8011b1c:	e000      	b.n	8011b20 <tcp_eff_send_mss_netif+0x50>
 8011b1e:	2300      	movs	r3, #0
 8011b20:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8011b22:	8a7a      	ldrh	r2, [r7, #18]
 8011b24:	89fb      	ldrh	r3, [r7, #14]
 8011b26:	4293      	cmp	r3, r2
 8011b28:	bf28      	it	cs
 8011b2a:	4613      	movcs	r3, r2
 8011b2c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8011b2e:	89fb      	ldrh	r3, [r7, #14]
}
 8011b30:	4618      	mov	r0, r3
 8011b32:	3718      	adds	r7, #24
 8011b34:	46bd      	mov	sp, r7
 8011b36:	bd80      	pop	{r7, pc}
 8011b38:	080205d0 	.word	0x080205d0
 8011b3c:	08020cdc 	.word	0x08020cdc
 8011b40:	08020614 	.word	0x08020614

08011b44 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8011b44:	b580      	push	{r7, lr}
 8011b46:	b084      	sub	sp, #16
 8011b48:	af00      	add	r7, sp, #0
 8011b4a:	6078      	str	r0, [r7, #4]
 8011b4c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8011b4e:	683b      	ldr	r3, [r7, #0]
 8011b50:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d119      	bne.n	8011b8c <tcp_netif_ip_addr_changed_pcblist+0x48>
 8011b58:	4b10      	ldr	r3, [pc, #64]	; (8011b9c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8011b5a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8011b5e:	4910      	ldr	r1, [pc, #64]	; (8011ba0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8011b60:	4810      	ldr	r0, [pc, #64]	; (8011ba4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8011b62:	f00a ffc5 	bl	801caf0 <iprintf>

  while (pcb != NULL) {
 8011b66:	e011      	b.n	8011b8c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8011b68:	68fb      	ldr	r3, [r7, #12]
 8011b6a:	681a      	ldr	r2, [r3, #0]
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	429a      	cmp	r2, r3
 8011b72:	d108      	bne.n	8011b86 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8011b74:	68fb      	ldr	r3, [r7, #12]
 8011b76:	68db      	ldr	r3, [r3, #12]
 8011b78:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8011b7a:	68f8      	ldr	r0, [r7, #12]
 8011b7c:	f7fe fd36 	bl	80105ec <tcp_abort>
      pcb = next;
 8011b80:	68bb      	ldr	r3, [r7, #8]
 8011b82:	60fb      	str	r3, [r7, #12]
 8011b84:	e002      	b.n	8011b8c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8011b86:	68fb      	ldr	r3, [r7, #12]
 8011b88:	68db      	ldr	r3, [r3, #12]
 8011b8a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8011b8c:	68fb      	ldr	r3, [r7, #12]
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d1ea      	bne.n	8011b68 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8011b92:	bf00      	nop
 8011b94:	bf00      	nop
 8011b96:	3710      	adds	r7, #16
 8011b98:	46bd      	mov	sp, r7
 8011b9a:	bd80      	pop	{r7, pc}
 8011b9c:	080205d0 	.word	0x080205d0
 8011ba0:	08020d04 	.word	0x08020d04
 8011ba4:	08020614 	.word	0x08020614

08011ba8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011ba8:	b580      	push	{r7, lr}
 8011baa:	b084      	sub	sp, #16
 8011bac:	af00      	add	r7, sp, #0
 8011bae:	6078      	str	r0, [r7, #4]
 8011bb0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d02a      	beq.n	8011c0e <tcp_netif_ip_addr_changed+0x66>
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d026      	beq.n	8011c0e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8011bc0:	4b15      	ldr	r3, [pc, #84]	; (8011c18 <tcp_netif_ip_addr_changed+0x70>)
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	4619      	mov	r1, r3
 8011bc6:	6878      	ldr	r0, [r7, #4]
 8011bc8:	f7ff ffbc 	bl	8011b44 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8011bcc:	4b13      	ldr	r3, [pc, #76]	; (8011c1c <tcp_netif_ip_addr_changed+0x74>)
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	4619      	mov	r1, r3
 8011bd2:	6878      	ldr	r0, [r7, #4]
 8011bd4:	f7ff ffb6 	bl	8011b44 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8011bd8:	683b      	ldr	r3, [r7, #0]
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d017      	beq.n	8011c0e <tcp_netif_ip_addr_changed+0x66>
 8011bde:	683b      	ldr	r3, [r7, #0]
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d013      	beq.n	8011c0e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011be6:	4b0e      	ldr	r3, [pc, #56]	; (8011c20 <tcp_netif_ip_addr_changed+0x78>)
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	60fb      	str	r3, [r7, #12]
 8011bec:	e00c      	b.n	8011c08 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	681a      	ldr	r2, [r3, #0]
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	429a      	cmp	r2, r3
 8011bf8:	d103      	bne.n	8011c02 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8011bfa:	683b      	ldr	r3, [r7, #0]
 8011bfc:	681a      	ldr	r2, [r3, #0]
 8011bfe:	68fb      	ldr	r3, [r7, #12]
 8011c00:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011c02:	68fb      	ldr	r3, [r7, #12]
 8011c04:	68db      	ldr	r3, [r3, #12]
 8011c06:	60fb      	str	r3, [r7, #12]
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d1ef      	bne.n	8011bee <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8011c0e:	bf00      	nop
 8011c10:	3710      	adds	r7, #16
 8011c12:	46bd      	mov	sp, r7
 8011c14:	bd80      	pop	{r7, pc}
 8011c16:	bf00      	nop
 8011c18:	20008318 	.word	0x20008318
 8011c1c:	20008324 	.word	0x20008324
 8011c20:	20008320 	.word	0x20008320

08011c24 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8011c24:	b580      	push	{r7, lr}
 8011c26:	b082      	sub	sp, #8
 8011c28:	af00      	add	r7, sp, #0
 8011c2a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d007      	beq.n	8011c44 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011c38:	4618      	mov	r0, r3
 8011c3a:	f7ff fb6f 	bl	801131c <tcp_segs_free>
    pcb->ooseq = NULL;
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	2200      	movs	r2, #0
 8011c42:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8011c44:	bf00      	nop
 8011c46:	3708      	adds	r7, #8
 8011c48:	46bd      	mov	sp, r7
 8011c4a:	bd80      	pop	{r7, pc}

08011c4c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8011c4c:	b590      	push	{r4, r7, lr}
 8011c4e:	b08d      	sub	sp, #52	; 0x34
 8011c50:	af04      	add	r7, sp, #16
 8011c52:	6078      	str	r0, [r7, #4]
 8011c54:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d105      	bne.n	8011c68 <tcp_input+0x1c>
 8011c5c:	4b9b      	ldr	r3, [pc, #620]	; (8011ecc <tcp_input+0x280>)
 8011c5e:	2283      	movs	r2, #131	; 0x83
 8011c60:	499b      	ldr	r1, [pc, #620]	; (8011ed0 <tcp_input+0x284>)
 8011c62:	489c      	ldr	r0, [pc, #624]	; (8011ed4 <tcp_input+0x288>)
 8011c64:	f00a ff44 	bl	801caf0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	685b      	ldr	r3, [r3, #4]
 8011c6c:	4a9a      	ldr	r2, [pc, #616]	; (8011ed8 <tcp_input+0x28c>)
 8011c6e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	895b      	ldrh	r3, [r3, #10]
 8011c74:	2b13      	cmp	r3, #19
 8011c76:	f240 83c4 	bls.w	8012402 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8011c7a:	4b98      	ldr	r3, [pc, #608]	; (8011edc <tcp_input+0x290>)
 8011c7c:	695b      	ldr	r3, [r3, #20]
 8011c7e:	4a97      	ldr	r2, [pc, #604]	; (8011edc <tcp_input+0x290>)
 8011c80:	6812      	ldr	r2, [r2, #0]
 8011c82:	4611      	mov	r1, r2
 8011c84:	4618      	mov	r0, r3
 8011c86:	f006 fbe5 	bl	8018454 <ip4_addr_isbroadcast_u32>
 8011c8a:	4603      	mov	r3, r0
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	f040 83ba 	bne.w	8012406 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8011c92:	4b92      	ldr	r3, [pc, #584]	; (8011edc <tcp_input+0x290>)
 8011c94:	695b      	ldr	r3, [r3, #20]
 8011c96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8011c9a:	2be0      	cmp	r3, #224	; 0xe0
 8011c9c:	f000 83b3 	beq.w	8012406 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8011ca0:	4b8d      	ldr	r3, [pc, #564]	; (8011ed8 <tcp_input+0x28c>)
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	899b      	ldrh	r3, [r3, #12]
 8011ca6:	b29b      	uxth	r3, r3
 8011ca8:	4618      	mov	r0, r3
 8011caa:	f7fc fa89 	bl	800e1c0 <lwip_htons>
 8011cae:	4603      	mov	r3, r0
 8011cb0:	0b1b      	lsrs	r3, r3, #12
 8011cb2:	b29b      	uxth	r3, r3
 8011cb4:	b2db      	uxtb	r3, r3
 8011cb6:	009b      	lsls	r3, r3, #2
 8011cb8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8011cba:	7cbb      	ldrb	r3, [r7, #18]
 8011cbc:	2b13      	cmp	r3, #19
 8011cbe:	f240 83a4 	bls.w	801240a <tcp_input+0x7be>
 8011cc2:	7cbb      	ldrb	r3, [r7, #18]
 8011cc4:	b29a      	uxth	r2, r3
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	891b      	ldrh	r3, [r3, #8]
 8011cca:	429a      	cmp	r2, r3
 8011ccc:	f200 839d 	bhi.w	801240a <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8011cd0:	7cbb      	ldrb	r3, [r7, #18]
 8011cd2:	b29b      	uxth	r3, r3
 8011cd4:	3b14      	subs	r3, #20
 8011cd6:	b29a      	uxth	r2, r3
 8011cd8:	4b81      	ldr	r3, [pc, #516]	; (8011ee0 <tcp_input+0x294>)
 8011cda:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8011cdc:	4b81      	ldr	r3, [pc, #516]	; (8011ee4 <tcp_input+0x298>)
 8011cde:	2200      	movs	r2, #0
 8011ce0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	895a      	ldrh	r2, [r3, #10]
 8011ce6:	7cbb      	ldrb	r3, [r7, #18]
 8011ce8:	b29b      	uxth	r3, r3
 8011cea:	429a      	cmp	r2, r3
 8011cec:	d309      	bcc.n	8011d02 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8011cee:	4b7c      	ldr	r3, [pc, #496]	; (8011ee0 <tcp_input+0x294>)
 8011cf0:	881a      	ldrh	r2, [r3, #0]
 8011cf2:	4b7d      	ldr	r3, [pc, #500]	; (8011ee8 <tcp_input+0x29c>)
 8011cf4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8011cf6:	7cbb      	ldrb	r3, [r7, #18]
 8011cf8:	4619      	mov	r1, r3
 8011cfa:	6878      	ldr	r0, [r7, #4]
 8011cfc:	f7fd fdbe 	bl	800f87c <pbuf_remove_header>
 8011d00:	e04e      	b.n	8011da0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d105      	bne.n	8011d16 <tcp_input+0xca>
 8011d0a:	4b70      	ldr	r3, [pc, #448]	; (8011ecc <tcp_input+0x280>)
 8011d0c:	22c2      	movs	r2, #194	; 0xc2
 8011d0e:	4977      	ldr	r1, [pc, #476]	; (8011eec <tcp_input+0x2a0>)
 8011d10:	4870      	ldr	r0, [pc, #448]	; (8011ed4 <tcp_input+0x288>)
 8011d12:	f00a feed 	bl	801caf0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8011d16:	2114      	movs	r1, #20
 8011d18:	6878      	ldr	r0, [r7, #4]
 8011d1a:	f7fd fdaf 	bl	800f87c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	895a      	ldrh	r2, [r3, #10]
 8011d22:	4b71      	ldr	r3, [pc, #452]	; (8011ee8 <tcp_input+0x29c>)
 8011d24:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8011d26:	4b6e      	ldr	r3, [pc, #440]	; (8011ee0 <tcp_input+0x294>)
 8011d28:	881a      	ldrh	r2, [r3, #0]
 8011d2a:	4b6f      	ldr	r3, [pc, #444]	; (8011ee8 <tcp_input+0x29c>)
 8011d2c:	881b      	ldrh	r3, [r3, #0]
 8011d2e:	1ad3      	subs	r3, r2, r3
 8011d30:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8011d32:	4b6d      	ldr	r3, [pc, #436]	; (8011ee8 <tcp_input+0x29c>)
 8011d34:	881b      	ldrh	r3, [r3, #0]
 8011d36:	4619      	mov	r1, r3
 8011d38:	6878      	ldr	r0, [r7, #4]
 8011d3a:	f7fd fd9f 	bl	800f87c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	681b      	ldr	r3, [r3, #0]
 8011d42:	895b      	ldrh	r3, [r3, #10]
 8011d44:	8a3a      	ldrh	r2, [r7, #16]
 8011d46:	429a      	cmp	r2, r3
 8011d48:	f200 8361 	bhi.w	801240e <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	685b      	ldr	r3, [r3, #4]
 8011d52:	4a64      	ldr	r2, [pc, #400]	; (8011ee4 <tcp_input+0x298>)
 8011d54:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	681b      	ldr	r3, [r3, #0]
 8011d5a:	8a3a      	ldrh	r2, [r7, #16]
 8011d5c:	4611      	mov	r1, r2
 8011d5e:	4618      	mov	r0, r3
 8011d60:	f7fd fd8c 	bl	800f87c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	891a      	ldrh	r2, [r3, #8]
 8011d68:	8a3b      	ldrh	r3, [r7, #16]
 8011d6a:	1ad3      	subs	r3, r2, r3
 8011d6c:	b29a      	uxth	r2, r3
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	895b      	ldrh	r3, [r3, #10]
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d005      	beq.n	8011d86 <tcp_input+0x13a>
 8011d7a:	4b54      	ldr	r3, [pc, #336]	; (8011ecc <tcp_input+0x280>)
 8011d7c:	22df      	movs	r2, #223	; 0xdf
 8011d7e:	495c      	ldr	r1, [pc, #368]	; (8011ef0 <tcp_input+0x2a4>)
 8011d80:	4854      	ldr	r0, [pc, #336]	; (8011ed4 <tcp_input+0x288>)
 8011d82:	f00a feb5 	bl	801caf0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	891a      	ldrh	r2, [r3, #8]
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	891b      	ldrh	r3, [r3, #8]
 8011d90:	429a      	cmp	r2, r3
 8011d92:	d005      	beq.n	8011da0 <tcp_input+0x154>
 8011d94:	4b4d      	ldr	r3, [pc, #308]	; (8011ecc <tcp_input+0x280>)
 8011d96:	22e0      	movs	r2, #224	; 0xe0
 8011d98:	4956      	ldr	r1, [pc, #344]	; (8011ef4 <tcp_input+0x2a8>)
 8011d9a:	484e      	ldr	r0, [pc, #312]	; (8011ed4 <tcp_input+0x288>)
 8011d9c:	f00a fea8 	bl	801caf0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8011da0:	4b4d      	ldr	r3, [pc, #308]	; (8011ed8 <tcp_input+0x28c>)
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	881b      	ldrh	r3, [r3, #0]
 8011da6:	b29b      	uxth	r3, r3
 8011da8:	4a4b      	ldr	r2, [pc, #300]	; (8011ed8 <tcp_input+0x28c>)
 8011daa:	6814      	ldr	r4, [r2, #0]
 8011dac:	4618      	mov	r0, r3
 8011dae:	f7fc fa07 	bl	800e1c0 <lwip_htons>
 8011db2:	4603      	mov	r3, r0
 8011db4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8011db6:	4b48      	ldr	r3, [pc, #288]	; (8011ed8 <tcp_input+0x28c>)
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	885b      	ldrh	r3, [r3, #2]
 8011dbc:	b29b      	uxth	r3, r3
 8011dbe:	4a46      	ldr	r2, [pc, #280]	; (8011ed8 <tcp_input+0x28c>)
 8011dc0:	6814      	ldr	r4, [r2, #0]
 8011dc2:	4618      	mov	r0, r3
 8011dc4:	f7fc f9fc 	bl	800e1c0 <lwip_htons>
 8011dc8:	4603      	mov	r3, r0
 8011dca:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8011dcc:	4b42      	ldr	r3, [pc, #264]	; (8011ed8 <tcp_input+0x28c>)
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	685b      	ldr	r3, [r3, #4]
 8011dd2:	4a41      	ldr	r2, [pc, #260]	; (8011ed8 <tcp_input+0x28c>)
 8011dd4:	6814      	ldr	r4, [r2, #0]
 8011dd6:	4618      	mov	r0, r3
 8011dd8:	f7fc fa07 	bl	800e1ea <lwip_htonl>
 8011ddc:	4603      	mov	r3, r0
 8011dde:	6063      	str	r3, [r4, #4]
 8011de0:	6863      	ldr	r3, [r4, #4]
 8011de2:	4a45      	ldr	r2, [pc, #276]	; (8011ef8 <tcp_input+0x2ac>)
 8011de4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8011de6:	4b3c      	ldr	r3, [pc, #240]	; (8011ed8 <tcp_input+0x28c>)
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	689b      	ldr	r3, [r3, #8]
 8011dec:	4a3a      	ldr	r2, [pc, #232]	; (8011ed8 <tcp_input+0x28c>)
 8011dee:	6814      	ldr	r4, [r2, #0]
 8011df0:	4618      	mov	r0, r3
 8011df2:	f7fc f9fa 	bl	800e1ea <lwip_htonl>
 8011df6:	4603      	mov	r3, r0
 8011df8:	60a3      	str	r3, [r4, #8]
 8011dfa:	68a3      	ldr	r3, [r4, #8]
 8011dfc:	4a3f      	ldr	r2, [pc, #252]	; (8011efc <tcp_input+0x2b0>)
 8011dfe:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8011e00:	4b35      	ldr	r3, [pc, #212]	; (8011ed8 <tcp_input+0x28c>)
 8011e02:	681b      	ldr	r3, [r3, #0]
 8011e04:	89db      	ldrh	r3, [r3, #14]
 8011e06:	b29b      	uxth	r3, r3
 8011e08:	4a33      	ldr	r2, [pc, #204]	; (8011ed8 <tcp_input+0x28c>)
 8011e0a:	6814      	ldr	r4, [r2, #0]
 8011e0c:	4618      	mov	r0, r3
 8011e0e:	f7fc f9d7 	bl	800e1c0 <lwip_htons>
 8011e12:	4603      	mov	r3, r0
 8011e14:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8011e16:	4b30      	ldr	r3, [pc, #192]	; (8011ed8 <tcp_input+0x28c>)
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	899b      	ldrh	r3, [r3, #12]
 8011e1c:	b29b      	uxth	r3, r3
 8011e1e:	4618      	mov	r0, r3
 8011e20:	f7fc f9ce 	bl	800e1c0 <lwip_htons>
 8011e24:	4603      	mov	r3, r0
 8011e26:	b2db      	uxtb	r3, r3
 8011e28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011e2c:	b2da      	uxtb	r2, r3
 8011e2e:	4b34      	ldr	r3, [pc, #208]	; (8011f00 <tcp_input+0x2b4>)
 8011e30:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	891a      	ldrh	r2, [r3, #8]
 8011e36:	4b33      	ldr	r3, [pc, #204]	; (8011f04 <tcp_input+0x2b8>)
 8011e38:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8011e3a:	4b31      	ldr	r3, [pc, #196]	; (8011f00 <tcp_input+0x2b4>)
 8011e3c:	781b      	ldrb	r3, [r3, #0]
 8011e3e:	f003 0303 	and.w	r3, r3, #3
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d00c      	beq.n	8011e60 <tcp_input+0x214>
    tcplen++;
 8011e46:	4b2f      	ldr	r3, [pc, #188]	; (8011f04 <tcp_input+0x2b8>)
 8011e48:	881b      	ldrh	r3, [r3, #0]
 8011e4a:	3301      	adds	r3, #1
 8011e4c:	b29a      	uxth	r2, r3
 8011e4e:	4b2d      	ldr	r3, [pc, #180]	; (8011f04 <tcp_input+0x2b8>)
 8011e50:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	891a      	ldrh	r2, [r3, #8]
 8011e56:	4b2b      	ldr	r3, [pc, #172]	; (8011f04 <tcp_input+0x2b8>)
 8011e58:	881b      	ldrh	r3, [r3, #0]
 8011e5a:	429a      	cmp	r2, r3
 8011e5c:	f200 82d9 	bhi.w	8012412 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8011e60:	2300      	movs	r3, #0
 8011e62:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011e64:	4b28      	ldr	r3, [pc, #160]	; (8011f08 <tcp_input+0x2bc>)
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	61fb      	str	r3, [r7, #28]
 8011e6a:	e09d      	b.n	8011fa8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8011e6c:	69fb      	ldr	r3, [r7, #28]
 8011e6e:	7d1b      	ldrb	r3, [r3, #20]
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d105      	bne.n	8011e80 <tcp_input+0x234>
 8011e74:	4b15      	ldr	r3, [pc, #84]	; (8011ecc <tcp_input+0x280>)
 8011e76:	22fb      	movs	r2, #251	; 0xfb
 8011e78:	4924      	ldr	r1, [pc, #144]	; (8011f0c <tcp_input+0x2c0>)
 8011e7a:	4816      	ldr	r0, [pc, #88]	; (8011ed4 <tcp_input+0x288>)
 8011e7c:	f00a fe38 	bl	801caf0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8011e80:	69fb      	ldr	r3, [r7, #28]
 8011e82:	7d1b      	ldrb	r3, [r3, #20]
 8011e84:	2b0a      	cmp	r3, #10
 8011e86:	d105      	bne.n	8011e94 <tcp_input+0x248>
 8011e88:	4b10      	ldr	r3, [pc, #64]	; (8011ecc <tcp_input+0x280>)
 8011e8a:	22fc      	movs	r2, #252	; 0xfc
 8011e8c:	4920      	ldr	r1, [pc, #128]	; (8011f10 <tcp_input+0x2c4>)
 8011e8e:	4811      	ldr	r0, [pc, #68]	; (8011ed4 <tcp_input+0x288>)
 8011e90:	f00a fe2e 	bl	801caf0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8011e94:	69fb      	ldr	r3, [r7, #28]
 8011e96:	7d1b      	ldrb	r3, [r3, #20]
 8011e98:	2b01      	cmp	r3, #1
 8011e9a:	d105      	bne.n	8011ea8 <tcp_input+0x25c>
 8011e9c:	4b0b      	ldr	r3, [pc, #44]	; (8011ecc <tcp_input+0x280>)
 8011e9e:	22fd      	movs	r2, #253	; 0xfd
 8011ea0:	491c      	ldr	r1, [pc, #112]	; (8011f14 <tcp_input+0x2c8>)
 8011ea2:	480c      	ldr	r0, [pc, #48]	; (8011ed4 <tcp_input+0x288>)
 8011ea4:	f00a fe24 	bl	801caf0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011ea8:	69fb      	ldr	r3, [r7, #28]
 8011eaa:	7a1b      	ldrb	r3, [r3, #8]
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d033      	beq.n	8011f18 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011eb0:	69fb      	ldr	r3, [r7, #28]
 8011eb2:	7a1a      	ldrb	r2, [r3, #8]
 8011eb4:	4b09      	ldr	r3, [pc, #36]	; (8011edc <tcp_input+0x290>)
 8011eb6:	685b      	ldr	r3, [r3, #4]
 8011eb8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011ebc:	3301      	adds	r3, #1
 8011ebe:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011ec0:	429a      	cmp	r2, r3
 8011ec2:	d029      	beq.n	8011f18 <tcp_input+0x2cc>
      prev = pcb;
 8011ec4:	69fb      	ldr	r3, [r7, #28]
 8011ec6:	61bb      	str	r3, [r7, #24]
      continue;
 8011ec8:	e06b      	b.n	8011fa2 <tcp_input+0x356>
 8011eca:	bf00      	nop
 8011ecc:	08020d38 	.word	0x08020d38
 8011ed0:	08020d6c 	.word	0x08020d6c
 8011ed4:	08020d84 	.word	0x08020d84
 8011ed8:	200014a0 	.word	0x200014a0
 8011edc:	20004c04 	.word	0x20004c04
 8011ee0:	200014a4 	.word	0x200014a4
 8011ee4:	200014a8 	.word	0x200014a8
 8011ee8:	200014a6 	.word	0x200014a6
 8011eec:	08020dac 	.word	0x08020dac
 8011ef0:	08020dbc 	.word	0x08020dbc
 8011ef4:	08020dc8 	.word	0x08020dc8
 8011ef8:	200014b0 	.word	0x200014b0
 8011efc:	200014b4 	.word	0x200014b4
 8011f00:	200014bc 	.word	0x200014bc
 8011f04:	200014ba 	.word	0x200014ba
 8011f08:	20008318 	.word	0x20008318
 8011f0c:	08020de8 	.word	0x08020de8
 8011f10:	08020e10 	.word	0x08020e10
 8011f14:	08020e3c 	.word	0x08020e3c
    }

    if (pcb->remote_port == tcphdr->src &&
 8011f18:	69fb      	ldr	r3, [r7, #28]
 8011f1a:	8b1a      	ldrh	r2, [r3, #24]
 8011f1c:	4b94      	ldr	r3, [pc, #592]	; (8012170 <tcp_input+0x524>)
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	881b      	ldrh	r3, [r3, #0]
 8011f22:	b29b      	uxth	r3, r3
 8011f24:	429a      	cmp	r2, r3
 8011f26:	d13a      	bne.n	8011f9e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8011f28:	69fb      	ldr	r3, [r7, #28]
 8011f2a:	8ada      	ldrh	r2, [r3, #22]
 8011f2c:	4b90      	ldr	r3, [pc, #576]	; (8012170 <tcp_input+0x524>)
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	885b      	ldrh	r3, [r3, #2]
 8011f32:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8011f34:	429a      	cmp	r2, r3
 8011f36:	d132      	bne.n	8011f9e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011f38:	69fb      	ldr	r3, [r7, #28]
 8011f3a:	685a      	ldr	r2, [r3, #4]
 8011f3c:	4b8d      	ldr	r3, [pc, #564]	; (8012174 <tcp_input+0x528>)
 8011f3e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8011f40:	429a      	cmp	r2, r3
 8011f42:	d12c      	bne.n	8011f9e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011f44:	69fb      	ldr	r3, [r7, #28]
 8011f46:	681a      	ldr	r2, [r3, #0]
 8011f48:	4b8a      	ldr	r3, [pc, #552]	; (8012174 <tcp_input+0x528>)
 8011f4a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011f4c:	429a      	cmp	r2, r3
 8011f4e:	d126      	bne.n	8011f9e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8011f50:	69fb      	ldr	r3, [r7, #28]
 8011f52:	68db      	ldr	r3, [r3, #12]
 8011f54:	69fa      	ldr	r2, [r7, #28]
 8011f56:	429a      	cmp	r2, r3
 8011f58:	d106      	bne.n	8011f68 <tcp_input+0x31c>
 8011f5a:	4b87      	ldr	r3, [pc, #540]	; (8012178 <tcp_input+0x52c>)
 8011f5c:	f240 120d 	movw	r2, #269	; 0x10d
 8011f60:	4986      	ldr	r1, [pc, #536]	; (801217c <tcp_input+0x530>)
 8011f62:	4887      	ldr	r0, [pc, #540]	; (8012180 <tcp_input+0x534>)
 8011f64:	f00a fdc4 	bl	801caf0 <iprintf>
      if (prev != NULL) {
 8011f68:	69bb      	ldr	r3, [r7, #24]
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d00a      	beq.n	8011f84 <tcp_input+0x338>
        prev->next = pcb->next;
 8011f6e:	69fb      	ldr	r3, [r7, #28]
 8011f70:	68da      	ldr	r2, [r3, #12]
 8011f72:	69bb      	ldr	r3, [r7, #24]
 8011f74:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8011f76:	4b83      	ldr	r3, [pc, #524]	; (8012184 <tcp_input+0x538>)
 8011f78:	681a      	ldr	r2, [r3, #0]
 8011f7a:	69fb      	ldr	r3, [r7, #28]
 8011f7c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8011f7e:	4a81      	ldr	r2, [pc, #516]	; (8012184 <tcp_input+0x538>)
 8011f80:	69fb      	ldr	r3, [r7, #28]
 8011f82:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8011f84:	69fb      	ldr	r3, [r7, #28]
 8011f86:	68db      	ldr	r3, [r3, #12]
 8011f88:	69fa      	ldr	r2, [r7, #28]
 8011f8a:	429a      	cmp	r2, r3
 8011f8c:	d111      	bne.n	8011fb2 <tcp_input+0x366>
 8011f8e:	4b7a      	ldr	r3, [pc, #488]	; (8012178 <tcp_input+0x52c>)
 8011f90:	f240 1215 	movw	r2, #277	; 0x115
 8011f94:	497c      	ldr	r1, [pc, #496]	; (8012188 <tcp_input+0x53c>)
 8011f96:	487a      	ldr	r0, [pc, #488]	; (8012180 <tcp_input+0x534>)
 8011f98:	f00a fdaa 	bl	801caf0 <iprintf>
      break;
 8011f9c:	e009      	b.n	8011fb2 <tcp_input+0x366>
    }
    prev = pcb;
 8011f9e:	69fb      	ldr	r3, [r7, #28]
 8011fa0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011fa2:	69fb      	ldr	r3, [r7, #28]
 8011fa4:	68db      	ldr	r3, [r3, #12]
 8011fa6:	61fb      	str	r3, [r7, #28]
 8011fa8:	69fb      	ldr	r3, [r7, #28]
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	f47f af5e 	bne.w	8011e6c <tcp_input+0x220>
 8011fb0:	e000      	b.n	8011fb4 <tcp_input+0x368>
      break;
 8011fb2:	bf00      	nop
  }

  if (pcb == NULL) {
 8011fb4:	69fb      	ldr	r3, [r7, #28]
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	f040 8095 	bne.w	80120e6 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011fbc:	4b73      	ldr	r3, [pc, #460]	; (801218c <tcp_input+0x540>)
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	61fb      	str	r3, [r7, #28]
 8011fc2:	e03f      	b.n	8012044 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011fc4:	69fb      	ldr	r3, [r7, #28]
 8011fc6:	7d1b      	ldrb	r3, [r3, #20]
 8011fc8:	2b0a      	cmp	r3, #10
 8011fca:	d006      	beq.n	8011fda <tcp_input+0x38e>
 8011fcc:	4b6a      	ldr	r3, [pc, #424]	; (8012178 <tcp_input+0x52c>)
 8011fce:	f240 121f 	movw	r2, #287	; 0x11f
 8011fd2:	496f      	ldr	r1, [pc, #444]	; (8012190 <tcp_input+0x544>)
 8011fd4:	486a      	ldr	r0, [pc, #424]	; (8012180 <tcp_input+0x534>)
 8011fd6:	f00a fd8b 	bl	801caf0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011fda:	69fb      	ldr	r3, [r7, #28]
 8011fdc:	7a1b      	ldrb	r3, [r3, #8]
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d009      	beq.n	8011ff6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011fe2:	69fb      	ldr	r3, [r7, #28]
 8011fe4:	7a1a      	ldrb	r2, [r3, #8]
 8011fe6:	4b63      	ldr	r3, [pc, #396]	; (8012174 <tcp_input+0x528>)
 8011fe8:	685b      	ldr	r3, [r3, #4]
 8011fea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011fee:	3301      	adds	r3, #1
 8011ff0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011ff2:	429a      	cmp	r2, r3
 8011ff4:	d122      	bne.n	801203c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8011ff6:	69fb      	ldr	r3, [r7, #28]
 8011ff8:	8b1a      	ldrh	r2, [r3, #24]
 8011ffa:	4b5d      	ldr	r3, [pc, #372]	; (8012170 <tcp_input+0x524>)
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	881b      	ldrh	r3, [r3, #0]
 8012000:	b29b      	uxth	r3, r3
 8012002:	429a      	cmp	r2, r3
 8012004:	d11b      	bne.n	801203e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8012006:	69fb      	ldr	r3, [r7, #28]
 8012008:	8ada      	ldrh	r2, [r3, #22]
 801200a:	4b59      	ldr	r3, [pc, #356]	; (8012170 <tcp_input+0x524>)
 801200c:	681b      	ldr	r3, [r3, #0]
 801200e:	885b      	ldrh	r3, [r3, #2]
 8012010:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8012012:	429a      	cmp	r2, r3
 8012014:	d113      	bne.n	801203e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012016:	69fb      	ldr	r3, [r7, #28]
 8012018:	685a      	ldr	r2, [r3, #4]
 801201a:	4b56      	ldr	r3, [pc, #344]	; (8012174 <tcp_input+0x528>)
 801201c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801201e:	429a      	cmp	r2, r3
 8012020:	d10d      	bne.n	801203e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012022:	69fb      	ldr	r3, [r7, #28]
 8012024:	681a      	ldr	r2, [r3, #0]
 8012026:	4b53      	ldr	r3, [pc, #332]	; (8012174 <tcp_input+0x528>)
 8012028:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801202a:	429a      	cmp	r2, r3
 801202c:	d107      	bne.n	801203e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801202e:	69f8      	ldr	r0, [r7, #28]
 8012030:	f000 fb54 	bl	80126dc <tcp_timewait_input>
        }
        pbuf_free(p);
 8012034:	6878      	ldr	r0, [r7, #4]
 8012036:	f7fd fcd9 	bl	800f9ec <pbuf_free>
        return;
 801203a:	e1f0      	b.n	801241e <tcp_input+0x7d2>
        continue;
 801203c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801203e:	69fb      	ldr	r3, [r7, #28]
 8012040:	68db      	ldr	r3, [r3, #12]
 8012042:	61fb      	str	r3, [r7, #28]
 8012044:	69fb      	ldr	r3, [r7, #28]
 8012046:	2b00      	cmp	r3, #0
 8012048:	d1bc      	bne.n	8011fc4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801204a:	2300      	movs	r3, #0
 801204c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801204e:	4b51      	ldr	r3, [pc, #324]	; (8012194 <tcp_input+0x548>)
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	617b      	str	r3, [r7, #20]
 8012054:	e02a      	b.n	80120ac <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012056:	697b      	ldr	r3, [r7, #20]
 8012058:	7a1b      	ldrb	r3, [r3, #8]
 801205a:	2b00      	cmp	r3, #0
 801205c:	d00c      	beq.n	8012078 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801205e:	697b      	ldr	r3, [r7, #20]
 8012060:	7a1a      	ldrb	r2, [r3, #8]
 8012062:	4b44      	ldr	r3, [pc, #272]	; (8012174 <tcp_input+0x528>)
 8012064:	685b      	ldr	r3, [r3, #4]
 8012066:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801206a:	3301      	adds	r3, #1
 801206c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801206e:	429a      	cmp	r2, r3
 8012070:	d002      	beq.n	8012078 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8012072:	697b      	ldr	r3, [r7, #20]
 8012074:	61bb      	str	r3, [r7, #24]
        continue;
 8012076:	e016      	b.n	80120a6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8012078:	697b      	ldr	r3, [r7, #20]
 801207a:	8ada      	ldrh	r2, [r3, #22]
 801207c:	4b3c      	ldr	r3, [pc, #240]	; (8012170 <tcp_input+0x524>)
 801207e:	681b      	ldr	r3, [r3, #0]
 8012080:	885b      	ldrh	r3, [r3, #2]
 8012082:	b29b      	uxth	r3, r3
 8012084:	429a      	cmp	r2, r3
 8012086:	d10c      	bne.n	80120a2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8012088:	697b      	ldr	r3, [r7, #20]
 801208a:	681a      	ldr	r2, [r3, #0]
 801208c:	4b39      	ldr	r3, [pc, #228]	; (8012174 <tcp_input+0x528>)
 801208e:	695b      	ldr	r3, [r3, #20]
 8012090:	429a      	cmp	r2, r3
 8012092:	d00f      	beq.n	80120b4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8012094:	697b      	ldr	r3, [r7, #20]
 8012096:	2b00      	cmp	r3, #0
 8012098:	d00d      	beq.n	80120b6 <tcp_input+0x46a>
 801209a:	697b      	ldr	r3, [r7, #20]
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d009      	beq.n	80120b6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80120a2:	697b      	ldr	r3, [r7, #20]
 80120a4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80120a6:	697b      	ldr	r3, [r7, #20]
 80120a8:	68db      	ldr	r3, [r3, #12]
 80120aa:	617b      	str	r3, [r7, #20]
 80120ac:	697b      	ldr	r3, [r7, #20]
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d1d1      	bne.n	8012056 <tcp_input+0x40a>
 80120b2:	e000      	b.n	80120b6 <tcp_input+0x46a>
            break;
 80120b4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80120b6:	697b      	ldr	r3, [r7, #20]
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d014      	beq.n	80120e6 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80120bc:	69bb      	ldr	r3, [r7, #24]
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d00a      	beq.n	80120d8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80120c2:	697b      	ldr	r3, [r7, #20]
 80120c4:	68da      	ldr	r2, [r3, #12]
 80120c6:	69bb      	ldr	r3, [r7, #24]
 80120c8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80120ca:	4b32      	ldr	r3, [pc, #200]	; (8012194 <tcp_input+0x548>)
 80120cc:	681a      	ldr	r2, [r3, #0]
 80120ce:	697b      	ldr	r3, [r7, #20]
 80120d0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80120d2:	4a30      	ldr	r2, [pc, #192]	; (8012194 <tcp_input+0x548>)
 80120d4:	697b      	ldr	r3, [r7, #20]
 80120d6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80120d8:	6978      	ldr	r0, [r7, #20]
 80120da:	f000 fa01 	bl	80124e0 <tcp_listen_input>
      }
      pbuf_free(p);
 80120de:	6878      	ldr	r0, [r7, #4]
 80120e0:	f7fd fc84 	bl	800f9ec <pbuf_free>
      return;
 80120e4:	e19b      	b.n	801241e <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80120e6:	69fb      	ldr	r3, [r7, #28]
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	f000 8160 	beq.w	80123ae <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80120ee:	4b2a      	ldr	r3, [pc, #168]	; (8012198 <tcp_input+0x54c>)
 80120f0:	2200      	movs	r2, #0
 80120f2:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	891a      	ldrh	r2, [r3, #8]
 80120f8:	4b27      	ldr	r3, [pc, #156]	; (8012198 <tcp_input+0x54c>)
 80120fa:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80120fc:	4a26      	ldr	r2, [pc, #152]	; (8012198 <tcp_input+0x54c>)
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8012102:	4b1b      	ldr	r3, [pc, #108]	; (8012170 <tcp_input+0x524>)
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	4a24      	ldr	r2, [pc, #144]	; (8012198 <tcp_input+0x54c>)
 8012108:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801210a:	4b24      	ldr	r3, [pc, #144]	; (801219c <tcp_input+0x550>)
 801210c:	2200      	movs	r2, #0
 801210e:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8012110:	4b23      	ldr	r3, [pc, #140]	; (80121a0 <tcp_input+0x554>)
 8012112:	2200      	movs	r2, #0
 8012114:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8012116:	4b23      	ldr	r3, [pc, #140]	; (80121a4 <tcp_input+0x558>)
 8012118:	2200      	movs	r2, #0
 801211a:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801211c:	4b22      	ldr	r3, [pc, #136]	; (80121a8 <tcp_input+0x55c>)
 801211e:	781b      	ldrb	r3, [r3, #0]
 8012120:	f003 0308 	and.w	r3, r3, #8
 8012124:	2b00      	cmp	r3, #0
 8012126:	d006      	beq.n	8012136 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	7b5b      	ldrb	r3, [r3, #13]
 801212c:	f043 0301 	orr.w	r3, r3, #1
 8012130:	b2da      	uxtb	r2, r3
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8012136:	69fb      	ldr	r3, [r7, #28]
 8012138:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801213a:	2b00      	cmp	r3, #0
 801213c:	d038      	beq.n	80121b0 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801213e:	69f8      	ldr	r0, [r7, #28]
 8012140:	f7ff f870 	bl	8011224 <tcp_process_refused_data>
 8012144:	4603      	mov	r3, r0
 8012146:	f113 0f0d 	cmn.w	r3, #13
 801214a:	d007      	beq.n	801215c <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801214c:	69fb      	ldr	r3, [r7, #28]
 801214e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012150:	2b00      	cmp	r3, #0
 8012152:	d02d      	beq.n	80121b0 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012154:	4b15      	ldr	r3, [pc, #84]	; (80121ac <tcp_input+0x560>)
 8012156:	881b      	ldrh	r3, [r3, #0]
 8012158:	2b00      	cmp	r3, #0
 801215a:	d029      	beq.n	80121b0 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801215c:	69fb      	ldr	r3, [r7, #28]
 801215e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012160:	2b00      	cmp	r3, #0
 8012162:	f040 8104 	bne.w	801236e <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8012166:	69f8      	ldr	r0, [r7, #28]
 8012168:	f003 fe16 	bl	8015d98 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801216c:	e0ff      	b.n	801236e <tcp_input+0x722>
 801216e:	bf00      	nop
 8012170:	200014a0 	.word	0x200014a0
 8012174:	20004c04 	.word	0x20004c04
 8012178:	08020d38 	.word	0x08020d38
 801217c:	08020e64 	.word	0x08020e64
 8012180:	08020d84 	.word	0x08020d84
 8012184:	20008318 	.word	0x20008318
 8012188:	08020e90 	.word	0x08020e90
 801218c:	20008328 	.word	0x20008328
 8012190:	08020ebc 	.word	0x08020ebc
 8012194:	20008320 	.word	0x20008320
 8012198:	20001490 	.word	0x20001490
 801219c:	200014c0 	.word	0x200014c0
 80121a0:	200014bd 	.word	0x200014bd
 80121a4:	200014b8 	.word	0x200014b8
 80121a8:	200014bc 	.word	0x200014bc
 80121ac:	200014ba 	.word	0x200014ba
      }
    }
    tcp_input_pcb = pcb;
 80121b0:	4a9c      	ldr	r2, [pc, #624]	; (8012424 <tcp_input+0x7d8>)
 80121b2:	69fb      	ldr	r3, [r7, #28]
 80121b4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80121b6:	69f8      	ldr	r0, [r7, #28]
 80121b8:	f000 fb0a 	bl	80127d0 <tcp_process>
 80121bc:	4603      	mov	r3, r0
 80121be:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80121c0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80121c4:	f113 0f0d 	cmn.w	r3, #13
 80121c8:	f000 80d3 	beq.w	8012372 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 80121cc:	4b96      	ldr	r3, [pc, #600]	; (8012428 <tcp_input+0x7dc>)
 80121ce:	781b      	ldrb	r3, [r3, #0]
 80121d0:	f003 0308 	and.w	r3, r3, #8
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d015      	beq.n	8012204 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80121d8:	69fb      	ldr	r3, [r7, #28]
 80121da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d008      	beq.n	80121f4 <tcp_input+0x5a8>
 80121e2:	69fb      	ldr	r3, [r7, #28]
 80121e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80121e8:	69fa      	ldr	r2, [r7, #28]
 80121ea:	6912      	ldr	r2, [r2, #16]
 80121ec:	f06f 010d 	mvn.w	r1, #13
 80121f0:	4610      	mov	r0, r2
 80121f2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80121f4:	69f9      	ldr	r1, [r7, #28]
 80121f6:	488d      	ldr	r0, [pc, #564]	; (801242c <tcp_input+0x7e0>)
 80121f8:	f7ff fbb0 	bl	801195c <tcp_pcb_remove>
        tcp_free(pcb);
 80121fc:	69f8      	ldr	r0, [r7, #28]
 80121fe:	f7fd feb1 	bl	800ff64 <tcp_free>
 8012202:	e0c1      	b.n	8012388 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8012204:	2300      	movs	r3, #0
 8012206:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8012208:	4b89      	ldr	r3, [pc, #548]	; (8012430 <tcp_input+0x7e4>)
 801220a:	881b      	ldrh	r3, [r3, #0]
 801220c:	2b00      	cmp	r3, #0
 801220e:	d01d      	beq.n	801224c <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8012210:	4b87      	ldr	r3, [pc, #540]	; (8012430 <tcp_input+0x7e4>)
 8012212:	881b      	ldrh	r3, [r3, #0]
 8012214:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8012216:	69fb      	ldr	r3, [r7, #28]
 8012218:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801221c:	2b00      	cmp	r3, #0
 801221e:	d00a      	beq.n	8012236 <tcp_input+0x5ea>
 8012220:	69fb      	ldr	r3, [r7, #28]
 8012222:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012226:	69fa      	ldr	r2, [r7, #28]
 8012228:	6910      	ldr	r0, [r2, #16]
 801222a:	89fa      	ldrh	r2, [r7, #14]
 801222c:	69f9      	ldr	r1, [r7, #28]
 801222e:	4798      	blx	r3
 8012230:	4603      	mov	r3, r0
 8012232:	74fb      	strb	r3, [r7, #19]
 8012234:	e001      	b.n	801223a <tcp_input+0x5ee>
 8012236:	2300      	movs	r3, #0
 8012238:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801223a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801223e:	f113 0f0d 	cmn.w	r3, #13
 8012242:	f000 8098 	beq.w	8012376 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8012246:	4b7a      	ldr	r3, [pc, #488]	; (8012430 <tcp_input+0x7e4>)
 8012248:	2200      	movs	r2, #0
 801224a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801224c:	69f8      	ldr	r0, [r7, #28]
 801224e:	f000 f907 	bl	8012460 <tcp_input_delayed_close>
 8012252:	4603      	mov	r3, r0
 8012254:	2b00      	cmp	r3, #0
 8012256:	f040 8090 	bne.w	801237a <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801225a:	4b76      	ldr	r3, [pc, #472]	; (8012434 <tcp_input+0x7e8>)
 801225c:	681b      	ldr	r3, [r3, #0]
 801225e:	2b00      	cmp	r3, #0
 8012260:	d041      	beq.n	80122e6 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8012262:	69fb      	ldr	r3, [r7, #28]
 8012264:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012266:	2b00      	cmp	r3, #0
 8012268:	d006      	beq.n	8012278 <tcp_input+0x62c>
 801226a:	4b73      	ldr	r3, [pc, #460]	; (8012438 <tcp_input+0x7ec>)
 801226c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8012270:	4972      	ldr	r1, [pc, #456]	; (801243c <tcp_input+0x7f0>)
 8012272:	4873      	ldr	r0, [pc, #460]	; (8012440 <tcp_input+0x7f4>)
 8012274:	f00a fc3c 	bl	801caf0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8012278:	69fb      	ldr	r3, [r7, #28]
 801227a:	8b5b      	ldrh	r3, [r3, #26]
 801227c:	f003 0310 	and.w	r3, r3, #16
 8012280:	2b00      	cmp	r3, #0
 8012282:	d008      	beq.n	8012296 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8012284:	4b6b      	ldr	r3, [pc, #428]	; (8012434 <tcp_input+0x7e8>)
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	4618      	mov	r0, r3
 801228a:	f7fd fbaf 	bl	800f9ec <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801228e:	69f8      	ldr	r0, [r7, #28]
 8012290:	f7fe f9ac 	bl	80105ec <tcp_abort>
            goto aborted;
 8012294:	e078      	b.n	8012388 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8012296:	69fb      	ldr	r3, [r7, #28]
 8012298:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801229c:	2b00      	cmp	r3, #0
 801229e:	d00c      	beq.n	80122ba <tcp_input+0x66e>
 80122a0:	69fb      	ldr	r3, [r7, #28]
 80122a2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80122a6:	69fb      	ldr	r3, [r7, #28]
 80122a8:	6918      	ldr	r0, [r3, #16]
 80122aa:	4b62      	ldr	r3, [pc, #392]	; (8012434 <tcp_input+0x7e8>)
 80122ac:	681a      	ldr	r2, [r3, #0]
 80122ae:	2300      	movs	r3, #0
 80122b0:	69f9      	ldr	r1, [r7, #28]
 80122b2:	47a0      	blx	r4
 80122b4:	4603      	mov	r3, r0
 80122b6:	74fb      	strb	r3, [r7, #19]
 80122b8:	e008      	b.n	80122cc <tcp_input+0x680>
 80122ba:	4b5e      	ldr	r3, [pc, #376]	; (8012434 <tcp_input+0x7e8>)
 80122bc:	681a      	ldr	r2, [r3, #0]
 80122be:	2300      	movs	r3, #0
 80122c0:	69f9      	ldr	r1, [r7, #28]
 80122c2:	2000      	movs	r0, #0
 80122c4:	f7ff f884 	bl	80113d0 <tcp_recv_null>
 80122c8:	4603      	mov	r3, r0
 80122ca:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80122cc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80122d0:	f113 0f0d 	cmn.w	r3, #13
 80122d4:	d053      	beq.n	801237e <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80122d6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d003      	beq.n	80122e6 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80122de:	4b55      	ldr	r3, [pc, #340]	; (8012434 <tcp_input+0x7e8>)
 80122e0:	681a      	ldr	r2, [r3, #0]
 80122e2:	69fb      	ldr	r3, [r7, #28]
 80122e4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80122e6:	4b50      	ldr	r3, [pc, #320]	; (8012428 <tcp_input+0x7dc>)
 80122e8:	781b      	ldrb	r3, [r3, #0]
 80122ea:	f003 0320 	and.w	r3, r3, #32
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d030      	beq.n	8012354 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 80122f2:	69fb      	ldr	r3, [r7, #28]
 80122f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d009      	beq.n	801230e <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80122fa:	69fb      	ldr	r3, [r7, #28]
 80122fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80122fe:	7b5a      	ldrb	r2, [r3, #13]
 8012300:	69fb      	ldr	r3, [r7, #28]
 8012302:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012304:	f042 0220 	orr.w	r2, r2, #32
 8012308:	b2d2      	uxtb	r2, r2
 801230a:	735a      	strb	r2, [r3, #13]
 801230c:	e022      	b.n	8012354 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801230e:	69fb      	ldr	r3, [r7, #28]
 8012310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012312:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8012316:	d005      	beq.n	8012324 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8012318:	69fb      	ldr	r3, [r7, #28]
 801231a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801231c:	3301      	adds	r3, #1
 801231e:	b29a      	uxth	r2, r3
 8012320:	69fb      	ldr	r3, [r7, #28]
 8012322:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8012324:	69fb      	ldr	r3, [r7, #28]
 8012326:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801232a:	2b00      	cmp	r3, #0
 801232c:	d00b      	beq.n	8012346 <tcp_input+0x6fa>
 801232e:	69fb      	ldr	r3, [r7, #28]
 8012330:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012334:	69fb      	ldr	r3, [r7, #28]
 8012336:	6918      	ldr	r0, [r3, #16]
 8012338:	2300      	movs	r3, #0
 801233a:	2200      	movs	r2, #0
 801233c:	69f9      	ldr	r1, [r7, #28]
 801233e:	47a0      	blx	r4
 8012340:	4603      	mov	r3, r0
 8012342:	74fb      	strb	r3, [r7, #19]
 8012344:	e001      	b.n	801234a <tcp_input+0x6fe>
 8012346:	2300      	movs	r3, #0
 8012348:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801234a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801234e:	f113 0f0d 	cmn.w	r3, #13
 8012352:	d016      	beq.n	8012382 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8012354:	4b33      	ldr	r3, [pc, #204]	; (8012424 <tcp_input+0x7d8>)
 8012356:	2200      	movs	r2, #0
 8012358:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801235a:	69f8      	ldr	r0, [r7, #28]
 801235c:	f000 f880 	bl	8012460 <tcp_input_delayed_close>
 8012360:	4603      	mov	r3, r0
 8012362:	2b00      	cmp	r3, #0
 8012364:	d10f      	bne.n	8012386 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8012366:	69f8      	ldr	r0, [r7, #28]
 8012368:	f002 ff10 	bl	801518c <tcp_output>
 801236c:	e00c      	b.n	8012388 <tcp_input+0x73c>
        goto aborted;
 801236e:	bf00      	nop
 8012370:	e00a      	b.n	8012388 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8012372:	bf00      	nop
 8012374:	e008      	b.n	8012388 <tcp_input+0x73c>
              goto aborted;
 8012376:	bf00      	nop
 8012378:	e006      	b.n	8012388 <tcp_input+0x73c>
          goto aborted;
 801237a:	bf00      	nop
 801237c:	e004      	b.n	8012388 <tcp_input+0x73c>
            goto aborted;
 801237e:	bf00      	nop
 8012380:	e002      	b.n	8012388 <tcp_input+0x73c>
              goto aborted;
 8012382:	bf00      	nop
 8012384:	e000      	b.n	8012388 <tcp_input+0x73c>
          goto aborted;
 8012386:	bf00      	nop
    tcp_input_pcb = NULL;
 8012388:	4b26      	ldr	r3, [pc, #152]	; (8012424 <tcp_input+0x7d8>)
 801238a:	2200      	movs	r2, #0
 801238c:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801238e:	4b29      	ldr	r3, [pc, #164]	; (8012434 <tcp_input+0x7e8>)
 8012390:	2200      	movs	r2, #0
 8012392:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8012394:	4b2b      	ldr	r3, [pc, #172]	; (8012444 <tcp_input+0x7f8>)
 8012396:	685b      	ldr	r3, [r3, #4]
 8012398:	2b00      	cmp	r3, #0
 801239a:	d03f      	beq.n	801241c <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 801239c:	4b29      	ldr	r3, [pc, #164]	; (8012444 <tcp_input+0x7f8>)
 801239e:	685b      	ldr	r3, [r3, #4]
 80123a0:	4618      	mov	r0, r3
 80123a2:	f7fd fb23 	bl	800f9ec <pbuf_free>
      inseg.p = NULL;
 80123a6:	4b27      	ldr	r3, [pc, #156]	; (8012444 <tcp_input+0x7f8>)
 80123a8:	2200      	movs	r2, #0
 80123aa:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80123ac:	e036      	b.n	801241c <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80123ae:	4b26      	ldr	r3, [pc, #152]	; (8012448 <tcp_input+0x7fc>)
 80123b0:	681b      	ldr	r3, [r3, #0]
 80123b2:	899b      	ldrh	r3, [r3, #12]
 80123b4:	b29b      	uxth	r3, r3
 80123b6:	4618      	mov	r0, r3
 80123b8:	f7fb ff02 	bl	800e1c0 <lwip_htons>
 80123bc:	4603      	mov	r3, r0
 80123be:	b2db      	uxtb	r3, r3
 80123c0:	f003 0304 	and.w	r3, r3, #4
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d118      	bne.n	80123fa <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80123c8:	4b20      	ldr	r3, [pc, #128]	; (801244c <tcp_input+0x800>)
 80123ca:	6819      	ldr	r1, [r3, #0]
 80123cc:	4b20      	ldr	r3, [pc, #128]	; (8012450 <tcp_input+0x804>)
 80123ce:	881b      	ldrh	r3, [r3, #0]
 80123d0:	461a      	mov	r2, r3
 80123d2:	4b20      	ldr	r3, [pc, #128]	; (8012454 <tcp_input+0x808>)
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80123d8:	4b1b      	ldr	r3, [pc, #108]	; (8012448 <tcp_input+0x7fc>)
 80123da:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80123dc:	885b      	ldrh	r3, [r3, #2]
 80123de:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80123e0:	4a19      	ldr	r2, [pc, #100]	; (8012448 <tcp_input+0x7fc>)
 80123e2:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80123e4:	8812      	ldrh	r2, [r2, #0]
 80123e6:	b292      	uxth	r2, r2
 80123e8:	9202      	str	r2, [sp, #8]
 80123ea:	9301      	str	r3, [sp, #4]
 80123ec:	4b1a      	ldr	r3, [pc, #104]	; (8012458 <tcp_input+0x80c>)
 80123ee:	9300      	str	r3, [sp, #0]
 80123f0:	4b1a      	ldr	r3, [pc, #104]	; (801245c <tcp_input+0x810>)
 80123f2:	4602      	mov	r2, r0
 80123f4:	2000      	movs	r0, #0
 80123f6:	f003 fc7d 	bl	8015cf4 <tcp_rst>
    pbuf_free(p);
 80123fa:	6878      	ldr	r0, [r7, #4]
 80123fc:	f7fd faf6 	bl	800f9ec <pbuf_free>
  return;
 8012400:	e00c      	b.n	801241c <tcp_input+0x7d0>
    goto dropped;
 8012402:	bf00      	nop
 8012404:	e006      	b.n	8012414 <tcp_input+0x7c8>
    goto dropped;
 8012406:	bf00      	nop
 8012408:	e004      	b.n	8012414 <tcp_input+0x7c8>
    goto dropped;
 801240a:	bf00      	nop
 801240c:	e002      	b.n	8012414 <tcp_input+0x7c8>
      goto dropped;
 801240e:	bf00      	nop
 8012410:	e000      	b.n	8012414 <tcp_input+0x7c8>
      goto dropped;
 8012412:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8012414:	6878      	ldr	r0, [r7, #4]
 8012416:	f7fd fae9 	bl	800f9ec <pbuf_free>
 801241a:	e000      	b.n	801241e <tcp_input+0x7d2>
  return;
 801241c:	bf00      	nop
}
 801241e:	3724      	adds	r7, #36	; 0x24
 8012420:	46bd      	mov	sp, r7
 8012422:	bd90      	pop	{r4, r7, pc}
 8012424:	2000832c 	.word	0x2000832c
 8012428:	200014bd 	.word	0x200014bd
 801242c:	20008318 	.word	0x20008318
 8012430:	200014b8 	.word	0x200014b8
 8012434:	200014c0 	.word	0x200014c0
 8012438:	08020d38 	.word	0x08020d38
 801243c:	08020eec 	.word	0x08020eec
 8012440:	08020d84 	.word	0x08020d84
 8012444:	20001490 	.word	0x20001490
 8012448:	200014a0 	.word	0x200014a0
 801244c:	200014b4 	.word	0x200014b4
 8012450:	200014ba 	.word	0x200014ba
 8012454:	200014b0 	.word	0x200014b0
 8012458:	20004c14 	.word	0x20004c14
 801245c:	20004c18 	.word	0x20004c18

08012460 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8012460:	b580      	push	{r7, lr}
 8012462:	b082      	sub	sp, #8
 8012464:	af00      	add	r7, sp, #0
 8012466:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	2b00      	cmp	r3, #0
 801246c:	d106      	bne.n	801247c <tcp_input_delayed_close+0x1c>
 801246e:	4b17      	ldr	r3, [pc, #92]	; (80124cc <tcp_input_delayed_close+0x6c>)
 8012470:	f240 225a 	movw	r2, #602	; 0x25a
 8012474:	4916      	ldr	r1, [pc, #88]	; (80124d0 <tcp_input_delayed_close+0x70>)
 8012476:	4817      	ldr	r0, [pc, #92]	; (80124d4 <tcp_input_delayed_close+0x74>)
 8012478:	f00a fb3a 	bl	801caf0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 801247c:	4b16      	ldr	r3, [pc, #88]	; (80124d8 <tcp_input_delayed_close+0x78>)
 801247e:	781b      	ldrb	r3, [r3, #0]
 8012480:	f003 0310 	and.w	r3, r3, #16
 8012484:	2b00      	cmp	r3, #0
 8012486:	d01c      	beq.n	80124c2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	8b5b      	ldrh	r3, [r3, #26]
 801248c:	f003 0310 	and.w	r3, r3, #16
 8012490:	2b00      	cmp	r3, #0
 8012492:	d10d      	bne.n	80124b0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801249a:	2b00      	cmp	r3, #0
 801249c:	d008      	beq.n	80124b0 <tcp_input_delayed_close+0x50>
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80124a4:	687a      	ldr	r2, [r7, #4]
 80124a6:	6912      	ldr	r2, [r2, #16]
 80124a8:	f06f 010e 	mvn.w	r1, #14
 80124ac:	4610      	mov	r0, r2
 80124ae:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80124b0:	6879      	ldr	r1, [r7, #4]
 80124b2:	480a      	ldr	r0, [pc, #40]	; (80124dc <tcp_input_delayed_close+0x7c>)
 80124b4:	f7ff fa52 	bl	801195c <tcp_pcb_remove>
    tcp_free(pcb);
 80124b8:	6878      	ldr	r0, [r7, #4]
 80124ba:	f7fd fd53 	bl	800ff64 <tcp_free>
    return 1;
 80124be:	2301      	movs	r3, #1
 80124c0:	e000      	b.n	80124c4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80124c2:	2300      	movs	r3, #0
}
 80124c4:	4618      	mov	r0, r3
 80124c6:	3708      	adds	r7, #8
 80124c8:	46bd      	mov	sp, r7
 80124ca:	bd80      	pop	{r7, pc}
 80124cc:	08020d38 	.word	0x08020d38
 80124d0:	08020f08 	.word	0x08020f08
 80124d4:	08020d84 	.word	0x08020d84
 80124d8:	200014bd 	.word	0x200014bd
 80124dc:	20008318 	.word	0x20008318

080124e0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80124e0:	b590      	push	{r4, r7, lr}
 80124e2:	b08b      	sub	sp, #44	; 0x2c
 80124e4:	af04      	add	r7, sp, #16
 80124e6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80124e8:	4b6f      	ldr	r3, [pc, #444]	; (80126a8 <tcp_listen_input+0x1c8>)
 80124ea:	781b      	ldrb	r3, [r3, #0]
 80124ec:	f003 0304 	and.w	r3, r3, #4
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	f040 80d2 	bne.w	801269a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d106      	bne.n	801250a <tcp_listen_input+0x2a>
 80124fc:	4b6b      	ldr	r3, [pc, #428]	; (80126ac <tcp_listen_input+0x1cc>)
 80124fe:	f240 2281 	movw	r2, #641	; 0x281
 8012502:	496b      	ldr	r1, [pc, #428]	; (80126b0 <tcp_listen_input+0x1d0>)
 8012504:	486b      	ldr	r0, [pc, #428]	; (80126b4 <tcp_listen_input+0x1d4>)
 8012506:	f00a faf3 	bl	801caf0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801250a:	4b67      	ldr	r3, [pc, #412]	; (80126a8 <tcp_listen_input+0x1c8>)
 801250c:	781b      	ldrb	r3, [r3, #0]
 801250e:	f003 0310 	and.w	r3, r3, #16
 8012512:	2b00      	cmp	r3, #0
 8012514:	d019      	beq.n	801254a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012516:	4b68      	ldr	r3, [pc, #416]	; (80126b8 <tcp_listen_input+0x1d8>)
 8012518:	6819      	ldr	r1, [r3, #0]
 801251a:	4b68      	ldr	r3, [pc, #416]	; (80126bc <tcp_listen_input+0x1dc>)
 801251c:	881b      	ldrh	r3, [r3, #0]
 801251e:	461a      	mov	r2, r3
 8012520:	4b67      	ldr	r3, [pc, #412]	; (80126c0 <tcp_listen_input+0x1e0>)
 8012522:	681b      	ldr	r3, [r3, #0]
 8012524:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012526:	4b67      	ldr	r3, [pc, #412]	; (80126c4 <tcp_listen_input+0x1e4>)
 8012528:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801252a:	885b      	ldrh	r3, [r3, #2]
 801252c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801252e:	4a65      	ldr	r2, [pc, #404]	; (80126c4 <tcp_listen_input+0x1e4>)
 8012530:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012532:	8812      	ldrh	r2, [r2, #0]
 8012534:	b292      	uxth	r2, r2
 8012536:	9202      	str	r2, [sp, #8]
 8012538:	9301      	str	r3, [sp, #4]
 801253a:	4b63      	ldr	r3, [pc, #396]	; (80126c8 <tcp_listen_input+0x1e8>)
 801253c:	9300      	str	r3, [sp, #0]
 801253e:	4b63      	ldr	r3, [pc, #396]	; (80126cc <tcp_listen_input+0x1ec>)
 8012540:	4602      	mov	r2, r0
 8012542:	6878      	ldr	r0, [r7, #4]
 8012544:	f003 fbd6 	bl	8015cf4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8012548:	e0a9      	b.n	801269e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801254a:	4b57      	ldr	r3, [pc, #348]	; (80126a8 <tcp_listen_input+0x1c8>)
 801254c:	781b      	ldrb	r3, [r3, #0]
 801254e:	f003 0302 	and.w	r3, r3, #2
 8012552:	2b00      	cmp	r3, #0
 8012554:	f000 80a3 	beq.w	801269e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	7d5b      	ldrb	r3, [r3, #21]
 801255c:	4618      	mov	r0, r3
 801255e:	f7ff f85b 	bl	8011618 <tcp_alloc>
 8012562:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8012564:	697b      	ldr	r3, [r7, #20]
 8012566:	2b00      	cmp	r3, #0
 8012568:	d111      	bne.n	801258e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	699b      	ldr	r3, [r3, #24]
 801256e:	2b00      	cmp	r3, #0
 8012570:	d00a      	beq.n	8012588 <tcp_listen_input+0xa8>
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	699b      	ldr	r3, [r3, #24]
 8012576:	687a      	ldr	r2, [r7, #4]
 8012578:	6910      	ldr	r0, [r2, #16]
 801257a:	f04f 32ff 	mov.w	r2, #4294967295
 801257e:	2100      	movs	r1, #0
 8012580:	4798      	blx	r3
 8012582:	4603      	mov	r3, r0
 8012584:	73bb      	strb	r3, [r7, #14]
      return;
 8012586:	e08b      	b.n	80126a0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8012588:	23f0      	movs	r3, #240	; 0xf0
 801258a:	73bb      	strb	r3, [r7, #14]
      return;
 801258c:	e088      	b.n	80126a0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801258e:	4b50      	ldr	r3, [pc, #320]	; (80126d0 <tcp_listen_input+0x1f0>)
 8012590:	695a      	ldr	r2, [r3, #20]
 8012592:	697b      	ldr	r3, [r7, #20]
 8012594:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8012596:	4b4e      	ldr	r3, [pc, #312]	; (80126d0 <tcp_listen_input+0x1f0>)
 8012598:	691a      	ldr	r2, [r3, #16]
 801259a:	697b      	ldr	r3, [r7, #20]
 801259c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	8ada      	ldrh	r2, [r3, #22]
 80125a2:	697b      	ldr	r3, [r7, #20]
 80125a4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80125a6:	4b47      	ldr	r3, [pc, #284]	; (80126c4 <tcp_listen_input+0x1e4>)
 80125a8:	681b      	ldr	r3, [r3, #0]
 80125aa:	881b      	ldrh	r3, [r3, #0]
 80125ac:	b29a      	uxth	r2, r3
 80125ae:	697b      	ldr	r3, [r7, #20]
 80125b0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80125b2:	697b      	ldr	r3, [r7, #20]
 80125b4:	2203      	movs	r2, #3
 80125b6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80125b8:	4b41      	ldr	r3, [pc, #260]	; (80126c0 <tcp_listen_input+0x1e0>)
 80125ba:	681b      	ldr	r3, [r3, #0]
 80125bc:	1c5a      	adds	r2, r3, #1
 80125be:	697b      	ldr	r3, [r7, #20]
 80125c0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80125c2:	697b      	ldr	r3, [r7, #20]
 80125c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80125c6:	697b      	ldr	r3, [r7, #20]
 80125c8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80125ca:	6978      	ldr	r0, [r7, #20]
 80125cc:	f7ff fa5a 	bl	8011a84 <tcp_next_iss>
 80125d0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80125d2:	697b      	ldr	r3, [r7, #20]
 80125d4:	693a      	ldr	r2, [r7, #16]
 80125d6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80125d8:	697b      	ldr	r3, [r7, #20]
 80125da:	693a      	ldr	r2, [r7, #16]
 80125dc:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80125de:	697b      	ldr	r3, [r7, #20]
 80125e0:	693a      	ldr	r2, [r7, #16]
 80125e2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80125e4:	697b      	ldr	r3, [r7, #20]
 80125e6:	693a      	ldr	r2, [r7, #16]
 80125e8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80125ea:	4b35      	ldr	r3, [pc, #212]	; (80126c0 <tcp_listen_input+0x1e0>)
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	1e5a      	subs	r2, r3, #1
 80125f0:	697b      	ldr	r3, [r7, #20]
 80125f2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	691a      	ldr	r2, [r3, #16]
 80125f8:	697b      	ldr	r3, [r7, #20]
 80125fa:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80125fc:	697b      	ldr	r3, [r7, #20]
 80125fe:	687a      	ldr	r2, [r7, #4]
 8012600:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	7a5b      	ldrb	r3, [r3, #9]
 8012606:	f003 030c 	and.w	r3, r3, #12
 801260a:	b2da      	uxtb	r2, r3
 801260c:	697b      	ldr	r3, [r7, #20]
 801260e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	7a1a      	ldrb	r2, [r3, #8]
 8012614:	697b      	ldr	r3, [r7, #20]
 8012616:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8012618:	4b2e      	ldr	r3, [pc, #184]	; (80126d4 <tcp_listen_input+0x1f4>)
 801261a:	681a      	ldr	r2, [r3, #0]
 801261c:	697b      	ldr	r3, [r7, #20]
 801261e:	60da      	str	r2, [r3, #12]
 8012620:	4a2c      	ldr	r2, [pc, #176]	; (80126d4 <tcp_listen_input+0x1f4>)
 8012622:	697b      	ldr	r3, [r7, #20]
 8012624:	6013      	str	r3, [r2, #0]
 8012626:	f003 fd27 	bl	8016078 <tcp_timer_needed>
 801262a:	4b2b      	ldr	r3, [pc, #172]	; (80126d8 <tcp_listen_input+0x1f8>)
 801262c:	2201      	movs	r2, #1
 801262e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8012630:	6978      	ldr	r0, [r7, #20]
 8012632:	f001 fd8d 	bl	8014150 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8012636:	4b23      	ldr	r3, [pc, #140]	; (80126c4 <tcp_listen_input+0x1e4>)
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	89db      	ldrh	r3, [r3, #14]
 801263c:	b29a      	uxth	r2, r3
 801263e:	697b      	ldr	r3, [r7, #20]
 8012640:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8012644:	697b      	ldr	r3, [r7, #20]
 8012646:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801264a:	697b      	ldr	r3, [r7, #20]
 801264c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8012650:	697b      	ldr	r3, [r7, #20]
 8012652:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8012654:	697b      	ldr	r3, [r7, #20]
 8012656:	3304      	adds	r3, #4
 8012658:	4618      	mov	r0, r3
 801265a:	f005 fc65 	bl	8017f28 <ip4_route>
 801265e:	4601      	mov	r1, r0
 8012660:	697b      	ldr	r3, [r7, #20]
 8012662:	3304      	adds	r3, #4
 8012664:	461a      	mov	r2, r3
 8012666:	4620      	mov	r0, r4
 8012668:	f7ff fa32 	bl	8011ad0 <tcp_eff_send_mss_netif>
 801266c:	4603      	mov	r3, r0
 801266e:	461a      	mov	r2, r3
 8012670:	697b      	ldr	r3, [r7, #20]
 8012672:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8012674:	2112      	movs	r1, #18
 8012676:	6978      	ldr	r0, [r7, #20]
 8012678:	f002 fc9a 	bl	8014fb0 <tcp_enqueue_flags>
 801267c:	4603      	mov	r3, r0
 801267e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8012680:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012684:	2b00      	cmp	r3, #0
 8012686:	d004      	beq.n	8012692 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8012688:	2100      	movs	r1, #0
 801268a:	6978      	ldr	r0, [r7, #20]
 801268c:	f7fd fef0 	bl	8010470 <tcp_abandon>
      return;
 8012690:	e006      	b.n	80126a0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8012692:	6978      	ldr	r0, [r7, #20]
 8012694:	f002 fd7a 	bl	801518c <tcp_output>
  return;
 8012698:	e001      	b.n	801269e <tcp_listen_input+0x1be>
    return;
 801269a:	bf00      	nop
 801269c:	e000      	b.n	80126a0 <tcp_listen_input+0x1c0>
  return;
 801269e:	bf00      	nop
}
 80126a0:	371c      	adds	r7, #28
 80126a2:	46bd      	mov	sp, r7
 80126a4:	bd90      	pop	{r4, r7, pc}
 80126a6:	bf00      	nop
 80126a8:	200014bc 	.word	0x200014bc
 80126ac:	08020d38 	.word	0x08020d38
 80126b0:	08020f30 	.word	0x08020f30
 80126b4:	08020d84 	.word	0x08020d84
 80126b8:	200014b4 	.word	0x200014b4
 80126bc:	200014ba 	.word	0x200014ba
 80126c0:	200014b0 	.word	0x200014b0
 80126c4:	200014a0 	.word	0x200014a0
 80126c8:	20004c14 	.word	0x20004c14
 80126cc:	20004c18 	.word	0x20004c18
 80126d0:	20004c04 	.word	0x20004c04
 80126d4:	20008318 	.word	0x20008318
 80126d8:	20008314 	.word	0x20008314

080126dc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80126dc:	b580      	push	{r7, lr}
 80126de:	b086      	sub	sp, #24
 80126e0:	af04      	add	r7, sp, #16
 80126e2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80126e4:	4b2f      	ldr	r3, [pc, #188]	; (80127a4 <tcp_timewait_input+0xc8>)
 80126e6:	781b      	ldrb	r3, [r3, #0]
 80126e8:	f003 0304 	and.w	r3, r3, #4
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d153      	bne.n	8012798 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d106      	bne.n	8012704 <tcp_timewait_input+0x28>
 80126f6:	4b2c      	ldr	r3, [pc, #176]	; (80127a8 <tcp_timewait_input+0xcc>)
 80126f8:	f240 22ee 	movw	r2, #750	; 0x2ee
 80126fc:	492b      	ldr	r1, [pc, #172]	; (80127ac <tcp_timewait_input+0xd0>)
 80126fe:	482c      	ldr	r0, [pc, #176]	; (80127b0 <tcp_timewait_input+0xd4>)
 8012700:	f00a f9f6 	bl	801caf0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8012704:	4b27      	ldr	r3, [pc, #156]	; (80127a4 <tcp_timewait_input+0xc8>)
 8012706:	781b      	ldrb	r3, [r3, #0]
 8012708:	f003 0302 	and.w	r3, r3, #2
 801270c:	2b00      	cmp	r3, #0
 801270e:	d02a      	beq.n	8012766 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8012710:	4b28      	ldr	r3, [pc, #160]	; (80127b4 <tcp_timewait_input+0xd8>)
 8012712:	681a      	ldr	r2, [r3, #0]
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012718:	1ad3      	subs	r3, r2, r3
 801271a:	2b00      	cmp	r3, #0
 801271c:	db2d      	blt.n	801277a <tcp_timewait_input+0x9e>
 801271e:	4b25      	ldr	r3, [pc, #148]	; (80127b4 <tcp_timewait_input+0xd8>)
 8012720:	681a      	ldr	r2, [r3, #0]
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012726:	6879      	ldr	r1, [r7, #4]
 8012728:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801272a:	440b      	add	r3, r1
 801272c:	1ad3      	subs	r3, r2, r3
 801272e:	2b00      	cmp	r3, #0
 8012730:	dc23      	bgt.n	801277a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012732:	4b21      	ldr	r3, [pc, #132]	; (80127b8 <tcp_timewait_input+0xdc>)
 8012734:	6819      	ldr	r1, [r3, #0]
 8012736:	4b21      	ldr	r3, [pc, #132]	; (80127bc <tcp_timewait_input+0xe0>)
 8012738:	881b      	ldrh	r3, [r3, #0]
 801273a:	461a      	mov	r2, r3
 801273c:	4b1d      	ldr	r3, [pc, #116]	; (80127b4 <tcp_timewait_input+0xd8>)
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012742:	4b1f      	ldr	r3, [pc, #124]	; (80127c0 <tcp_timewait_input+0xe4>)
 8012744:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012746:	885b      	ldrh	r3, [r3, #2]
 8012748:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801274a:	4a1d      	ldr	r2, [pc, #116]	; (80127c0 <tcp_timewait_input+0xe4>)
 801274c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801274e:	8812      	ldrh	r2, [r2, #0]
 8012750:	b292      	uxth	r2, r2
 8012752:	9202      	str	r2, [sp, #8]
 8012754:	9301      	str	r3, [sp, #4]
 8012756:	4b1b      	ldr	r3, [pc, #108]	; (80127c4 <tcp_timewait_input+0xe8>)
 8012758:	9300      	str	r3, [sp, #0]
 801275a:	4b1b      	ldr	r3, [pc, #108]	; (80127c8 <tcp_timewait_input+0xec>)
 801275c:	4602      	mov	r2, r0
 801275e:	6878      	ldr	r0, [r7, #4]
 8012760:	f003 fac8 	bl	8015cf4 <tcp_rst>
      return;
 8012764:	e01b      	b.n	801279e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8012766:	4b0f      	ldr	r3, [pc, #60]	; (80127a4 <tcp_timewait_input+0xc8>)
 8012768:	781b      	ldrb	r3, [r3, #0]
 801276a:	f003 0301 	and.w	r3, r3, #1
 801276e:	2b00      	cmp	r3, #0
 8012770:	d003      	beq.n	801277a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8012772:	4b16      	ldr	r3, [pc, #88]	; (80127cc <tcp_timewait_input+0xf0>)
 8012774:	681a      	ldr	r2, [r3, #0]
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801277a:	4b10      	ldr	r3, [pc, #64]	; (80127bc <tcp_timewait_input+0xe0>)
 801277c:	881b      	ldrh	r3, [r3, #0]
 801277e:	2b00      	cmp	r3, #0
 8012780:	d00c      	beq.n	801279c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	8b5b      	ldrh	r3, [r3, #26]
 8012786:	f043 0302 	orr.w	r3, r3, #2
 801278a:	b29a      	uxth	r2, r3
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8012790:	6878      	ldr	r0, [r7, #4]
 8012792:	f002 fcfb 	bl	801518c <tcp_output>
  }
  return;
 8012796:	e001      	b.n	801279c <tcp_timewait_input+0xc0>
    return;
 8012798:	bf00      	nop
 801279a:	e000      	b.n	801279e <tcp_timewait_input+0xc2>
  return;
 801279c:	bf00      	nop
}
 801279e:	3708      	adds	r7, #8
 80127a0:	46bd      	mov	sp, r7
 80127a2:	bd80      	pop	{r7, pc}
 80127a4:	200014bc 	.word	0x200014bc
 80127a8:	08020d38 	.word	0x08020d38
 80127ac:	08020f50 	.word	0x08020f50
 80127b0:	08020d84 	.word	0x08020d84
 80127b4:	200014b0 	.word	0x200014b0
 80127b8:	200014b4 	.word	0x200014b4
 80127bc:	200014ba 	.word	0x200014ba
 80127c0:	200014a0 	.word	0x200014a0
 80127c4:	20004c14 	.word	0x20004c14
 80127c8:	20004c18 	.word	0x20004c18
 80127cc:	2000831c 	.word	0x2000831c

080127d0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80127d0:	b590      	push	{r4, r7, lr}
 80127d2:	b08d      	sub	sp, #52	; 0x34
 80127d4:	af04      	add	r7, sp, #16
 80127d6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80127d8:	2300      	movs	r3, #0
 80127da:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80127dc:	2300      	movs	r3, #0
 80127de:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d106      	bne.n	80127f4 <tcp_process+0x24>
 80127e6:	4ba5      	ldr	r3, [pc, #660]	; (8012a7c <tcp_process+0x2ac>)
 80127e8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80127ec:	49a4      	ldr	r1, [pc, #656]	; (8012a80 <tcp_process+0x2b0>)
 80127ee:	48a5      	ldr	r0, [pc, #660]	; (8012a84 <tcp_process+0x2b4>)
 80127f0:	f00a f97e 	bl	801caf0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80127f4:	4ba4      	ldr	r3, [pc, #656]	; (8012a88 <tcp_process+0x2b8>)
 80127f6:	781b      	ldrb	r3, [r3, #0]
 80127f8:	f003 0304 	and.w	r3, r3, #4
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d04e      	beq.n	801289e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	7d1b      	ldrb	r3, [r3, #20]
 8012804:	2b02      	cmp	r3, #2
 8012806:	d108      	bne.n	801281a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801280c:	4b9f      	ldr	r3, [pc, #636]	; (8012a8c <tcp_process+0x2bc>)
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	429a      	cmp	r2, r3
 8012812:	d123      	bne.n	801285c <tcp_process+0x8c>
        acceptable = 1;
 8012814:	2301      	movs	r3, #1
 8012816:	76fb      	strb	r3, [r7, #27]
 8012818:	e020      	b.n	801285c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801281e:	4b9c      	ldr	r3, [pc, #624]	; (8012a90 <tcp_process+0x2c0>)
 8012820:	681b      	ldr	r3, [r3, #0]
 8012822:	429a      	cmp	r2, r3
 8012824:	d102      	bne.n	801282c <tcp_process+0x5c>
        acceptable = 1;
 8012826:	2301      	movs	r3, #1
 8012828:	76fb      	strb	r3, [r7, #27]
 801282a:	e017      	b.n	801285c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801282c:	4b98      	ldr	r3, [pc, #608]	; (8012a90 <tcp_process+0x2c0>)
 801282e:	681a      	ldr	r2, [r3, #0]
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012834:	1ad3      	subs	r3, r2, r3
 8012836:	2b00      	cmp	r3, #0
 8012838:	db10      	blt.n	801285c <tcp_process+0x8c>
 801283a:	4b95      	ldr	r3, [pc, #596]	; (8012a90 <tcp_process+0x2c0>)
 801283c:	681a      	ldr	r2, [r3, #0]
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012842:	6879      	ldr	r1, [r7, #4]
 8012844:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012846:	440b      	add	r3, r1
 8012848:	1ad3      	subs	r3, r2, r3
 801284a:	2b00      	cmp	r3, #0
 801284c:	dc06      	bgt.n	801285c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	8b5b      	ldrh	r3, [r3, #26]
 8012852:	f043 0302 	orr.w	r3, r3, #2
 8012856:	b29a      	uxth	r2, r3
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801285c:	7efb      	ldrb	r3, [r7, #27]
 801285e:	2b00      	cmp	r3, #0
 8012860:	d01b      	beq.n	801289a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	7d1b      	ldrb	r3, [r3, #20]
 8012866:	2b00      	cmp	r3, #0
 8012868:	d106      	bne.n	8012878 <tcp_process+0xa8>
 801286a:	4b84      	ldr	r3, [pc, #528]	; (8012a7c <tcp_process+0x2ac>)
 801286c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8012870:	4988      	ldr	r1, [pc, #544]	; (8012a94 <tcp_process+0x2c4>)
 8012872:	4884      	ldr	r0, [pc, #528]	; (8012a84 <tcp_process+0x2b4>)
 8012874:	f00a f93c 	bl	801caf0 <iprintf>
      recv_flags |= TF_RESET;
 8012878:	4b87      	ldr	r3, [pc, #540]	; (8012a98 <tcp_process+0x2c8>)
 801287a:	781b      	ldrb	r3, [r3, #0]
 801287c:	f043 0308 	orr.w	r3, r3, #8
 8012880:	b2da      	uxtb	r2, r3
 8012882:	4b85      	ldr	r3, [pc, #532]	; (8012a98 <tcp_process+0x2c8>)
 8012884:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	8b5b      	ldrh	r3, [r3, #26]
 801288a:	f023 0301 	bic.w	r3, r3, #1
 801288e:	b29a      	uxth	r2, r3
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8012894:	f06f 030d 	mvn.w	r3, #13
 8012898:	e37a      	b.n	8012f90 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801289a:	2300      	movs	r3, #0
 801289c:	e378      	b.n	8012f90 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801289e:	4b7a      	ldr	r3, [pc, #488]	; (8012a88 <tcp_process+0x2b8>)
 80128a0:	781b      	ldrb	r3, [r3, #0]
 80128a2:	f003 0302 	and.w	r3, r3, #2
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d010      	beq.n	80128cc <tcp_process+0xfc>
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	7d1b      	ldrb	r3, [r3, #20]
 80128ae:	2b02      	cmp	r3, #2
 80128b0:	d00c      	beq.n	80128cc <tcp_process+0xfc>
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	7d1b      	ldrb	r3, [r3, #20]
 80128b6:	2b03      	cmp	r3, #3
 80128b8:	d008      	beq.n	80128cc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	8b5b      	ldrh	r3, [r3, #26]
 80128be:	f043 0302 	orr.w	r3, r3, #2
 80128c2:	b29a      	uxth	r2, r3
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80128c8:	2300      	movs	r3, #0
 80128ca:	e361      	b.n	8012f90 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	8b5b      	ldrh	r3, [r3, #26]
 80128d0:	f003 0310 	and.w	r3, r3, #16
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d103      	bne.n	80128e0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80128d8:	4b70      	ldr	r3, [pc, #448]	; (8012a9c <tcp_process+0x2cc>)
 80128da:	681a      	ldr	r2, [r3, #0]
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	2200      	movs	r2, #0
 80128e4:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	2200      	movs	r2, #0
 80128ec:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80128f0:	6878      	ldr	r0, [r7, #4]
 80128f2:	f001 fc2d 	bl	8014150 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	7d1b      	ldrb	r3, [r3, #20]
 80128fa:	3b02      	subs	r3, #2
 80128fc:	2b07      	cmp	r3, #7
 80128fe:	f200 8337 	bhi.w	8012f70 <tcp_process+0x7a0>
 8012902:	a201      	add	r2, pc, #4	; (adr r2, 8012908 <tcp_process+0x138>)
 8012904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012908:	08012929 	.word	0x08012929
 801290c:	08012b59 	.word	0x08012b59
 8012910:	08012cd1 	.word	0x08012cd1
 8012914:	08012cfb 	.word	0x08012cfb
 8012918:	08012e1f 	.word	0x08012e1f
 801291c:	08012cd1 	.word	0x08012cd1
 8012920:	08012eab 	.word	0x08012eab
 8012924:	08012f3b 	.word	0x08012f3b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8012928:	4b57      	ldr	r3, [pc, #348]	; (8012a88 <tcp_process+0x2b8>)
 801292a:	781b      	ldrb	r3, [r3, #0]
 801292c:	f003 0310 	and.w	r3, r3, #16
 8012930:	2b00      	cmp	r3, #0
 8012932:	f000 80e4 	beq.w	8012afe <tcp_process+0x32e>
 8012936:	4b54      	ldr	r3, [pc, #336]	; (8012a88 <tcp_process+0x2b8>)
 8012938:	781b      	ldrb	r3, [r3, #0]
 801293a:	f003 0302 	and.w	r3, r3, #2
 801293e:	2b00      	cmp	r3, #0
 8012940:	f000 80dd 	beq.w	8012afe <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012948:	1c5a      	adds	r2, r3, #1
 801294a:	4b50      	ldr	r3, [pc, #320]	; (8012a8c <tcp_process+0x2bc>)
 801294c:	681b      	ldr	r3, [r3, #0]
 801294e:	429a      	cmp	r2, r3
 8012950:	f040 80d5 	bne.w	8012afe <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8012954:	4b4e      	ldr	r3, [pc, #312]	; (8012a90 <tcp_process+0x2c0>)
 8012956:	681b      	ldr	r3, [r3, #0]
 8012958:	1c5a      	adds	r2, r3, #1
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8012966:	4b49      	ldr	r3, [pc, #292]	; (8012a8c <tcp_process+0x2bc>)
 8012968:	681a      	ldr	r2, [r3, #0]
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801296e:	4b4c      	ldr	r3, [pc, #304]	; (8012aa0 <tcp_process+0x2d0>)
 8012970:	681b      	ldr	r3, [r3, #0]
 8012972:	89db      	ldrh	r3, [r3, #14]
 8012974:	b29a      	uxth	r2, r3
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8012988:	4b41      	ldr	r3, [pc, #260]	; (8012a90 <tcp_process+0x2c0>)
 801298a:	681b      	ldr	r3, [r3, #0]
 801298c:	1e5a      	subs	r2, r3, #1
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	2204      	movs	r2, #4
 8012996:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	3304      	adds	r3, #4
 80129a0:	4618      	mov	r0, r3
 80129a2:	f005 fac1 	bl	8017f28 <ip4_route>
 80129a6:	4601      	mov	r1, r0
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	3304      	adds	r3, #4
 80129ac:	461a      	mov	r2, r3
 80129ae:	4620      	mov	r0, r4
 80129b0:	f7ff f88e 	bl	8011ad0 <tcp_eff_send_mss_netif>
 80129b4:	4603      	mov	r3, r0
 80129b6:	461a      	mov	r2, r3
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80129c0:	009a      	lsls	r2, r3, #2
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80129c6:	005b      	lsls	r3, r3, #1
 80129c8:	f241 111c 	movw	r1, #4380	; 0x111c
 80129cc:	428b      	cmp	r3, r1
 80129ce:	bf38      	it	cc
 80129d0:	460b      	movcc	r3, r1
 80129d2:	429a      	cmp	r2, r3
 80129d4:	d204      	bcs.n	80129e0 <tcp_process+0x210>
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80129da:	009b      	lsls	r3, r3, #2
 80129dc:	b29b      	uxth	r3, r3
 80129de:	e00d      	b.n	80129fc <tcp_process+0x22c>
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80129e4:	005b      	lsls	r3, r3, #1
 80129e6:	f241 121c 	movw	r2, #4380	; 0x111c
 80129ea:	4293      	cmp	r3, r2
 80129ec:	d904      	bls.n	80129f8 <tcp_process+0x228>
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80129f2:	005b      	lsls	r3, r3, #1
 80129f4:	b29b      	uxth	r3, r3
 80129f6:	e001      	b.n	80129fc <tcp_process+0x22c>
 80129f8:	f241 131c 	movw	r3, #4380	; 0x111c
 80129fc:	687a      	ldr	r2, [r7, #4]
 80129fe:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d106      	bne.n	8012a1a <tcp_process+0x24a>
 8012a0c:	4b1b      	ldr	r3, [pc, #108]	; (8012a7c <tcp_process+0x2ac>)
 8012a0e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8012a12:	4924      	ldr	r1, [pc, #144]	; (8012aa4 <tcp_process+0x2d4>)
 8012a14:	481b      	ldr	r0, [pc, #108]	; (8012a84 <tcp_process+0x2b4>)
 8012a16:	f00a f86b 	bl	801caf0 <iprintf>
        --pcb->snd_queuelen;
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012a20:	3b01      	subs	r3, #1
 8012a22:	b29a      	uxth	r2, r3
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a2e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8012a30:	69fb      	ldr	r3, [r7, #28]
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d111      	bne.n	8012a5a <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a3a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8012a3c:	69fb      	ldr	r3, [r7, #28]
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d106      	bne.n	8012a50 <tcp_process+0x280>
 8012a42:	4b0e      	ldr	r3, [pc, #56]	; (8012a7c <tcp_process+0x2ac>)
 8012a44:	f44f 725d 	mov.w	r2, #884	; 0x374
 8012a48:	4917      	ldr	r1, [pc, #92]	; (8012aa8 <tcp_process+0x2d8>)
 8012a4a:	480e      	ldr	r0, [pc, #56]	; (8012a84 <tcp_process+0x2b4>)
 8012a4c:	f00a f850 	bl	801caf0 <iprintf>
          pcb->unsent = rseg->next;
 8012a50:	69fb      	ldr	r3, [r7, #28]
 8012a52:	681a      	ldr	r2, [r3, #0]
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	66da      	str	r2, [r3, #108]	; 0x6c
 8012a58:	e003      	b.n	8012a62 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8012a5a:	69fb      	ldr	r3, [r7, #28]
 8012a5c:	681a      	ldr	r2, [r3, #0]
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8012a62:	69f8      	ldr	r0, [r7, #28]
 8012a64:	f7fe fc6f 	bl	8011346 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d11d      	bne.n	8012aac <tcp_process+0x2dc>
          pcb->rtime = -1;
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012a76:	861a      	strh	r2, [r3, #48]	; 0x30
 8012a78:	e01f      	b.n	8012aba <tcp_process+0x2ea>
 8012a7a:	bf00      	nop
 8012a7c:	08020d38 	.word	0x08020d38
 8012a80:	08020f70 	.word	0x08020f70
 8012a84:	08020d84 	.word	0x08020d84
 8012a88:	200014bc 	.word	0x200014bc
 8012a8c:	200014b4 	.word	0x200014b4
 8012a90:	200014b0 	.word	0x200014b0
 8012a94:	08020f8c 	.word	0x08020f8c
 8012a98:	200014bd 	.word	0x200014bd
 8012a9c:	2000831c 	.word	0x2000831c
 8012aa0:	200014a0 	.word	0x200014a0
 8012aa4:	08020fac 	.word	0x08020fac
 8012aa8:	08020fc4 	.word	0x08020fc4
        } else {
          pcb->rtime = 0;
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	2200      	movs	r2, #0
 8012ab0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	2200      	movs	r2, #0
 8012ab6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d00a      	beq.n	8012ada <tcp_process+0x30a>
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012aca:	687a      	ldr	r2, [r7, #4]
 8012acc:	6910      	ldr	r0, [r2, #16]
 8012ace:	2200      	movs	r2, #0
 8012ad0:	6879      	ldr	r1, [r7, #4]
 8012ad2:	4798      	blx	r3
 8012ad4:	4603      	mov	r3, r0
 8012ad6:	76bb      	strb	r3, [r7, #26]
 8012ad8:	e001      	b.n	8012ade <tcp_process+0x30e>
 8012ada:	2300      	movs	r3, #0
 8012adc:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8012ade:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012ae2:	f113 0f0d 	cmn.w	r3, #13
 8012ae6:	d102      	bne.n	8012aee <tcp_process+0x31e>
          return ERR_ABRT;
 8012ae8:	f06f 030c 	mvn.w	r3, #12
 8012aec:	e250      	b.n	8012f90 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	8b5b      	ldrh	r3, [r3, #26]
 8012af2:	f043 0302 	orr.w	r3, r3, #2
 8012af6:	b29a      	uxth	r2, r3
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8012afc:	e23a      	b.n	8012f74 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8012afe:	4b9d      	ldr	r3, [pc, #628]	; (8012d74 <tcp_process+0x5a4>)
 8012b00:	781b      	ldrb	r3, [r3, #0]
 8012b02:	f003 0310 	and.w	r3, r3, #16
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	f000 8234 	beq.w	8012f74 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012b0c:	4b9a      	ldr	r3, [pc, #616]	; (8012d78 <tcp_process+0x5a8>)
 8012b0e:	6819      	ldr	r1, [r3, #0]
 8012b10:	4b9a      	ldr	r3, [pc, #616]	; (8012d7c <tcp_process+0x5ac>)
 8012b12:	881b      	ldrh	r3, [r3, #0]
 8012b14:	461a      	mov	r2, r3
 8012b16:	4b9a      	ldr	r3, [pc, #616]	; (8012d80 <tcp_process+0x5b0>)
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012b1c:	4b99      	ldr	r3, [pc, #612]	; (8012d84 <tcp_process+0x5b4>)
 8012b1e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012b20:	885b      	ldrh	r3, [r3, #2]
 8012b22:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012b24:	4a97      	ldr	r2, [pc, #604]	; (8012d84 <tcp_process+0x5b4>)
 8012b26:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012b28:	8812      	ldrh	r2, [r2, #0]
 8012b2a:	b292      	uxth	r2, r2
 8012b2c:	9202      	str	r2, [sp, #8]
 8012b2e:	9301      	str	r3, [sp, #4]
 8012b30:	4b95      	ldr	r3, [pc, #596]	; (8012d88 <tcp_process+0x5b8>)
 8012b32:	9300      	str	r3, [sp, #0]
 8012b34:	4b95      	ldr	r3, [pc, #596]	; (8012d8c <tcp_process+0x5bc>)
 8012b36:	4602      	mov	r2, r0
 8012b38:	6878      	ldr	r0, [r7, #4]
 8012b3a:	f003 f8db 	bl	8015cf4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012b44:	2b05      	cmp	r3, #5
 8012b46:	f200 8215 	bhi.w	8012f74 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	2200      	movs	r2, #0
 8012b4e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8012b50:	6878      	ldr	r0, [r7, #4]
 8012b52:	f002 fea5 	bl	80158a0 <tcp_rexmit_rto>
      break;
 8012b56:	e20d      	b.n	8012f74 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8012b58:	4b86      	ldr	r3, [pc, #536]	; (8012d74 <tcp_process+0x5a4>)
 8012b5a:	781b      	ldrb	r3, [r3, #0]
 8012b5c:	f003 0310 	and.w	r3, r3, #16
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	f000 80a1 	beq.w	8012ca8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012b66:	4b84      	ldr	r3, [pc, #528]	; (8012d78 <tcp_process+0x5a8>)
 8012b68:	681a      	ldr	r2, [r3, #0]
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012b6e:	1ad3      	subs	r3, r2, r3
 8012b70:	3b01      	subs	r3, #1
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	db7e      	blt.n	8012c74 <tcp_process+0x4a4>
 8012b76:	4b80      	ldr	r3, [pc, #512]	; (8012d78 <tcp_process+0x5a8>)
 8012b78:	681a      	ldr	r2, [r3, #0]
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012b7e:	1ad3      	subs	r3, r2, r3
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	dc77      	bgt.n	8012c74 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	2204      	movs	r2, #4
 8012b88:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d102      	bne.n	8012b98 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8012b92:	23fa      	movs	r3, #250	; 0xfa
 8012b94:	76bb      	strb	r3, [r7, #26]
 8012b96:	e01d      	b.n	8012bd4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012b9c:	699b      	ldr	r3, [r3, #24]
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d106      	bne.n	8012bb0 <tcp_process+0x3e0>
 8012ba2:	4b7b      	ldr	r3, [pc, #492]	; (8012d90 <tcp_process+0x5c0>)
 8012ba4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8012ba8:	497a      	ldr	r1, [pc, #488]	; (8012d94 <tcp_process+0x5c4>)
 8012baa:	487b      	ldr	r0, [pc, #492]	; (8012d98 <tcp_process+0x5c8>)
 8012bac:	f009 ffa0 	bl	801caf0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012bb4:	699b      	ldr	r3, [r3, #24]
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d00a      	beq.n	8012bd0 <tcp_process+0x400>
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012bbe:	699b      	ldr	r3, [r3, #24]
 8012bc0:	687a      	ldr	r2, [r7, #4]
 8012bc2:	6910      	ldr	r0, [r2, #16]
 8012bc4:	2200      	movs	r2, #0
 8012bc6:	6879      	ldr	r1, [r7, #4]
 8012bc8:	4798      	blx	r3
 8012bca:	4603      	mov	r3, r0
 8012bcc:	76bb      	strb	r3, [r7, #26]
 8012bce:	e001      	b.n	8012bd4 <tcp_process+0x404>
 8012bd0:	23f0      	movs	r3, #240	; 0xf0
 8012bd2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8012bd4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d00a      	beq.n	8012bf2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8012bdc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012be0:	f113 0f0d 	cmn.w	r3, #13
 8012be4:	d002      	beq.n	8012bec <tcp_process+0x41c>
              tcp_abort(pcb);
 8012be6:	6878      	ldr	r0, [r7, #4]
 8012be8:	f7fd fd00 	bl	80105ec <tcp_abort>
            }
            return ERR_ABRT;
 8012bec:	f06f 030c 	mvn.w	r3, #12
 8012bf0:	e1ce      	b.n	8012f90 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8012bf2:	6878      	ldr	r0, [r7, #4]
 8012bf4:	f000 fae0 	bl	80131b8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8012bf8:	4b68      	ldr	r3, [pc, #416]	; (8012d9c <tcp_process+0x5cc>)
 8012bfa:	881b      	ldrh	r3, [r3, #0]
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d005      	beq.n	8012c0c <tcp_process+0x43c>
            recv_acked--;
 8012c00:	4b66      	ldr	r3, [pc, #408]	; (8012d9c <tcp_process+0x5cc>)
 8012c02:	881b      	ldrh	r3, [r3, #0]
 8012c04:	3b01      	subs	r3, #1
 8012c06:	b29a      	uxth	r2, r3
 8012c08:	4b64      	ldr	r3, [pc, #400]	; (8012d9c <tcp_process+0x5cc>)
 8012c0a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012c10:	009a      	lsls	r2, r3, #2
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012c16:	005b      	lsls	r3, r3, #1
 8012c18:	f241 111c 	movw	r1, #4380	; 0x111c
 8012c1c:	428b      	cmp	r3, r1
 8012c1e:	bf38      	it	cc
 8012c20:	460b      	movcc	r3, r1
 8012c22:	429a      	cmp	r2, r3
 8012c24:	d204      	bcs.n	8012c30 <tcp_process+0x460>
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012c2a:	009b      	lsls	r3, r3, #2
 8012c2c:	b29b      	uxth	r3, r3
 8012c2e:	e00d      	b.n	8012c4c <tcp_process+0x47c>
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012c34:	005b      	lsls	r3, r3, #1
 8012c36:	f241 121c 	movw	r2, #4380	; 0x111c
 8012c3a:	4293      	cmp	r3, r2
 8012c3c:	d904      	bls.n	8012c48 <tcp_process+0x478>
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012c42:	005b      	lsls	r3, r3, #1
 8012c44:	b29b      	uxth	r3, r3
 8012c46:	e001      	b.n	8012c4c <tcp_process+0x47c>
 8012c48:	f241 131c 	movw	r3, #4380	; 0x111c
 8012c4c:	687a      	ldr	r2, [r7, #4]
 8012c4e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8012c52:	4b53      	ldr	r3, [pc, #332]	; (8012da0 <tcp_process+0x5d0>)
 8012c54:	781b      	ldrb	r3, [r3, #0]
 8012c56:	f003 0320 	and.w	r3, r3, #32
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d037      	beq.n	8012cce <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	8b5b      	ldrh	r3, [r3, #26]
 8012c62:	f043 0302 	orr.w	r3, r3, #2
 8012c66:	b29a      	uxth	r2, r3
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	2207      	movs	r2, #7
 8012c70:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8012c72:	e02c      	b.n	8012cce <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012c74:	4b40      	ldr	r3, [pc, #256]	; (8012d78 <tcp_process+0x5a8>)
 8012c76:	6819      	ldr	r1, [r3, #0]
 8012c78:	4b40      	ldr	r3, [pc, #256]	; (8012d7c <tcp_process+0x5ac>)
 8012c7a:	881b      	ldrh	r3, [r3, #0]
 8012c7c:	461a      	mov	r2, r3
 8012c7e:	4b40      	ldr	r3, [pc, #256]	; (8012d80 <tcp_process+0x5b0>)
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012c84:	4b3f      	ldr	r3, [pc, #252]	; (8012d84 <tcp_process+0x5b4>)
 8012c86:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012c88:	885b      	ldrh	r3, [r3, #2]
 8012c8a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012c8c:	4a3d      	ldr	r2, [pc, #244]	; (8012d84 <tcp_process+0x5b4>)
 8012c8e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012c90:	8812      	ldrh	r2, [r2, #0]
 8012c92:	b292      	uxth	r2, r2
 8012c94:	9202      	str	r2, [sp, #8]
 8012c96:	9301      	str	r3, [sp, #4]
 8012c98:	4b3b      	ldr	r3, [pc, #236]	; (8012d88 <tcp_process+0x5b8>)
 8012c9a:	9300      	str	r3, [sp, #0]
 8012c9c:	4b3b      	ldr	r3, [pc, #236]	; (8012d8c <tcp_process+0x5bc>)
 8012c9e:	4602      	mov	r2, r0
 8012ca0:	6878      	ldr	r0, [r7, #4]
 8012ca2:	f003 f827 	bl	8015cf4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8012ca6:	e167      	b.n	8012f78 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8012ca8:	4b32      	ldr	r3, [pc, #200]	; (8012d74 <tcp_process+0x5a4>)
 8012caa:	781b      	ldrb	r3, [r3, #0]
 8012cac:	f003 0302 	and.w	r3, r3, #2
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	f000 8161 	beq.w	8012f78 <tcp_process+0x7a8>
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cba:	1e5a      	subs	r2, r3, #1
 8012cbc:	4b30      	ldr	r3, [pc, #192]	; (8012d80 <tcp_process+0x5b0>)
 8012cbe:	681b      	ldr	r3, [r3, #0]
 8012cc0:	429a      	cmp	r2, r3
 8012cc2:	f040 8159 	bne.w	8012f78 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8012cc6:	6878      	ldr	r0, [r7, #4]
 8012cc8:	f002 fe0c 	bl	80158e4 <tcp_rexmit>
      break;
 8012ccc:	e154      	b.n	8012f78 <tcp_process+0x7a8>
 8012cce:	e153      	b.n	8012f78 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8012cd0:	6878      	ldr	r0, [r7, #4]
 8012cd2:	f000 fa71 	bl	80131b8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8012cd6:	4b32      	ldr	r3, [pc, #200]	; (8012da0 <tcp_process+0x5d0>)
 8012cd8:	781b      	ldrb	r3, [r3, #0]
 8012cda:	f003 0320 	and.w	r3, r3, #32
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	f000 814c 	beq.w	8012f7c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	8b5b      	ldrh	r3, [r3, #26]
 8012ce8:	f043 0302 	orr.w	r3, r3, #2
 8012cec:	b29a      	uxth	r2, r3
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	2207      	movs	r2, #7
 8012cf6:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012cf8:	e140      	b.n	8012f7c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8012cfa:	6878      	ldr	r0, [r7, #4]
 8012cfc:	f000 fa5c 	bl	80131b8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8012d00:	4b27      	ldr	r3, [pc, #156]	; (8012da0 <tcp_process+0x5d0>)
 8012d02:	781b      	ldrb	r3, [r3, #0]
 8012d04:	f003 0320 	and.w	r3, r3, #32
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d071      	beq.n	8012df0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012d0c:	4b19      	ldr	r3, [pc, #100]	; (8012d74 <tcp_process+0x5a4>)
 8012d0e:	781b      	ldrb	r3, [r3, #0]
 8012d10:	f003 0310 	and.w	r3, r3, #16
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d060      	beq.n	8012dda <tcp_process+0x60a>
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012d1c:	4b16      	ldr	r3, [pc, #88]	; (8012d78 <tcp_process+0x5a8>)
 8012d1e:	681b      	ldr	r3, [r3, #0]
 8012d20:	429a      	cmp	r2, r3
 8012d22:	d15a      	bne.n	8012dda <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d156      	bne.n	8012dda <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	8b5b      	ldrh	r3, [r3, #26]
 8012d30:	f043 0302 	orr.w	r3, r3, #2
 8012d34:	b29a      	uxth	r2, r3
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8012d3a:	6878      	ldr	r0, [r7, #4]
 8012d3c:	f7fe fdbe 	bl	80118bc <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8012d40:	4b18      	ldr	r3, [pc, #96]	; (8012da4 <tcp_process+0x5d4>)
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	687a      	ldr	r2, [r7, #4]
 8012d46:	429a      	cmp	r2, r3
 8012d48:	d105      	bne.n	8012d56 <tcp_process+0x586>
 8012d4a:	4b16      	ldr	r3, [pc, #88]	; (8012da4 <tcp_process+0x5d4>)
 8012d4c:	681b      	ldr	r3, [r3, #0]
 8012d4e:	68db      	ldr	r3, [r3, #12]
 8012d50:	4a14      	ldr	r2, [pc, #80]	; (8012da4 <tcp_process+0x5d4>)
 8012d52:	6013      	str	r3, [r2, #0]
 8012d54:	e02e      	b.n	8012db4 <tcp_process+0x5e4>
 8012d56:	4b13      	ldr	r3, [pc, #76]	; (8012da4 <tcp_process+0x5d4>)
 8012d58:	681b      	ldr	r3, [r3, #0]
 8012d5a:	617b      	str	r3, [r7, #20]
 8012d5c:	e027      	b.n	8012dae <tcp_process+0x5de>
 8012d5e:	697b      	ldr	r3, [r7, #20]
 8012d60:	68db      	ldr	r3, [r3, #12]
 8012d62:	687a      	ldr	r2, [r7, #4]
 8012d64:	429a      	cmp	r2, r3
 8012d66:	d11f      	bne.n	8012da8 <tcp_process+0x5d8>
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	68da      	ldr	r2, [r3, #12]
 8012d6c:	697b      	ldr	r3, [r7, #20]
 8012d6e:	60da      	str	r2, [r3, #12]
 8012d70:	e020      	b.n	8012db4 <tcp_process+0x5e4>
 8012d72:	bf00      	nop
 8012d74:	200014bc 	.word	0x200014bc
 8012d78:	200014b4 	.word	0x200014b4
 8012d7c:	200014ba 	.word	0x200014ba
 8012d80:	200014b0 	.word	0x200014b0
 8012d84:	200014a0 	.word	0x200014a0
 8012d88:	20004c14 	.word	0x20004c14
 8012d8c:	20004c18 	.word	0x20004c18
 8012d90:	08020d38 	.word	0x08020d38
 8012d94:	08020fd8 	.word	0x08020fd8
 8012d98:	08020d84 	.word	0x08020d84
 8012d9c:	200014b8 	.word	0x200014b8
 8012da0:	200014bd 	.word	0x200014bd
 8012da4:	20008318 	.word	0x20008318
 8012da8:	697b      	ldr	r3, [r7, #20]
 8012daa:	68db      	ldr	r3, [r3, #12]
 8012dac:	617b      	str	r3, [r7, #20]
 8012dae:	697b      	ldr	r3, [r7, #20]
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d1d4      	bne.n	8012d5e <tcp_process+0x58e>
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	2200      	movs	r2, #0
 8012db8:	60da      	str	r2, [r3, #12]
 8012dba:	4b77      	ldr	r3, [pc, #476]	; (8012f98 <tcp_process+0x7c8>)
 8012dbc:	2201      	movs	r2, #1
 8012dbe:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	220a      	movs	r2, #10
 8012dc4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8012dc6:	4b75      	ldr	r3, [pc, #468]	; (8012f9c <tcp_process+0x7cc>)
 8012dc8:	681a      	ldr	r2, [r3, #0]
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	60da      	str	r2, [r3, #12]
 8012dce:	4a73      	ldr	r2, [pc, #460]	; (8012f9c <tcp_process+0x7cc>)
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	6013      	str	r3, [r2, #0]
 8012dd4:	f003 f950 	bl	8016078 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8012dd8:	e0d2      	b.n	8012f80 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	8b5b      	ldrh	r3, [r3, #26]
 8012dde:	f043 0302 	orr.w	r3, r3, #2
 8012de2:	b29a      	uxth	r2, r3
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	2208      	movs	r2, #8
 8012dec:	751a      	strb	r2, [r3, #20]
      break;
 8012dee:	e0c7      	b.n	8012f80 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012df0:	4b6b      	ldr	r3, [pc, #428]	; (8012fa0 <tcp_process+0x7d0>)
 8012df2:	781b      	ldrb	r3, [r3, #0]
 8012df4:	f003 0310 	and.w	r3, r3, #16
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	f000 80c1 	beq.w	8012f80 <tcp_process+0x7b0>
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012e02:	4b68      	ldr	r3, [pc, #416]	; (8012fa4 <tcp_process+0x7d4>)
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	429a      	cmp	r2, r3
 8012e08:	f040 80ba 	bne.w	8012f80 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	f040 80b5 	bne.w	8012f80 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	2206      	movs	r2, #6
 8012e1a:	751a      	strb	r2, [r3, #20]
      break;
 8012e1c:	e0b0      	b.n	8012f80 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8012e1e:	6878      	ldr	r0, [r7, #4]
 8012e20:	f000 f9ca 	bl	80131b8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8012e24:	4b60      	ldr	r3, [pc, #384]	; (8012fa8 <tcp_process+0x7d8>)
 8012e26:	781b      	ldrb	r3, [r3, #0]
 8012e28:	f003 0320 	and.w	r3, r3, #32
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	f000 80a9 	beq.w	8012f84 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	8b5b      	ldrh	r3, [r3, #26]
 8012e36:	f043 0302 	orr.w	r3, r3, #2
 8012e3a:	b29a      	uxth	r2, r3
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8012e40:	6878      	ldr	r0, [r7, #4]
 8012e42:	f7fe fd3b 	bl	80118bc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8012e46:	4b59      	ldr	r3, [pc, #356]	; (8012fac <tcp_process+0x7dc>)
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	687a      	ldr	r2, [r7, #4]
 8012e4c:	429a      	cmp	r2, r3
 8012e4e:	d105      	bne.n	8012e5c <tcp_process+0x68c>
 8012e50:	4b56      	ldr	r3, [pc, #344]	; (8012fac <tcp_process+0x7dc>)
 8012e52:	681b      	ldr	r3, [r3, #0]
 8012e54:	68db      	ldr	r3, [r3, #12]
 8012e56:	4a55      	ldr	r2, [pc, #340]	; (8012fac <tcp_process+0x7dc>)
 8012e58:	6013      	str	r3, [r2, #0]
 8012e5a:	e013      	b.n	8012e84 <tcp_process+0x6b4>
 8012e5c:	4b53      	ldr	r3, [pc, #332]	; (8012fac <tcp_process+0x7dc>)
 8012e5e:	681b      	ldr	r3, [r3, #0]
 8012e60:	613b      	str	r3, [r7, #16]
 8012e62:	e00c      	b.n	8012e7e <tcp_process+0x6ae>
 8012e64:	693b      	ldr	r3, [r7, #16]
 8012e66:	68db      	ldr	r3, [r3, #12]
 8012e68:	687a      	ldr	r2, [r7, #4]
 8012e6a:	429a      	cmp	r2, r3
 8012e6c:	d104      	bne.n	8012e78 <tcp_process+0x6a8>
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	68da      	ldr	r2, [r3, #12]
 8012e72:	693b      	ldr	r3, [r7, #16]
 8012e74:	60da      	str	r2, [r3, #12]
 8012e76:	e005      	b.n	8012e84 <tcp_process+0x6b4>
 8012e78:	693b      	ldr	r3, [r7, #16]
 8012e7a:	68db      	ldr	r3, [r3, #12]
 8012e7c:	613b      	str	r3, [r7, #16]
 8012e7e:	693b      	ldr	r3, [r7, #16]
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d1ef      	bne.n	8012e64 <tcp_process+0x694>
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	2200      	movs	r2, #0
 8012e88:	60da      	str	r2, [r3, #12]
 8012e8a:	4b43      	ldr	r3, [pc, #268]	; (8012f98 <tcp_process+0x7c8>)
 8012e8c:	2201      	movs	r2, #1
 8012e8e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	220a      	movs	r2, #10
 8012e94:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8012e96:	4b41      	ldr	r3, [pc, #260]	; (8012f9c <tcp_process+0x7cc>)
 8012e98:	681a      	ldr	r2, [r3, #0]
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	60da      	str	r2, [r3, #12]
 8012e9e:	4a3f      	ldr	r2, [pc, #252]	; (8012f9c <tcp_process+0x7cc>)
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	6013      	str	r3, [r2, #0]
 8012ea4:	f003 f8e8 	bl	8016078 <tcp_timer_needed>
      }
      break;
 8012ea8:	e06c      	b.n	8012f84 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8012eaa:	6878      	ldr	r0, [r7, #4]
 8012eac:	f000 f984 	bl	80131b8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8012eb0:	4b3b      	ldr	r3, [pc, #236]	; (8012fa0 <tcp_process+0x7d0>)
 8012eb2:	781b      	ldrb	r3, [r3, #0]
 8012eb4:	f003 0310 	and.w	r3, r3, #16
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d065      	beq.n	8012f88 <tcp_process+0x7b8>
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012ec0:	4b38      	ldr	r3, [pc, #224]	; (8012fa4 <tcp_process+0x7d4>)
 8012ec2:	681b      	ldr	r3, [r3, #0]
 8012ec4:	429a      	cmp	r2, r3
 8012ec6:	d15f      	bne.n	8012f88 <tcp_process+0x7b8>
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d15b      	bne.n	8012f88 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8012ed0:	6878      	ldr	r0, [r7, #4]
 8012ed2:	f7fe fcf3 	bl	80118bc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8012ed6:	4b35      	ldr	r3, [pc, #212]	; (8012fac <tcp_process+0x7dc>)
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	687a      	ldr	r2, [r7, #4]
 8012edc:	429a      	cmp	r2, r3
 8012ede:	d105      	bne.n	8012eec <tcp_process+0x71c>
 8012ee0:	4b32      	ldr	r3, [pc, #200]	; (8012fac <tcp_process+0x7dc>)
 8012ee2:	681b      	ldr	r3, [r3, #0]
 8012ee4:	68db      	ldr	r3, [r3, #12]
 8012ee6:	4a31      	ldr	r2, [pc, #196]	; (8012fac <tcp_process+0x7dc>)
 8012ee8:	6013      	str	r3, [r2, #0]
 8012eea:	e013      	b.n	8012f14 <tcp_process+0x744>
 8012eec:	4b2f      	ldr	r3, [pc, #188]	; (8012fac <tcp_process+0x7dc>)
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	60fb      	str	r3, [r7, #12]
 8012ef2:	e00c      	b.n	8012f0e <tcp_process+0x73e>
 8012ef4:	68fb      	ldr	r3, [r7, #12]
 8012ef6:	68db      	ldr	r3, [r3, #12]
 8012ef8:	687a      	ldr	r2, [r7, #4]
 8012efa:	429a      	cmp	r2, r3
 8012efc:	d104      	bne.n	8012f08 <tcp_process+0x738>
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	68da      	ldr	r2, [r3, #12]
 8012f02:	68fb      	ldr	r3, [r7, #12]
 8012f04:	60da      	str	r2, [r3, #12]
 8012f06:	e005      	b.n	8012f14 <tcp_process+0x744>
 8012f08:	68fb      	ldr	r3, [r7, #12]
 8012f0a:	68db      	ldr	r3, [r3, #12]
 8012f0c:	60fb      	str	r3, [r7, #12]
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d1ef      	bne.n	8012ef4 <tcp_process+0x724>
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	2200      	movs	r2, #0
 8012f18:	60da      	str	r2, [r3, #12]
 8012f1a:	4b1f      	ldr	r3, [pc, #124]	; (8012f98 <tcp_process+0x7c8>)
 8012f1c:	2201      	movs	r2, #1
 8012f1e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	220a      	movs	r2, #10
 8012f24:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8012f26:	4b1d      	ldr	r3, [pc, #116]	; (8012f9c <tcp_process+0x7cc>)
 8012f28:	681a      	ldr	r2, [r3, #0]
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	60da      	str	r2, [r3, #12]
 8012f2e:	4a1b      	ldr	r2, [pc, #108]	; (8012f9c <tcp_process+0x7cc>)
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	6013      	str	r3, [r2, #0]
 8012f34:	f003 f8a0 	bl	8016078 <tcp_timer_needed>
      }
      break;
 8012f38:	e026      	b.n	8012f88 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8012f3a:	6878      	ldr	r0, [r7, #4]
 8012f3c:	f000 f93c 	bl	80131b8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8012f40:	4b17      	ldr	r3, [pc, #92]	; (8012fa0 <tcp_process+0x7d0>)
 8012f42:	781b      	ldrb	r3, [r3, #0]
 8012f44:	f003 0310 	and.w	r3, r3, #16
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d01f      	beq.n	8012f8c <tcp_process+0x7bc>
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012f50:	4b14      	ldr	r3, [pc, #80]	; (8012fa4 <tcp_process+0x7d4>)
 8012f52:	681b      	ldr	r3, [r3, #0]
 8012f54:	429a      	cmp	r2, r3
 8012f56:	d119      	bne.n	8012f8c <tcp_process+0x7bc>
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d115      	bne.n	8012f8c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8012f60:	4b11      	ldr	r3, [pc, #68]	; (8012fa8 <tcp_process+0x7d8>)
 8012f62:	781b      	ldrb	r3, [r3, #0]
 8012f64:	f043 0310 	orr.w	r3, r3, #16
 8012f68:	b2da      	uxtb	r2, r3
 8012f6a:	4b0f      	ldr	r3, [pc, #60]	; (8012fa8 <tcp_process+0x7d8>)
 8012f6c:	701a      	strb	r2, [r3, #0]
      }
      break;
 8012f6e:	e00d      	b.n	8012f8c <tcp_process+0x7bc>
    default:
      break;
 8012f70:	bf00      	nop
 8012f72:	e00c      	b.n	8012f8e <tcp_process+0x7be>
      break;
 8012f74:	bf00      	nop
 8012f76:	e00a      	b.n	8012f8e <tcp_process+0x7be>
      break;
 8012f78:	bf00      	nop
 8012f7a:	e008      	b.n	8012f8e <tcp_process+0x7be>
      break;
 8012f7c:	bf00      	nop
 8012f7e:	e006      	b.n	8012f8e <tcp_process+0x7be>
      break;
 8012f80:	bf00      	nop
 8012f82:	e004      	b.n	8012f8e <tcp_process+0x7be>
      break;
 8012f84:	bf00      	nop
 8012f86:	e002      	b.n	8012f8e <tcp_process+0x7be>
      break;
 8012f88:	bf00      	nop
 8012f8a:	e000      	b.n	8012f8e <tcp_process+0x7be>
      break;
 8012f8c:	bf00      	nop
  }
  return ERR_OK;
 8012f8e:	2300      	movs	r3, #0
}
 8012f90:	4618      	mov	r0, r3
 8012f92:	3724      	adds	r7, #36	; 0x24
 8012f94:	46bd      	mov	sp, r7
 8012f96:	bd90      	pop	{r4, r7, pc}
 8012f98:	20008314 	.word	0x20008314
 8012f9c:	20008328 	.word	0x20008328
 8012fa0:	200014bc 	.word	0x200014bc
 8012fa4:	200014b4 	.word	0x200014b4
 8012fa8:	200014bd 	.word	0x200014bd
 8012fac:	20008318 	.word	0x20008318

08012fb0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8012fb0:	b590      	push	{r4, r7, lr}
 8012fb2:	b085      	sub	sp, #20
 8012fb4:	af00      	add	r7, sp, #0
 8012fb6:	6078      	str	r0, [r7, #4]
 8012fb8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d106      	bne.n	8012fce <tcp_oos_insert_segment+0x1e>
 8012fc0:	4b3b      	ldr	r3, [pc, #236]	; (80130b0 <tcp_oos_insert_segment+0x100>)
 8012fc2:	f240 421f 	movw	r2, #1055	; 0x41f
 8012fc6:	493b      	ldr	r1, [pc, #236]	; (80130b4 <tcp_oos_insert_segment+0x104>)
 8012fc8:	483b      	ldr	r0, [pc, #236]	; (80130b8 <tcp_oos_insert_segment+0x108>)
 8012fca:	f009 fd91 	bl	801caf0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	68db      	ldr	r3, [r3, #12]
 8012fd2:	899b      	ldrh	r3, [r3, #12]
 8012fd4:	b29b      	uxth	r3, r3
 8012fd6:	4618      	mov	r0, r3
 8012fd8:	f7fb f8f2 	bl	800e1c0 <lwip_htons>
 8012fdc:	4603      	mov	r3, r0
 8012fde:	b2db      	uxtb	r3, r3
 8012fe0:	f003 0301 	and.w	r3, r3, #1
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d028      	beq.n	801303a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8012fe8:	6838      	ldr	r0, [r7, #0]
 8012fea:	f7fe f997 	bl	801131c <tcp_segs_free>
    next = NULL;
 8012fee:	2300      	movs	r3, #0
 8012ff0:	603b      	str	r3, [r7, #0]
 8012ff2:	e056      	b.n	80130a2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012ff4:	683b      	ldr	r3, [r7, #0]
 8012ff6:	68db      	ldr	r3, [r3, #12]
 8012ff8:	899b      	ldrh	r3, [r3, #12]
 8012ffa:	b29b      	uxth	r3, r3
 8012ffc:	4618      	mov	r0, r3
 8012ffe:	f7fb f8df 	bl	800e1c0 <lwip_htons>
 8013002:	4603      	mov	r3, r0
 8013004:	b2db      	uxtb	r3, r3
 8013006:	f003 0301 	and.w	r3, r3, #1
 801300a:	2b00      	cmp	r3, #0
 801300c:	d00d      	beq.n	801302a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	68db      	ldr	r3, [r3, #12]
 8013012:	899b      	ldrh	r3, [r3, #12]
 8013014:	b29c      	uxth	r4, r3
 8013016:	2001      	movs	r0, #1
 8013018:	f7fb f8d2 	bl	800e1c0 <lwip_htons>
 801301c:	4603      	mov	r3, r0
 801301e:	461a      	mov	r2, r3
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	68db      	ldr	r3, [r3, #12]
 8013024:	4322      	orrs	r2, r4
 8013026:	b292      	uxth	r2, r2
 8013028:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801302a:	683b      	ldr	r3, [r7, #0]
 801302c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801302e:	683b      	ldr	r3, [r7, #0]
 8013030:	681b      	ldr	r3, [r3, #0]
 8013032:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8013034:	68f8      	ldr	r0, [r7, #12]
 8013036:	f7fe f986 	bl	8011346 <tcp_seg_free>
    while (next &&
 801303a:	683b      	ldr	r3, [r7, #0]
 801303c:	2b00      	cmp	r3, #0
 801303e:	d00e      	beq.n	801305e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	891b      	ldrh	r3, [r3, #8]
 8013044:	461a      	mov	r2, r3
 8013046:	4b1d      	ldr	r3, [pc, #116]	; (80130bc <tcp_oos_insert_segment+0x10c>)
 8013048:	681b      	ldr	r3, [r3, #0]
 801304a:	441a      	add	r2, r3
 801304c:	683b      	ldr	r3, [r7, #0]
 801304e:	68db      	ldr	r3, [r3, #12]
 8013050:	685b      	ldr	r3, [r3, #4]
 8013052:	6839      	ldr	r1, [r7, #0]
 8013054:	8909      	ldrh	r1, [r1, #8]
 8013056:	440b      	add	r3, r1
 8013058:	1ad3      	subs	r3, r2, r3
    while (next &&
 801305a:	2b00      	cmp	r3, #0
 801305c:	daca      	bge.n	8012ff4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801305e:	683b      	ldr	r3, [r7, #0]
 8013060:	2b00      	cmp	r3, #0
 8013062:	d01e      	beq.n	80130a2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	891b      	ldrh	r3, [r3, #8]
 8013068:	461a      	mov	r2, r3
 801306a:	4b14      	ldr	r3, [pc, #80]	; (80130bc <tcp_oos_insert_segment+0x10c>)
 801306c:	681b      	ldr	r3, [r3, #0]
 801306e:	441a      	add	r2, r3
 8013070:	683b      	ldr	r3, [r7, #0]
 8013072:	68db      	ldr	r3, [r3, #12]
 8013074:	685b      	ldr	r3, [r3, #4]
 8013076:	1ad3      	subs	r3, r2, r3
    if (next &&
 8013078:	2b00      	cmp	r3, #0
 801307a:	dd12      	ble.n	80130a2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801307c:	683b      	ldr	r3, [r7, #0]
 801307e:	68db      	ldr	r3, [r3, #12]
 8013080:	685b      	ldr	r3, [r3, #4]
 8013082:	b29a      	uxth	r2, r3
 8013084:	4b0d      	ldr	r3, [pc, #52]	; (80130bc <tcp_oos_insert_segment+0x10c>)
 8013086:	681b      	ldr	r3, [r3, #0]
 8013088:	b29b      	uxth	r3, r3
 801308a:	1ad3      	subs	r3, r2, r3
 801308c:	b29a      	uxth	r2, r3
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	685a      	ldr	r2, [r3, #4]
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	891b      	ldrh	r3, [r3, #8]
 801309a:	4619      	mov	r1, r3
 801309c:	4610      	mov	r0, r2
 801309e:	f7fc faed 	bl	800f67c <pbuf_realloc>
    }
  }
  cseg->next = next;
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	683a      	ldr	r2, [r7, #0]
 80130a6:	601a      	str	r2, [r3, #0]
}
 80130a8:	bf00      	nop
 80130aa:	3714      	adds	r7, #20
 80130ac:	46bd      	mov	sp, r7
 80130ae:	bd90      	pop	{r4, r7, pc}
 80130b0:	08020d38 	.word	0x08020d38
 80130b4:	08020ff8 	.word	0x08020ff8
 80130b8:	08020d84 	.word	0x08020d84
 80130bc:	200014b0 	.word	0x200014b0

080130c0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80130c0:	b5b0      	push	{r4, r5, r7, lr}
 80130c2:	b086      	sub	sp, #24
 80130c4:	af00      	add	r7, sp, #0
 80130c6:	60f8      	str	r0, [r7, #12]
 80130c8:	60b9      	str	r1, [r7, #8]
 80130ca:	607a      	str	r2, [r7, #4]
 80130cc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80130ce:	e03e      	b.n	801314e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80130d0:	68bb      	ldr	r3, [r7, #8]
 80130d2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80130d4:	68bb      	ldr	r3, [r7, #8]
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80130da:	697b      	ldr	r3, [r7, #20]
 80130dc:	685b      	ldr	r3, [r3, #4]
 80130de:	4618      	mov	r0, r3
 80130e0:	f7fc fd12 	bl	800fb08 <pbuf_clen>
 80130e4:	4603      	mov	r3, r0
 80130e6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80130ee:	8a7a      	ldrh	r2, [r7, #18]
 80130f0:	429a      	cmp	r2, r3
 80130f2:	d906      	bls.n	8013102 <tcp_free_acked_segments+0x42>
 80130f4:	4b2a      	ldr	r3, [pc, #168]	; (80131a0 <tcp_free_acked_segments+0xe0>)
 80130f6:	f240 4257 	movw	r2, #1111	; 0x457
 80130fa:	492a      	ldr	r1, [pc, #168]	; (80131a4 <tcp_free_acked_segments+0xe4>)
 80130fc:	482a      	ldr	r0, [pc, #168]	; (80131a8 <tcp_free_acked_segments+0xe8>)
 80130fe:	f009 fcf7 	bl	801caf0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8013108:	8a7b      	ldrh	r3, [r7, #18]
 801310a:	1ad3      	subs	r3, r2, r3
 801310c:	b29a      	uxth	r2, r3
 801310e:	68fb      	ldr	r3, [r7, #12]
 8013110:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8013114:	697b      	ldr	r3, [r7, #20]
 8013116:	891a      	ldrh	r2, [r3, #8]
 8013118:	4b24      	ldr	r3, [pc, #144]	; (80131ac <tcp_free_acked_segments+0xec>)
 801311a:	881b      	ldrh	r3, [r3, #0]
 801311c:	4413      	add	r3, r2
 801311e:	b29a      	uxth	r2, r3
 8013120:	4b22      	ldr	r3, [pc, #136]	; (80131ac <tcp_free_acked_segments+0xec>)
 8013122:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8013124:	6978      	ldr	r0, [r7, #20]
 8013126:	f7fe f90e 	bl	8011346 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013130:	2b00      	cmp	r3, #0
 8013132:	d00c      	beq.n	801314e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8013134:	68bb      	ldr	r3, [r7, #8]
 8013136:	2b00      	cmp	r3, #0
 8013138:	d109      	bne.n	801314e <tcp_free_acked_segments+0x8e>
 801313a:	683b      	ldr	r3, [r7, #0]
 801313c:	2b00      	cmp	r3, #0
 801313e:	d106      	bne.n	801314e <tcp_free_acked_segments+0x8e>
 8013140:	4b17      	ldr	r3, [pc, #92]	; (80131a0 <tcp_free_acked_segments+0xe0>)
 8013142:	f240 4261 	movw	r2, #1121	; 0x461
 8013146:	491a      	ldr	r1, [pc, #104]	; (80131b0 <tcp_free_acked_segments+0xf0>)
 8013148:	4817      	ldr	r0, [pc, #92]	; (80131a8 <tcp_free_acked_segments+0xe8>)
 801314a:	f009 fcd1 	bl	801caf0 <iprintf>
  while (seg_list != NULL &&
 801314e:	68bb      	ldr	r3, [r7, #8]
 8013150:	2b00      	cmp	r3, #0
 8013152:	d020      	beq.n	8013196 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8013154:	68bb      	ldr	r3, [r7, #8]
 8013156:	68db      	ldr	r3, [r3, #12]
 8013158:	685b      	ldr	r3, [r3, #4]
 801315a:	4618      	mov	r0, r3
 801315c:	f7fb f845 	bl	800e1ea <lwip_htonl>
 8013160:	4604      	mov	r4, r0
 8013162:	68bb      	ldr	r3, [r7, #8]
 8013164:	891b      	ldrh	r3, [r3, #8]
 8013166:	461d      	mov	r5, r3
 8013168:	68bb      	ldr	r3, [r7, #8]
 801316a:	68db      	ldr	r3, [r3, #12]
 801316c:	899b      	ldrh	r3, [r3, #12]
 801316e:	b29b      	uxth	r3, r3
 8013170:	4618      	mov	r0, r3
 8013172:	f7fb f825 	bl	800e1c0 <lwip_htons>
 8013176:	4603      	mov	r3, r0
 8013178:	b2db      	uxtb	r3, r3
 801317a:	f003 0303 	and.w	r3, r3, #3
 801317e:	2b00      	cmp	r3, #0
 8013180:	d001      	beq.n	8013186 <tcp_free_acked_segments+0xc6>
 8013182:	2301      	movs	r3, #1
 8013184:	e000      	b.n	8013188 <tcp_free_acked_segments+0xc8>
 8013186:	2300      	movs	r3, #0
 8013188:	442b      	add	r3, r5
 801318a:	18e2      	adds	r2, r4, r3
 801318c:	4b09      	ldr	r3, [pc, #36]	; (80131b4 <tcp_free_acked_segments+0xf4>)
 801318e:	681b      	ldr	r3, [r3, #0]
 8013190:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8013192:	2b00      	cmp	r3, #0
 8013194:	dd9c      	ble.n	80130d0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8013196:	68bb      	ldr	r3, [r7, #8]
}
 8013198:	4618      	mov	r0, r3
 801319a:	3718      	adds	r7, #24
 801319c:	46bd      	mov	sp, r7
 801319e:	bdb0      	pop	{r4, r5, r7, pc}
 80131a0:	08020d38 	.word	0x08020d38
 80131a4:	08021020 	.word	0x08021020
 80131a8:	08020d84 	.word	0x08020d84
 80131ac:	200014b8 	.word	0x200014b8
 80131b0:	08021048 	.word	0x08021048
 80131b4:	200014b4 	.word	0x200014b4

080131b8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80131b8:	b5b0      	push	{r4, r5, r7, lr}
 80131ba:	b094      	sub	sp, #80	; 0x50
 80131bc:	af00      	add	r7, sp, #0
 80131be:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80131c0:	2300      	movs	r3, #0
 80131c2:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d106      	bne.n	80131d8 <tcp_receive+0x20>
 80131ca:	4ba6      	ldr	r3, [pc, #664]	; (8013464 <tcp_receive+0x2ac>)
 80131cc:	f240 427b 	movw	r2, #1147	; 0x47b
 80131d0:	49a5      	ldr	r1, [pc, #660]	; (8013468 <tcp_receive+0x2b0>)
 80131d2:	48a6      	ldr	r0, [pc, #664]	; (801346c <tcp_receive+0x2b4>)
 80131d4:	f009 fc8c 	bl	801caf0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	7d1b      	ldrb	r3, [r3, #20]
 80131dc:	2b03      	cmp	r3, #3
 80131de:	d806      	bhi.n	80131ee <tcp_receive+0x36>
 80131e0:	4ba0      	ldr	r3, [pc, #640]	; (8013464 <tcp_receive+0x2ac>)
 80131e2:	f240 427c 	movw	r2, #1148	; 0x47c
 80131e6:	49a2      	ldr	r1, [pc, #648]	; (8013470 <tcp_receive+0x2b8>)
 80131e8:	48a0      	ldr	r0, [pc, #640]	; (801346c <tcp_receive+0x2b4>)
 80131ea:	f009 fc81 	bl	801caf0 <iprintf>

  if (flags & TCP_ACK) {
 80131ee:	4ba1      	ldr	r3, [pc, #644]	; (8013474 <tcp_receive+0x2bc>)
 80131f0:	781b      	ldrb	r3, [r3, #0]
 80131f2:	f003 0310 	and.w	r3, r3, #16
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	f000 8263 	beq.w	80136c2 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013202:	461a      	mov	r2, r3
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013208:	4413      	add	r3, r2
 801320a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013210:	4b99      	ldr	r3, [pc, #612]	; (8013478 <tcp_receive+0x2c0>)
 8013212:	681b      	ldr	r3, [r3, #0]
 8013214:	1ad3      	subs	r3, r2, r3
 8013216:	2b00      	cmp	r3, #0
 8013218:	db1b      	blt.n	8013252 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801321e:	4b96      	ldr	r3, [pc, #600]	; (8013478 <tcp_receive+0x2c0>)
 8013220:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013222:	429a      	cmp	r2, r3
 8013224:	d106      	bne.n	8013234 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801322a:	4b94      	ldr	r3, [pc, #592]	; (801347c <tcp_receive+0x2c4>)
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	1ad3      	subs	r3, r2, r3
 8013230:	2b00      	cmp	r3, #0
 8013232:	db0e      	blt.n	8013252 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013238:	4b90      	ldr	r3, [pc, #576]	; (801347c <tcp_receive+0x2c4>)
 801323a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801323c:	429a      	cmp	r2, r3
 801323e:	d125      	bne.n	801328c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013240:	4b8f      	ldr	r3, [pc, #572]	; (8013480 <tcp_receive+0x2c8>)
 8013242:	681b      	ldr	r3, [r3, #0]
 8013244:	89db      	ldrh	r3, [r3, #14]
 8013246:	b29a      	uxth	r2, r3
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801324e:	429a      	cmp	r2, r3
 8013250:	d91c      	bls.n	801328c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8013252:	4b8b      	ldr	r3, [pc, #556]	; (8013480 <tcp_receive+0x2c8>)
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	89db      	ldrh	r3, [r3, #14]
 8013258:	b29a      	uxth	r2, r3
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801326c:	429a      	cmp	r2, r3
 801326e:	d205      	bcs.n	801327c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801327c:	4b7e      	ldr	r3, [pc, #504]	; (8013478 <tcp_receive+0x2c0>)
 801327e:	681a      	ldr	r2, [r3, #0]
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8013284:	4b7d      	ldr	r3, [pc, #500]	; (801347c <tcp_receive+0x2c4>)
 8013286:	681a      	ldr	r2, [r3, #0]
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801328c:	4b7b      	ldr	r3, [pc, #492]	; (801347c <tcp_receive+0x2c4>)
 801328e:	681a      	ldr	r2, [r3, #0]
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013294:	1ad3      	subs	r3, r2, r3
 8013296:	2b00      	cmp	r3, #0
 8013298:	dc58      	bgt.n	801334c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801329a:	4b7a      	ldr	r3, [pc, #488]	; (8013484 <tcp_receive+0x2cc>)
 801329c:	881b      	ldrh	r3, [r3, #0]
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d14b      	bne.n	801333a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80132a6:	687a      	ldr	r2, [r7, #4]
 80132a8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80132ac:	4413      	add	r3, r2
 80132ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80132b0:	429a      	cmp	r2, r3
 80132b2:	d142      	bne.n	801333a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	db3d      	blt.n	801333a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80132c2:	4b6e      	ldr	r3, [pc, #440]	; (801347c <tcp_receive+0x2c4>)
 80132c4:	681b      	ldr	r3, [r3, #0]
 80132c6:	429a      	cmp	r2, r3
 80132c8:	d137      	bne.n	801333a <tcp_receive+0x182>
              found_dupack = 1;
 80132ca:	2301      	movs	r3, #1
 80132cc:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80132d4:	2bff      	cmp	r3, #255	; 0xff
 80132d6:	d007      	beq.n	80132e8 <tcp_receive+0x130>
                ++pcb->dupacks;
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80132de:	3301      	adds	r3, #1
 80132e0:	b2da      	uxtb	r2, r3
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80132ee:	2b03      	cmp	r3, #3
 80132f0:	d91b      	bls.n	801332a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80132fc:	4413      	add	r3, r2
 80132fe:	b29a      	uxth	r2, r3
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013306:	429a      	cmp	r2, r3
 8013308:	d30a      	bcc.n	8013320 <tcp_receive+0x168>
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013314:	4413      	add	r3, r2
 8013316:	b29a      	uxth	r2, r3
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801331e:	e004      	b.n	801332a <tcp_receive+0x172>
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013326:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013330:	2b02      	cmp	r3, #2
 8013332:	d902      	bls.n	801333a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8013334:	6878      	ldr	r0, [r7, #4]
 8013336:	f002 fb41 	bl	80159bc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801333a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801333c:	2b00      	cmp	r3, #0
 801333e:	f040 8160 	bne.w	8013602 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	2200      	movs	r2, #0
 8013346:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801334a:	e15a      	b.n	8013602 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801334c:	4b4b      	ldr	r3, [pc, #300]	; (801347c <tcp_receive+0x2c4>)
 801334e:	681a      	ldr	r2, [r3, #0]
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013354:	1ad3      	subs	r3, r2, r3
 8013356:	3b01      	subs	r3, #1
 8013358:	2b00      	cmp	r3, #0
 801335a:	f2c0 814d 	blt.w	80135f8 <tcp_receive+0x440>
 801335e:	4b47      	ldr	r3, [pc, #284]	; (801347c <tcp_receive+0x2c4>)
 8013360:	681a      	ldr	r2, [r3, #0]
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013366:	1ad3      	subs	r3, r2, r3
 8013368:	2b00      	cmp	r3, #0
 801336a:	f300 8145 	bgt.w	80135f8 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	8b5b      	ldrh	r3, [r3, #26]
 8013372:	f003 0304 	and.w	r3, r3, #4
 8013376:	2b00      	cmp	r3, #0
 8013378:	d010      	beq.n	801339c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	8b5b      	ldrh	r3, [r3, #26]
 801337e:	f023 0304 	bic.w	r3, r3, #4
 8013382:	b29a      	uxth	r2, r3
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	2200      	movs	r2, #0
 8013398:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	2200      	movs	r2, #0
 80133a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80133aa:	10db      	asrs	r3, r3, #3
 80133ac:	b21b      	sxth	r3, r3
 80133ae:	b29a      	uxth	r2, r3
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80133b6:	b29b      	uxth	r3, r3
 80133b8:	4413      	add	r3, r2
 80133ba:	b29b      	uxth	r3, r3
 80133bc:	b21a      	sxth	r2, r3
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80133c4:	4b2d      	ldr	r3, [pc, #180]	; (801347c <tcp_receive+0x2c4>)
 80133c6:	681b      	ldr	r3, [r3, #0]
 80133c8:	b29a      	uxth	r2, r3
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80133ce:	b29b      	uxth	r3, r3
 80133d0:	1ad3      	subs	r3, r2, r3
 80133d2:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	2200      	movs	r2, #0
 80133d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80133dc:	4b27      	ldr	r3, [pc, #156]	; (801347c <tcp_receive+0x2c4>)
 80133de:	681a      	ldr	r2, [r3, #0]
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	7d1b      	ldrb	r3, [r3, #20]
 80133e8:	2b03      	cmp	r3, #3
 80133ea:	f240 8096 	bls.w	801351a <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80133fa:	429a      	cmp	r2, r3
 80133fc:	d244      	bcs.n	8013488 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	8b5b      	ldrh	r3, [r3, #26]
 8013402:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013406:	2b00      	cmp	r3, #0
 8013408:	d001      	beq.n	801340e <tcp_receive+0x256>
 801340a:	2301      	movs	r3, #1
 801340c:	e000      	b.n	8013410 <tcp_receive+0x258>
 801340e:	2302      	movs	r3, #2
 8013410:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8013414:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8013418:	b29a      	uxth	r2, r3
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801341e:	fb12 f303 	smulbb	r3, r2, r3
 8013422:	b29b      	uxth	r3, r3
 8013424:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013426:	4293      	cmp	r3, r2
 8013428:	bf28      	it	cs
 801342a:	4613      	movcs	r3, r2
 801342c:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013434:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013436:	4413      	add	r3, r2
 8013438:	b29a      	uxth	r2, r3
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013440:	429a      	cmp	r2, r3
 8013442:	d309      	bcc.n	8013458 <tcp_receive+0x2a0>
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801344a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801344c:	4413      	add	r3, r2
 801344e:	b29a      	uxth	r2, r3
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013456:	e060      	b.n	801351a <tcp_receive+0x362>
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801345e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013462:	e05a      	b.n	801351a <tcp_receive+0x362>
 8013464:	08020d38 	.word	0x08020d38
 8013468:	08021068 	.word	0x08021068
 801346c:	08020d84 	.word	0x08020d84
 8013470:	08021084 	.word	0x08021084
 8013474:	200014bc 	.word	0x200014bc
 8013478:	200014b0 	.word	0x200014b0
 801347c:	200014b4 	.word	0x200014b4
 8013480:	200014a0 	.word	0x200014a0
 8013484:	200014ba 	.word	0x200014ba
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801348e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013490:	4413      	add	r3, r2
 8013492:	b29a      	uxth	r2, r3
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801349a:	429a      	cmp	r2, r3
 801349c:	d309      	bcc.n	80134b2 <tcp_receive+0x2fa>
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80134a4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80134a6:	4413      	add	r3, r2
 80134a8:	b29a      	uxth	r2, r3
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80134b0:	e004      	b.n	80134bc <tcp_receive+0x304>
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80134b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80134c8:	429a      	cmp	r2, r3
 80134ca:	d326      	bcc.n	801351a <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80134d8:	1ad3      	subs	r3, r2, r3
 80134da:	b29a      	uxth	r2, r3
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80134ec:	4413      	add	r3, r2
 80134ee:	b29a      	uxth	r2, r3
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80134f6:	429a      	cmp	r2, r3
 80134f8:	d30a      	bcc.n	8013510 <tcp_receive+0x358>
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013504:	4413      	add	r3, r2
 8013506:	b29a      	uxth	r2, r3
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801350e:	e004      	b.n	801351a <tcp_receive+0x362>
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013516:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013522:	4a98      	ldr	r2, [pc, #608]	; (8013784 <tcp_receive+0x5cc>)
 8013524:	6878      	ldr	r0, [r7, #4]
 8013526:	f7ff fdcb 	bl	80130c0 <tcp_free_acked_segments>
 801352a:	4602      	mov	r2, r0
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013538:	4a93      	ldr	r2, [pc, #588]	; (8013788 <tcp_receive+0x5d0>)
 801353a:	6878      	ldr	r0, [r7, #4]
 801353c:	f7ff fdc0 	bl	80130c0 <tcp_free_acked_segments>
 8013540:	4602      	mov	r2, r0
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801354a:	2b00      	cmp	r3, #0
 801354c:	d104      	bne.n	8013558 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013554:	861a      	strh	r2, [r3, #48]	; 0x30
 8013556:	e002      	b.n	801355e <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	2200      	movs	r2, #0
 801355c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	2200      	movs	r2, #0
 8013562:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013568:	2b00      	cmp	r3, #0
 801356a:	d103      	bne.n	8013574 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	2200      	movs	r2, #0
 8013570:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801357a:	4b84      	ldr	r3, [pc, #528]	; (801378c <tcp_receive+0x5d4>)
 801357c:	881b      	ldrh	r3, [r3, #0]
 801357e:	4413      	add	r3, r2
 8013580:	b29a      	uxth	r2, r3
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	8b5b      	ldrh	r3, [r3, #26]
 801358c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013590:	2b00      	cmp	r3, #0
 8013592:	d035      	beq.n	8013600 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013598:	2b00      	cmp	r3, #0
 801359a:	d118      	bne.n	80135ce <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d00c      	beq.n	80135be <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80135ac:	68db      	ldr	r3, [r3, #12]
 80135ae:	685b      	ldr	r3, [r3, #4]
 80135b0:	4618      	mov	r0, r3
 80135b2:	f7fa fe1a 	bl	800e1ea <lwip_htonl>
 80135b6:	4603      	mov	r3, r0
 80135b8:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	dc20      	bgt.n	8013600 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	8b5b      	ldrh	r3, [r3, #26]
 80135c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80135c6:	b29a      	uxth	r2, r3
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80135cc:	e018      	b.n	8013600 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80135d6:	68db      	ldr	r3, [r3, #12]
 80135d8:	685b      	ldr	r3, [r3, #4]
 80135da:	4618      	mov	r0, r3
 80135dc:	f7fa fe05 	bl	800e1ea <lwip_htonl>
 80135e0:	4603      	mov	r3, r0
 80135e2:	1ae3      	subs	r3, r4, r3
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	dc0b      	bgt.n	8013600 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	8b5b      	ldrh	r3, [r3, #26]
 80135ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80135f0:	b29a      	uxth	r2, r3
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80135f6:	e003      	b.n	8013600 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80135f8:	6878      	ldr	r0, [r7, #4]
 80135fa:	f002 fbcd 	bl	8015d98 <tcp_send_empty_ack>
 80135fe:	e000      	b.n	8013602 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013600:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013606:	2b00      	cmp	r3, #0
 8013608:	d05b      	beq.n	80136c2 <tcp_receive+0x50a>
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801360e:	4b60      	ldr	r3, [pc, #384]	; (8013790 <tcp_receive+0x5d8>)
 8013610:	681b      	ldr	r3, [r3, #0]
 8013612:	1ad3      	subs	r3, r2, r3
 8013614:	2b00      	cmp	r3, #0
 8013616:	da54      	bge.n	80136c2 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8013618:	4b5e      	ldr	r3, [pc, #376]	; (8013794 <tcp_receive+0x5dc>)
 801361a:	681b      	ldr	r3, [r3, #0]
 801361c:	b29a      	uxth	r2, r3
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013622:	b29b      	uxth	r3, r3
 8013624:	1ad3      	subs	r3, r2, r3
 8013626:	b29b      	uxth	r3, r3
 8013628:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801362c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013636:	10db      	asrs	r3, r3, #3
 8013638:	b21b      	sxth	r3, r3
 801363a:	b29b      	uxth	r3, r3
 801363c:	1ad3      	subs	r3, r2, r3
 801363e:	b29b      	uxth	r3, r3
 8013640:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801364a:	b29a      	uxth	r2, r3
 801364c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8013650:	4413      	add	r3, r2
 8013652:	b29b      	uxth	r3, r3
 8013654:	b21a      	sxth	r2, r3
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801365a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801365e:	2b00      	cmp	r3, #0
 8013660:	da05      	bge.n	801366e <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8013662:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8013666:	425b      	negs	r3, r3
 8013668:	b29b      	uxth	r3, r3
 801366a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801366e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013678:	109b      	asrs	r3, r3, #2
 801367a:	b21b      	sxth	r3, r3
 801367c:	b29b      	uxth	r3, r3
 801367e:	1ad3      	subs	r3, r2, r3
 8013680:	b29b      	uxth	r3, r3
 8013682:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801368c:	b29a      	uxth	r2, r3
 801368e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8013692:	4413      	add	r3, r2
 8013694:	b29b      	uxth	r3, r3
 8013696:	b21a      	sxth	r2, r3
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80136a2:	10db      	asrs	r3, r3, #3
 80136a4:	b21b      	sxth	r3, r3
 80136a6:	b29a      	uxth	r2, r3
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80136ae:	b29b      	uxth	r3, r3
 80136b0:	4413      	add	r3, r2
 80136b2:	b29b      	uxth	r3, r3
 80136b4:	b21a      	sxth	r2, r3
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	2200      	movs	r2, #0
 80136c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80136c2:	4b35      	ldr	r3, [pc, #212]	; (8013798 <tcp_receive+0x5e0>)
 80136c4:	881b      	ldrh	r3, [r3, #0]
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	f000 84e1 	beq.w	801408e <tcp_receive+0xed6>
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	7d1b      	ldrb	r3, [r3, #20]
 80136d0:	2b06      	cmp	r3, #6
 80136d2:	f200 84dc 	bhi.w	801408e <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80136da:	4b30      	ldr	r3, [pc, #192]	; (801379c <tcp_receive+0x5e4>)
 80136dc:	681b      	ldr	r3, [r3, #0]
 80136de:	1ad3      	subs	r3, r2, r3
 80136e0:	3b01      	subs	r3, #1
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	f2c0 808e 	blt.w	8013804 <tcp_receive+0x64c>
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80136ec:	4b2a      	ldr	r3, [pc, #168]	; (8013798 <tcp_receive+0x5e0>)
 80136ee:	881b      	ldrh	r3, [r3, #0]
 80136f0:	4619      	mov	r1, r3
 80136f2:	4b2a      	ldr	r3, [pc, #168]	; (801379c <tcp_receive+0x5e4>)
 80136f4:	681b      	ldr	r3, [r3, #0]
 80136f6:	440b      	add	r3, r1
 80136f8:	1ad3      	subs	r3, r2, r3
 80136fa:	3301      	adds	r3, #1
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	f300 8081 	bgt.w	8013804 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8013702:	4b27      	ldr	r3, [pc, #156]	; (80137a0 <tcp_receive+0x5e8>)
 8013704:	685b      	ldr	r3, [r3, #4]
 8013706:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801370c:	4b23      	ldr	r3, [pc, #140]	; (801379c <tcp_receive+0x5e4>)
 801370e:	681b      	ldr	r3, [r3, #0]
 8013710:	1ad3      	subs	r3, r2, r3
 8013712:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8013714:	4b22      	ldr	r3, [pc, #136]	; (80137a0 <tcp_receive+0x5e8>)
 8013716:	685b      	ldr	r3, [r3, #4]
 8013718:	2b00      	cmp	r3, #0
 801371a:	d106      	bne.n	801372a <tcp_receive+0x572>
 801371c:	4b21      	ldr	r3, [pc, #132]	; (80137a4 <tcp_receive+0x5ec>)
 801371e:	f240 5294 	movw	r2, #1428	; 0x594
 8013722:	4921      	ldr	r1, [pc, #132]	; (80137a8 <tcp_receive+0x5f0>)
 8013724:	4821      	ldr	r0, [pc, #132]	; (80137ac <tcp_receive+0x5f4>)
 8013726:	f009 f9e3 	bl	801caf0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801372a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801372c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8013730:	4293      	cmp	r3, r2
 8013732:	d906      	bls.n	8013742 <tcp_receive+0x58a>
 8013734:	4b1b      	ldr	r3, [pc, #108]	; (80137a4 <tcp_receive+0x5ec>)
 8013736:	f240 5295 	movw	r2, #1429	; 0x595
 801373a:	491d      	ldr	r1, [pc, #116]	; (80137b0 <tcp_receive+0x5f8>)
 801373c:	481b      	ldr	r0, [pc, #108]	; (80137ac <tcp_receive+0x5f4>)
 801373e:	f009 f9d7 	bl	801caf0 <iprintf>
      off = (u16_t)off32;
 8013742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013744:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8013748:	4b15      	ldr	r3, [pc, #84]	; (80137a0 <tcp_receive+0x5e8>)
 801374a:	685b      	ldr	r3, [r3, #4]
 801374c:	891b      	ldrh	r3, [r3, #8]
 801374e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013752:	429a      	cmp	r2, r3
 8013754:	d906      	bls.n	8013764 <tcp_receive+0x5ac>
 8013756:	4b13      	ldr	r3, [pc, #76]	; (80137a4 <tcp_receive+0x5ec>)
 8013758:	f240 5297 	movw	r2, #1431	; 0x597
 801375c:	4915      	ldr	r1, [pc, #84]	; (80137b4 <tcp_receive+0x5fc>)
 801375e:	4813      	ldr	r0, [pc, #76]	; (80137ac <tcp_receive+0x5f4>)
 8013760:	f009 f9c6 	bl	801caf0 <iprintf>
      inseg.len -= off;
 8013764:	4b0e      	ldr	r3, [pc, #56]	; (80137a0 <tcp_receive+0x5e8>)
 8013766:	891a      	ldrh	r2, [r3, #8]
 8013768:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801376c:	1ad3      	subs	r3, r2, r3
 801376e:	b29a      	uxth	r2, r3
 8013770:	4b0b      	ldr	r3, [pc, #44]	; (80137a0 <tcp_receive+0x5e8>)
 8013772:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8013774:	4b0a      	ldr	r3, [pc, #40]	; (80137a0 <tcp_receive+0x5e8>)
 8013776:	685b      	ldr	r3, [r3, #4]
 8013778:	891a      	ldrh	r2, [r3, #8]
 801377a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801377e:	1ad3      	subs	r3, r2, r3
 8013780:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8013782:	e029      	b.n	80137d8 <tcp_receive+0x620>
 8013784:	080210a0 	.word	0x080210a0
 8013788:	080210a8 	.word	0x080210a8
 801378c:	200014b8 	.word	0x200014b8
 8013790:	200014b4 	.word	0x200014b4
 8013794:	2000831c 	.word	0x2000831c
 8013798:	200014ba 	.word	0x200014ba
 801379c:	200014b0 	.word	0x200014b0
 80137a0:	20001490 	.word	0x20001490
 80137a4:	08020d38 	.word	0x08020d38
 80137a8:	080210b0 	.word	0x080210b0
 80137ac:	08020d84 	.word	0x08020d84
 80137b0:	080210c0 	.word	0x080210c0
 80137b4:	080210d0 	.word	0x080210d0
        off -= p->len;
 80137b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80137ba:	895b      	ldrh	r3, [r3, #10]
 80137bc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80137c0:	1ad3      	subs	r3, r2, r3
 80137c2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80137c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80137c8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80137ca:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80137cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80137ce:	2200      	movs	r2, #0
 80137d0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80137d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80137d4:	681b      	ldr	r3, [r3, #0]
 80137d6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80137d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80137da:	895b      	ldrh	r3, [r3, #10]
 80137dc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80137e0:	429a      	cmp	r2, r3
 80137e2:	d8e9      	bhi.n	80137b8 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80137e4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80137e8:	4619      	mov	r1, r3
 80137ea:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80137ec:	f7fc f846 	bl	800f87c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137f4:	4a91      	ldr	r2, [pc, #580]	; (8013a3c <tcp_receive+0x884>)
 80137f6:	6013      	str	r3, [r2, #0]
 80137f8:	4b91      	ldr	r3, [pc, #580]	; (8013a40 <tcp_receive+0x888>)
 80137fa:	68db      	ldr	r3, [r3, #12]
 80137fc:	4a8f      	ldr	r2, [pc, #572]	; (8013a3c <tcp_receive+0x884>)
 80137fe:	6812      	ldr	r2, [r2, #0]
 8013800:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8013802:	e00d      	b.n	8013820 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8013804:	4b8d      	ldr	r3, [pc, #564]	; (8013a3c <tcp_receive+0x884>)
 8013806:	681a      	ldr	r2, [r3, #0]
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801380c:	1ad3      	subs	r3, r2, r3
 801380e:	2b00      	cmp	r3, #0
 8013810:	da06      	bge.n	8013820 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	8b5b      	ldrh	r3, [r3, #26]
 8013816:	f043 0302 	orr.w	r3, r3, #2
 801381a:	b29a      	uxth	r2, r3
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013820:	4b86      	ldr	r3, [pc, #536]	; (8013a3c <tcp_receive+0x884>)
 8013822:	681a      	ldr	r2, [r3, #0]
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013828:	1ad3      	subs	r3, r2, r3
 801382a:	2b00      	cmp	r3, #0
 801382c:	f2c0 842a 	blt.w	8014084 <tcp_receive+0xecc>
 8013830:	4b82      	ldr	r3, [pc, #520]	; (8013a3c <tcp_receive+0x884>)
 8013832:	681a      	ldr	r2, [r3, #0]
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013838:	6879      	ldr	r1, [r7, #4]
 801383a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801383c:	440b      	add	r3, r1
 801383e:	1ad3      	subs	r3, r2, r3
 8013840:	3301      	adds	r3, #1
 8013842:	2b00      	cmp	r3, #0
 8013844:	f300 841e 	bgt.w	8014084 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801384c:	4b7b      	ldr	r3, [pc, #492]	; (8013a3c <tcp_receive+0x884>)
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	429a      	cmp	r2, r3
 8013852:	f040 829a 	bne.w	8013d8a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8013856:	4b7a      	ldr	r3, [pc, #488]	; (8013a40 <tcp_receive+0x888>)
 8013858:	891c      	ldrh	r4, [r3, #8]
 801385a:	4b79      	ldr	r3, [pc, #484]	; (8013a40 <tcp_receive+0x888>)
 801385c:	68db      	ldr	r3, [r3, #12]
 801385e:	899b      	ldrh	r3, [r3, #12]
 8013860:	b29b      	uxth	r3, r3
 8013862:	4618      	mov	r0, r3
 8013864:	f7fa fcac 	bl	800e1c0 <lwip_htons>
 8013868:	4603      	mov	r3, r0
 801386a:	b2db      	uxtb	r3, r3
 801386c:	f003 0303 	and.w	r3, r3, #3
 8013870:	2b00      	cmp	r3, #0
 8013872:	d001      	beq.n	8013878 <tcp_receive+0x6c0>
 8013874:	2301      	movs	r3, #1
 8013876:	e000      	b.n	801387a <tcp_receive+0x6c2>
 8013878:	2300      	movs	r3, #0
 801387a:	4423      	add	r3, r4
 801387c:	b29a      	uxth	r2, r3
 801387e:	4b71      	ldr	r3, [pc, #452]	; (8013a44 <tcp_receive+0x88c>)
 8013880:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013886:	4b6f      	ldr	r3, [pc, #444]	; (8013a44 <tcp_receive+0x88c>)
 8013888:	881b      	ldrh	r3, [r3, #0]
 801388a:	429a      	cmp	r2, r3
 801388c:	d275      	bcs.n	801397a <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801388e:	4b6c      	ldr	r3, [pc, #432]	; (8013a40 <tcp_receive+0x888>)
 8013890:	68db      	ldr	r3, [r3, #12]
 8013892:	899b      	ldrh	r3, [r3, #12]
 8013894:	b29b      	uxth	r3, r3
 8013896:	4618      	mov	r0, r3
 8013898:	f7fa fc92 	bl	800e1c0 <lwip_htons>
 801389c:	4603      	mov	r3, r0
 801389e:	b2db      	uxtb	r3, r3
 80138a0:	f003 0301 	and.w	r3, r3, #1
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d01f      	beq.n	80138e8 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80138a8:	4b65      	ldr	r3, [pc, #404]	; (8013a40 <tcp_receive+0x888>)
 80138aa:	68db      	ldr	r3, [r3, #12]
 80138ac:	899b      	ldrh	r3, [r3, #12]
 80138ae:	b29b      	uxth	r3, r3
 80138b0:	b21b      	sxth	r3, r3
 80138b2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80138b6:	b21c      	sxth	r4, r3
 80138b8:	4b61      	ldr	r3, [pc, #388]	; (8013a40 <tcp_receive+0x888>)
 80138ba:	68db      	ldr	r3, [r3, #12]
 80138bc:	899b      	ldrh	r3, [r3, #12]
 80138be:	b29b      	uxth	r3, r3
 80138c0:	4618      	mov	r0, r3
 80138c2:	f7fa fc7d 	bl	800e1c0 <lwip_htons>
 80138c6:	4603      	mov	r3, r0
 80138c8:	b2db      	uxtb	r3, r3
 80138ca:	b29b      	uxth	r3, r3
 80138cc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80138d0:	b29b      	uxth	r3, r3
 80138d2:	4618      	mov	r0, r3
 80138d4:	f7fa fc74 	bl	800e1c0 <lwip_htons>
 80138d8:	4603      	mov	r3, r0
 80138da:	b21b      	sxth	r3, r3
 80138dc:	4323      	orrs	r3, r4
 80138de:	b21a      	sxth	r2, r3
 80138e0:	4b57      	ldr	r3, [pc, #348]	; (8013a40 <tcp_receive+0x888>)
 80138e2:	68db      	ldr	r3, [r3, #12]
 80138e4:	b292      	uxth	r2, r2
 80138e6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80138ec:	4b54      	ldr	r3, [pc, #336]	; (8013a40 <tcp_receive+0x888>)
 80138ee:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80138f0:	4b53      	ldr	r3, [pc, #332]	; (8013a40 <tcp_receive+0x888>)
 80138f2:	68db      	ldr	r3, [r3, #12]
 80138f4:	899b      	ldrh	r3, [r3, #12]
 80138f6:	b29b      	uxth	r3, r3
 80138f8:	4618      	mov	r0, r3
 80138fa:	f7fa fc61 	bl	800e1c0 <lwip_htons>
 80138fe:	4603      	mov	r3, r0
 8013900:	b2db      	uxtb	r3, r3
 8013902:	f003 0302 	and.w	r3, r3, #2
 8013906:	2b00      	cmp	r3, #0
 8013908:	d005      	beq.n	8013916 <tcp_receive+0x75e>
            inseg.len -= 1;
 801390a:	4b4d      	ldr	r3, [pc, #308]	; (8013a40 <tcp_receive+0x888>)
 801390c:	891b      	ldrh	r3, [r3, #8]
 801390e:	3b01      	subs	r3, #1
 8013910:	b29a      	uxth	r2, r3
 8013912:	4b4b      	ldr	r3, [pc, #300]	; (8013a40 <tcp_receive+0x888>)
 8013914:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8013916:	4b4a      	ldr	r3, [pc, #296]	; (8013a40 <tcp_receive+0x888>)
 8013918:	685b      	ldr	r3, [r3, #4]
 801391a:	4a49      	ldr	r2, [pc, #292]	; (8013a40 <tcp_receive+0x888>)
 801391c:	8912      	ldrh	r2, [r2, #8]
 801391e:	4611      	mov	r1, r2
 8013920:	4618      	mov	r0, r3
 8013922:	f7fb feab 	bl	800f67c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8013926:	4b46      	ldr	r3, [pc, #280]	; (8013a40 <tcp_receive+0x888>)
 8013928:	891c      	ldrh	r4, [r3, #8]
 801392a:	4b45      	ldr	r3, [pc, #276]	; (8013a40 <tcp_receive+0x888>)
 801392c:	68db      	ldr	r3, [r3, #12]
 801392e:	899b      	ldrh	r3, [r3, #12]
 8013930:	b29b      	uxth	r3, r3
 8013932:	4618      	mov	r0, r3
 8013934:	f7fa fc44 	bl	800e1c0 <lwip_htons>
 8013938:	4603      	mov	r3, r0
 801393a:	b2db      	uxtb	r3, r3
 801393c:	f003 0303 	and.w	r3, r3, #3
 8013940:	2b00      	cmp	r3, #0
 8013942:	d001      	beq.n	8013948 <tcp_receive+0x790>
 8013944:	2301      	movs	r3, #1
 8013946:	e000      	b.n	801394a <tcp_receive+0x792>
 8013948:	2300      	movs	r3, #0
 801394a:	4423      	add	r3, r4
 801394c:	b29a      	uxth	r2, r3
 801394e:	4b3d      	ldr	r3, [pc, #244]	; (8013a44 <tcp_receive+0x88c>)
 8013950:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8013952:	4b3c      	ldr	r3, [pc, #240]	; (8013a44 <tcp_receive+0x88c>)
 8013954:	881b      	ldrh	r3, [r3, #0]
 8013956:	461a      	mov	r2, r3
 8013958:	4b38      	ldr	r3, [pc, #224]	; (8013a3c <tcp_receive+0x884>)
 801395a:	681b      	ldr	r3, [r3, #0]
 801395c:	441a      	add	r2, r3
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013962:	6879      	ldr	r1, [r7, #4]
 8013964:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013966:	440b      	add	r3, r1
 8013968:	429a      	cmp	r2, r3
 801396a:	d006      	beq.n	801397a <tcp_receive+0x7c2>
 801396c:	4b36      	ldr	r3, [pc, #216]	; (8013a48 <tcp_receive+0x890>)
 801396e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8013972:	4936      	ldr	r1, [pc, #216]	; (8013a4c <tcp_receive+0x894>)
 8013974:	4836      	ldr	r0, [pc, #216]	; (8013a50 <tcp_receive+0x898>)
 8013976:	f009 f8bb 	bl	801caf0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801397e:	2b00      	cmp	r3, #0
 8013980:	f000 80e7 	beq.w	8013b52 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013984:	4b2e      	ldr	r3, [pc, #184]	; (8013a40 <tcp_receive+0x888>)
 8013986:	68db      	ldr	r3, [r3, #12]
 8013988:	899b      	ldrh	r3, [r3, #12]
 801398a:	b29b      	uxth	r3, r3
 801398c:	4618      	mov	r0, r3
 801398e:	f7fa fc17 	bl	800e1c0 <lwip_htons>
 8013992:	4603      	mov	r3, r0
 8013994:	b2db      	uxtb	r3, r3
 8013996:	f003 0301 	and.w	r3, r3, #1
 801399a:	2b00      	cmp	r3, #0
 801399c:	d010      	beq.n	80139c0 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801399e:	e00a      	b.n	80139b6 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80139a4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80139aa:	681a      	ldr	r2, [r3, #0]
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80139b0:	68f8      	ldr	r0, [r7, #12]
 80139b2:	f7fd fcc8 	bl	8011346 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d1f0      	bne.n	80139a0 <tcp_receive+0x7e8>
 80139be:	e0c8      	b.n	8013b52 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80139c4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80139c6:	e052      	b.n	8013a6e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80139c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80139ca:	68db      	ldr	r3, [r3, #12]
 80139cc:	899b      	ldrh	r3, [r3, #12]
 80139ce:	b29b      	uxth	r3, r3
 80139d0:	4618      	mov	r0, r3
 80139d2:	f7fa fbf5 	bl	800e1c0 <lwip_htons>
 80139d6:	4603      	mov	r3, r0
 80139d8:	b2db      	uxtb	r3, r3
 80139da:	f003 0301 	and.w	r3, r3, #1
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d03d      	beq.n	8013a5e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80139e2:	4b17      	ldr	r3, [pc, #92]	; (8013a40 <tcp_receive+0x888>)
 80139e4:	68db      	ldr	r3, [r3, #12]
 80139e6:	899b      	ldrh	r3, [r3, #12]
 80139e8:	b29b      	uxth	r3, r3
 80139ea:	4618      	mov	r0, r3
 80139ec:	f7fa fbe8 	bl	800e1c0 <lwip_htons>
 80139f0:	4603      	mov	r3, r0
 80139f2:	b2db      	uxtb	r3, r3
 80139f4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d130      	bne.n	8013a5e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80139fc:	4b10      	ldr	r3, [pc, #64]	; (8013a40 <tcp_receive+0x888>)
 80139fe:	68db      	ldr	r3, [r3, #12]
 8013a00:	899b      	ldrh	r3, [r3, #12]
 8013a02:	b29c      	uxth	r4, r3
 8013a04:	2001      	movs	r0, #1
 8013a06:	f7fa fbdb 	bl	800e1c0 <lwip_htons>
 8013a0a:	4603      	mov	r3, r0
 8013a0c:	461a      	mov	r2, r3
 8013a0e:	4b0c      	ldr	r3, [pc, #48]	; (8013a40 <tcp_receive+0x888>)
 8013a10:	68db      	ldr	r3, [r3, #12]
 8013a12:	4322      	orrs	r2, r4
 8013a14:	b292      	uxth	r2, r2
 8013a16:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8013a18:	4b09      	ldr	r3, [pc, #36]	; (8013a40 <tcp_receive+0x888>)
 8013a1a:	891c      	ldrh	r4, [r3, #8]
 8013a1c:	4b08      	ldr	r3, [pc, #32]	; (8013a40 <tcp_receive+0x888>)
 8013a1e:	68db      	ldr	r3, [r3, #12]
 8013a20:	899b      	ldrh	r3, [r3, #12]
 8013a22:	b29b      	uxth	r3, r3
 8013a24:	4618      	mov	r0, r3
 8013a26:	f7fa fbcb 	bl	800e1c0 <lwip_htons>
 8013a2a:	4603      	mov	r3, r0
 8013a2c:	b2db      	uxtb	r3, r3
 8013a2e:	f003 0303 	and.w	r3, r3, #3
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	d00e      	beq.n	8013a54 <tcp_receive+0x89c>
 8013a36:	2301      	movs	r3, #1
 8013a38:	e00d      	b.n	8013a56 <tcp_receive+0x89e>
 8013a3a:	bf00      	nop
 8013a3c:	200014b0 	.word	0x200014b0
 8013a40:	20001490 	.word	0x20001490
 8013a44:	200014ba 	.word	0x200014ba
 8013a48:	08020d38 	.word	0x08020d38
 8013a4c:	080210e0 	.word	0x080210e0
 8013a50:	08020d84 	.word	0x08020d84
 8013a54:	2300      	movs	r3, #0
 8013a56:	4423      	add	r3, r4
 8013a58:	b29a      	uxth	r2, r3
 8013a5a:	4b98      	ldr	r3, [pc, #608]	; (8013cbc <tcp_receive+0xb04>)
 8013a5c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8013a5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a60:	613b      	str	r3, [r7, #16]
              next = next->next;
 8013a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a64:	681b      	ldr	r3, [r3, #0]
 8013a66:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8013a68:	6938      	ldr	r0, [r7, #16]
 8013a6a:	f7fd fc6c 	bl	8011346 <tcp_seg_free>
            while (next &&
 8013a6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d00e      	beq.n	8013a92 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8013a74:	4b91      	ldr	r3, [pc, #580]	; (8013cbc <tcp_receive+0xb04>)
 8013a76:	881b      	ldrh	r3, [r3, #0]
 8013a78:	461a      	mov	r2, r3
 8013a7a:	4b91      	ldr	r3, [pc, #580]	; (8013cc0 <tcp_receive+0xb08>)
 8013a7c:	681b      	ldr	r3, [r3, #0]
 8013a7e:	441a      	add	r2, r3
 8013a80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a82:	68db      	ldr	r3, [r3, #12]
 8013a84:	685b      	ldr	r3, [r3, #4]
 8013a86:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013a88:	8909      	ldrh	r1, [r1, #8]
 8013a8a:	440b      	add	r3, r1
 8013a8c:	1ad3      	subs	r3, r2, r3
            while (next &&
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	da9a      	bge.n	80139c8 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8013a92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d059      	beq.n	8013b4c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8013a98:	4b88      	ldr	r3, [pc, #544]	; (8013cbc <tcp_receive+0xb04>)
 8013a9a:	881b      	ldrh	r3, [r3, #0]
 8013a9c:	461a      	mov	r2, r3
 8013a9e:	4b88      	ldr	r3, [pc, #544]	; (8013cc0 <tcp_receive+0xb08>)
 8013aa0:	681b      	ldr	r3, [r3, #0]
 8013aa2:	441a      	add	r2, r3
 8013aa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013aa6:	68db      	ldr	r3, [r3, #12]
 8013aa8:	685b      	ldr	r3, [r3, #4]
 8013aaa:	1ad3      	subs	r3, r2, r3
            if (next &&
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	dd4d      	ble.n	8013b4c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8013ab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ab2:	68db      	ldr	r3, [r3, #12]
 8013ab4:	685b      	ldr	r3, [r3, #4]
 8013ab6:	b29a      	uxth	r2, r3
 8013ab8:	4b81      	ldr	r3, [pc, #516]	; (8013cc0 <tcp_receive+0xb08>)
 8013aba:	681b      	ldr	r3, [r3, #0]
 8013abc:	b29b      	uxth	r3, r3
 8013abe:	1ad3      	subs	r3, r2, r3
 8013ac0:	b29a      	uxth	r2, r3
 8013ac2:	4b80      	ldr	r3, [pc, #512]	; (8013cc4 <tcp_receive+0xb0c>)
 8013ac4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8013ac6:	4b7f      	ldr	r3, [pc, #508]	; (8013cc4 <tcp_receive+0xb0c>)
 8013ac8:	68db      	ldr	r3, [r3, #12]
 8013aca:	899b      	ldrh	r3, [r3, #12]
 8013acc:	b29b      	uxth	r3, r3
 8013ace:	4618      	mov	r0, r3
 8013ad0:	f7fa fb76 	bl	800e1c0 <lwip_htons>
 8013ad4:	4603      	mov	r3, r0
 8013ad6:	b2db      	uxtb	r3, r3
 8013ad8:	f003 0302 	and.w	r3, r3, #2
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d005      	beq.n	8013aec <tcp_receive+0x934>
                inseg.len -= 1;
 8013ae0:	4b78      	ldr	r3, [pc, #480]	; (8013cc4 <tcp_receive+0xb0c>)
 8013ae2:	891b      	ldrh	r3, [r3, #8]
 8013ae4:	3b01      	subs	r3, #1
 8013ae6:	b29a      	uxth	r2, r3
 8013ae8:	4b76      	ldr	r3, [pc, #472]	; (8013cc4 <tcp_receive+0xb0c>)
 8013aea:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8013aec:	4b75      	ldr	r3, [pc, #468]	; (8013cc4 <tcp_receive+0xb0c>)
 8013aee:	685b      	ldr	r3, [r3, #4]
 8013af0:	4a74      	ldr	r2, [pc, #464]	; (8013cc4 <tcp_receive+0xb0c>)
 8013af2:	8912      	ldrh	r2, [r2, #8]
 8013af4:	4611      	mov	r1, r2
 8013af6:	4618      	mov	r0, r3
 8013af8:	f7fb fdc0 	bl	800f67c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8013afc:	4b71      	ldr	r3, [pc, #452]	; (8013cc4 <tcp_receive+0xb0c>)
 8013afe:	891c      	ldrh	r4, [r3, #8]
 8013b00:	4b70      	ldr	r3, [pc, #448]	; (8013cc4 <tcp_receive+0xb0c>)
 8013b02:	68db      	ldr	r3, [r3, #12]
 8013b04:	899b      	ldrh	r3, [r3, #12]
 8013b06:	b29b      	uxth	r3, r3
 8013b08:	4618      	mov	r0, r3
 8013b0a:	f7fa fb59 	bl	800e1c0 <lwip_htons>
 8013b0e:	4603      	mov	r3, r0
 8013b10:	b2db      	uxtb	r3, r3
 8013b12:	f003 0303 	and.w	r3, r3, #3
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d001      	beq.n	8013b1e <tcp_receive+0x966>
 8013b1a:	2301      	movs	r3, #1
 8013b1c:	e000      	b.n	8013b20 <tcp_receive+0x968>
 8013b1e:	2300      	movs	r3, #0
 8013b20:	4423      	add	r3, r4
 8013b22:	b29a      	uxth	r2, r3
 8013b24:	4b65      	ldr	r3, [pc, #404]	; (8013cbc <tcp_receive+0xb04>)
 8013b26:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8013b28:	4b64      	ldr	r3, [pc, #400]	; (8013cbc <tcp_receive+0xb04>)
 8013b2a:	881b      	ldrh	r3, [r3, #0]
 8013b2c:	461a      	mov	r2, r3
 8013b2e:	4b64      	ldr	r3, [pc, #400]	; (8013cc0 <tcp_receive+0xb08>)
 8013b30:	681b      	ldr	r3, [r3, #0]
 8013b32:	441a      	add	r2, r3
 8013b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b36:	68db      	ldr	r3, [r3, #12]
 8013b38:	685b      	ldr	r3, [r3, #4]
 8013b3a:	429a      	cmp	r2, r3
 8013b3c:	d006      	beq.n	8013b4c <tcp_receive+0x994>
 8013b3e:	4b62      	ldr	r3, [pc, #392]	; (8013cc8 <tcp_receive+0xb10>)
 8013b40:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8013b44:	4961      	ldr	r1, [pc, #388]	; (8013ccc <tcp_receive+0xb14>)
 8013b46:	4862      	ldr	r0, [pc, #392]	; (8013cd0 <tcp_receive+0xb18>)
 8013b48:	f008 ffd2 	bl	801caf0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013b50:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8013b52:	4b5a      	ldr	r3, [pc, #360]	; (8013cbc <tcp_receive+0xb04>)
 8013b54:	881b      	ldrh	r3, [r3, #0]
 8013b56:	461a      	mov	r2, r3
 8013b58:	4b59      	ldr	r3, [pc, #356]	; (8013cc0 <tcp_receive+0xb08>)
 8013b5a:	681b      	ldr	r3, [r3, #0]
 8013b5c:	441a      	add	r2, r3
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013b66:	4b55      	ldr	r3, [pc, #340]	; (8013cbc <tcp_receive+0xb04>)
 8013b68:	881b      	ldrh	r3, [r3, #0]
 8013b6a:	429a      	cmp	r2, r3
 8013b6c:	d206      	bcs.n	8013b7c <tcp_receive+0x9c4>
 8013b6e:	4b56      	ldr	r3, [pc, #344]	; (8013cc8 <tcp_receive+0xb10>)
 8013b70:	f240 6207 	movw	r2, #1543	; 0x607
 8013b74:	4957      	ldr	r1, [pc, #348]	; (8013cd4 <tcp_receive+0xb1c>)
 8013b76:	4856      	ldr	r0, [pc, #344]	; (8013cd0 <tcp_receive+0xb18>)
 8013b78:	f008 ffba 	bl	801caf0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013b80:	4b4e      	ldr	r3, [pc, #312]	; (8013cbc <tcp_receive+0xb04>)
 8013b82:	881b      	ldrh	r3, [r3, #0]
 8013b84:	1ad3      	subs	r3, r2, r3
 8013b86:	b29a      	uxth	r2, r3
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8013b8c:	6878      	ldr	r0, [r7, #4]
 8013b8e:	f7fc feb5 	bl	80108fc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8013b92:	4b4c      	ldr	r3, [pc, #304]	; (8013cc4 <tcp_receive+0xb0c>)
 8013b94:	685b      	ldr	r3, [r3, #4]
 8013b96:	891b      	ldrh	r3, [r3, #8]
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d006      	beq.n	8013baa <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8013b9c:	4b49      	ldr	r3, [pc, #292]	; (8013cc4 <tcp_receive+0xb0c>)
 8013b9e:	685b      	ldr	r3, [r3, #4]
 8013ba0:	4a4d      	ldr	r2, [pc, #308]	; (8013cd8 <tcp_receive+0xb20>)
 8013ba2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8013ba4:	4b47      	ldr	r3, [pc, #284]	; (8013cc4 <tcp_receive+0xb0c>)
 8013ba6:	2200      	movs	r2, #0
 8013ba8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013baa:	4b46      	ldr	r3, [pc, #280]	; (8013cc4 <tcp_receive+0xb0c>)
 8013bac:	68db      	ldr	r3, [r3, #12]
 8013bae:	899b      	ldrh	r3, [r3, #12]
 8013bb0:	b29b      	uxth	r3, r3
 8013bb2:	4618      	mov	r0, r3
 8013bb4:	f7fa fb04 	bl	800e1c0 <lwip_htons>
 8013bb8:	4603      	mov	r3, r0
 8013bba:	b2db      	uxtb	r3, r3
 8013bbc:	f003 0301 	and.w	r3, r3, #1
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	f000 80b8 	beq.w	8013d36 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8013bc6:	4b45      	ldr	r3, [pc, #276]	; (8013cdc <tcp_receive+0xb24>)
 8013bc8:	781b      	ldrb	r3, [r3, #0]
 8013bca:	f043 0320 	orr.w	r3, r3, #32
 8013bce:	b2da      	uxtb	r2, r3
 8013bd0:	4b42      	ldr	r3, [pc, #264]	; (8013cdc <tcp_receive+0xb24>)
 8013bd2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8013bd4:	e0af      	b.n	8013d36 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013bda:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013be0:	68db      	ldr	r3, [r3, #12]
 8013be2:	685b      	ldr	r3, [r3, #4]
 8013be4:	4a36      	ldr	r2, [pc, #216]	; (8013cc0 <tcp_receive+0xb08>)
 8013be6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8013be8:	68bb      	ldr	r3, [r7, #8]
 8013bea:	891b      	ldrh	r3, [r3, #8]
 8013bec:	461c      	mov	r4, r3
 8013bee:	68bb      	ldr	r3, [r7, #8]
 8013bf0:	68db      	ldr	r3, [r3, #12]
 8013bf2:	899b      	ldrh	r3, [r3, #12]
 8013bf4:	b29b      	uxth	r3, r3
 8013bf6:	4618      	mov	r0, r3
 8013bf8:	f7fa fae2 	bl	800e1c0 <lwip_htons>
 8013bfc:	4603      	mov	r3, r0
 8013bfe:	b2db      	uxtb	r3, r3
 8013c00:	f003 0303 	and.w	r3, r3, #3
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d001      	beq.n	8013c0c <tcp_receive+0xa54>
 8013c08:	2301      	movs	r3, #1
 8013c0a:	e000      	b.n	8013c0e <tcp_receive+0xa56>
 8013c0c:	2300      	movs	r3, #0
 8013c0e:	191a      	adds	r2, r3, r4
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c14:	441a      	add	r2, r3
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013c1e:	461c      	mov	r4, r3
 8013c20:	68bb      	ldr	r3, [r7, #8]
 8013c22:	891b      	ldrh	r3, [r3, #8]
 8013c24:	461d      	mov	r5, r3
 8013c26:	68bb      	ldr	r3, [r7, #8]
 8013c28:	68db      	ldr	r3, [r3, #12]
 8013c2a:	899b      	ldrh	r3, [r3, #12]
 8013c2c:	b29b      	uxth	r3, r3
 8013c2e:	4618      	mov	r0, r3
 8013c30:	f7fa fac6 	bl	800e1c0 <lwip_htons>
 8013c34:	4603      	mov	r3, r0
 8013c36:	b2db      	uxtb	r3, r3
 8013c38:	f003 0303 	and.w	r3, r3, #3
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d001      	beq.n	8013c44 <tcp_receive+0xa8c>
 8013c40:	2301      	movs	r3, #1
 8013c42:	e000      	b.n	8013c46 <tcp_receive+0xa8e>
 8013c44:	2300      	movs	r3, #0
 8013c46:	442b      	add	r3, r5
 8013c48:	429c      	cmp	r4, r3
 8013c4a:	d206      	bcs.n	8013c5a <tcp_receive+0xaa2>
 8013c4c:	4b1e      	ldr	r3, [pc, #120]	; (8013cc8 <tcp_receive+0xb10>)
 8013c4e:	f240 622b 	movw	r2, #1579	; 0x62b
 8013c52:	4923      	ldr	r1, [pc, #140]	; (8013ce0 <tcp_receive+0xb28>)
 8013c54:	481e      	ldr	r0, [pc, #120]	; (8013cd0 <tcp_receive+0xb18>)
 8013c56:	f008 ff4b 	bl	801caf0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8013c5a:	68bb      	ldr	r3, [r7, #8]
 8013c5c:	891b      	ldrh	r3, [r3, #8]
 8013c5e:	461c      	mov	r4, r3
 8013c60:	68bb      	ldr	r3, [r7, #8]
 8013c62:	68db      	ldr	r3, [r3, #12]
 8013c64:	899b      	ldrh	r3, [r3, #12]
 8013c66:	b29b      	uxth	r3, r3
 8013c68:	4618      	mov	r0, r3
 8013c6a:	f7fa faa9 	bl	800e1c0 <lwip_htons>
 8013c6e:	4603      	mov	r3, r0
 8013c70:	b2db      	uxtb	r3, r3
 8013c72:	f003 0303 	and.w	r3, r3, #3
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d001      	beq.n	8013c7e <tcp_receive+0xac6>
 8013c7a:	2301      	movs	r3, #1
 8013c7c:	e000      	b.n	8013c80 <tcp_receive+0xac8>
 8013c7e:	2300      	movs	r3, #0
 8013c80:	1919      	adds	r1, r3, r4
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013c86:	b28b      	uxth	r3, r1
 8013c88:	1ad3      	subs	r3, r2, r3
 8013c8a:	b29a      	uxth	r2, r3
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8013c90:	6878      	ldr	r0, [r7, #4]
 8013c92:	f7fc fe33 	bl	80108fc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8013c96:	68bb      	ldr	r3, [r7, #8]
 8013c98:	685b      	ldr	r3, [r3, #4]
 8013c9a:	891b      	ldrh	r3, [r3, #8]
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d028      	beq.n	8013cf2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8013ca0:	4b0d      	ldr	r3, [pc, #52]	; (8013cd8 <tcp_receive+0xb20>)
 8013ca2:	681b      	ldr	r3, [r3, #0]
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d01d      	beq.n	8013ce4 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8013ca8:	4b0b      	ldr	r3, [pc, #44]	; (8013cd8 <tcp_receive+0xb20>)
 8013caa:	681a      	ldr	r2, [r3, #0]
 8013cac:	68bb      	ldr	r3, [r7, #8]
 8013cae:	685b      	ldr	r3, [r3, #4]
 8013cb0:	4619      	mov	r1, r3
 8013cb2:	4610      	mov	r0, r2
 8013cb4:	f7fb ff68 	bl	800fb88 <pbuf_cat>
 8013cb8:	e018      	b.n	8013cec <tcp_receive+0xb34>
 8013cba:	bf00      	nop
 8013cbc:	200014ba 	.word	0x200014ba
 8013cc0:	200014b0 	.word	0x200014b0
 8013cc4:	20001490 	.word	0x20001490
 8013cc8:	08020d38 	.word	0x08020d38
 8013ccc:	08021118 	.word	0x08021118
 8013cd0:	08020d84 	.word	0x08020d84
 8013cd4:	08021154 	.word	0x08021154
 8013cd8:	200014c0 	.word	0x200014c0
 8013cdc:	200014bd 	.word	0x200014bd
 8013ce0:	08021174 	.word	0x08021174
            } else {
              recv_data = cseg->p;
 8013ce4:	68bb      	ldr	r3, [r7, #8]
 8013ce6:	685b      	ldr	r3, [r3, #4]
 8013ce8:	4a70      	ldr	r2, [pc, #448]	; (8013eac <tcp_receive+0xcf4>)
 8013cea:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8013cec:	68bb      	ldr	r3, [r7, #8]
 8013cee:	2200      	movs	r2, #0
 8013cf0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8013cf2:	68bb      	ldr	r3, [r7, #8]
 8013cf4:	68db      	ldr	r3, [r3, #12]
 8013cf6:	899b      	ldrh	r3, [r3, #12]
 8013cf8:	b29b      	uxth	r3, r3
 8013cfa:	4618      	mov	r0, r3
 8013cfc:	f7fa fa60 	bl	800e1c0 <lwip_htons>
 8013d00:	4603      	mov	r3, r0
 8013d02:	b2db      	uxtb	r3, r3
 8013d04:	f003 0301 	and.w	r3, r3, #1
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d00d      	beq.n	8013d28 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8013d0c:	4b68      	ldr	r3, [pc, #416]	; (8013eb0 <tcp_receive+0xcf8>)
 8013d0e:	781b      	ldrb	r3, [r3, #0]
 8013d10:	f043 0320 	orr.w	r3, r3, #32
 8013d14:	b2da      	uxtb	r2, r3
 8013d16:	4b66      	ldr	r3, [pc, #408]	; (8013eb0 <tcp_receive+0xcf8>)
 8013d18:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	7d1b      	ldrb	r3, [r3, #20]
 8013d1e:	2b04      	cmp	r3, #4
 8013d20:	d102      	bne.n	8013d28 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	2207      	movs	r2, #7
 8013d26:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8013d28:	68bb      	ldr	r3, [r7, #8]
 8013d2a:	681a      	ldr	r2, [r3, #0]
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8013d30:	68b8      	ldr	r0, [r7, #8]
 8013d32:	f7fd fb08 	bl	8011346 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d008      	beq.n	8013d50 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013d42:	68db      	ldr	r3, [r3, #12]
 8013d44:	685a      	ldr	r2, [r3, #4]
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8013d4a:	429a      	cmp	r2, r3
 8013d4c:	f43f af43 	beq.w	8013bd6 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	8b5b      	ldrh	r3, [r3, #26]
 8013d54:	f003 0301 	and.w	r3, r3, #1
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d00e      	beq.n	8013d7a <tcp_receive+0xbc2>
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	8b5b      	ldrh	r3, [r3, #26]
 8013d60:	f023 0301 	bic.w	r3, r3, #1
 8013d64:	b29a      	uxth	r2, r3
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	835a      	strh	r2, [r3, #26]
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	8b5b      	ldrh	r3, [r3, #26]
 8013d6e:	f043 0302 	orr.w	r3, r3, #2
 8013d72:	b29a      	uxth	r2, r3
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8013d78:	e188      	b.n	801408c <tcp_receive+0xed4>
        tcp_ack(pcb);
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	8b5b      	ldrh	r3, [r3, #26]
 8013d7e:	f043 0301 	orr.w	r3, r3, #1
 8013d82:	b29a      	uxth	r2, r3
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8013d88:	e180      	b.n	801408c <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d106      	bne.n	8013da0 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8013d92:	4848      	ldr	r0, [pc, #288]	; (8013eb4 <tcp_receive+0xcfc>)
 8013d94:	f7fd faf0 	bl	8011378 <tcp_seg_copy>
 8013d98:	4602      	mov	r2, r0
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	675a      	str	r2, [r3, #116]	; 0x74
 8013d9e:	e16d      	b.n	801407c <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8013da0:	2300      	movs	r3, #0
 8013da2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013da8:	63bb      	str	r3, [r7, #56]	; 0x38
 8013daa:	e157      	b.n	801405c <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8013dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013dae:	68db      	ldr	r3, [r3, #12]
 8013db0:	685a      	ldr	r2, [r3, #4]
 8013db2:	4b41      	ldr	r3, [pc, #260]	; (8013eb8 <tcp_receive+0xd00>)
 8013db4:	681b      	ldr	r3, [r3, #0]
 8013db6:	429a      	cmp	r2, r3
 8013db8:	d11d      	bne.n	8013df6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8013dba:	4b3e      	ldr	r3, [pc, #248]	; (8013eb4 <tcp_receive+0xcfc>)
 8013dbc:	891a      	ldrh	r2, [r3, #8]
 8013dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013dc0:	891b      	ldrh	r3, [r3, #8]
 8013dc2:	429a      	cmp	r2, r3
 8013dc4:	f240 814f 	bls.w	8014066 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013dc8:	483a      	ldr	r0, [pc, #232]	; (8013eb4 <tcp_receive+0xcfc>)
 8013dca:	f7fd fad5 	bl	8011378 <tcp_seg_copy>
 8013dce:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8013dd0:	697b      	ldr	r3, [r7, #20]
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	f000 8149 	beq.w	801406a <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8013dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	d003      	beq.n	8013de6 <tcp_receive+0xc2e>
                    prev->next = cseg;
 8013dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013de0:	697a      	ldr	r2, [r7, #20]
 8013de2:	601a      	str	r2, [r3, #0]
 8013de4:	e002      	b.n	8013dec <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	697a      	ldr	r2, [r7, #20]
 8013dea:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8013dec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013dee:	6978      	ldr	r0, [r7, #20]
 8013df0:	f7ff f8de 	bl	8012fb0 <tcp_oos_insert_segment>
                }
                break;
 8013df4:	e139      	b.n	801406a <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8013df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	d117      	bne.n	8013e2c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8013dfc:	4b2e      	ldr	r3, [pc, #184]	; (8013eb8 <tcp_receive+0xd00>)
 8013dfe:	681a      	ldr	r2, [r3, #0]
 8013e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e02:	68db      	ldr	r3, [r3, #12]
 8013e04:	685b      	ldr	r3, [r3, #4]
 8013e06:	1ad3      	subs	r3, r2, r3
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	da57      	bge.n	8013ebc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013e0c:	4829      	ldr	r0, [pc, #164]	; (8013eb4 <tcp_receive+0xcfc>)
 8013e0e:	f7fd fab3 	bl	8011378 <tcp_seg_copy>
 8013e12:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8013e14:	69bb      	ldr	r3, [r7, #24]
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	f000 8129 	beq.w	801406e <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	69ba      	ldr	r2, [r7, #24]
 8013e20:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8013e22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013e24:	69b8      	ldr	r0, [r7, #24]
 8013e26:	f7ff f8c3 	bl	8012fb0 <tcp_oos_insert_segment>
                  }
                  break;
 8013e2a:	e120      	b.n	801406e <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8013e2c:	4b22      	ldr	r3, [pc, #136]	; (8013eb8 <tcp_receive+0xd00>)
 8013e2e:	681a      	ldr	r2, [r3, #0]
 8013e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e32:	68db      	ldr	r3, [r3, #12]
 8013e34:	685b      	ldr	r3, [r3, #4]
 8013e36:	1ad3      	subs	r3, r2, r3
 8013e38:	3b01      	subs	r3, #1
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	db3e      	blt.n	8013ebc <tcp_receive+0xd04>
 8013e3e:	4b1e      	ldr	r3, [pc, #120]	; (8013eb8 <tcp_receive+0xd00>)
 8013e40:	681a      	ldr	r2, [r3, #0]
 8013e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e44:	68db      	ldr	r3, [r3, #12]
 8013e46:	685b      	ldr	r3, [r3, #4]
 8013e48:	1ad3      	subs	r3, r2, r3
 8013e4a:	3301      	adds	r3, #1
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	dc35      	bgt.n	8013ebc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013e50:	4818      	ldr	r0, [pc, #96]	; (8013eb4 <tcp_receive+0xcfc>)
 8013e52:	f7fd fa91 	bl	8011378 <tcp_seg_copy>
 8013e56:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8013e58:	69fb      	ldr	r3, [r7, #28]
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	f000 8109 	beq.w	8014072 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8013e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e62:	68db      	ldr	r3, [r3, #12]
 8013e64:	685b      	ldr	r3, [r3, #4]
 8013e66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013e68:	8912      	ldrh	r2, [r2, #8]
 8013e6a:	441a      	add	r2, r3
 8013e6c:	4b12      	ldr	r3, [pc, #72]	; (8013eb8 <tcp_receive+0xd00>)
 8013e6e:	681b      	ldr	r3, [r3, #0]
 8013e70:	1ad3      	subs	r3, r2, r3
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	dd12      	ble.n	8013e9c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8013e76:	4b10      	ldr	r3, [pc, #64]	; (8013eb8 <tcp_receive+0xd00>)
 8013e78:	681b      	ldr	r3, [r3, #0]
 8013e7a:	b29a      	uxth	r2, r3
 8013e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e7e:	68db      	ldr	r3, [r3, #12]
 8013e80:	685b      	ldr	r3, [r3, #4]
 8013e82:	b29b      	uxth	r3, r3
 8013e84:	1ad3      	subs	r3, r2, r3
 8013e86:	b29a      	uxth	r2, r3
 8013e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e8a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8013e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e8e:	685a      	ldr	r2, [r3, #4]
 8013e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e92:	891b      	ldrh	r3, [r3, #8]
 8013e94:	4619      	mov	r1, r3
 8013e96:	4610      	mov	r0, r2
 8013e98:	f7fb fbf0 	bl	800f67c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8013e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e9e:	69fa      	ldr	r2, [r7, #28]
 8013ea0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8013ea2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013ea4:	69f8      	ldr	r0, [r7, #28]
 8013ea6:	f7ff f883 	bl	8012fb0 <tcp_oos_insert_segment>
                  }
                  break;
 8013eaa:	e0e2      	b.n	8014072 <tcp_receive+0xeba>
 8013eac:	200014c0 	.word	0x200014c0
 8013eb0:	200014bd 	.word	0x200014bd
 8013eb4:	20001490 	.word	0x20001490
 8013eb8:	200014b0 	.word	0x200014b0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8013ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ebe:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8013ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ec2:	681b      	ldr	r3, [r3, #0]
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	f040 80c6 	bne.w	8014056 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8013eca:	4b80      	ldr	r3, [pc, #512]	; (80140cc <tcp_receive+0xf14>)
 8013ecc:	681a      	ldr	r2, [r3, #0]
 8013ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ed0:	68db      	ldr	r3, [r3, #12]
 8013ed2:	685b      	ldr	r3, [r3, #4]
 8013ed4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	f340 80bd 	ble.w	8014056 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8013edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ede:	68db      	ldr	r3, [r3, #12]
 8013ee0:	899b      	ldrh	r3, [r3, #12]
 8013ee2:	b29b      	uxth	r3, r3
 8013ee4:	4618      	mov	r0, r3
 8013ee6:	f7fa f96b 	bl	800e1c0 <lwip_htons>
 8013eea:	4603      	mov	r3, r0
 8013eec:	b2db      	uxtb	r3, r3
 8013eee:	f003 0301 	and.w	r3, r3, #1
 8013ef2:	2b00      	cmp	r3, #0
 8013ef4:	f040 80bf 	bne.w	8014076 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8013ef8:	4875      	ldr	r0, [pc, #468]	; (80140d0 <tcp_receive+0xf18>)
 8013efa:	f7fd fa3d 	bl	8011378 <tcp_seg_copy>
 8013efe:	4602      	mov	r2, r0
 8013f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f02:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8013f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f06:	681b      	ldr	r3, [r3, #0]
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	f000 80b6 	beq.w	801407a <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8013f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f10:	68db      	ldr	r3, [r3, #12]
 8013f12:	685b      	ldr	r3, [r3, #4]
 8013f14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013f16:	8912      	ldrh	r2, [r2, #8]
 8013f18:	441a      	add	r2, r3
 8013f1a:	4b6c      	ldr	r3, [pc, #432]	; (80140cc <tcp_receive+0xf14>)
 8013f1c:	681b      	ldr	r3, [r3, #0]
 8013f1e:	1ad3      	subs	r3, r2, r3
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	dd12      	ble.n	8013f4a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8013f24:	4b69      	ldr	r3, [pc, #420]	; (80140cc <tcp_receive+0xf14>)
 8013f26:	681b      	ldr	r3, [r3, #0]
 8013f28:	b29a      	uxth	r2, r3
 8013f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f2c:	68db      	ldr	r3, [r3, #12]
 8013f2e:	685b      	ldr	r3, [r3, #4]
 8013f30:	b29b      	uxth	r3, r3
 8013f32:	1ad3      	subs	r3, r2, r3
 8013f34:	b29a      	uxth	r2, r3
 8013f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f38:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8013f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f3c:	685a      	ldr	r2, [r3, #4]
 8013f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f40:	891b      	ldrh	r3, [r3, #8]
 8013f42:	4619      	mov	r1, r3
 8013f44:	4610      	mov	r0, r2
 8013f46:	f7fb fb99 	bl	800f67c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8013f4a:	4b62      	ldr	r3, [pc, #392]	; (80140d4 <tcp_receive+0xf1c>)
 8013f4c:	881b      	ldrh	r3, [r3, #0]
 8013f4e:	461a      	mov	r2, r3
 8013f50:	4b5e      	ldr	r3, [pc, #376]	; (80140cc <tcp_receive+0xf14>)
 8013f52:	681b      	ldr	r3, [r3, #0]
 8013f54:	441a      	add	r2, r3
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f5a:	6879      	ldr	r1, [r7, #4]
 8013f5c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013f5e:	440b      	add	r3, r1
 8013f60:	1ad3      	subs	r3, r2, r3
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	f340 8089 	ble.w	801407a <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8013f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f6a:	681b      	ldr	r3, [r3, #0]
 8013f6c:	68db      	ldr	r3, [r3, #12]
 8013f6e:	899b      	ldrh	r3, [r3, #12]
 8013f70:	b29b      	uxth	r3, r3
 8013f72:	4618      	mov	r0, r3
 8013f74:	f7fa f924 	bl	800e1c0 <lwip_htons>
 8013f78:	4603      	mov	r3, r0
 8013f7a:	b2db      	uxtb	r3, r3
 8013f7c:	f003 0301 	and.w	r3, r3, #1
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d022      	beq.n	8013fca <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8013f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f86:	681b      	ldr	r3, [r3, #0]
 8013f88:	68db      	ldr	r3, [r3, #12]
 8013f8a:	899b      	ldrh	r3, [r3, #12]
 8013f8c:	b29b      	uxth	r3, r3
 8013f8e:	b21b      	sxth	r3, r3
 8013f90:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013f94:	b21c      	sxth	r4, r3
 8013f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f98:	681b      	ldr	r3, [r3, #0]
 8013f9a:	68db      	ldr	r3, [r3, #12]
 8013f9c:	899b      	ldrh	r3, [r3, #12]
 8013f9e:	b29b      	uxth	r3, r3
 8013fa0:	4618      	mov	r0, r3
 8013fa2:	f7fa f90d 	bl	800e1c0 <lwip_htons>
 8013fa6:	4603      	mov	r3, r0
 8013fa8:	b2db      	uxtb	r3, r3
 8013faa:	b29b      	uxth	r3, r3
 8013fac:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8013fb0:	b29b      	uxth	r3, r3
 8013fb2:	4618      	mov	r0, r3
 8013fb4:	f7fa f904 	bl	800e1c0 <lwip_htons>
 8013fb8:	4603      	mov	r3, r0
 8013fba:	b21b      	sxth	r3, r3
 8013fbc:	4323      	orrs	r3, r4
 8013fbe:	b21a      	sxth	r2, r3
 8013fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fc2:	681b      	ldr	r3, [r3, #0]
 8013fc4:	68db      	ldr	r3, [r3, #12]
 8013fc6:	b292      	uxth	r2, r2
 8013fc8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fce:	b29a      	uxth	r2, r3
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013fd4:	4413      	add	r3, r2
 8013fd6:	b299      	uxth	r1, r3
 8013fd8:	4b3c      	ldr	r3, [pc, #240]	; (80140cc <tcp_receive+0xf14>)
 8013fda:	681b      	ldr	r3, [r3, #0]
 8013fdc:	b29a      	uxth	r2, r3
 8013fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fe0:	681b      	ldr	r3, [r3, #0]
 8013fe2:	1a8a      	subs	r2, r1, r2
 8013fe4:	b292      	uxth	r2, r2
 8013fe6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8013fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fea:	681b      	ldr	r3, [r3, #0]
 8013fec:	685a      	ldr	r2, [r3, #4]
 8013fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ff0:	681b      	ldr	r3, [r3, #0]
 8013ff2:	891b      	ldrh	r3, [r3, #8]
 8013ff4:	4619      	mov	r1, r3
 8013ff6:	4610      	mov	r0, r2
 8013ff8:	f7fb fb40 	bl	800f67c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8013ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ffe:	681b      	ldr	r3, [r3, #0]
 8014000:	891c      	ldrh	r4, [r3, #8]
 8014002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014004:	681b      	ldr	r3, [r3, #0]
 8014006:	68db      	ldr	r3, [r3, #12]
 8014008:	899b      	ldrh	r3, [r3, #12]
 801400a:	b29b      	uxth	r3, r3
 801400c:	4618      	mov	r0, r3
 801400e:	f7fa f8d7 	bl	800e1c0 <lwip_htons>
 8014012:	4603      	mov	r3, r0
 8014014:	b2db      	uxtb	r3, r3
 8014016:	f003 0303 	and.w	r3, r3, #3
 801401a:	2b00      	cmp	r3, #0
 801401c:	d001      	beq.n	8014022 <tcp_receive+0xe6a>
 801401e:	2301      	movs	r3, #1
 8014020:	e000      	b.n	8014024 <tcp_receive+0xe6c>
 8014022:	2300      	movs	r3, #0
 8014024:	4423      	add	r3, r4
 8014026:	b29a      	uxth	r2, r3
 8014028:	4b2a      	ldr	r3, [pc, #168]	; (80140d4 <tcp_receive+0xf1c>)
 801402a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801402c:	4b29      	ldr	r3, [pc, #164]	; (80140d4 <tcp_receive+0xf1c>)
 801402e:	881b      	ldrh	r3, [r3, #0]
 8014030:	461a      	mov	r2, r3
 8014032:	4b26      	ldr	r3, [pc, #152]	; (80140cc <tcp_receive+0xf14>)
 8014034:	681b      	ldr	r3, [r3, #0]
 8014036:	441a      	add	r2, r3
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801403c:	6879      	ldr	r1, [r7, #4]
 801403e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014040:	440b      	add	r3, r1
 8014042:	429a      	cmp	r2, r3
 8014044:	d019      	beq.n	801407a <tcp_receive+0xec2>
 8014046:	4b24      	ldr	r3, [pc, #144]	; (80140d8 <tcp_receive+0xf20>)
 8014048:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801404c:	4923      	ldr	r1, [pc, #140]	; (80140dc <tcp_receive+0xf24>)
 801404e:	4824      	ldr	r0, [pc, #144]	; (80140e0 <tcp_receive+0xf28>)
 8014050:	f008 fd4e 	bl	801caf0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8014054:	e011      	b.n	801407a <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014058:	681b      	ldr	r3, [r3, #0]
 801405a:	63bb      	str	r3, [r7, #56]	; 0x38
 801405c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801405e:	2b00      	cmp	r3, #0
 8014060:	f47f aea4 	bne.w	8013dac <tcp_receive+0xbf4>
 8014064:	e00a      	b.n	801407c <tcp_receive+0xec4>
                break;
 8014066:	bf00      	nop
 8014068:	e008      	b.n	801407c <tcp_receive+0xec4>
                break;
 801406a:	bf00      	nop
 801406c:	e006      	b.n	801407c <tcp_receive+0xec4>
                  break;
 801406e:	bf00      	nop
 8014070:	e004      	b.n	801407c <tcp_receive+0xec4>
                  break;
 8014072:	bf00      	nop
 8014074:	e002      	b.n	801407c <tcp_receive+0xec4>
                  break;
 8014076:	bf00      	nop
 8014078:	e000      	b.n	801407c <tcp_receive+0xec4>
                break;
 801407a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801407c:	6878      	ldr	r0, [r7, #4]
 801407e:	f001 fe8b 	bl	8015d98 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8014082:	e003      	b.n	801408c <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8014084:	6878      	ldr	r0, [r7, #4]
 8014086:	f001 fe87 	bl	8015d98 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801408a:	e01a      	b.n	80140c2 <tcp_receive+0xf0a>
 801408c:	e019      	b.n	80140c2 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801408e:	4b0f      	ldr	r3, [pc, #60]	; (80140cc <tcp_receive+0xf14>)
 8014090:	681a      	ldr	r2, [r3, #0]
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014096:	1ad3      	subs	r3, r2, r3
 8014098:	2b00      	cmp	r3, #0
 801409a:	db0a      	blt.n	80140b2 <tcp_receive+0xefa>
 801409c:	4b0b      	ldr	r3, [pc, #44]	; (80140cc <tcp_receive+0xf14>)
 801409e:	681a      	ldr	r2, [r3, #0]
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140a4:	6879      	ldr	r1, [r7, #4]
 80140a6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80140a8:	440b      	add	r3, r1
 80140aa:	1ad3      	subs	r3, r2, r3
 80140ac:	3301      	adds	r3, #1
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	dd07      	ble.n	80140c2 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	8b5b      	ldrh	r3, [r3, #26]
 80140b6:	f043 0302 	orr.w	r3, r3, #2
 80140ba:	b29a      	uxth	r2, r3
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80140c0:	e7ff      	b.n	80140c2 <tcp_receive+0xf0a>
 80140c2:	bf00      	nop
 80140c4:	3750      	adds	r7, #80	; 0x50
 80140c6:	46bd      	mov	sp, r7
 80140c8:	bdb0      	pop	{r4, r5, r7, pc}
 80140ca:	bf00      	nop
 80140cc:	200014b0 	.word	0x200014b0
 80140d0:	20001490 	.word	0x20001490
 80140d4:	200014ba 	.word	0x200014ba
 80140d8:	08020d38 	.word	0x08020d38
 80140dc:	080210e0 	.word	0x080210e0
 80140e0:	08020d84 	.word	0x08020d84

080140e4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80140e4:	b480      	push	{r7}
 80140e6:	b083      	sub	sp, #12
 80140e8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80140ea:	4b15      	ldr	r3, [pc, #84]	; (8014140 <tcp_get_next_optbyte+0x5c>)
 80140ec:	881b      	ldrh	r3, [r3, #0]
 80140ee:	1c5a      	adds	r2, r3, #1
 80140f0:	b291      	uxth	r1, r2
 80140f2:	4a13      	ldr	r2, [pc, #76]	; (8014140 <tcp_get_next_optbyte+0x5c>)
 80140f4:	8011      	strh	r1, [r2, #0]
 80140f6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80140f8:	4b12      	ldr	r3, [pc, #72]	; (8014144 <tcp_get_next_optbyte+0x60>)
 80140fa:	681b      	ldr	r3, [r3, #0]
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d004      	beq.n	801410a <tcp_get_next_optbyte+0x26>
 8014100:	4b11      	ldr	r3, [pc, #68]	; (8014148 <tcp_get_next_optbyte+0x64>)
 8014102:	881b      	ldrh	r3, [r3, #0]
 8014104:	88fa      	ldrh	r2, [r7, #6]
 8014106:	429a      	cmp	r2, r3
 8014108:	d208      	bcs.n	801411c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801410a:	4b10      	ldr	r3, [pc, #64]	; (801414c <tcp_get_next_optbyte+0x68>)
 801410c:	681b      	ldr	r3, [r3, #0]
 801410e:	3314      	adds	r3, #20
 8014110:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8014112:	88fb      	ldrh	r3, [r7, #6]
 8014114:	683a      	ldr	r2, [r7, #0]
 8014116:	4413      	add	r3, r2
 8014118:	781b      	ldrb	r3, [r3, #0]
 801411a:	e00b      	b.n	8014134 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801411c:	88fb      	ldrh	r3, [r7, #6]
 801411e:	b2da      	uxtb	r2, r3
 8014120:	4b09      	ldr	r3, [pc, #36]	; (8014148 <tcp_get_next_optbyte+0x64>)
 8014122:	881b      	ldrh	r3, [r3, #0]
 8014124:	b2db      	uxtb	r3, r3
 8014126:	1ad3      	subs	r3, r2, r3
 8014128:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801412a:	4b06      	ldr	r3, [pc, #24]	; (8014144 <tcp_get_next_optbyte+0x60>)
 801412c:	681a      	ldr	r2, [r3, #0]
 801412e:	797b      	ldrb	r3, [r7, #5]
 8014130:	4413      	add	r3, r2
 8014132:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014134:	4618      	mov	r0, r3
 8014136:	370c      	adds	r7, #12
 8014138:	46bd      	mov	sp, r7
 801413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801413e:	4770      	bx	lr
 8014140:	200014ac 	.word	0x200014ac
 8014144:	200014a8 	.word	0x200014a8
 8014148:	200014a6 	.word	0x200014a6
 801414c:	200014a0 	.word	0x200014a0

08014150 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8014150:	b580      	push	{r7, lr}
 8014152:	b084      	sub	sp, #16
 8014154:	af00      	add	r7, sp, #0
 8014156:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	2b00      	cmp	r3, #0
 801415c:	d106      	bne.n	801416c <tcp_parseopt+0x1c>
 801415e:	4b32      	ldr	r3, [pc, #200]	; (8014228 <tcp_parseopt+0xd8>)
 8014160:	f240 727d 	movw	r2, #1917	; 0x77d
 8014164:	4931      	ldr	r1, [pc, #196]	; (801422c <tcp_parseopt+0xdc>)
 8014166:	4832      	ldr	r0, [pc, #200]	; (8014230 <tcp_parseopt+0xe0>)
 8014168:	f008 fcc2 	bl	801caf0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801416c:	4b31      	ldr	r3, [pc, #196]	; (8014234 <tcp_parseopt+0xe4>)
 801416e:	881b      	ldrh	r3, [r3, #0]
 8014170:	2b00      	cmp	r3, #0
 8014172:	d055      	beq.n	8014220 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014174:	4b30      	ldr	r3, [pc, #192]	; (8014238 <tcp_parseopt+0xe8>)
 8014176:	2200      	movs	r2, #0
 8014178:	801a      	strh	r2, [r3, #0]
 801417a:	e045      	b.n	8014208 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 801417c:	f7ff ffb2 	bl	80140e4 <tcp_get_next_optbyte>
 8014180:	4603      	mov	r3, r0
 8014182:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8014184:	7bfb      	ldrb	r3, [r7, #15]
 8014186:	2b02      	cmp	r3, #2
 8014188:	d006      	beq.n	8014198 <tcp_parseopt+0x48>
 801418a:	2b02      	cmp	r3, #2
 801418c:	dc2b      	bgt.n	80141e6 <tcp_parseopt+0x96>
 801418e:	2b00      	cmp	r3, #0
 8014190:	d041      	beq.n	8014216 <tcp_parseopt+0xc6>
 8014192:	2b01      	cmp	r3, #1
 8014194:	d127      	bne.n	80141e6 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8014196:	e037      	b.n	8014208 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8014198:	f7ff ffa4 	bl	80140e4 <tcp_get_next_optbyte>
 801419c:	4603      	mov	r3, r0
 801419e:	2b04      	cmp	r3, #4
 80141a0:	d13b      	bne.n	801421a <tcp_parseopt+0xca>
 80141a2:	4b25      	ldr	r3, [pc, #148]	; (8014238 <tcp_parseopt+0xe8>)
 80141a4:	881b      	ldrh	r3, [r3, #0]
 80141a6:	3301      	adds	r3, #1
 80141a8:	4a22      	ldr	r2, [pc, #136]	; (8014234 <tcp_parseopt+0xe4>)
 80141aa:	8812      	ldrh	r2, [r2, #0]
 80141ac:	4293      	cmp	r3, r2
 80141ae:	da34      	bge.n	801421a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80141b0:	f7ff ff98 	bl	80140e4 <tcp_get_next_optbyte>
 80141b4:	4603      	mov	r3, r0
 80141b6:	b29b      	uxth	r3, r3
 80141b8:	021b      	lsls	r3, r3, #8
 80141ba:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80141bc:	f7ff ff92 	bl	80140e4 <tcp_get_next_optbyte>
 80141c0:	4603      	mov	r3, r0
 80141c2:	b29a      	uxth	r2, r3
 80141c4:	89bb      	ldrh	r3, [r7, #12]
 80141c6:	4313      	orrs	r3, r2
 80141c8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80141ca:	89bb      	ldrh	r3, [r7, #12]
 80141cc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80141d0:	d804      	bhi.n	80141dc <tcp_parseopt+0x8c>
 80141d2:	89bb      	ldrh	r3, [r7, #12]
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	d001      	beq.n	80141dc <tcp_parseopt+0x8c>
 80141d8:	89ba      	ldrh	r2, [r7, #12]
 80141da:	e001      	b.n	80141e0 <tcp_parseopt+0x90>
 80141dc:	f44f 7206 	mov.w	r2, #536	; 0x218
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80141e4:	e010      	b.n	8014208 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80141e6:	f7ff ff7d 	bl	80140e4 <tcp_get_next_optbyte>
 80141ea:	4603      	mov	r3, r0
 80141ec:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80141ee:	7afb      	ldrb	r3, [r7, #11]
 80141f0:	2b01      	cmp	r3, #1
 80141f2:	d914      	bls.n	801421e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80141f4:	7afb      	ldrb	r3, [r7, #11]
 80141f6:	b29a      	uxth	r2, r3
 80141f8:	4b0f      	ldr	r3, [pc, #60]	; (8014238 <tcp_parseopt+0xe8>)
 80141fa:	881b      	ldrh	r3, [r3, #0]
 80141fc:	4413      	add	r3, r2
 80141fe:	b29b      	uxth	r3, r3
 8014200:	3b02      	subs	r3, #2
 8014202:	b29a      	uxth	r2, r3
 8014204:	4b0c      	ldr	r3, [pc, #48]	; (8014238 <tcp_parseopt+0xe8>)
 8014206:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014208:	4b0b      	ldr	r3, [pc, #44]	; (8014238 <tcp_parseopt+0xe8>)
 801420a:	881a      	ldrh	r2, [r3, #0]
 801420c:	4b09      	ldr	r3, [pc, #36]	; (8014234 <tcp_parseopt+0xe4>)
 801420e:	881b      	ldrh	r3, [r3, #0]
 8014210:	429a      	cmp	r2, r3
 8014212:	d3b3      	bcc.n	801417c <tcp_parseopt+0x2c>
 8014214:	e004      	b.n	8014220 <tcp_parseopt+0xd0>
          return;
 8014216:	bf00      	nop
 8014218:	e002      	b.n	8014220 <tcp_parseopt+0xd0>
            return;
 801421a:	bf00      	nop
 801421c:	e000      	b.n	8014220 <tcp_parseopt+0xd0>
            return;
 801421e:	bf00      	nop
      }
    }
  }
}
 8014220:	3710      	adds	r7, #16
 8014222:	46bd      	mov	sp, r7
 8014224:	bd80      	pop	{r7, pc}
 8014226:	bf00      	nop
 8014228:	08020d38 	.word	0x08020d38
 801422c:	0802119c 	.word	0x0802119c
 8014230:	08020d84 	.word	0x08020d84
 8014234:	200014a4 	.word	0x200014a4
 8014238:	200014ac 	.word	0x200014ac

0801423c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801423c:	b480      	push	{r7}
 801423e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8014240:	4b05      	ldr	r3, [pc, #20]	; (8014258 <tcp_trigger_input_pcb_close+0x1c>)
 8014242:	781b      	ldrb	r3, [r3, #0]
 8014244:	f043 0310 	orr.w	r3, r3, #16
 8014248:	b2da      	uxtb	r2, r3
 801424a:	4b03      	ldr	r3, [pc, #12]	; (8014258 <tcp_trigger_input_pcb_close+0x1c>)
 801424c:	701a      	strb	r2, [r3, #0]
}
 801424e:	bf00      	nop
 8014250:	46bd      	mov	sp, r7
 8014252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014256:	4770      	bx	lr
 8014258:	200014bd 	.word	0x200014bd

0801425c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801425c:	b580      	push	{r7, lr}
 801425e:	b084      	sub	sp, #16
 8014260:	af00      	add	r7, sp, #0
 8014262:	60f8      	str	r0, [r7, #12]
 8014264:	60b9      	str	r1, [r7, #8]
 8014266:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8014268:	68fb      	ldr	r3, [r7, #12]
 801426a:	2b00      	cmp	r3, #0
 801426c:	d00a      	beq.n	8014284 <tcp_route+0x28>
 801426e:	68fb      	ldr	r3, [r7, #12]
 8014270:	7a1b      	ldrb	r3, [r3, #8]
 8014272:	2b00      	cmp	r3, #0
 8014274:	d006      	beq.n	8014284 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8014276:	68fb      	ldr	r3, [r7, #12]
 8014278:	7a1b      	ldrb	r3, [r3, #8]
 801427a:	4618      	mov	r0, r3
 801427c:	f7fa ffbe 	bl	800f1fc <netif_get_by_index>
 8014280:	4603      	mov	r3, r0
 8014282:	e003      	b.n	801428c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8014284:	6878      	ldr	r0, [r7, #4]
 8014286:	f003 fe4f 	bl	8017f28 <ip4_route>
 801428a:	4603      	mov	r3, r0
  }
}
 801428c:	4618      	mov	r0, r3
 801428e:	3710      	adds	r7, #16
 8014290:	46bd      	mov	sp, r7
 8014292:	bd80      	pop	{r7, pc}

08014294 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8014294:	b590      	push	{r4, r7, lr}
 8014296:	b087      	sub	sp, #28
 8014298:	af00      	add	r7, sp, #0
 801429a:	60f8      	str	r0, [r7, #12]
 801429c:	60b9      	str	r1, [r7, #8]
 801429e:	603b      	str	r3, [r7, #0]
 80142a0:	4613      	mov	r3, r2
 80142a2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80142a4:	68fb      	ldr	r3, [r7, #12]
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	d105      	bne.n	80142b6 <tcp_create_segment+0x22>
 80142aa:	4b44      	ldr	r3, [pc, #272]	; (80143bc <tcp_create_segment+0x128>)
 80142ac:	22a3      	movs	r2, #163	; 0xa3
 80142ae:	4944      	ldr	r1, [pc, #272]	; (80143c0 <tcp_create_segment+0x12c>)
 80142b0:	4844      	ldr	r0, [pc, #272]	; (80143c4 <tcp_create_segment+0x130>)
 80142b2:	f008 fc1d 	bl	801caf0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80142b6:	68bb      	ldr	r3, [r7, #8]
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d105      	bne.n	80142c8 <tcp_create_segment+0x34>
 80142bc:	4b3f      	ldr	r3, [pc, #252]	; (80143bc <tcp_create_segment+0x128>)
 80142be:	22a4      	movs	r2, #164	; 0xa4
 80142c0:	4941      	ldr	r1, [pc, #260]	; (80143c8 <tcp_create_segment+0x134>)
 80142c2:	4840      	ldr	r0, [pc, #256]	; (80143c4 <tcp_create_segment+0x130>)
 80142c4:	f008 fc14 	bl	801caf0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80142c8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80142cc:	009b      	lsls	r3, r3, #2
 80142ce:	b2db      	uxtb	r3, r3
 80142d0:	f003 0304 	and.w	r3, r3, #4
 80142d4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80142d6:	2003      	movs	r0, #3
 80142d8:	f7fa fc28 	bl	800eb2c <memp_malloc>
 80142dc:	6138      	str	r0, [r7, #16]
 80142de:	693b      	ldr	r3, [r7, #16]
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d104      	bne.n	80142ee <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80142e4:	68b8      	ldr	r0, [r7, #8]
 80142e6:	f7fb fb81 	bl	800f9ec <pbuf_free>
    return NULL;
 80142ea:	2300      	movs	r3, #0
 80142ec:	e061      	b.n	80143b2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80142ee:	693b      	ldr	r3, [r7, #16]
 80142f0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80142f4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80142f6:	693b      	ldr	r3, [r7, #16]
 80142f8:	2200      	movs	r2, #0
 80142fa:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80142fc:	693b      	ldr	r3, [r7, #16]
 80142fe:	68ba      	ldr	r2, [r7, #8]
 8014300:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8014302:	68bb      	ldr	r3, [r7, #8]
 8014304:	891a      	ldrh	r2, [r3, #8]
 8014306:	7dfb      	ldrb	r3, [r7, #23]
 8014308:	b29b      	uxth	r3, r3
 801430a:	429a      	cmp	r2, r3
 801430c:	d205      	bcs.n	801431a <tcp_create_segment+0x86>
 801430e:	4b2b      	ldr	r3, [pc, #172]	; (80143bc <tcp_create_segment+0x128>)
 8014310:	22b0      	movs	r2, #176	; 0xb0
 8014312:	492e      	ldr	r1, [pc, #184]	; (80143cc <tcp_create_segment+0x138>)
 8014314:	482b      	ldr	r0, [pc, #172]	; (80143c4 <tcp_create_segment+0x130>)
 8014316:	f008 fbeb 	bl	801caf0 <iprintf>
  seg->len = p->tot_len - optlen;
 801431a:	68bb      	ldr	r3, [r7, #8]
 801431c:	891a      	ldrh	r2, [r3, #8]
 801431e:	7dfb      	ldrb	r3, [r7, #23]
 8014320:	b29b      	uxth	r3, r3
 8014322:	1ad3      	subs	r3, r2, r3
 8014324:	b29a      	uxth	r2, r3
 8014326:	693b      	ldr	r3, [r7, #16]
 8014328:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801432a:	2114      	movs	r1, #20
 801432c:	68b8      	ldr	r0, [r7, #8]
 801432e:	f7fb fa95 	bl	800f85c <pbuf_add_header>
 8014332:	4603      	mov	r3, r0
 8014334:	2b00      	cmp	r3, #0
 8014336:	d004      	beq.n	8014342 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8014338:	6938      	ldr	r0, [r7, #16]
 801433a:	f7fd f804 	bl	8011346 <tcp_seg_free>
    return NULL;
 801433e:	2300      	movs	r3, #0
 8014340:	e037      	b.n	80143b2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8014342:	693b      	ldr	r3, [r7, #16]
 8014344:	685b      	ldr	r3, [r3, #4]
 8014346:	685a      	ldr	r2, [r3, #4]
 8014348:	693b      	ldr	r3, [r7, #16]
 801434a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801434c:	68fb      	ldr	r3, [r7, #12]
 801434e:	8ada      	ldrh	r2, [r3, #22]
 8014350:	693b      	ldr	r3, [r7, #16]
 8014352:	68dc      	ldr	r4, [r3, #12]
 8014354:	4610      	mov	r0, r2
 8014356:	f7f9 ff33 	bl	800e1c0 <lwip_htons>
 801435a:	4603      	mov	r3, r0
 801435c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801435e:	68fb      	ldr	r3, [r7, #12]
 8014360:	8b1a      	ldrh	r2, [r3, #24]
 8014362:	693b      	ldr	r3, [r7, #16]
 8014364:	68dc      	ldr	r4, [r3, #12]
 8014366:	4610      	mov	r0, r2
 8014368:	f7f9 ff2a 	bl	800e1c0 <lwip_htons>
 801436c:	4603      	mov	r3, r0
 801436e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8014370:	693b      	ldr	r3, [r7, #16]
 8014372:	68dc      	ldr	r4, [r3, #12]
 8014374:	6838      	ldr	r0, [r7, #0]
 8014376:	f7f9 ff38 	bl	800e1ea <lwip_htonl>
 801437a:	4603      	mov	r3, r0
 801437c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801437e:	7dfb      	ldrb	r3, [r7, #23]
 8014380:	089b      	lsrs	r3, r3, #2
 8014382:	b2db      	uxtb	r3, r3
 8014384:	b29b      	uxth	r3, r3
 8014386:	3305      	adds	r3, #5
 8014388:	b29b      	uxth	r3, r3
 801438a:	031b      	lsls	r3, r3, #12
 801438c:	b29a      	uxth	r2, r3
 801438e:	79fb      	ldrb	r3, [r7, #7]
 8014390:	b29b      	uxth	r3, r3
 8014392:	4313      	orrs	r3, r2
 8014394:	b29a      	uxth	r2, r3
 8014396:	693b      	ldr	r3, [r7, #16]
 8014398:	68dc      	ldr	r4, [r3, #12]
 801439a:	4610      	mov	r0, r2
 801439c:	f7f9 ff10 	bl	800e1c0 <lwip_htons>
 80143a0:	4603      	mov	r3, r0
 80143a2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80143a4:	693b      	ldr	r3, [r7, #16]
 80143a6:	68db      	ldr	r3, [r3, #12]
 80143a8:	2200      	movs	r2, #0
 80143aa:	749a      	strb	r2, [r3, #18]
 80143ac:	2200      	movs	r2, #0
 80143ae:	74da      	strb	r2, [r3, #19]
  return seg;
 80143b0:	693b      	ldr	r3, [r7, #16]
}
 80143b2:	4618      	mov	r0, r3
 80143b4:	371c      	adds	r7, #28
 80143b6:	46bd      	mov	sp, r7
 80143b8:	bd90      	pop	{r4, r7, pc}
 80143ba:	bf00      	nop
 80143bc:	080211b8 	.word	0x080211b8
 80143c0:	080211ec 	.word	0x080211ec
 80143c4:	0802120c 	.word	0x0802120c
 80143c8:	08021234 	.word	0x08021234
 80143cc:	08021258 	.word	0x08021258

080143d0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80143d0:	b580      	push	{r7, lr}
 80143d2:	b086      	sub	sp, #24
 80143d4:	af00      	add	r7, sp, #0
 80143d6:	607b      	str	r3, [r7, #4]
 80143d8:	4603      	mov	r3, r0
 80143da:	73fb      	strb	r3, [r7, #15]
 80143dc:	460b      	mov	r3, r1
 80143de:	81bb      	strh	r3, [r7, #12]
 80143e0:	4613      	mov	r3, r2
 80143e2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80143e4:	89bb      	ldrh	r3, [r7, #12]
 80143e6:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	d105      	bne.n	80143fa <tcp_pbuf_prealloc+0x2a>
 80143ee:	4b30      	ldr	r3, [pc, #192]	; (80144b0 <tcp_pbuf_prealloc+0xe0>)
 80143f0:	22e8      	movs	r2, #232	; 0xe8
 80143f2:	4930      	ldr	r1, [pc, #192]	; (80144b4 <tcp_pbuf_prealloc+0xe4>)
 80143f4:	4830      	ldr	r0, [pc, #192]	; (80144b8 <tcp_pbuf_prealloc+0xe8>)
 80143f6:	f008 fb7b 	bl	801caf0 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80143fa:	6a3b      	ldr	r3, [r7, #32]
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d105      	bne.n	801440c <tcp_pbuf_prealloc+0x3c>
 8014400:	4b2b      	ldr	r3, [pc, #172]	; (80144b0 <tcp_pbuf_prealloc+0xe0>)
 8014402:	22e9      	movs	r2, #233	; 0xe9
 8014404:	492d      	ldr	r1, [pc, #180]	; (80144bc <tcp_pbuf_prealloc+0xec>)
 8014406:	482c      	ldr	r0, [pc, #176]	; (80144b8 <tcp_pbuf_prealloc+0xe8>)
 8014408:	f008 fb72 	bl	801caf0 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801440c:	89ba      	ldrh	r2, [r7, #12]
 801440e:	897b      	ldrh	r3, [r7, #10]
 8014410:	429a      	cmp	r2, r3
 8014412:	d221      	bcs.n	8014458 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8014414:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014418:	f003 0302 	and.w	r3, r3, #2
 801441c:	2b00      	cmp	r3, #0
 801441e:	d111      	bne.n	8014444 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8014420:	6a3b      	ldr	r3, [r7, #32]
 8014422:	8b5b      	ldrh	r3, [r3, #26]
 8014424:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8014428:	2b00      	cmp	r3, #0
 801442a:	d115      	bne.n	8014458 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801442c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014430:	2b00      	cmp	r3, #0
 8014432:	d007      	beq.n	8014444 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8014434:	6a3b      	ldr	r3, [r7, #32]
 8014436:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8014438:	2b00      	cmp	r3, #0
 801443a:	d103      	bne.n	8014444 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801443c:	6a3b      	ldr	r3, [r7, #32]
 801443e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8014440:	2b00      	cmp	r3, #0
 8014442:	d009      	beq.n	8014458 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8014444:	89bb      	ldrh	r3, [r7, #12]
 8014446:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801444a:	f023 0203 	bic.w	r2, r3, #3
 801444e:	897b      	ldrh	r3, [r7, #10]
 8014450:	4293      	cmp	r3, r2
 8014452:	bf28      	it	cs
 8014454:	4613      	movcs	r3, r2
 8014456:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8014458:	8af9      	ldrh	r1, [r7, #22]
 801445a:	7bfb      	ldrb	r3, [r7, #15]
 801445c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014460:	4618      	mov	r0, r3
 8014462:	f7fa ffad 	bl	800f3c0 <pbuf_alloc>
 8014466:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014468:	693b      	ldr	r3, [r7, #16]
 801446a:	2b00      	cmp	r3, #0
 801446c:	d101      	bne.n	8014472 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801446e:	2300      	movs	r3, #0
 8014470:	e019      	b.n	80144a6 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8014472:	693b      	ldr	r3, [r7, #16]
 8014474:	681b      	ldr	r3, [r3, #0]
 8014476:	2b00      	cmp	r3, #0
 8014478:	d006      	beq.n	8014488 <tcp_pbuf_prealloc+0xb8>
 801447a:	4b0d      	ldr	r3, [pc, #52]	; (80144b0 <tcp_pbuf_prealloc+0xe0>)
 801447c:	f240 120b 	movw	r2, #267	; 0x10b
 8014480:	490f      	ldr	r1, [pc, #60]	; (80144c0 <tcp_pbuf_prealloc+0xf0>)
 8014482:	480d      	ldr	r0, [pc, #52]	; (80144b8 <tcp_pbuf_prealloc+0xe8>)
 8014484:	f008 fb34 	bl	801caf0 <iprintf>
  *oversize = p->len - length;
 8014488:	693b      	ldr	r3, [r7, #16]
 801448a:	895a      	ldrh	r2, [r3, #10]
 801448c:	89bb      	ldrh	r3, [r7, #12]
 801448e:	1ad3      	subs	r3, r2, r3
 8014490:	b29a      	uxth	r2, r3
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8014496:	693b      	ldr	r3, [r7, #16]
 8014498:	89ba      	ldrh	r2, [r7, #12]
 801449a:	811a      	strh	r2, [r3, #8]
 801449c:	693b      	ldr	r3, [r7, #16]
 801449e:	891a      	ldrh	r2, [r3, #8]
 80144a0:	693b      	ldr	r3, [r7, #16]
 80144a2:	815a      	strh	r2, [r3, #10]
  return p;
 80144a4:	693b      	ldr	r3, [r7, #16]
}
 80144a6:	4618      	mov	r0, r3
 80144a8:	3718      	adds	r7, #24
 80144aa:	46bd      	mov	sp, r7
 80144ac:	bd80      	pop	{r7, pc}
 80144ae:	bf00      	nop
 80144b0:	080211b8 	.word	0x080211b8
 80144b4:	08021270 	.word	0x08021270
 80144b8:	0802120c 	.word	0x0802120c
 80144bc:	08021294 	.word	0x08021294
 80144c0:	080212b4 	.word	0x080212b4

080144c4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80144c4:	b580      	push	{r7, lr}
 80144c6:	b082      	sub	sp, #8
 80144c8:	af00      	add	r7, sp, #0
 80144ca:	6078      	str	r0, [r7, #4]
 80144cc:	460b      	mov	r3, r1
 80144ce:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d106      	bne.n	80144e4 <tcp_write_checks+0x20>
 80144d6:	4b33      	ldr	r3, [pc, #204]	; (80145a4 <tcp_write_checks+0xe0>)
 80144d8:	f240 1233 	movw	r2, #307	; 0x133
 80144dc:	4932      	ldr	r1, [pc, #200]	; (80145a8 <tcp_write_checks+0xe4>)
 80144de:	4833      	ldr	r0, [pc, #204]	; (80145ac <tcp_write_checks+0xe8>)
 80144e0:	f008 fb06 	bl	801caf0 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	7d1b      	ldrb	r3, [r3, #20]
 80144e8:	2b04      	cmp	r3, #4
 80144ea:	d00e      	beq.n	801450a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80144f0:	2b07      	cmp	r3, #7
 80144f2:	d00a      	beq.n	801450a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80144f8:	2b02      	cmp	r3, #2
 80144fa:	d006      	beq.n	801450a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8014500:	2b03      	cmp	r3, #3
 8014502:	d002      	beq.n	801450a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8014504:	f06f 030a 	mvn.w	r3, #10
 8014508:	e048      	b.n	801459c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801450a:	887b      	ldrh	r3, [r7, #2]
 801450c:	2b00      	cmp	r3, #0
 801450e:	d101      	bne.n	8014514 <tcp_write_checks+0x50>
    return ERR_OK;
 8014510:	2300      	movs	r3, #0
 8014512:	e043      	b.n	801459c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801451a:	887a      	ldrh	r2, [r7, #2]
 801451c:	429a      	cmp	r2, r3
 801451e:	d909      	bls.n	8014534 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	8b5b      	ldrh	r3, [r3, #26]
 8014524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014528:	b29a      	uxth	r2, r3
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801452e:	f04f 33ff 	mov.w	r3, #4294967295
 8014532:	e033      	b.n	801459c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801453a:	2b08      	cmp	r3, #8
 801453c:	d909      	bls.n	8014552 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	8b5b      	ldrh	r3, [r3, #26]
 8014542:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014546:	b29a      	uxth	r2, r3
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801454c:	f04f 33ff 	mov.w	r3, #4294967295
 8014550:	e024      	b.n	801459c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014558:	2b00      	cmp	r3, #0
 801455a:	d00f      	beq.n	801457c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014560:	2b00      	cmp	r3, #0
 8014562:	d11a      	bne.n	801459a <tcp_write_checks+0xd6>
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014568:	2b00      	cmp	r3, #0
 801456a:	d116      	bne.n	801459a <tcp_write_checks+0xd6>
 801456c:	4b0d      	ldr	r3, [pc, #52]	; (80145a4 <tcp_write_checks+0xe0>)
 801456e:	f240 1255 	movw	r2, #341	; 0x155
 8014572:	490f      	ldr	r1, [pc, #60]	; (80145b0 <tcp_write_checks+0xec>)
 8014574:	480d      	ldr	r0, [pc, #52]	; (80145ac <tcp_write_checks+0xe8>)
 8014576:	f008 fabb 	bl	801caf0 <iprintf>
 801457a:	e00e      	b.n	801459a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014580:	2b00      	cmp	r3, #0
 8014582:	d103      	bne.n	801458c <tcp_write_checks+0xc8>
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014588:	2b00      	cmp	r3, #0
 801458a:	d006      	beq.n	801459a <tcp_write_checks+0xd6>
 801458c:	4b05      	ldr	r3, [pc, #20]	; (80145a4 <tcp_write_checks+0xe0>)
 801458e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8014592:	4908      	ldr	r1, [pc, #32]	; (80145b4 <tcp_write_checks+0xf0>)
 8014594:	4805      	ldr	r0, [pc, #20]	; (80145ac <tcp_write_checks+0xe8>)
 8014596:	f008 faab 	bl	801caf0 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801459a:	2300      	movs	r3, #0
}
 801459c:	4618      	mov	r0, r3
 801459e:	3708      	adds	r7, #8
 80145a0:	46bd      	mov	sp, r7
 80145a2:	bd80      	pop	{r7, pc}
 80145a4:	080211b8 	.word	0x080211b8
 80145a8:	080212c8 	.word	0x080212c8
 80145ac:	0802120c 	.word	0x0802120c
 80145b0:	080212e8 	.word	0x080212e8
 80145b4:	08021324 	.word	0x08021324

080145b8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80145b8:	b590      	push	{r4, r7, lr}
 80145ba:	b09b      	sub	sp, #108	; 0x6c
 80145bc:	af04      	add	r7, sp, #16
 80145be:	60f8      	str	r0, [r7, #12]
 80145c0:	60b9      	str	r1, [r7, #8]
 80145c2:	4611      	mov	r1, r2
 80145c4:	461a      	mov	r2, r3
 80145c6:	460b      	mov	r3, r1
 80145c8:	80fb      	strh	r3, [r7, #6]
 80145ca:	4613      	mov	r3, r2
 80145cc:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80145ce:	2300      	movs	r3, #0
 80145d0:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80145d2:	2300      	movs	r3, #0
 80145d4:	653b      	str	r3, [r7, #80]	; 0x50
 80145d6:	2300      	movs	r3, #0
 80145d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80145da:	2300      	movs	r3, #0
 80145dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80145de:	2300      	movs	r3, #0
 80145e0:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80145e2:	2300      	movs	r3, #0
 80145e4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80145e8:	2300      	movs	r3, #0
 80145ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80145ee:	2300      	movs	r3, #0
 80145f0:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80145f2:	2300      	movs	r3, #0
 80145f4:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80145f6:	2300      	movs	r3, #0
 80145f8:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80145fa:	68fb      	ldr	r3, [r7, #12]
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	d109      	bne.n	8014614 <tcp_write+0x5c>
 8014600:	4ba4      	ldr	r3, [pc, #656]	; (8014894 <tcp_write+0x2dc>)
 8014602:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8014606:	49a4      	ldr	r1, [pc, #656]	; (8014898 <tcp_write+0x2e0>)
 8014608:	48a4      	ldr	r0, [pc, #656]	; (801489c <tcp_write+0x2e4>)
 801460a:	f008 fa71 	bl	801caf0 <iprintf>
 801460e:	f06f 030f 	mvn.w	r3, #15
 8014612:	e32a      	b.n	8014c6a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8014614:	68fb      	ldr	r3, [r7, #12]
 8014616:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801461a:	085b      	lsrs	r3, r3, #1
 801461c:	b29a      	uxth	r2, r3
 801461e:	68fb      	ldr	r3, [r7, #12]
 8014620:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014622:	4293      	cmp	r3, r2
 8014624:	bf28      	it	cs
 8014626:	4613      	movcs	r3, r2
 8014628:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801462a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801462c:	2b00      	cmp	r3, #0
 801462e:	d102      	bne.n	8014636 <tcp_write+0x7e>
 8014630:	68fb      	ldr	r3, [r7, #12]
 8014632:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014634:	e000      	b.n	8014638 <tcp_write+0x80>
 8014636:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014638:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801463a:	68bb      	ldr	r3, [r7, #8]
 801463c:	2b00      	cmp	r3, #0
 801463e:	d109      	bne.n	8014654 <tcp_write+0x9c>
 8014640:	4b94      	ldr	r3, [pc, #592]	; (8014894 <tcp_write+0x2dc>)
 8014642:	f240 12ad 	movw	r2, #429	; 0x1ad
 8014646:	4996      	ldr	r1, [pc, #600]	; (80148a0 <tcp_write+0x2e8>)
 8014648:	4894      	ldr	r0, [pc, #592]	; (801489c <tcp_write+0x2e4>)
 801464a:	f008 fa51 	bl	801caf0 <iprintf>
 801464e:	f06f 030f 	mvn.w	r3, #15
 8014652:	e30a      	b.n	8014c6a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8014654:	88fb      	ldrh	r3, [r7, #6]
 8014656:	4619      	mov	r1, r3
 8014658:	68f8      	ldr	r0, [r7, #12]
 801465a:	f7ff ff33 	bl	80144c4 <tcp_write_checks>
 801465e:	4603      	mov	r3, r0
 8014660:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8014664:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8014668:	2b00      	cmp	r3, #0
 801466a:	d002      	beq.n	8014672 <tcp_write+0xba>
    return err;
 801466c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8014670:	e2fb      	b.n	8014c6a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8014672:	68fb      	ldr	r3, [r7, #12]
 8014674:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014678:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801467c:	2300      	movs	r3, #0
 801467e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8014682:	68fb      	ldr	r3, [r7, #12]
 8014684:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014686:	2b00      	cmp	r3, #0
 8014688:	f000 80f6 	beq.w	8014878 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801468c:	68fb      	ldr	r3, [r7, #12]
 801468e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014690:	653b      	str	r3, [r7, #80]	; 0x50
 8014692:	e002      	b.n	801469a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8014694:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014696:	681b      	ldr	r3, [r3, #0]
 8014698:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801469a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801469c:	681b      	ldr	r3, [r3, #0]
 801469e:	2b00      	cmp	r3, #0
 80146a0:	d1f8      	bne.n	8014694 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80146a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80146a4:	7a9b      	ldrb	r3, [r3, #10]
 80146a6:	009b      	lsls	r3, r3, #2
 80146a8:	b29b      	uxth	r3, r3
 80146aa:	f003 0304 	and.w	r3, r3, #4
 80146ae:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80146b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80146b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80146b4:	891b      	ldrh	r3, [r3, #8]
 80146b6:	4619      	mov	r1, r3
 80146b8:	8c3b      	ldrh	r3, [r7, #32]
 80146ba:	440b      	add	r3, r1
 80146bc:	429a      	cmp	r2, r3
 80146be:	da06      	bge.n	80146ce <tcp_write+0x116>
 80146c0:	4b74      	ldr	r3, [pc, #464]	; (8014894 <tcp_write+0x2dc>)
 80146c2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80146c6:	4977      	ldr	r1, [pc, #476]	; (80148a4 <tcp_write+0x2ec>)
 80146c8:	4874      	ldr	r0, [pc, #464]	; (801489c <tcp_write+0x2e4>)
 80146ca:	f008 fa11 	bl	801caf0 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80146ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80146d0:	891a      	ldrh	r2, [r3, #8]
 80146d2:	8c3b      	ldrh	r3, [r7, #32]
 80146d4:	4413      	add	r3, r2
 80146d6:	b29b      	uxth	r3, r3
 80146d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80146da:	1ad3      	subs	r3, r2, r3
 80146dc:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80146de:	68fb      	ldr	r3, [r7, #12]
 80146e0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80146e4:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80146e6:	8a7b      	ldrh	r3, [r7, #18]
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d026      	beq.n	801473a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80146ec:	8a7b      	ldrh	r3, [r7, #18]
 80146ee:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80146f0:	429a      	cmp	r2, r3
 80146f2:	d206      	bcs.n	8014702 <tcp_write+0x14a>
 80146f4:	4b67      	ldr	r3, [pc, #412]	; (8014894 <tcp_write+0x2dc>)
 80146f6:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80146fa:	496b      	ldr	r1, [pc, #428]	; (80148a8 <tcp_write+0x2f0>)
 80146fc:	4867      	ldr	r0, [pc, #412]	; (801489c <tcp_write+0x2e4>)
 80146fe:	f008 f9f7 	bl	801caf0 <iprintf>
      seg = last_unsent;
 8014702:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014704:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8014706:	8a7b      	ldrh	r3, [r7, #18]
 8014708:	88fa      	ldrh	r2, [r7, #6]
 801470a:	4293      	cmp	r3, r2
 801470c:	bf28      	it	cs
 801470e:	4613      	movcs	r3, r2
 8014710:	b29b      	uxth	r3, r3
 8014712:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014714:	4293      	cmp	r3, r2
 8014716:	bf28      	it	cs
 8014718:	4613      	movcs	r3, r2
 801471a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801471c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014720:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014722:	4413      	add	r3, r2
 8014724:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8014728:	8a7a      	ldrh	r2, [r7, #18]
 801472a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801472c:	1ad3      	subs	r3, r2, r3
 801472e:	b29b      	uxth	r3, r3
 8014730:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8014732:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014734:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014736:	1ad3      	subs	r3, r2, r3
 8014738:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801473a:	8a7b      	ldrh	r3, [r7, #18]
 801473c:	2b00      	cmp	r3, #0
 801473e:	d00b      	beq.n	8014758 <tcp_write+0x1a0>
 8014740:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014744:	88fb      	ldrh	r3, [r7, #6]
 8014746:	429a      	cmp	r2, r3
 8014748:	d006      	beq.n	8014758 <tcp_write+0x1a0>
 801474a:	4b52      	ldr	r3, [pc, #328]	; (8014894 <tcp_write+0x2dc>)
 801474c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014750:	4956      	ldr	r1, [pc, #344]	; (80148ac <tcp_write+0x2f4>)
 8014752:	4852      	ldr	r0, [pc, #328]	; (801489c <tcp_write+0x2e4>)
 8014754:	f008 f9cc 	bl	801caf0 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8014758:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801475c:	88fb      	ldrh	r3, [r7, #6]
 801475e:	429a      	cmp	r2, r3
 8014760:	f080 8167 	bcs.w	8014a32 <tcp_write+0x47a>
 8014764:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014766:	2b00      	cmp	r3, #0
 8014768:	f000 8163 	beq.w	8014a32 <tcp_write+0x47a>
 801476c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801476e:	891b      	ldrh	r3, [r3, #8]
 8014770:	2b00      	cmp	r3, #0
 8014772:	f000 815e 	beq.w	8014a32 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8014776:	88fa      	ldrh	r2, [r7, #6]
 8014778:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801477c:	1ad2      	subs	r2, r2, r3
 801477e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014780:	4293      	cmp	r3, r2
 8014782:	bfa8      	it	ge
 8014784:	4613      	movge	r3, r2
 8014786:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8014788:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801478a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801478c:	797b      	ldrb	r3, [r7, #5]
 801478e:	f003 0301 	and.w	r3, r3, #1
 8014792:	2b00      	cmp	r3, #0
 8014794:	d027      	beq.n	80147e6 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8014796:	f107 0012 	add.w	r0, r7, #18
 801479a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801479c:	8bf9      	ldrh	r1, [r7, #30]
 801479e:	2301      	movs	r3, #1
 80147a0:	9302      	str	r3, [sp, #8]
 80147a2:	797b      	ldrb	r3, [r7, #5]
 80147a4:	9301      	str	r3, [sp, #4]
 80147a6:	68fb      	ldr	r3, [r7, #12]
 80147a8:	9300      	str	r3, [sp, #0]
 80147aa:	4603      	mov	r3, r0
 80147ac:	2000      	movs	r0, #0
 80147ae:	f7ff fe0f 	bl	80143d0 <tcp_pbuf_prealloc>
 80147b2:	6578      	str	r0, [r7, #84]	; 0x54
 80147b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	f000 8225 	beq.w	8014c06 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80147bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80147be:	6858      	ldr	r0, [r3, #4]
 80147c0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80147c4:	68ba      	ldr	r2, [r7, #8]
 80147c6:	4413      	add	r3, r2
 80147c8:	8bfa      	ldrh	r2, [r7, #30]
 80147ca:	4619      	mov	r1, r3
 80147cc:	f007 faf2 	bl	801bdb4 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80147d0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80147d2:	f7fb f999 	bl	800fb08 <pbuf_clen>
 80147d6:	4603      	mov	r3, r0
 80147d8:	461a      	mov	r2, r3
 80147da:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80147de:	4413      	add	r3, r2
 80147e0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80147e4:	e041      	b.n	801486a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80147e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80147e8:	685b      	ldr	r3, [r3, #4]
 80147ea:	637b      	str	r3, [r7, #52]	; 0x34
 80147ec:	e002      	b.n	80147f4 <tcp_write+0x23c>
 80147ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80147f0:	681b      	ldr	r3, [r3, #0]
 80147f2:	637b      	str	r3, [r7, #52]	; 0x34
 80147f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80147f6:	681b      	ldr	r3, [r3, #0]
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d1f8      	bne.n	80147ee <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80147fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80147fe:	7b1b      	ldrb	r3, [r3, #12]
 8014800:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8014804:	2b00      	cmp	r3, #0
 8014806:	d115      	bne.n	8014834 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8014808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801480a:	685b      	ldr	r3, [r3, #4]
 801480c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801480e:	8952      	ldrh	r2, [r2, #10]
 8014810:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8014812:	68ba      	ldr	r2, [r7, #8]
 8014814:	429a      	cmp	r2, r3
 8014816:	d10d      	bne.n	8014834 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8014818:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801481c:	2b00      	cmp	r3, #0
 801481e:	d006      	beq.n	801482e <tcp_write+0x276>
 8014820:	4b1c      	ldr	r3, [pc, #112]	; (8014894 <tcp_write+0x2dc>)
 8014822:	f240 2231 	movw	r2, #561	; 0x231
 8014826:	4922      	ldr	r1, [pc, #136]	; (80148b0 <tcp_write+0x2f8>)
 8014828:	481c      	ldr	r0, [pc, #112]	; (801489c <tcp_write+0x2e4>)
 801482a:	f008 f961 	bl	801caf0 <iprintf>
          extendlen = seglen;
 801482e:	8bfb      	ldrh	r3, [r7, #30]
 8014830:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8014832:	e01a      	b.n	801486a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8014834:	8bfb      	ldrh	r3, [r7, #30]
 8014836:	2201      	movs	r2, #1
 8014838:	4619      	mov	r1, r3
 801483a:	2000      	movs	r0, #0
 801483c:	f7fa fdc0 	bl	800f3c0 <pbuf_alloc>
 8014840:	6578      	str	r0, [r7, #84]	; 0x54
 8014842:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014844:	2b00      	cmp	r3, #0
 8014846:	f000 81e0 	beq.w	8014c0a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801484a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801484e:	68ba      	ldr	r2, [r7, #8]
 8014850:	441a      	add	r2, r3
 8014852:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014854:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8014856:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8014858:	f7fb f956 	bl	800fb08 <pbuf_clen>
 801485c:	4603      	mov	r3, r0
 801485e:	461a      	mov	r2, r3
 8014860:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014864:	4413      	add	r3, r2
 8014866:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801486a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801486e:	8bfb      	ldrh	r3, [r7, #30]
 8014870:	4413      	add	r3, r2
 8014872:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8014876:	e0dc      	b.n	8014a32 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8014878:	68fb      	ldr	r3, [r7, #12]
 801487a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801487e:	2b00      	cmp	r3, #0
 8014880:	f000 80d7 	beq.w	8014a32 <tcp_write+0x47a>
 8014884:	4b03      	ldr	r3, [pc, #12]	; (8014894 <tcp_write+0x2dc>)
 8014886:	f240 224a 	movw	r2, #586	; 0x24a
 801488a:	490a      	ldr	r1, [pc, #40]	; (80148b4 <tcp_write+0x2fc>)
 801488c:	4803      	ldr	r0, [pc, #12]	; (801489c <tcp_write+0x2e4>)
 801488e:	f008 f92f 	bl	801caf0 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8014892:	e0ce      	b.n	8014a32 <tcp_write+0x47a>
 8014894:	080211b8 	.word	0x080211b8
 8014898:	08021358 	.word	0x08021358
 801489c:	0802120c 	.word	0x0802120c
 80148a0:	08021370 	.word	0x08021370
 80148a4:	080213a4 	.word	0x080213a4
 80148a8:	080213bc 	.word	0x080213bc
 80148ac:	080213dc 	.word	0x080213dc
 80148b0:	080213fc 	.word	0x080213fc
 80148b4:	08021428 	.word	0x08021428
    struct pbuf *p;
    u16_t left = len - pos;
 80148b8:	88fa      	ldrh	r2, [r7, #6]
 80148ba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80148be:	1ad3      	subs	r3, r2, r3
 80148c0:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80148c2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80148c6:	b29b      	uxth	r3, r3
 80148c8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80148ca:	1ad3      	subs	r3, r2, r3
 80148cc:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80148ce:	8b7a      	ldrh	r2, [r7, #26]
 80148d0:	8bbb      	ldrh	r3, [r7, #28]
 80148d2:	4293      	cmp	r3, r2
 80148d4:	bf28      	it	cs
 80148d6:	4613      	movcs	r3, r2
 80148d8:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80148da:	797b      	ldrb	r3, [r7, #5]
 80148dc:	f003 0301 	and.w	r3, r3, #1
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d036      	beq.n	8014952 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80148e4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80148e8:	b29a      	uxth	r2, r3
 80148ea:	8b3b      	ldrh	r3, [r7, #24]
 80148ec:	4413      	add	r3, r2
 80148ee:	b299      	uxth	r1, r3
 80148f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	bf0c      	ite	eq
 80148f6:	2301      	moveq	r3, #1
 80148f8:	2300      	movne	r3, #0
 80148fa:	b2db      	uxtb	r3, r3
 80148fc:	f107 0012 	add.w	r0, r7, #18
 8014900:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014902:	9302      	str	r3, [sp, #8]
 8014904:	797b      	ldrb	r3, [r7, #5]
 8014906:	9301      	str	r3, [sp, #4]
 8014908:	68fb      	ldr	r3, [r7, #12]
 801490a:	9300      	str	r3, [sp, #0]
 801490c:	4603      	mov	r3, r0
 801490e:	2036      	movs	r0, #54	; 0x36
 8014910:	f7ff fd5e 	bl	80143d0 <tcp_pbuf_prealloc>
 8014914:	6338      	str	r0, [r7, #48]	; 0x30
 8014916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014918:	2b00      	cmp	r3, #0
 801491a:	f000 8178 	beq.w	8014c0e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801491e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014920:	895b      	ldrh	r3, [r3, #10]
 8014922:	8b3a      	ldrh	r2, [r7, #24]
 8014924:	429a      	cmp	r2, r3
 8014926:	d906      	bls.n	8014936 <tcp_write+0x37e>
 8014928:	4b8c      	ldr	r3, [pc, #560]	; (8014b5c <tcp_write+0x5a4>)
 801492a:	f240 2266 	movw	r2, #614	; 0x266
 801492e:	498c      	ldr	r1, [pc, #560]	; (8014b60 <tcp_write+0x5a8>)
 8014930:	488c      	ldr	r0, [pc, #560]	; (8014b64 <tcp_write+0x5ac>)
 8014932:	f008 f8dd 	bl	801caf0 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8014936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014938:	685a      	ldr	r2, [r3, #4]
 801493a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801493e:	18d0      	adds	r0, r2, r3
 8014940:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014944:	68ba      	ldr	r2, [r7, #8]
 8014946:	4413      	add	r3, r2
 8014948:	8b3a      	ldrh	r2, [r7, #24]
 801494a:	4619      	mov	r1, r3
 801494c:	f007 fa32 	bl	801bdb4 <memcpy>
 8014950:	e02f      	b.n	80149b2 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8014952:	8a7b      	ldrh	r3, [r7, #18]
 8014954:	2b00      	cmp	r3, #0
 8014956:	d006      	beq.n	8014966 <tcp_write+0x3ae>
 8014958:	4b80      	ldr	r3, [pc, #512]	; (8014b5c <tcp_write+0x5a4>)
 801495a:	f240 2271 	movw	r2, #625	; 0x271
 801495e:	4982      	ldr	r1, [pc, #520]	; (8014b68 <tcp_write+0x5b0>)
 8014960:	4880      	ldr	r0, [pc, #512]	; (8014b64 <tcp_write+0x5ac>)
 8014962:	f008 f8c5 	bl	801caf0 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8014966:	8b3b      	ldrh	r3, [r7, #24]
 8014968:	2201      	movs	r2, #1
 801496a:	4619      	mov	r1, r3
 801496c:	2036      	movs	r0, #54	; 0x36
 801496e:	f7fa fd27 	bl	800f3c0 <pbuf_alloc>
 8014972:	6178      	str	r0, [r7, #20]
 8014974:	697b      	ldr	r3, [r7, #20]
 8014976:	2b00      	cmp	r3, #0
 8014978:	f000 814b 	beq.w	8014c12 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801497c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014980:	68ba      	ldr	r2, [r7, #8]
 8014982:	441a      	add	r2, r3
 8014984:	697b      	ldr	r3, [r7, #20]
 8014986:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8014988:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801498c:	b29b      	uxth	r3, r3
 801498e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014992:	4619      	mov	r1, r3
 8014994:	2036      	movs	r0, #54	; 0x36
 8014996:	f7fa fd13 	bl	800f3c0 <pbuf_alloc>
 801499a:	6338      	str	r0, [r7, #48]	; 0x30
 801499c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801499e:	2b00      	cmp	r3, #0
 80149a0:	d103      	bne.n	80149aa <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80149a2:	6978      	ldr	r0, [r7, #20]
 80149a4:	f7fb f822 	bl	800f9ec <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80149a8:	e136      	b.n	8014c18 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80149aa:	6979      	ldr	r1, [r7, #20]
 80149ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80149ae:	f7fb f8eb 	bl	800fb88 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80149b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80149b4:	f7fb f8a8 	bl	800fb08 <pbuf_clen>
 80149b8:	4603      	mov	r3, r0
 80149ba:	461a      	mov	r2, r3
 80149bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80149c0:	4413      	add	r3, r2
 80149c2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80149c6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80149ca:	2b09      	cmp	r3, #9
 80149cc:	d903      	bls.n	80149d6 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80149ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80149d0:	f7fb f80c 	bl	800f9ec <pbuf_free>
      goto memerr;
 80149d4:	e120      	b.n	8014c18 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80149d6:	68fb      	ldr	r3, [r7, #12]
 80149d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80149da:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80149de:	441a      	add	r2, r3
 80149e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80149e4:	9300      	str	r3, [sp, #0]
 80149e6:	4613      	mov	r3, r2
 80149e8:	2200      	movs	r2, #0
 80149ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80149ec:	68f8      	ldr	r0, [r7, #12]
 80149ee:	f7ff fc51 	bl	8014294 <tcp_create_segment>
 80149f2:	64f8      	str	r0, [r7, #76]	; 0x4c
 80149f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	f000 810d 	beq.w	8014c16 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80149fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	d102      	bne.n	8014a08 <tcp_write+0x450>
      queue = seg;
 8014a02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014a04:	647b      	str	r3, [r7, #68]	; 0x44
 8014a06:	e00c      	b.n	8014a22 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8014a08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	d106      	bne.n	8014a1c <tcp_write+0x464>
 8014a0e:	4b53      	ldr	r3, [pc, #332]	; (8014b5c <tcp_write+0x5a4>)
 8014a10:	f240 22ab 	movw	r2, #683	; 0x2ab
 8014a14:	4955      	ldr	r1, [pc, #340]	; (8014b6c <tcp_write+0x5b4>)
 8014a16:	4853      	ldr	r0, [pc, #332]	; (8014b64 <tcp_write+0x5ac>)
 8014a18:	f008 f86a 	bl	801caf0 <iprintf>
      prev_seg->next = seg;
 8014a1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014a1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014a20:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8014a22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014a24:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8014a26:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014a2a:	8b3b      	ldrh	r3, [r7, #24]
 8014a2c:	4413      	add	r3, r2
 8014a2e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8014a32:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014a36:	88fb      	ldrh	r3, [r7, #6]
 8014a38:	429a      	cmp	r2, r3
 8014a3a:	f4ff af3d 	bcc.w	80148b8 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8014a3e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d02c      	beq.n	8014a9e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8014a44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014a46:	685b      	ldr	r3, [r3, #4]
 8014a48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014a4a:	e01e      	b.n	8014a8a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8014a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a4e:	891a      	ldrh	r2, [r3, #8]
 8014a50:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014a52:	4413      	add	r3, r2
 8014a54:	b29a      	uxth	r2, r3
 8014a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a58:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8014a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a5c:	681b      	ldr	r3, [r3, #0]
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	d110      	bne.n	8014a84 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8014a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a64:	685b      	ldr	r3, [r3, #4]
 8014a66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014a68:	8952      	ldrh	r2, [r2, #10]
 8014a6a:	4413      	add	r3, r2
 8014a6c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8014a6e:	68b9      	ldr	r1, [r7, #8]
 8014a70:	4618      	mov	r0, r3
 8014a72:	f007 f99f 	bl	801bdb4 <memcpy>
        p->len += oversize_used;
 8014a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a78:	895a      	ldrh	r2, [r3, #10]
 8014a7a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014a7c:	4413      	add	r3, r2
 8014a7e:	b29a      	uxth	r2, r3
 8014a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a82:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8014a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a86:	681b      	ldr	r3, [r3, #0]
 8014a88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	d1dd      	bne.n	8014a4c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8014a90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014a92:	891a      	ldrh	r2, [r3, #8]
 8014a94:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014a96:	4413      	add	r3, r2
 8014a98:	b29a      	uxth	r2, r3
 8014a9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014a9c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8014a9e:	8a7a      	ldrh	r2, [r7, #18]
 8014aa0:	68fb      	ldr	r3, [r7, #12]
 8014aa2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8014aa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d018      	beq.n	8014ade <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8014aac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	d106      	bne.n	8014ac0 <tcp_write+0x508>
 8014ab2:	4b2a      	ldr	r3, [pc, #168]	; (8014b5c <tcp_write+0x5a4>)
 8014ab4:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8014ab8:	492d      	ldr	r1, [pc, #180]	; (8014b70 <tcp_write+0x5b8>)
 8014aba:	482a      	ldr	r0, [pc, #168]	; (8014b64 <tcp_write+0x5ac>)
 8014abc:	f008 f818 	bl	801caf0 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8014ac0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014ac2:	685b      	ldr	r3, [r3, #4]
 8014ac4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8014ac6:	4618      	mov	r0, r3
 8014ac8:	f7fb f85e 	bl	800fb88 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8014acc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014ace:	891a      	ldrh	r2, [r3, #8]
 8014ad0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014ad2:	891b      	ldrh	r3, [r3, #8]
 8014ad4:	4413      	add	r3, r2
 8014ad6:	b29a      	uxth	r2, r3
 8014ad8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014ada:	811a      	strh	r2, [r3, #8]
 8014adc:	e037      	b.n	8014b4e <tcp_write+0x596>
  } else if (extendlen > 0) {
 8014ade:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d034      	beq.n	8014b4e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8014ae4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	d003      	beq.n	8014af2 <tcp_write+0x53a>
 8014aea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014aec:	685b      	ldr	r3, [r3, #4]
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	d106      	bne.n	8014b00 <tcp_write+0x548>
 8014af2:	4b1a      	ldr	r3, [pc, #104]	; (8014b5c <tcp_write+0x5a4>)
 8014af4:	f240 22e6 	movw	r2, #742	; 0x2e6
 8014af8:	491e      	ldr	r1, [pc, #120]	; (8014b74 <tcp_write+0x5bc>)
 8014afa:	481a      	ldr	r0, [pc, #104]	; (8014b64 <tcp_write+0x5ac>)
 8014afc:	f007 fff8 	bl	801caf0 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8014b00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014b02:	685b      	ldr	r3, [r3, #4]
 8014b04:	62bb      	str	r3, [r7, #40]	; 0x28
 8014b06:	e009      	b.n	8014b1c <tcp_write+0x564>
      p->tot_len += extendlen;
 8014b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b0a:	891a      	ldrh	r2, [r3, #8]
 8014b0c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014b0e:	4413      	add	r3, r2
 8014b10:	b29a      	uxth	r2, r3
 8014b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b14:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8014b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b18:	681b      	ldr	r3, [r3, #0]
 8014b1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8014b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b1e:	681b      	ldr	r3, [r3, #0]
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	d1f1      	bne.n	8014b08 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8014b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b26:	891a      	ldrh	r2, [r3, #8]
 8014b28:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014b2a:	4413      	add	r3, r2
 8014b2c:	b29a      	uxth	r2, r3
 8014b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b30:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8014b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b34:	895a      	ldrh	r2, [r3, #10]
 8014b36:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014b38:	4413      	add	r3, r2
 8014b3a:	b29a      	uxth	r2, r3
 8014b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b3e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8014b40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014b42:	891a      	ldrh	r2, [r3, #8]
 8014b44:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014b46:	4413      	add	r3, r2
 8014b48:	b29a      	uxth	r2, r3
 8014b4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014b4c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8014b4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	d111      	bne.n	8014b78 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8014b54:	68fb      	ldr	r3, [r7, #12]
 8014b56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014b58:	66da      	str	r2, [r3, #108]	; 0x6c
 8014b5a:	e010      	b.n	8014b7e <tcp_write+0x5c6>
 8014b5c:	080211b8 	.word	0x080211b8
 8014b60:	08021458 	.word	0x08021458
 8014b64:	0802120c 	.word	0x0802120c
 8014b68:	08021498 	.word	0x08021498
 8014b6c:	080214a8 	.word	0x080214a8
 8014b70:	080214bc 	.word	0x080214bc
 8014b74:	080214f4 	.word	0x080214f4
  } else {
    last_unsent->next = queue;
 8014b78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014b7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014b7c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8014b7e:	68fb      	ldr	r3, [r7, #12]
 8014b80:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8014b82:	88fb      	ldrh	r3, [r7, #6]
 8014b84:	441a      	add	r2, r3
 8014b86:	68fb      	ldr	r3, [r7, #12]
 8014b88:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8014b8a:	68fb      	ldr	r3, [r7, #12]
 8014b8c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8014b90:	88fb      	ldrh	r3, [r7, #6]
 8014b92:	1ad3      	subs	r3, r2, r3
 8014b94:	b29a      	uxth	r2, r3
 8014b96:	68fb      	ldr	r3, [r7, #12]
 8014b98:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8014b9c:	68fb      	ldr	r3, [r7, #12]
 8014b9e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8014ba2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8014ba6:	68fb      	ldr	r3, [r7, #12]
 8014ba8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	d00e      	beq.n	8014bce <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8014bb0:	68fb      	ldr	r3, [r7, #12]
 8014bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d10a      	bne.n	8014bce <tcp_write+0x616>
 8014bb8:	68fb      	ldr	r3, [r7, #12]
 8014bba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d106      	bne.n	8014bce <tcp_write+0x616>
 8014bc0:	4b2c      	ldr	r3, [pc, #176]	; (8014c74 <tcp_write+0x6bc>)
 8014bc2:	f240 3212 	movw	r2, #786	; 0x312
 8014bc6:	492c      	ldr	r1, [pc, #176]	; (8014c78 <tcp_write+0x6c0>)
 8014bc8:	482c      	ldr	r0, [pc, #176]	; (8014c7c <tcp_write+0x6c4>)
 8014bca:	f007 ff91 	bl	801caf0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8014bce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d016      	beq.n	8014c02 <tcp_write+0x64a>
 8014bd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014bd6:	68db      	ldr	r3, [r3, #12]
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d012      	beq.n	8014c02 <tcp_write+0x64a>
 8014bdc:	797b      	ldrb	r3, [r7, #5]
 8014bde:	f003 0302 	and.w	r3, r3, #2
 8014be2:	2b00      	cmp	r3, #0
 8014be4:	d10d      	bne.n	8014c02 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8014be6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014be8:	68db      	ldr	r3, [r3, #12]
 8014bea:	899b      	ldrh	r3, [r3, #12]
 8014bec:	b29c      	uxth	r4, r3
 8014bee:	2008      	movs	r0, #8
 8014bf0:	f7f9 fae6 	bl	800e1c0 <lwip_htons>
 8014bf4:	4603      	mov	r3, r0
 8014bf6:	461a      	mov	r2, r3
 8014bf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014bfa:	68db      	ldr	r3, [r3, #12]
 8014bfc:	4322      	orrs	r2, r4
 8014bfe:	b292      	uxth	r2, r2
 8014c00:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8014c02:	2300      	movs	r3, #0
 8014c04:	e031      	b.n	8014c6a <tcp_write+0x6b2>
          goto memerr;
 8014c06:	bf00      	nop
 8014c08:	e006      	b.n	8014c18 <tcp_write+0x660>
            goto memerr;
 8014c0a:	bf00      	nop
 8014c0c:	e004      	b.n	8014c18 <tcp_write+0x660>
        goto memerr;
 8014c0e:	bf00      	nop
 8014c10:	e002      	b.n	8014c18 <tcp_write+0x660>
        goto memerr;
 8014c12:	bf00      	nop
 8014c14:	e000      	b.n	8014c18 <tcp_write+0x660>
      goto memerr;
 8014c16:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014c18:	68fb      	ldr	r3, [r7, #12]
 8014c1a:	8b5b      	ldrh	r3, [r3, #26]
 8014c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014c20:	b29a      	uxth	r2, r3
 8014c22:	68fb      	ldr	r3, [r7, #12]
 8014c24:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8014c26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	d002      	beq.n	8014c32 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8014c2c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8014c2e:	f7fa fedd 	bl	800f9ec <pbuf_free>
  }
  if (queue != NULL) {
 8014c32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	d002      	beq.n	8014c3e <tcp_write+0x686>
    tcp_segs_free(queue);
 8014c38:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8014c3a:	f7fc fb6f 	bl	801131c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8014c3e:	68fb      	ldr	r3, [r7, #12]
 8014c40:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	d00e      	beq.n	8014c66 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8014c48:	68fb      	ldr	r3, [r7, #12]
 8014c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	d10a      	bne.n	8014c66 <tcp_write+0x6ae>
 8014c50:	68fb      	ldr	r3, [r7, #12]
 8014c52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	d106      	bne.n	8014c66 <tcp_write+0x6ae>
 8014c58:	4b06      	ldr	r3, [pc, #24]	; (8014c74 <tcp_write+0x6bc>)
 8014c5a:	f240 3227 	movw	r2, #807	; 0x327
 8014c5e:	4906      	ldr	r1, [pc, #24]	; (8014c78 <tcp_write+0x6c0>)
 8014c60:	4806      	ldr	r0, [pc, #24]	; (8014c7c <tcp_write+0x6c4>)
 8014c62:	f007 ff45 	bl	801caf0 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8014c66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014c6a:	4618      	mov	r0, r3
 8014c6c:	375c      	adds	r7, #92	; 0x5c
 8014c6e:	46bd      	mov	sp, r7
 8014c70:	bd90      	pop	{r4, r7, pc}
 8014c72:	bf00      	nop
 8014c74:	080211b8 	.word	0x080211b8
 8014c78:	0802152c 	.word	0x0802152c
 8014c7c:	0802120c 	.word	0x0802120c

08014c80 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8014c80:	b590      	push	{r4, r7, lr}
 8014c82:	b08b      	sub	sp, #44	; 0x2c
 8014c84:	af02      	add	r7, sp, #8
 8014c86:	6078      	str	r0, [r7, #4]
 8014c88:	460b      	mov	r3, r1
 8014c8a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8014c8c:	2300      	movs	r3, #0
 8014c8e:	61fb      	str	r3, [r7, #28]
 8014c90:	2300      	movs	r3, #0
 8014c92:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8014c94:	2300      	movs	r3, #0
 8014c96:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	d106      	bne.n	8014cac <tcp_split_unsent_seg+0x2c>
 8014c9e:	4b95      	ldr	r3, [pc, #596]	; (8014ef4 <tcp_split_unsent_seg+0x274>)
 8014ca0:	f240 324b 	movw	r2, #843	; 0x34b
 8014ca4:	4994      	ldr	r1, [pc, #592]	; (8014ef8 <tcp_split_unsent_seg+0x278>)
 8014ca6:	4895      	ldr	r0, [pc, #596]	; (8014efc <tcp_split_unsent_seg+0x27c>)
 8014ca8:	f007 ff22 	bl	801caf0 <iprintf>

  useg = pcb->unsent;
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014cb0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8014cb2:	697b      	ldr	r3, [r7, #20]
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	d102      	bne.n	8014cbe <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8014cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8014cbc:	e116      	b.n	8014eec <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8014cbe:	887b      	ldrh	r3, [r7, #2]
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	d109      	bne.n	8014cd8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8014cc4:	4b8b      	ldr	r3, [pc, #556]	; (8014ef4 <tcp_split_unsent_seg+0x274>)
 8014cc6:	f240 3253 	movw	r2, #851	; 0x353
 8014cca:	498d      	ldr	r1, [pc, #564]	; (8014f00 <tcp_split_unsent_seg+0x280>)
 8014ccc:	488b      	ldr	r0, [pc, #556]	; (8014efc <tcp_split_unsent_seg+0x27c>)
 8014cce:	f007 ff0f 	bl	801caf0 <iprintf>
    return ERR_VAL;
 8014cd2:	f06f 0305 	mvn.w	r3, #5
 8014cd6:	e109      	b.n	8014eec <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8014cd8:	697b      	ldr	r3, [r7, #20]
 8014cda:	891b      	ldrh	r3, [r3, #8]
 8014cdc:	887a      	ldrh	r2, [r7, #2]
 8014cde:	429a      	cmp	r2, r3
 8014ce0:	d301      	bcc.n	8014ce6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8014ce2:	2300      	movs	r3, #0
 8014ce4:	e102      	b.n	8014eec <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014cea:	887a      	ldrh	r2, [r7, #2]
 8014cec:	429a      	cmp	r2, r3
 8014cee:	d906      	bls.n	8014cfe <tcp_split_unsent_seg+0x7e>
 8014cf0:	4b80      	ldr	r3, [pc, #512]	; (8014ef4 <tcp_split_unsent_seg+0x274>)
 8014cf2:	f240 325b 	movw	r2, #859	; 0x35b
 8014cf6:	4983      	ldr	r1, [pc, #524]	; (8014f04 <tcp_split_unsent_seg+0x284>)
 8014cf8:	4880      	ldr	r0, [pc, #512]	; (8014efc <tcp_split_unsent_seg+0x27c>)
 8014cfa:	f007 fef9 	bl	801caf0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8014cfe:	697b      	ldr	r3, [r7, #20]
 8014d00:	891b      	ldrh	r3, [r3, #8]
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	d106      	bne.n	8014d14 <tcp_split_unsent_seg+0x94>
 8014d06:	4b7b      	ldr	r3, [pc, #492]	; (8014ef4 <tcp_split_unsent_seg+0x274>)
 8014d08:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8014d0c:	497e      	ldr	r1, [pc, #504]	; (8014f08 <tcp_split_unsent_seg+0x288>)
 8014d0e:	487b      	ldr	r0, [pc, #492]	; (8014efc <tcp_split_unsent_seg+0x27c>)
 8014d10:	f007 feee 	bl	801caf0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8014d14:	697b      	ldr	r3, [r7, #20]
 8014d16:	7a9b      	ldrb	r3, [r3, #10]
 8014d18:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8014d1a:	7bfb      	ldrb	r3, [r7, #15]
 8014d1c:	009b      	lsls	r3, r3, #2
 8014d1e:	b2db      	uxtb	r3, r3
 8014d20:	f003 0304 	and.w	r3, r3, #4
 8014d24:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8014d26:	697b      	ldr	r3, [r7, #20]
 8014d28:	891a      	ldrh	r2, [r3, #8]
 8014d2a:	887b      	ldrh	r3, [r7, #2]
 8014d2c:	1ad3      	subs	r3, r2, r3
 8014d2e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8014d30:	7bbb      	ldrb	r3, [r7, #14]
 8014d32:	b29a      	uxth	r2, r3
 8014d34:	89bb      	ldrh	r3, [r7, #12]
 8014d36:	4413      	add	r3, r2
 8014d38:	b29b      	uxth	r3, r3
 8014d3a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014d3e:	4619      	mov	r1, r3
 8014d40:	2036      	movs	r0, #54	; 0x36
 8014d42:	f7fa fb3d 	bl	800f3c0 <pbuf_alloc>
 8014d46:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014d48:	693b      	ldr	r3, [r7, #16]
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	f000 80b7 	beq.w	8014ebe <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8014d50:	697b      	ldr	r3, [r7, #20]
 8014d52:	685b      	ldr	r3, [r3, #4]
 8014d54:	891a      	ldrh	r2, [r3, #8]
 8014d56:	697b      	ldr	r3, [r7, #20]
 8014d58:	891b      	ldrh	r3, [r3, #8]
 8014d5a:	1ad3      	subs	r3, r2, r3
 8014d5c:	b29a      	uxth	r2, r3
 8014d5e:	887b      	ldrh	r3, [r7, #2]
 8014d60:	4413      	add	r3, r2
 8014d62:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8014d64:	697b      	ldr	r3, [r7, #20]
 8014d66:	6858      	ldr	r0, [r3, #4]
 8014d68:	693b      	ldr	r3, [r7, #16]
 8014d6a:	685a      	ldr	r2, [r3, #4]
 8014d6c:	7bbb      	ldrb	r3, [r7, #14]
 8014d6e:	18d1      	adds	r1, r2, r3
 8014d70:	897b      	ldrh	r3, [r7, #10]
 8014d72:	89ba      	ldrh	r2, [r7, #12]
 8014d74:	f7fb f840 	bl	800fdf8 <pbuf_copy_partial>
 8014d78:	4603      	mov	r3, r0
 8014d7a:	461a      	mov	r2, r3
 8014d7c:	89bb      	ldrh	r3, [r7, #12]
 8014d7e:	4293      	cmp	r3, r2
 8014d80:	f040 809f 	bne.w	8014ec2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8014d84:	697b      	ldr	r3, [r7, #20]
 8014d86:	68db      	ldr	r3, [r3, #12]
 8014d88:	899b      	ldrh	r3, [r3, #12]
 8014d8a:	b29b      	uxth	r3, r3
 8014d8c:	4618      	mov	r0, r3
 8014d8e:	f7f9 fa17 	bl	800e1c0 <lwip_htons>
 8014d92:	4603      	mov	r3, r0
 8014d94:	b2db      	uxtb	r3, r3
 8014d96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014d9a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8014d9c:	2300      	movs	r3, #0
 8014d9e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8014da0:	7efb      	ldrb	r3, [r7, #27]
 8014da2:	f003 0308 	and.w	r3, r3, #8
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d007      	beq.n	8014dba <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8014daa:	7efb      	ldrb	r3, [r7, #27]
 8014dac:	f023 0308 	bic.w	r3, r3, #8
 8014db0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8014db2:	7ebb      	ldrb	r3, [r7, #26]
 8014db4:	f043 0308 	orr.w	r3, r3, #8
 8014db8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8014dba:	7efb      	ldrb	r3, [r7, #27]
 8014dbc:	f003 0301 	and.w	r3, r3, #1
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d007      	beq.n	8014dd4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8014dc4:	7efb      	ldrb	r3, [r7, #27]
 8014dc6:	f023 0301 	bic.w	r3, r3, #1
 8014dca:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8014dcc:	7ebb      	ldrb	r3, [r7, #26]
 8014dce:	f043 0301 	orr.w	r3, r3, #1
 8014dd2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8014dd4:	697b      	ldr	r3, [r7, #20]
 8014dd6:	68db      	ldr	r3, [r3, #12]
 8014dd8:	685b      	ldr	r3, [r3, #4]
 8014dda:	4618      	mov	r0, r3
 8014ddc:	f7f9 fa05 	bl	800e1ea <lwip_htonl>
 8014de0:	4602      	mov	r2, r0
 8014de2:	887b      	ldrh	r3, [r7, #2]
 8014de4:	18d1      	adds	r1, r2, r3
 8014de6:	7eba      	ldrb	r2, [r7, #26]
 8014de8:	7bfb      	ldrb	r3, [r7, #15]
 8014dea:	9300      	str	r3, [sp, #0]
 8014dec:	460b      	mov	r3, r1
 8014dee:	6939      	ldr	r1, [r7, #16]
 8014df0:	6878      	ldr	r0, [r7, #4]
 8014df2:	f7ff fa4f 	bl	8014294 <tcp_create_segment>
 8014df6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8014df8:	69fb      	ldr	r3, [r7, #28]
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d063      	beq.n	8014ec6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8014dfe:	697b      	ldr	r3, [r7, #20]
 8014e00:	685b      	ldr	r3, [r3, #4]
 8014e02:	4618      	mov	r0, r3
 8014e04:	f7fa fe80 	bl	800fb08 <pbuf_clen>
 8014e08:	4603      	mov	r3, r0
 8014e0a:	461a      	mov	r2, r3
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014e12:	1a9b      	subs	r3, r3, r2
 8014e14:	b29a      	uxth	r2, r3
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8014e1c:	697b      	ldr	r3, [r7, #20]
 8014e1e:	6858      	ldr	r0, [r3, #4]
 8014e20:	697b      	ldr	r3, [r7, #20]
 8014e22:	685b      	ldr	r3, [r3, #4]
 8014e24:	891a      	ldrh	r2, [r3, #8]
 8014e26:	89bb      	ldrh	r3, [r7, #12]
 8014e28:	1ad3      	subs	r3, r2, r3
 8014e2a:	b29b      	uxth	r3, r3
 8014e2c:	4619      	mov	r1, r3
 8014e2e:	f7fa fc25 	bl	800f67c <pbuf_realloc>
  useg->len -= remainder;
 8014e32:	697b      	ldr	r3, [r7, #20]
 8014e34:	891a      	ldrh	r2, [r3, #8]
 8014e36:	89bb      	ldrh	r3, [r7, #12]
 8014e38:	1ad3      	subs	r3, r2, r3
 8014e3a:	b29a      	uxth	r2, r3
 8014e3c:	697b      	ldr	r3, [r7, #20]
 8014e3e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8014e40:	697b      	ldr	r3, [r7, #20]
 8014e42:	68db      	ldr	r3, [r3, #12]
 8014e44:	899b      	ldrh	r3, [r3, #12]
 8014e46:	b29c      	uxth	r4, r3
 8014e48:	7efb      	ldrb	r3, [r7, #27]
 8014e4a:	b29b      	uxth	r3, r3
 8014e4c:	4618      	mov	r0, r3
 8014e4e:	f7f9 f9b7 	bl	800e1c0 <lwip_htons>
 8014e52:	4603      	mov	r3, r0
 8014e54:	461a      	mov	r2, r3
 8014e56:	697b      	ldr	r3, [r7, #20]
 8014e58:	68db      	ldr	r3, [r3, #12]
 8014e5a:	4322      	orrs	r2, r4
 8014e5c:	b292      	uxth	r2, r2
 8014e5e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8014e60:	697b      	ldr	r3, [r7, #20]
 8014e62:	685b      	ldr	r3, [r3, #4]
 8014e64:	4618      	mov	r0, r3
 8014e66:	f7fa fe4f 	bl	800fb08 <pbuf_clen>
 8014e6a:	4603      	mov	r3, r0
 8014e6c:	461a      	mov	r2, r3
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014e74:	4413      	add	r3, r2
 8014e76:	b29a      	uxth	r2, r3
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8014e7e:	69fb      	ldr	r3, [r7, #28]
 8014e80:	685b      	ldr	r3, [r3, #4]
 8014e82:	4618      	mov	r0, r3
 8014e84:	f7fa fe40 	bl	800fb08 <pbuf_clen>
 8014e88:	4603      	mov	r3, r0
 8014e8a:	461a      	mov	r2, r3
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014e92:	4413      	add	r3, r2
 8014e94:	b29a      	uxth	r2, r3
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8014e9c:	697b      	ldr	r3, [r7, #20]
 8014e9e:	681a      	ldr	r2, [r3, #0]
 8014ea0:	69fb      	ldr	r3, [r7, #28]
 8014ea2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8014ea4:	697b      	ldr	r3, [r7, #20]
 8014ea6:	69fa      	ldr	r2, [r7, #28]
 8014ea8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8014eaa:	69fb      	ldr	r3, [r7, #28]
 8014eac:	681b      	ldr	r3, [r3, #0]
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	d103      	bne.n	8014eba <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	2200      	movs	r2, #0
 8014eb6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8014eba:	2300      	movs	r3, #0
 8014ebc:	e016      	b.n	8014eec <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8014ebe:	bf00      	nop
 8014ec0:	e002      	b.n	8014ec8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8014ec2:	bf00      	nop
 8014ec4:	e000      	b.n	8014ec8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8014ec6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8014ec8:	69fb      	ldr	r3, [r7, #28]
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d006      	beq.n	8014edc <tcp_split_unsent_seg+0x25c>
 8014ece:	4b09      	ldr	r3, [pc, #36]	; (8014ef4 <tcp_split_unsent_seg+0x274>)
 8014ed0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8014ed4:	490d      	ldr	r1, [pc, #52]	; (8014f0c <tcp_split_unsent_seg+0x28c>)
 8014ed6:	4809      	ldr	r0, [pc, #36]	; (8014efc <tcp_split_unsent_seg+0x27c>)
 8014ed8:	f007 fe0a 	bl	801caf0 <iprintf>
  if (p != NULL) {
 8014edc:	693b      	ldr	r3, [r7, #16]
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	d002      	beq.n	8014ee8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8014ee2:	6938      	ldr	r0, [r7, #16]
 8014ee4:	f7fa fd82 	bl	800f9ec <pbuf_free>
  }

  return ERR_MEM;
 8014ee8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014eec:	4618      	mov	r0, r3
 8014eee:	3724      	adds	r7, #36	; 0x24
 8014ef0:	46bd      	mov	sp, r7
 8014ef2:	bd90      	pop	{r4, r7, pc}
 8014ef4:	080211b8 	.word	0x080211b8
 8014ef8:	0802154c 	.word	0x0802154c
 8014efc:	0802120c 	.word	0x0802120c
 8014f00:	08021570 	.word	0x08021570
 8014f04:	08021594 	.word	0x08021594
 8014f08:	080215a4 	.word	0x080215a4
 8014f0c:	080215b4 	.word	0x080215b4

08014f10 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8014f10:	b590      	push	{r4, r7, lr}
 8014f12:	b085      	sub	sp, #20
 8014f14:	af00      	add	r7, sp, #0
 8014f16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	2b00      	cmp	r3, #0
 8014f1c:	d106      	bne.n	8014f2c <tcp_send_fin+0x1c>
 8014f1e:	4b21      	ldr	r3, [pc, #132]	; (8014fa4 <tcp_send_fin+0x94>)
 8014f20:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8014f24:	4920      	ldr	r1, [pc, #128]	; (8014fa8 <tcp_send_fin+0x98>)
 8014f26:	4821      	ldr	r0, [pc, #132]	; (8014fac <tcp_send_fin+0x9c>)
 8014f28:	f007 fde2 	bl	801caf0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	d02e      	beq.n	8014f92 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014f38:	60fb      	str	r3, [r7, #12]
 8014f3a:	e002      	b.n	8014f42 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8014f3c:	68fb      	ldr	r3, [r7, #12]
 8014f3e:	681b      	ldr	r3, [r3, #0]
 8014f40:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014f42:	68fb      	ldr	r3, [r7, #12]
 8014f44:	681b      	ldr	r3, [r3, #0]
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	d1f8      	bne.n	8014f3c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8014f4a:	68fb      	ldr	r3, [r7, #12]
 8014f4c:	68db      	ldr	r3, [r3, #12]
 8014f4e:	899b      	ldrh	r3, [r3, #12]
 8014f50:	b29b      	uxth	r3, r3
 8014f52:	4618      	mov	r0, r3
 8014f54:	f7f9 f934 	bl	800e1c0 <lwip_htons>
 8014f58:	4603      	mov	r3, r0
 8014f5a:	b2db      	uxtb	r3, r3
 8014f5c:	f003 0307 	and.w	r3, r3, #7
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	d116      	bne.n	8014f92 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8014f64:	68fb      	ldr	r3, [r7, #12]
 8014f66:	68db      	ldr	r3, [r3, #12]
 8014f68:	899b      	ldrh	r3, [r3, #12]
 8014f6a:	b29c      	uxth	r4, r3
 8014f6c:	2001      	movs	r0, #1
 8014f6e:	f7f9 f927 	bl	800e1c0 <lwip_htons>
 8014f72:	4603      	mov	r3, r0
 8014f74:	461a      	mov	r2, r3
 8014f76:	68fb      	ldr	r3, [r7, #12]
 8014f78:	68db      	ldr	r3, [r3, #12]
 8014f7a:	4322      	orrs	r2, r4
 8014f7c:	b292      	uxth	r2, r2
 8014f7e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	8b5b      	ldrh	r3, [r3, #26]
 8014f84:	f043 0320 	orr.w	r3, r3, #32
 8014f88:	b29a      	uxth	r2, r3
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8014f8e:	2300      	movs	r3, #0
 8014f90:	e004      	b.n	8014f9c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8014f92:	2101      	movs	r1, #1
 8014f94:	6878      	ldr	r0, [r7, #4]
 8014f96:	f000 f80b 	bl	8014fb0 <tcp_enqueue_flags>
 8014f9a:	4603      	mov	r3, r0
}
 8014f9c:	4618      	mov	r0, r3
 8014f9e:	3714      	adds	r7, #20
 8014fa0:	46bd      	mov	sp, r7
 8014fa2:	bd90      	pop	{r4, r7, pc}
 8014fa4:	080211b8 	.word	0x080211b8
 8014fa8:	080215c0 	.word	0x080215c0
 8014fac:	0802120c 	.word	0x0802120c

08014fb0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8014fb0:	b580      	push	{r7, lr}
 8014fb2:	b08a      	sub	sp, #40	; 0x28
 8014fb4:	af02      	add	r7, sp, #8
 8014fb6:	6078      	str	r0, [r7, #4]
 8014fb8:	460b      	mov	r3, r1
 8014fba:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8014fbc:	2300      	movs	r3, #0
 8014fbe:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8014fc0:	2300      	movs	r3, #0
 8014fc2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8014fc4:	78fb      	ldrb	r3, [r7, #3]
 8014fc6:	f003 0303 	and.w	r3, r3, #3
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d106      	bne.n	8014fdc <tcp_enqueue_flags+0x2c>
 8014fce:	4b67      	ldr	r3, [pc, #412]	; (801516c <tcp_enqueue_flags+0x1bc>)
 8014fd0:	f240 4211 	movw	r2, #1041	; 0x411
 8014fd4:	4966      	ldr	r1, [pc, #408]	; (8015170 <tcp_enqueue_flags+0x1c0>)
 8014fd6:	4867      	ldr	r0, [pc, #412]	; (8015174 <tcp_enqueue_flags+0x1c4>)
 8014fd8:	f007 fd8a 	bl	801caf0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d106      	bne.n	8014ff0 <tcp_enqueue_flags+0x40>
 8014fe2:	4b62      	ldr	r3, [pc, #392]	; (801516c <tcp_enqueue_flags+0x1bc>)
 8014fe4:	f240 4213 	movw	r2, #1043	; 0x413
 8014fe8:	4963      	ldr	r1, [pc, #396]	; (8015178 <tcp_enqueue_flags+0x1c8>)
 8014fea:	4862      	ldr	r0, [pc, #392]	; (8015174 <tcp_enqueue_flags+0x1c4>)
 8014fec:	f007 fd80 	bl	801caf0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8014ff0:	78fb      	ldrb	r3, [r7, #3]
 8014ff2:	f003 0302 	and.w	r3, r3, #2
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	d001      	beq.n	8014ffe <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8014ffa:	2301      	movs	r3, #1
 8014ffc:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014ffe:	7ffb      	ldrb	r3, [r7, #31]
 8015000:	009b      	lsls	r3, r3, #2
 8015002:	b2db      	uxtb	r3, r3
 8015004:	f003 0304 	and.w	r3, r3, #4
 8015008:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801500a:	7dfb      	ldrb	r3, [r7, #23]
 801500c:	b29b      	uxth	r3, r3
 801500e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015012:	4619      	mov	r1, r3
 8015014:	2036      	movs	r0, #54	; 0x36
 8015016:	f7fa f9d3 	bl	800f3c0 <pbuf_alloc>
 801501a:	6138      	str	r0, [r7, #16]
 801501c:	693b      	ldr	r3, [r7, #16]
 801501e:	2b00      	cmp	r3, #0
 8015020:	d109      	bne.n	8015036 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	8b5b      	ldrh	r3, [r3, #26]
 8015026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801502a:	b29a      	uxth	r2, r3
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8015030:	f04f 33ff 	mov.w	r3, #4294967295
 8015034:	e095      	b.n	8015162 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8015036:	693b      	ldr	r3, [r7, #16]
 8015038:	895a      	ldrh	r2, [r3, #10]
 801503a:	7dfb      	ldrb	r3, [r7, #23]
 801503c:	b29b      	uxth	r3, r3
 801503e:	429a      	cmp	r2, r3
 8015040:	d206      	bcs.n	8015050 <tcp_enqueue_flags+0xa0>
 8015042:	4b4a      	ldr	r3, [pc, #296]	; (801516c <tcp_enqueue_flags+0x1bc>)
 8015044:	f240 4239 	movw	r2, #1081	; 0x439
 8015048:	494c      	ldr	r1, [pc, #304]	; (801517c <tcp_enqueue_flags+0x1cc>)
 801504a:	484a      	ldr	r0, [pc, #296]	; (8015174 <tcp_enqueue_flags+0x1c4>)
 801504c:	f007 fd50 	bl	801caf0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8015054:	78fa      	ldrb	r2, [r7, #3]
 8015056:	7ffb      	ldrb	r3, [r7, #31]
 8015058:	9300      	str	r3, [sp, #0]
 801505a:	460b      	mov	r3, r1
 801505c:	6939      	ldr	r1, [r7, #16]
 801505e:	6878      	ldr	r0, [r7, #4]
 8015060:	f7ff f918 	bl	8014294 <tcp_create_segment>
 8015064:	60f8      	str	r0, [r7, #12]
 8015066:	68fb      	ldr	r3, [r7, #12]
 8015068:	2b00      	cmp	r3, #0
 801506a:	d109      	bne.n	8015080 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	8b5b      	ldrh	r3, [r3, #26]
 8015070:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015074:	b29a      	uxth	r2, r3
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801507a:	f04f 33ff 	mov.w	r3, #4294967295
 801507e:	e070      	b.n	8015162 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8015080:	68fb      	ldr	r3, [r7, #12]
 8015082:	68db      	ldr	r3, [r3, #12]
 8015084:	f003 0303 	and.w	r3, r3, #3
 8015088:	2b00      	cmp	r3, #0
 801508a:	d006      	beq.n	801509a <tcp_enqueue_flags+0xea>
 801508c:	4b37      	ldr	r3, [pc, #220]	; (801516c <tcp_enqueue_flags+0x1bc>)
 801508e:	f240 4242 	movw	r2, #1090	; 0x442
 8015092:	493b      	ldr	r1, [pc, #236]	; (8015180 <tcp_enqueue_flags+0x1d0>)
 8015094:	4837      	ldr	r0, [pc, #220]	; (8015174 <tcp_enqueue_flags+0x1c4>)
 8015096:	f007 fd2b 	bl	801caf0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801509a:	68fb      	ldr	r3, [r7, #12]
 801509c:	891b      	ldrh	r3, [r3, #8]
 801509e:	2b00      	cmp	r3, #0
 80150a0:	d006      	beq.n	80150b0 <tcp_enqueue_flags+0x100>
 80150a2:	4b32      	ldr	r3, [pc, #200]	; (801516c <tcp_enqueue_flags+0x1bc>)
 80150a4:	f240 4243 	movw	r2, #1091	; 0x443
 80150a8:	4936      	ldr	r1, [pc, #216]	; (8015184 <tcp_enqueue_flags+0x1d4>)
 80150aa:	4832      	ldr	r0, [pc, #200]	; (8015174 <tcp_enqueue_flags+0x1c4>)
 80150ac:	f007 fd20 	bl	801caf0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80150b4:	2b00      	cmp	r3, #0
 80150b6:	d103      	bne.n	80150c0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	68fa      	ldr	r2, [r7, #12]
 80150bc:	66da      	str	r2, [r3, #108]	; 0x6c
 80150be:	e00d      	b.n	80150dc <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80150c4:	61bb      	str	r3, [r7, #24]
 80150c6:	e002      	b.n	80150ce <tcp_enqueue_flags+0x11e>
 80150c8:	69bb      	ldr	r3, [r7, #24]
 80150ca:	681b      	ldr	r3, [r3, #0]
 80150cc:	61bb      	str	r3, [r7, #24]
 80150ce:	69bb      	ldr	r3, [r7, #24]
 80150d0:	681b      	ldr	r3, [r3, #0]
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	d1f8      	bne.n	80150c8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80150d6:	69bb      	ldr	r3, [r7, #24]
 80150d8:	68fa      	ldr	r2, [r7, #12]
 80150da:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	2200      	movs	r2, #0
 80150e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80150e4:	78fb      	ldrb	r3, [r7, #3]
 80150e6:	f003 0302 	and.w	r3, r3, #2
 80150ea:	2b00      	cmp	r3, #0
 80150ec:	d104      	bne.n	80150f8 <tcp_enqueue_flags+0x148>
 80150ee:	78fb      	ldrb	r3, [r7, #3]
 80150f0:	f003 0301 	and.w	r3, r3, #1
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	d004      	beq.n	8015102 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80150fc:	1c5a      	adds	r2, r3, #1
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8015102:	78fb      	ldrb	r3, [r7, #3]
 8015104:	f003 0301 	and.w	r3, r3, #1
 8015108:	2b00      	cmp	r3, #0
 801510a:	d006      	beq.n	801511a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	8b5b      	ldrh	r3, [r3, #26]
 8015110:	f043 0320 	orr.w	r3, r3, #32
 8015114:	b29a      	uxth	r2, r3
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801511a:	68fb      	ldr	r3, [r7, #12]
 801511c:	685b      	ldr	r3, [r3, #4]
 801511e:	4618      	mov	r0, r3
 8015120:	f7fa fcf2 	bl	800fb08 <pbuf_clen>
 8015124:	4603      	mov	r3, r0
 8015126:	461a      	mov	r2, r3
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801512e:	4413      	add	r3, r2
 8015130:	b29a      	uxth	r2, r3
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801513e:	2b00      	cmp	r3, #0
 8015140:	d00e      	beq.n	8015160 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015146:	2b00      	cmp	r3, #0
 8015148:	d10a      	bne.n	8015160 <tcp_enqueue_flags+0x1b0>
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801514e:	2b00      	cmp	r3, #0
 8015150:	d106      	bne.n	8015160 <tcp_enqueue_flags+0x1b0>
 8015152:	4b06      	ldr	r3, [pc, #24]	; (801516c <tcp_enqueue_flags+0x1bc>)
 8015154:	f240 4265 	movw	r2, #1125	; 0x465
 8015158:	490b      	ldr	r1, [pc, #44]	; (8015188 <tcp_enqueue_flags+0x1d8>)
 801515a:	4806      	ldr	r0, [pc, #24]	; (8015174 <tcp_enqueue_flags+0x1c4>)
 801515c:	f007 fcc8 	bl	801caf0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8015160:	2300      	movs	r3, #0
}
 8015162:	4618      	mov	r0, r3
 8015164:	3720      	adds	r7, #32
 8015166:	46bd      	mov	sp, r7
 8015168:	bd80      	pop	{r7, pc}
 801516a:	bf00      	nop
 801516c:	080211b8 	.word	0x080211b8
 8015170:	080215dc 	.word	0x080215dc
 8015174:	0802120c 	.word	0x0802120c
 8015178:	08021634 	.word	0x08021634
 801517c:	08021654 	.word	0x08021654
 8015180:	08021690 	.word	0x08021690
 8015184:	080216a8 	.word	0x080216a8
 8015188:	080216d4 	.word	0x080216d4

0801518c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801518c:	b5b0      	push	{r4, r5, r7, lr}
 801518e:	b08a      	sub	sp, #40	; 0x28
 8015190:	af00      	add	r7, sp, #0
 8015192:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	2b00      	cmp	r3, #0
 8015198:	d106      	bne.n	80151a8 <tcp_output+0x1c>
 801519a:	4b9e      	ldr	r3, [pc, #632]	; (8015414 <tcp_output+0x288>)
 801519c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80151a0:	499d      	ldr	r1, [pc, #628]	; (8015418 <tcp_output+0x28c>)
 80151a2:	489e      	ldr	r0, [pc, #632]	; (801541c <tcp_output+0x290>)
 80151a4:	f007 fca4 	bl	801caf0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	7d1b      	ldrb	r3, [r3, #20]
 80151ac:	2b01      	cmp	r3, #1
 80151ae:	d106      	bne.n	80151be <tcp_output+0x32>
 80151b0:	4b98      	ldr	r3, [pc, #608]	; (8015414 <tcp_output+0x288>)
 80151b2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80151b6:	499a      	ldr	r1, [pc, #616]	; (8015420 <tcp_output+0x294>)
 80151b8:	4898      	ldr	r0, [pc, #608]	; (801541c <tcp_output+0x290>)
 80151ba:	f007 fc99 	bl	801caf0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80151be:	4b99      	ldr	r3, [pc, #612]	; (8015424 <tcp_output+0x298>)
 80151c0:	681b      	ldr	r3, [r3, #0]
 80151c2:	687a      	ldr	r2, [r7, #4]
 80151c4:	429a      	cmp	r2, r3
 80151c6:	d101      	bne.n	80151cc <tcp_output+0x40>
    return ERR_OK;
 80151c8:	2300      	movs	r3, #0
 80151ca:	e1ce      	b.n	801556a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80151d8:	4293      	cmp	r3, r2
 80151da:	bf28      	it	cs
 80151dc:	4613      	movcs	r3, r2
 80151de:	b29b      	uxth	r3, r3
 80151e0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80151e6:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80151e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151ea:	2b00      	cmp	r3, #0
 80151ec:	d10b      	bne.n	8015206 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	8b5b      	ldrh	r3, [r3, #26]
 80151f2:	f003 0302 	and.w	r3, r3, #2
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	f000 81aa 	beq.w	8015550 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80151fc:	6878      	ldr	r0, [r7, #4]
 80151fe:	f000 fdcb 	bl	8015d98 <tcp_send_empty_ack>
 8015202:	4603      	mov	r3, r0
 8015204:	e1b1      	b.n	801556a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8015206:	6879      	ldr	r1, [r7, #4]
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	3304      	adds	r3, #4
 801520c:	461a      	mov	r2, r3
 801520e:	6878      	ldr	r0, [r7, #4]
 8015210:	f7ff f824 	bl	801425c <tcp_route>
 8015214:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8015216:	697b      	ldr	r3, [r7, #20]
 8015218:	2b00      	cmp	r3, #0
 801521a:	d102      	bne.n	8015222 <tcp_output+0x96>
    return ERR_RTE;
 801521c:	f06f 0303 	mvn.w	r3, #3
 8015220:	e1a3      	b.n	801556a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	2b00      	cmp	r3, #0
 8015226:	d003      	beq.n	8015230 <tcp_output+0xa4>
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	681b      	ldr	r3, [r3, #0]
 801522c:	2b00      	cmp	r3, #0
 801522e:	d111      	bne.n	8015254 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8015230:	697b      	ldr	r3, [r7, #20]
 8015232:	2b00      	cmp	r3, #0
 8015234:	d002      	beq.n	801523c <tcp_output+0xb0>
 8015236:	697b      	ldr	r3, [r7, #20]
 8015238:	3304      	adds	r3, #4
 801523a:	e000      	b.n	801523e <tcp_output+0xb2>
 801523c:	2300      	movs	r3, #0
 801523e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8015240:	693b      	ldr	r3, [r7, #16]
 8015242:	2b00      	cmp	r3, #0
 8015244:	d102      	bne.n	801524c <tcp_output+0xc0>
      return ERR_RTE;
 8015246:	f06f 0303 	mvn.w	r3, #3
 801524a:	e18e      	b.n	801556a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801524c:	693b      	ldr	r3, [r7, #16]
 801524e:	681a      	ldr	r2, [r3, #0]
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8015254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015256:	68db      	ldr	r3, [r3, #12]
 8015258:	685b      	ldr	r3, [r3, #4]
 801525a:	4618      	mov	r0, r3
 801525c:	f7f8 ffc5 	bl	800e1ea <lwip_htonl>
 8015260:	4602      	mov	r2, r0
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015266:	1ad3      	subs	r3, r2, r3
 8015268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801526a:	8912      	ldrh	r2, [r2, #8]
 801526c:	4413      	add	r3, r2
 801526e:	69ba      	ldr	r2, [r7, #24]
 8015270:	429a      	cmp	r2, r3
 8015272:	d227      	bcs.n	80152c4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801527a:	461a      	mov	r2, r3
 801527c:	69bb      	ldr	r3, [r7, #24]
 801527e:	4293      	cmp	r3, r2
 8015280:	d114      	bne.n	80152ac <tcp_output+0x120>
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015286:	2b00      	cmp	r3, #0
 8015288:	d110      	bne.n	80152ac <tcp_output+0x120>
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8015290:	2b00      	cmp	r3, #0
 8015292:	d10b      	bne.n	80152ac <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	2200      	movs	r2, #0
 8015298:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	2201      	movs	r2, #1
 80152a0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	2200      	movs	r2, #0
 80152a8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	8b5b      	ldrh	r3, [r3, #26]
 80152b0:	f003 0302 	and.w	r3, r3, #2
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	f000 814d 	beq.w	8015554 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80152ba:	6878      	ldr	r0, [r7, #4]
 80152bc:	f000 fd6c 	bl	8015d98 <tcp_send_empty_ack>
 80152c0:	4603      	mov	r3, r0
 80152c2:	e152      	b.n	801556a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	2200      	movs	r2, #0
 80152c8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80152d0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80152d2:	6a3b      	ldr	r3, [r7, #32]
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	f000 811c 	beq.w	8015512 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80152da:	e002      	b.n	80152e2 <tcp_output+0x156>
 80152dc:	6a3b      	ldr	r3, [r7, #32]
 80152de:	681b      	ldr	r3, [r3, #0]
 80152e0:	623b      	str	r3, [r7, #32]
 80152e2:	6a3b      	ldr	r3, [r7, #32]
 80152e4:	681b      	ldr	r3, [r3, #0]
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	d1f8      	bne.n	80152dc <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80152ea:	e112      	b.n	8015512 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80152ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152ee:	68db      	ldr	r3, [r3, #12]
 80152f0:	899b      	ldrh	r3, [r3, #12]
 80152f2:	b29b      	uxth	r3, r3
 80152f4:	4618      	mov	r0, r3
 80152f6:	f7f8 ff63 	bl	800e1c0 <lwip_htons>
 80152fa:	4603      	mov	r3, r0
 80152fc:	b2db      	uxtb	r3, r3
 80152fe:	f003 0304 	and.w	r3, r3, #4
 8015302:	2b00      	cmp	r3, #0
 8015304:	d006      	beq.n	8015314 <tcp_output+0x188>
 8015306:	4b43      	ldr	r3, [pc, #268]	; (8015414 <tcp_output+0x288>)
 8015308:	f240 5236 	movw	r2, #1334	; 0x536
 801530c:	4946      	ldr	r1, [pc, #280]	; (8015428 <tcp_output+0x29c>)
 801530e:	4843      	ldr	r0, [pc, #268]	; (801541c <tcp_output+0x290>)
 8015310:	f007 fbee 	bl	801caf0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015318:	2b00      	cmp	r3, #0
 801531a:	d01f      	beq.n	801535c <tcp_output+0x1d0>
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	8b5b      	ldrh	r3, [r3, #26]
 8015320:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8015324:	2b00      	cmp	r3, #0
 8015326:	d119      	bne.n	801535c <tcp_output+0x1d0>
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801532c:	2b00      	cmp	r3, #0
 801532e:	d00b      	beq.n	8015348 <tcp_output+0x1bc>
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015334:	681b      	ldr	r3, [r3, #0]
 8015336:	2b00      	cmp	r3, #0
 8015338:	d110      	bne.n	801535c <tcp_output+0x1d0>
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801533e:	891a      	ldrh	r2, [r3, #8]
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015344:	429a      	cmp	r2, r3
 8015346:	d209      	bcs.n	801535c <tcp_output+0x1d0>
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801534e:	2b00      	cmp	r3, #0
 8015350:	d004      	beq.n	801535c <tcp_output+0x1d0>
 8015352:	687b      	ldr	r3, [r7, #4]
 8015354:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015358:	2b08      	cmp	r3, #8
 801535a:	d901      	bls.n	8015360 <tcp_output+0x1d4>
 801535c:	2301      	movs	r3, #1
 801535e:	e000      	b.n	8015362 <tcp_output+0x1d6>
 8015360:	2300      	movs	r3, #0
 8015362:	2b00      	cmp	r3, #0
 8015364:	d106      	bne.n	8015374 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	8b5b      	ldrh	r3, [r3, #26]
 801536a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801536e:	2b00      	cmp	r3, #0
 8015370:	f000 80e4 	beq.w	801553c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	7d1b      	ldrb	r3, [r3, #20]
 8015378:	2b02      	cmp	r3, #2
 801537a:	d00d      	beq.n	8015398 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801537c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801537e:	68db      	ldr	r3, [r3, #12]
 8015380:	899b      	ldrh	r3, [r3, #12]
 8015382:	b29c      	uxth	r4, r3
 8015384:	2010      	movs	r0, #16
 8015386:	f7f8 ff1b 	bl	800e1c0 <lwip_htons>
 801538a:	4603      	mov	r3, r0
 801538c:	461a      	mov	r2, r3
 801538e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015390:	68db      	ldr	r3, [r3, #12]
 8015392:	4322      	orrs	r2, r4
 8015394:	b292      	uxth	r2, r2
 8015396:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8015398:	697a      	ldr	r2, [r7, #20]
 801539a:	6879      	ldr	r1, [r7, #4]
 801539c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801539e:	f000 f909 	bl	80155b4 <tcp_output_segment>
 80153a2:	4603      	mov	r3, r0
 80153a4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80153a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80153aa:	2b00      	cmp	r3, #0
 80153ac:	d009      	beq.n	80153c2 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	8b5b      	ldrh	r3, [r3, #26]
 80153b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80153b6:	b29a      	uxth	r2, r3
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	835a      	strh	r2, [r3, #26]
      return err;
 80153bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80153c0:	e0d3      	b.n	801556a <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80153c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153c4:	681a      	ldr	r2, [r3, #0]
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	7d1b      	ldrb	r3, [r3, #20]
 80153ce:	2b02      	cmp	r3, #2
 80153d0:	d006      	beq.n	80153e0 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	8b5b      	ldrh	r3, [r3, #26]
 80153d6:	f023 0303 	bic.w	r3, r3, #3
 80153da:	b29a      	uxth	r2, r3
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80153e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153e2:	68db      	ldr	r3, [r3, #12]
 80153e4:	685b      	ldr	r3, [r3, #4]
 80153e6:	4618      	mov	r0, r3
 80153e8:	f7f8 feff 	bl	800e1ea <lwip_htonl>
 80153ec:	4604      	mov	r4, r0
 80153ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153f0:	891b      	ldrh	r3, [r3, #8]
 80153f2:	461d      	mov	r5, r3
 80153f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153f6:	68db      	ldr	r3, [r3, #12]
 80153f8:	899b      	ldrh	r3, [r3, #12]
 80153fa:	b29b      	uxth	r3, r3
 80153fc:	4618      	mov	r0, r3
 80153fe:	f7f8 fedf 	bl	800e1c0 <lwip_htons>
 8015402:	4603      	mov	r3, r0
 8015404:	b2db      	uxtb	r3, r3
 8015406:	f003 0303 	and.w	r3, r3, #3
 801540a:	2b00      	cmp	r3, #0
 801540c:	d00e      	beq.n	801542c <tcp_output+0x2a0>
 801540e:	2301      	movs	r3, #1
 8015410:	e00d      	b.n	801542e <tcp_output+0x2a2>
 8015412:	bf00      	nop
 8015414:	080211b8 	.word	0x080211b8
 8015418:	080216fc 	.word	0x080216fc
 801541c:	0802120c 	.word	0x0802120c
 8015420:	08021714 	.word	0x08021714
 8015424:	2000832c 	.word	0x2000832c
 8015428:	0802173c 	.word	0x0802173c
 801542c:	2300      	movs	r3, #0
 801542e:	442b      	add	r3, r5
 8015430:	4423      	add	r3, r4
 8015432:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015438:	68bb      	ldr	r3, [r7, #8]
 801543a:	1ad3      	subs	r3, r2, r3
 801543c:	2b00      	cmp	r3, #0
 801543e:	da02      	bge.n	8015446 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	68ba      	ldr	r2, [r7, #8]
 8015444:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8015446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015448:	891b      	ldrh	r3, [r3, #8]
 801544a:	461c      	mov	r4, r3
 801544c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801544e:	68db      	ldr	r3, [r3, #12]
 8015450:	899b      	ldrh	r3, [r3, #12]
 8015452:	b29b      	uxth	r3, r3
 8015454:	4618      	mov	r0, r3
 8015456:	f7f8 feb3 	bl	800e1c0 <lwip_htons>
 801545a:	4603      	mov	r3, r0
 801545c:	b2db      	uxtb	r3, r3
 801545e:	f003 0303 	and.w	r3, r3, #3
 8015462:	2b00      	cmp	r3, #0
 8015464:	d001      	beq.n	801546a <tcp_output+0x2de>
 8015466:	2301      	movs	r3, #1
 8015468:	e000      	b.n	801546c <tcp_output+0x2e0>
 801546a:	2300      	movs	r3, #0
 801546c:	4423      	add	r3, r4
 801546e:	2b00      	cmp	r3, #0
 8015470:	d049      	beq.n	8015506 <tcp_output+0x37a>
      seg->next = NULL;
 8015472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015474:	2200      	movs	r2, #0
 8015476:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801547c:	2b00      	cmp	r3, #0
 801547e:	d105      	bne.n	801548c <tcp_output+0x300>
        pcb->unacked = seg;
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015484:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8015486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015488:	623b      	str	r3, [r7, #32]
 801548a:	e03f      	b.n	801550c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801548c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801548e:	68db      	ldr	r3, [r3, #12]
 8015490:	685b      	ldr	r3, [r3, #4]
 8015492:	4618      	mov	r0, r3
 8015494:	f7f8 fea9 	bl	800e1ea <lwip_htonl>
 8015498:	4604      	mov	r4, r0
 801549a:	6a3b      	ldr	r3, [r7, #32]
 801549c:	68db      	ldr	r3, [r3, #12]
 801549e:	685b      	ldr	r3, [r3, #4]
 80154a0:	4618      	mov	r0, r3
 80154a2:	f7f8 fea2 	bl	800e1ea <lwip_htonl>
 80154a6:	4603      	mov	r3, r0
 80154a8:	1ae3      	subs	r3, r4, r3
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	da24      	bge.n	80154f8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	3370      	adds	r3, #112	; 0x70
 80154b2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80154b4:	e002      	b.n	80154bc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80154b6:	69fb      	ldr	r3, [r7, #28]
 80154b8:	681b      	ldr	r3, [r3, #0]
 80154ba:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80154bc:	69fb      	ldr	r3, [r7, #28]
 80154be:	681b      	ldr	r3, [r3, #0]
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	d011      	beq.n	80154e8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80154c4:	69fb      	ldr	r3, [r7, #28]
 80154c6:	681b      	ldr	r3, [r3, #0]
 80154c8:	68db      	ldr	r3, [r3, #12]
 80154ca:	685b      	ldr	r3, [r3, #4]
 80154cc:	4618      	mov	r0, r3
 80154ce:	f7f8 fe8c 	bl	800e1ea <lwip_htonl>
 80154d2:	4604      	mov	r4, r0
 80154d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154d6:	68db      	ldr	r3, [r3, #12]
 80154d8:	685b      	ldr	r3, [r3, #4]
 80154da:	4618      	mov	r0, r3
 80154dc:	f7f8 fe85 	bl	800e1ea <lwip_htonl>
 80154e0:	4603      	mov	r3, r0
 80154e2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80154e4:	2b00      	cmp	r3, #0
 80154e6:	dbe6      	blt.n	80154b6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80154e8:	69fb      	ldr	r3, [r7, #28]
 80154ea:	681a      	ldr	r2, [r3, #0]
 80154ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154ee:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80154f0:	69fb      	ldr	r3, [r7, #28]
 80154f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80154f4:	601a      	str	r2, [r3, #0]
 80154f6:	e009      	b.n	801550c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80154f8:	6a3b      	ldr	r3, [r7, #32]
 80154fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80154fc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80154fe:	6a3b      	ldr	r3, [r7, #32]
 8015500:	681b      	ldr	r3, [r3, #0]
 8015502:	623b      	str	r3, [r7, #32]
 8015504:	e002      	b.n	801550c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8015506:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015508:	f7fb ff1d 	bl	8011346 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015510:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8015512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015514:	2b00      	cmp	r3, #0
 8015516:	d012      	beq.n	801553e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8015518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801551a:	68db      	ldr	r3, [r3, #12]
 801551c:	685b      	ldr	r3, [r3, #4]
 801551e:	4618      	mov	r0, r3
 8015520:	f7f8 fe63 	bl	800e1ea <lwip_htonl>
 8015524:	4602      	mov	r2, r0
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801552a:	1ad3      	subs	r3, r2, r3
 801552c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801552e:	8912      	ldrh	r2, [r2, #8]
 8015530:	4413      	add	r3, r2
  while (seg != NULL &&
 8015532:	69ba      	ldr	r2, [r7, #24]
 8015534:	429a      	cmp	r2, r3
 8015536:	f4bf aed9 	bcs.w	80152ec <tcp_output+0x160>
 801553a:	e000      	b.n	801553e <tcp_output+0x3b2>
      break;
 801553c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015542:	2b00      	cmp	r3, #0
 8015544:	d108      	bne.n	8015558 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	2200      	movs	r2, #0
 801554a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801554e:	e004      	b.n	801555a <tcp_output+0x3ce>
    goto output_done;
 8015550:	bf00      	nop
 8015552:	e002      	b.n	801555a <tcp_output+0x3ce>
    goto output_done;
 8015554:	bf00      	nop
 8015556:	e000      	b.n	801555a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8015558:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	8b5b      	ldrh	r3, [r3, #26]
 801555e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015562:	b29a      	uxth	r2, r3
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8015568:	2300      	movs	r3, #0
}
 801556a:	4618      	mov	r0, r3
 801556c:	3728      	adds	r7, #40	; 0x28
 801556e:	46bd      	mov	sp, r7
 8015570:	bdb0      	pop	{r4, r5, r7, pc}
 8015572:	bf00      	nop

08015574 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8015574:	b580      	push	{r7, lr}
 8015576:	b082      	sub	sp, #8
 8015578:	af00      	add	r7, sp, #0
 801557a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	2b00      	cmp	r3, #0
 8015580:	d106      	bne.n	8015590 <tcp_output_segment_busy+0x1c>
 8015582:	4b09      	ldr	r3, [pc, #36]	; (80155a8 <tcp_output_segment_busy+0x34>)
 8015584:	f240 529a 	movw	r2, #1434	; 0x59a
 8015588:	4908      	ldr	r1, [pc, #32]	; (80155ac <tcp_output_segment_busy+0x38>)
 801558a:	4809      	ldr	r0, [pc, #36]	; (80155b0 <tcp_output_segment_busy+0x3c>)
 801558c:	f007 fab0 	bl	801caf0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	685b      	ldr	r3, [r3, #4]
 8015594:	7b9b      	ldrb	r3, [r3, #14]
 8015596:	2b01      	cmp	r3, #1
 8015598:	d001      	beq.n	801559e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801559a:	2301      	movs	r3, #1
 801559c:	e000      	b.n	80155a0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801559e:	2300      	movs	r3, #0
}
 80155a0:	4618      	mov	r0, r3
 80155a2:	3708      	adds	r7, #8
 80155a4:	46bd      	mov	sp, r7
 80155a6:	bd80      	pop	{r7, pc}
 80155a8:	080211b8 	.word	0x080211b8
 80155ac:	08021754 	.word	0x08021754
 80155b0:	0802120c 	.word	0x0802120c

080155b4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80155b4:	b5b0      	push	{r4, r5, r7, lr}
 80155b6:	b08c      	sub	sp, #48	; 0x30
 80155b8:	af04      	add	r7, sp, #16
 80155ba:	60f8      	str	r0, [r7, #12]
 80155bc:	60b9      	str	r1, [r7, #8]
 80155be:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80155c0:	68fb      	ldr	r3, [r7, #12]
 80155c2:	2b00      	cmp	r3, #0
 80155c4:	d106      	bne.n	80155d4 <tcp_output_segment+0x20>
 80155c6:	4b63      	ldr	r3, [pc, #396]	; (8015754 <tcp_output_segment+0x1a0>)
 80155c8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80155cc:	4962      	ldr	r1, [pc, #392]	; (8015758 <tcp_output_segment+0x1a4>)
 80155ce:	4863      	ldr	r0, [pc, #396]	; (801575c <tcp_output_segment+0x1a8>)
 80155d0:	f007 fa8e 	bl	801caf0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80155d4:	68bb      	ldr	r3, [r7, #8]
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	d106      	bne.n	80155e8 <tcp_output_segment+0x34>
 80155da:	4b5e      	ldr	r3, [pc, #376]	; (8015754 <tcp_output_segment+0x1a0>)
 80155dc:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80155e0:	495f      	ldr	r1, [pc, #380]	; (8015760 <tcp_output_segment+0x1ac>)
 80155e2:	485e      	ldr	r0, [pc, #376]	; (801575c <tcp_output_segment+0x1a8>)
 80155e4:	f007 fa84 	bl	801caf0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	2b00      	cmp	r3, #0
 80155ec:	d106      	bne.n	80155fc <tcp_output_segment+0x48>
 80155ee:	4b59      	ldr	r3, [pc, #356]	; (8015754 <tcp_output_segment+0x1a0>)
 80155f0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80155f4:	495b      	ldr	r1, [pc, #364]	; (8015764 <tcp_output_segment+0x1b0>)
 80155f6:	4859      	ldr	r0, [pc, #356]	; (801575c <tcp_output_segment+0x1a8>)
 80155f8:	f007 fa7a 	bl	801caf0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80155fc:	68f8      	ldr	r0, [r7, #12]
 80155fe:	f7ff ffb9 	bl	8015574 <tcp_output_segment_busy>
 8015602:	4603      	mov	r3, r0
 8015604:	2b00      	cmp	r3, #0
 8015606:	d001      	beq.n	801560c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8015608:	2300      	movs	r3, #0
 801560a:	e09f      	b.n	801574c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801560c:	68bb      	ldr	r3, [r7, #8]
 801560e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015610:	68fb      	ldr	r3, [r7, #12]
 8015612:	68dc      	ldr	r4, [r3, #12]
 8015614:	4610      	mov	r0, r2
 8015616:	f7f8 fde8 	bl	800e1ea <lwip_htonl>
 801561a:	4603      	mov	r3, r0
 801561c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801561e:	68bb      	ldr	r3, [r7, #8]
 8015620:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8015622:	68fb      	ldr	r3, [r7, #12]
 8015624:	68dc      	ldr	r4, [r3, #12]
 8015626:	4610      	mov	r0, r2
 8015628:	f7f8 fdca 	bl	800e1c0 <lwip_htons>
 801562c:	4603      	mov	r3, r0
 801562e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015630:	68bb      	ldr	r3, [r7, #8]
 8015632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015634:	68ba      	ldr	r2, [r7, #8]
 8015636:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8015638:	441a      	add	r2, r3
 801563a:	68bb      	ldr	r3, [r7, #8]
 801563c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801563e:	68fb      	ldr	r3, [r7, #12]
 8015640:	68db      	ldr	r3, [r3, #12]
 8015642:	3314      	adds	r3, #20
 8015644:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8015646:	68fb      	ldr	r3, [r7, #12]
 8015648:	7a9b      	ldrb	r3, [r3, #10]
 801564a:	f003 0301 	and.w	r3, r3, #1
 801564e:	2b00      	cmp	r3, #0
 8015650:	d015      	beq.n	801567e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8015652:	68bb      	ldr	r3, [r7, #8]
 8015654:	3304      	adds	r3, #4
 8015656:	461a      	mov	r2, r3
 8015658:	6879      	ldr	r1, [r7, #4]
 801565a:	f44f 7006 	mov.w	r0, #536	; 0x218
 801565e:	f7fc fa37 	bl	8011ad0 <tcp_eff_send_mss_netif>
 8015662:	4603      	mov	r3, r0
 8015664:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8015666:	8b7b      	ldrh	r3, [r7, #26]
 8015668:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801566c:	4618      	mov	r0, r3
 801566e:	f7f8 fdbc 	bl	800e1ea <lwip_htonl>
 8015672:	4602      	mov	r2, r0
 8015674:	69fb      	ldr	r3, [r7, #28]
 8015676:	601a      	str	r2, [r3, #0]
    opts += 1;
 8015678:	69fb      	ldr	r3, [r7, #28]
 801567a:	3304      	adds	r3, #4
 801567c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801567e:	68bb      	ldr	r3, [r7, #8]
 8015680:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015684:	2b00      	cmp	r3, #0
 8015686:	da02      	bge.n	801568e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8015688:	68bb      	ldr	r3, [r7, #8]
 801568a:	2200      	movs	r2, #0
 801568c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801568e:	68bb      	ldr	r3, [r7, #8]
 8015690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015692:	2b00      	cmp	r3, #0
 8015694:	d10c      	bne.n	80156b0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8015696:	4b34      	ldr	r3, [pc, #208]	; (8015768 <tcp_output_segment+0x1b4>)
 8015698:	681a      	ldr	r2, [r3, #0]
 801569a:	68bb      	ldr	r3, [r7, #8]
 801569c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801569e:	68fb      	ldr	r3, [r7, #12]
 80156a0:	68db      	ldr	r3, [r3, #12]
 80156a2:	685b      	ldr	r3, [r3, #4]
 80156a4:	4618      	mov	r0, r3
 80156a6:	f7f8 fda0 	bl	800e1ea <lwip_htonl>
 80156aa:	4602      	mov	r2, r0
 80156ac:	68bb      	ldr	r3, [r7, #8]
 80156ae:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80156b0:	68fb      	ldr	r3, [r7, #12]
 80156b2:	68da      	ldr	r2, [r3, #12]
 80156b4:	68fb      	ldr	r3, [r7, #12]
 80156b6:	685b      	ldr	r3, [r3, #4]
 80156b8:	685b      	ldr	r3, [r3, #4]
 80156ba:	1ad3      	subs	r3, r2, r3
 80156bc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80156be:	68fb      	ldr	r3, [r7, #12]
 80156c0:	685b      	ldr	r3, [r3, #4]
 80156c2:	8959      	ldrh	r1, [r3, #10]
 80156c4:	68fb      	ldr	r3, [r7, #12]
 80156c6:	685b      	ldr	r3, [r3, #4]
 80156c8:	8b3a      	ldrh	r2, [r7, #24]
 80156ca:	1a8a      	subs	r2, r1, r2
 80156cc:	b292      	uxth	r2, r2
 80156ce:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80156d0:	68fb      	ldr	r3, [r7, #12]
 80156d2:	685b      	ldr	r3, [r3, #4]
 80156d4:	8919      	ldrh	r1, [r3, #8]
 80156d6:	68fb      	ldr	r3, [r7, #12]
 80156d8:	685b      	ldr	r3, [r3, #4]
 80156da:	8b3a      	ldrh	r2, [r7, #24]
 80156dc:	1a8a      	subs	r2, r1, r2
 80156de:	b292      	uxth	r2, r2
 80156e0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80156e2:	68fb      	ldr	r3, [r7, #12]
 80156e4:	685b      	ldr	r3, [r3, #4]
 80156e6:	68fa      	ldr	r2, [r7, #12]
 80156e8:	68d2      	ldr	r2, [r2, #12]
 80156ea:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80156ec:	68fb      	ldr	r3, [r7, #12]
 80156ee:	68db      	ldr	r3, [r3, #12]
 80156f0:	2200      	movs	r2, #0
 80156f2:	741a      	strb	r2, [r3, #16]
 80156f4:	2200      	movs	r2, #0
 80156f6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80156f8:	68fb      	ldr	r3, [r7, #12]
 80156fa:	68db      	ldr	r3, [r3, #12]
 80156fc:	f103 0214 	add.w	r2, r3, #20
 8015700:	68fb      	ldr	r3, [r7, #12]
 8015702:	7a9b      	ldrb	r3, [r3, #10]
 8015704:	009b      	lsls	r3, r3, #2
 8015706:	f003 0304 	and.w	r3, r3, #4
 801570a:	4413      	add	r3, r2
 801570c:	69fa      	ldr	r2, [r7, #28]
 801570e:	429a      	cmp	r2, r3
 8015710:	d006      	beq.n	8015720 <tcp_output_segment+0x16c>
 8015712:	4b10      	ldr	r3, [pc, #64]	; (8015754 <tcp_output_segment+0x1a0>)
 8015714:	f240 621c 	movw	r2, #1564	; 0x61c
 8015718:	4914      	ldr	r1, [pc, #80]	; (801576c <tcp_output_segment+0x1b8>)
 801571a:	4810      	ldr	r0, [pc, #64]	; (801575c <tcp_output_segment+0x1a8>)
 801571c:	f007 f9e8 	bl	801caf0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8015720:	68fb      	ldr	r3, [r7, #12]
 8015722:	6858      	ldr	r0, [r3, #4]
 8015724:	68b9      	ldr	r1, [r7, #8]
 8015726:	68bb      	ldr	r3, [r7, #8]
 8015728:	1d1c      	adds	r4, r3, #4
 801572a:	68bb      	ldr	r3, [r7, #8]
 801572c:	7add      	ldrb	r5, [r3, #11]
 801572e:	68bb      	ldr	r3, [r7, #8]
 8015730:	7a9b      	ldrb	r3, [r3, #10]
 8015732:	687a      	ldr	r2, [r7, #4]
 8015734:	9202      	str	r2, [sp, #8]
 8015736:	2206      	movs	r2, #6
 8015738:	9201      	str	r2, [sp, #4]
 801573a:	9300      	str	r3, [sp, #0]
 801573c:	462b      	mov	r3, r5
 801573e:	4622      	mov	r2, r4
 8015740:	f002 fdb0 	bl	80182a4 <ip4_output_if>
 8015744:	4603      	mov	r3, r0
 8015746:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8015748:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801574c:	4618      	mov	r0, r3
 801574e:	3720      	adds	r7, #32
 8015750:	46bd      	mov	sp, r7
 8015752:	bdb0      	pop	{r4, r5, r7, pc}
 8015754:	080211b8 	.word	0x080211b8
 8015758:	0802177c 	.word	0x0802177c
 801575c:	0802120c 	.word	0x0802120c
 8015760:	0802179c 	.word	0x0802179c
 8015764:	080217bc 	.word	0x080217bc
 8015768:	2000831c 	.word	0x2000831c
 801576c:	080217e0 	.word	0x080217e0

08015770 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8015770:	b5b0      	push	{r4, r5, r7, lr}
 8015772:	b084      	sub	sp, #16
 8015774:	af00      	add	r7, sp, #0
 8015776:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	2b00      	cmp	r3, #0
 801577c:	d106      	bne.n	801578c <tcp_rexmit_rto_prepare+0x1c>
 801577e:	4b31      	ldr	r3, [pc, #196]	; (8015844 <tcp_rexmit_rto_prepare+0xd4>)
 8015780:	f240 6263 	movw	r2, #1635	; 0x663
 8015784:	4930      	ldr	r1, [pc, #192]	; (8015848 <tcp_rexmit_rto_prepare+0xd8>)
 8015786:	4831      	ldr	r0, [pc, #196]	; (801584c <tcp_rexmit_rto_prepare+0xdc>)
 8015788:	f007 f9b2 	bl	801caf0 <iprintf>

  if (pcb->unacked == NULL) {
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015790:	2b00      	cmp	r3, #0
 8015792:	d102      	bne.n	801579a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8015794:	f06f 0305 	mvn.w	r3, #5
 8015798:	e050      	b.n	801583c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801579e:	60fb      	str	r3, [r7, #12]
 80157a0:	e00b      	b.n	80157ba <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80157a2:	68f8      	ldr	r0, [r7, #12]
 80157a4:	f7ff fee6 	bl	8015574 <tcp_output_segment_busy>
 80157a8:	4603      	mov	r3, r0
 80157aa:	2b00      	cmp	r3, #0
 80157ac:	d002      	beq.n	80157b4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80157ae:	f06f 0305 	mvn.w	r3, #5
 80157b2:	e043      	b.n	801583c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80157b4:	68fb      	ldr	r3, [r7, #12]
 80157b6:	681b      	ldr	r3, [r3, #0]
 80157b8:	60fb      	str	r3, [r7, #12]
 80157ba:	68fb      	ldr	r3, [r7, #12]
 80157bc:	681b      	ldr	r3, [r3, #0]
 80157be:	2b00      	cmp	r3, #0
 80157c0:	d1ef      	bne.n	80157a2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80157c2:	68f8      	ldr	r0, [r7, #12]
 80157c4:	f7ff fed6 	bl	8015574 <tcp_output_segment_busy>
 80157c8:	4603      	mov	r3, r0
 80157ca:	2b00      	cmp	r3, #0
 80157cc:	d002      	beq.n	80157d4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80157ce:	f06f 0305 	mvn.w	r3, #5
 80157d2:	e033      	b.n	801583c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80157d8:	68fb      	ldr	r3, [r7, #12]
 80157da:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	2200      	movs	r2, #0
 80157e8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	8b5b      	ldrh	r3, [r3, #26]
 80157ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80157f2:	b29a      	uxth	r2, r3
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80157f8:	68fb      	ldr	r3, [r7, #12]
 80157fa:	68db      	ldr	r3, [r3, #12]
 80157fc:	685b      	ldr	r3, [r3, #4]
 80157fe:	4618      	mov	r0, r3
 8015800:	f7f8 fcf3 	bl	800e1ea <lwip_htonl>
 8015804:	4604      	mov	r4, r0
 8015806:	68fb      	ldr	r3, [r7, #12]
 8015808:	891b      	ldrh	r3, [r3, #8]
 801580a:	461d      	mov	r5, r3
 801580c:	68fb      	ldr	r3, [r7, #12]
 801580e:	68db      	ldr	r3, [r3, #12]
 8015810:	899b      	ldrh	r3, [r3, #12]
 8015812:	b29b      	uxth	r3, r3
 8015814:	4618      	mov	r0, r3
 8015816:	f7f8 fcd3 	bl	800e1c0 <lwip_htons>
 801581a:	4603      	mov	r3, r0
 801581c:	b2db      	uxtb	r3, r3
 801581e:	f003 0303 	and.w	r3, r3, #3
 8015822:	2b00      	cmp	r3, #0
 8015824:	d001      	beq.n	801582a <tcp_rexmit_rto_prepare+0xba>
 8015826:	2301      	movs	r3, #1
 8015828:	e000      	b.n	801582c <tcp_rexmit_rto_prepare+0xbc>
 801582a:	2300      	movs	r3, #0
 801582c:	442b      	add	r3, r5
 801582e:	18e2      	adds	r2, r4, r3
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	2200      	movs	r2, #0
 8015838:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801583a:	2300      	movs	r3, #0
}
 801583c:	4618      	mov	r0, r3
 801583e:	3710      	adds	r7, #16
 8015840:	46bd      	mov	sp, r7
 8015842:	bdb0      	pop	{r4, r5, r7, pc}
 8015844:	080211b8 	.word	0x080211b8
 8015848:	080217f4 	.word	0x080217f4
 801584c:	0802120c 	.word	0x0802120c

08015850 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8015850:	b580      	push	{r7, lr}
 8015852:	b082      	sub	sp, #8
 8015854:	af00      	add	r7, sp, #0
 8015856:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	2b00      	cmp	r3, #0
 801585c:	d106      	bne.n	801586c <tcp_rexmit_rto_commit+0x1c>
 801585e:	4b0d      	ldr	r3, [pc, #52]	; (8015894 <tcp_rexmit_rto_commit+0x44>)
 8015860:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8015864:	490c      	ldr	r1, [pc, #48]	; (8015898 <tcp_rexmit_rto_commit+0x48>)
 8015866:	480d      	ldr	r0, [pc, #52]	; (801589c <tcp_rexmit_rto_commit+0x4c>)
 8015868:	f007 f942 	bl	801caf0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015872:	2bff      	cmp	r3, #255	; 0xff
 8015874:	d007      	beq.n	8015886 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801587c:	3301      	adds	r3, #1
 801587e:	b2da      	uxtb	r2, r3
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8015886:	6878      	ldr	r0, [r7, #4]
 8015888:	f7ff fc80 	bl	801518c <tcp_output>
}
 801588c:	bf00      	nop
 801588e:	3708      	adds	r7, #8
 8015890:	46bd      	mov	sp, r7
 8015892:	bd80      	pop	{r7, pc}
 8015894:	080211b8 	.word	0x080211b8
 8015898:	08021818 	.word	0x08021818
 801589c:	0802120c 	.word	0x0802120c

080158a0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80158a0:	b580      	push	{r7, lr}
 80158a2:	b082      	sub	sp, #8
 80158a4:	af00      	add	r7, sp, #0
 80158a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d106      	bne.n	80158bc <tcp_rexmit_rto+0x1c>
 80158ae:	4b0a      	ldr	r3, [pc, #40]	; (80158d8 <tcp_rexmit_rto+0x38>)
 80158b0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80158b4:	4909      	ldr	r1, [pc, #36]	; (80158dc <tcp_rexmit_rto+0x3c>)
 80158b6:	480a      	ldr	r0, [pc, #40]	; (80158e0 <tcp_rexmit_rto+0x40>)
 80158b8:	f007 f91a 	bl	801caf0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80158bc:	6878      	ldr	r0, [r7, #4]
 80158be:	f7ff ff57 	bl	8015770 <tcp_rexmit_rto_prepare>
 80158c2:	4603      	mov	r3, r0
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	d102      	bne.n	80158ce <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80158c8:	6878      	ldr	r0, [r7, #4]
 80158ca:	f7ff ffc1 	bl	8015850 <tcp_rexmit_rto_commit>
  }
}
 80158ce:	bf00      	nop
 80158d0:	3708      	adds	r7, #8
 80158d2:	46bd      	mov	sp, r7
 80158d4:	bd80      	pop	{r7, pc}
 80158d6:	bf00      	nop
 80158d8:	080211b8 	.word	0x080211b8
 80158dc:	0802183c 	.word	0x0802183c
 80158e0:	0802120c 	.word	0x0802120c

080158e4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80158e4:	b590      	push	{r4, r7, lr}
 80158e6:	b085      	sub	sp, #20
 80158e8:	af00      	add	r7, sp, #0
 80158ea:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d106      	bne.n	8015900 <tcp_rexmit+0x1c>
 80158f2:	4b2f      	ldr	r3, [pc, #188]	; (80159b0 <tcp_rexmit+0xcc>)
 80158f4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80158f8:	492e      	ldr	r1, [pc, #184]	; (80159b4 <tcp_rexmit+0xd0>)
 80158fa:	482f      	ldr	r0, [pc, #188]	; (80159b8 <tcp_rexmit+0xd4>)
 80158fc:	f007 f8f8 	bl	801caf0 <iprintf>

  if (pcb->unacked == NULL) {
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015904:	2b00      	cmp	r3, #0
 8015906:	d102      	bne.n	801590e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8015908:	f06f 0305 	mvn.w	r3, #5
 801590c:	e04c      	b.n	80159a8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015912:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8015914:	68b8      	ldr	r0, [r7, #8]
 8015916:	f7ff fe2d 	bl	8015574 <tcp_output_segment_busy>
 801591a:	4603      	mov	r3, r0
 801591c:	2b00      	cmp	r3, #0
 801591e:	d002      	beq.n	8015926 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8015920:	f06f 0305 	mvn.w	r3, #5
 8015924:	e040      	b.n	80159a8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8015926:	68bb      	ldr	r3, [r7, #8]
 8015928:	681a      	ldr	r2, [r3, #0]
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	336c      	adds	r3, #108	; 0x6c
 8015932:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015934:	e002      	b.n	801593c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8015936:	68fb      	ldr	r3, [r7, #12]
 8015938:	681b      	ldr	r3, [r3, #0]
 801593a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801593c:	68fb      	ldr	r3, [r7, #12]
 801593e:	681b      	ldr	r3, [r3, #0]
 8015940:	2b00      	cmp	r3, #0
 8015942:	d011      	beq.n	8015968 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015944:	68fb      	ldr	r3, [r7, #12]
 8015946:	681b      	ldr	r3, [r3, #0]
 8015948:	68db      	ldr	r3, [r3, #12]
 801594a:	685b      	ldr	r3, [r3, #4]
 801594c:	4618      	mov	r0, r3
 801594e:	f7f8 fc4c 	bl	800e1ea <lwip_htonl>
 8015952:	4604      	mov	r4, r0
 8015954:	68bb      	ldr	r3, [r7, #8]
 8015956:	68db      	ldr	r3, [r3, #12]
 8015958:	685b      	ldr	r3, [r3, #4]
 801595a:	4618      	mov	r0, r3
 801595c:	f7f8 fc45 	bl	800e1ea <lwip_htonl>
 8015960:	4603      	mov	r3, r0
 8015962:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8015964:	2b00      	cmp	r3, #0
 8015966:	dbe6      	blt.n	8015936 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8015968:	68fb      	ldr	r3, [r7, #12]
 801596a:	681a      	ldr	r2, [r3, #0]
 801596c:	68bb      	ldr	r3, [r7, #8]
 801596e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8015970:	68fb      	ldr	r3, [r7, #12]
 8015972:	68ba      	ldr	r2, [r7, #8]
 8015974:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8015976:	68bb      	ldr	r3, [r7, #8]
 8015978:	681b      	ldr	r3, [r3, #0]
 801597a:	2b00      	cmp	r3, #0
 801597c:	d103      	bne.n	8015986 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	2200      	movs	r2, #0
 8015982:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801598c:	2bff      	cmp	r3, #255	; 0xff
 801598e:	d007      	beq.n	80159a0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015996:	3301      	adds	r3, #1
 8015998:	b2da      	uxtb	r2, r3
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	2200      	movs	r2, #0
 80159a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80159a6:	2300      	movs	r3, #0
}
 80159a8:	4618      	mov	r0, r3
 80159aa:	3714      	adds	r7, #20
 80159ac:	46bd      	mov	sp, r7
 80159ae:	bd90      	pop	{r4, r7, pc}
 80159b0:	080211b8 	.word	0x080211b8
 80159b4:	08021858 	.word	0x08021858
 80159b8:	0802120c 	.word	0x0802120c

080159bc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80159bc:	b580      	push	{r7, lr}
 80159be:	b082      	sub	sp, #8
 80159c0:	af00      	add	r7, sp, #0
 80159c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	d106      	bne.n	80159d8 <tcp_rexmit_fast+0x1c>
 80159ca:	4b2a      	ldr	r3, [pc, #168]	; (8015a74 <tcp_rexmit_fast+0xb8>)
 80159cc:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80159d0:	4929      	ldr	r1, [pc, #164]	; (8015a78 <tcp_rexmit_fast+0xbc>)
 80159d2:	482a      	ldr	r0, [pc, #168]	; (8015a7c <tcp_rexmit_fast+0xc0>)
 80159d4:	f007 f88c 	bl	801caf0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80159dc:	2b00      	cmp	r3, #0
 80159de:	d044      	beq.n	8015a6a <tcp_rexmit_fast+0xae>
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	8b5b      	ldrh	r3, [r3, #26]
 80159e4:	f003 0304 	and.w	r3, r3, #4
 80159e8:	2b00      	cmp	r3, #0
 80159ea:	d13e      	bne.n	8015a6a <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80159ec:	6878      	ldr	r0, [r7, #4]
 80159ee:	f7ff ff79 	bl	80158e4 <tcp_rexmit>
 80159f2:	4603      	mov	r3, r0
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	d138      	bne.n	8015a6a <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015a04:	4293      	cmp	r3, r2
 8015a06:	bf28      	it	cs
 8015a08:	4613      	movcs	r3, r2
 8015a0a:	b29b      	uxth	r3, r3
 8015a0c:	0fda      	lsrs	r2, r3, #31
 8015a0e:	4413      	add	r3, r2
 8015a10:	105b      	asrs	r3, r3, #1
 8015a12:	b29a      	uxth	r2, r3
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8015a20:	461a      	mov	r2, r3
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015a26:	005b      	lsls	r3, r3, #1
 8015a28:	429a      	cmp	r2, r3
 8015a2a:	d206      	bcs.n	8015a3a <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015a30:	005b      	lsls	r3, r3, #1
 8015a32:	b29a      	uxth	r2, r3
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8015a3a:	687b      	ldr	r3, [r7, #4]
 8015a3c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015a44:	4619      	mov	r1, r3
 8015a46:	0049      	lsls	r1, r1, #1
 8015a48:	440b      	add	r3, r1
 8015a4a:	b29b      	uxth	r3, r3
 8015a4c:	4413      	add	r3, r2
 8015a4e:	b29a      	uxth	r2, r3
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	8b5b      	ldrh	r3, [r3, #26]
 8015a5a:	f043 0304 	orr.w	r3, r3, #4
 8015a5e:	b29a      	uxth	r2, r3
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	2200      	movs	r2, #0
 8015a68:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8015a6a:	bf00      	nop
 8015a6c:	3708      	adds	r7, #8
 8015a6e:	46bd      	mov	sp, r7
 8015a70:	bd80      	pop	{r7, pc}
 8015a72:	bf00      	nop
 8015a74:	080211b8 	.word	0x080211b8
 8015a78:	08021870 	.word	0x08021870
 8015a7c:	0802120c 	.word	0x0802120c

08015a80 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8015a80:	b580      	push	{r7, lr}
 8015a82:	b086      	sub	sp, #24
 8015a84:	af00      	add	r7, sp, #0
 8015a86:	60f8      	str	r0, [r7, #12]
 8015a88:	607b      	str	r3, [r7, #4]
 8015a8a:	460b      	mov	r3, r1
 8015a8c:	817b      	strh	r3, [r7, #10]
 8015a8e:	4613      	mov	r3, r2
 8015a90:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8015a92:	897a      	ldrh	r2, [r7, #10]
 8015a94:	893b      	ldrh	r3, [r7, #8]
 8015a96:	4413      	add	r3, r2
 8015a98:	b29b      	uxth	r3, r3
 8015a9a:	3314      	adds	r3, #20
 8015a9c:	b29b      	uxth	r3, r3
 8015a9e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015aa2:	4619      	mov	r1, r3
 8015aa4:	2022      	movs	r0, #34	; 0x22
 8015aa6:	f7f9 fc8b 	bl	800f3c0 <pbuf_alloc>
 8015aaa:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8015aac:	697b      	ldr	r3, [r7, #20]
 8015aae:	2b00      	cmp	r3, #0
 8015ab0:	d04d      	beq.n	8015b4e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8015ab2:	897b      	ldrh	r3, [r7, #10]
 8015ab4:	3313      	adds	r3, #19
 8015ab6:	697a      	ldr	r2, [r7, #20]
 8015ab8:	8952      	ldrh	r2, [r2, #10]
 8015aba:	4293      	cmp	r3, r2
 8015abc:	db06      	blt.n	8015acc <tcp_output_alloc_header_common+0x4c>
 8015abe:	4b26      	ldr	r3, [pc, #152]	; (8015b58 <tcp_output_alloc_header_common+0xd8>)
 8015ac0:	f240 7223 	movw	r2, #1827	; 0x723
 8015ac4:	4925      	ldr	r1, [pc, #148]	; (8015b5c <tcp_output_alloc_header_common+0xdc>)
 8015ac6:	4826      	ldr	r0, [pc, #152]	; (8015b60 <tcp_output_alloc_header_common+0xe0>)
 8015ac8:	f007 f812 	bl	801caf0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8015acc:	697b      	ldr	r3, [r7, #20]
 8015ace:	685b      	ldr	r3, [r3, #4]
 8015ad0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8015ad2:	8c3b      	ldrh	r3, [r7, #32]
 8015ad4:	4618      	mov	r0, r3
 8015ad6:	f7f8 fb73 	bl	800e1c0 <lwip_htons>
 8015ada:	4603      	mov	r3, r0
 8015adc:	461a      	mov	r2, r3
 8015ade:	693b      	ldr	r3, [r7, #16]
 8015ae0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8015ae2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015ae4:	4618      	mov	r0, r3
 8015ae6:	f7f8 fb6b 	bl	800e1c0 <lwip_htons>
 8015aea:	4603      	mov	r3, r0
 8015aec:	461a      	mov	r2, r3
 8015aee:	693b      	ldr	r3, [r7, #16]
 8015af0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8015af2:	693b      	ldr	r3, [r7, #16]
 8015af4:	687a      	ldr	r2, [r7, #4]
 8015af6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8015af8:	68f8      	ldr	r0, [r7, #12]
 8015afa:	f7f8 fb76 	bl	800e1ea <lwip_htonl>
 8015afe:	4602      	mov	r2, r0
 8015b00:	693b      	ldr	r3, [r7, #16]
 8015b02:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8015b04:	897b      	ldrh	r3, [r7, #10]
 8015b06:	089b      	lsrs	r3, r3, #2
 8015b08:	b29b      	uxth	r3, r3
 8015b0a:	3305      	adds	r3, #5
 8015b0c:	b29b      	uxth	r3, r3
 8015b0e:	031b      	lsls	r3, r3, #12
 8015b10:	b29a      	uxth	r2, r3
 8015b12:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015b16:	b29b      	uxth	r3, r3
 8015b18:	4313      	orrs	r3, r2
 8015b1a:	b29b      	uxth	r3, r3
 8015b1c:	4618      	mov	r0, r3
 8015b1e:	f7f8 fb4f 	bl	800e1c0 <lwip_htons>
 8015b22:	4603      	mov	r3, r0
 8015b24:	461a      	mov	r2, r3
 8015b26:	693b      	ldr	r3, [r7, #16]
 8015b28:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8015b2a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8015b2c:	4618      	mov	r0, r3
 8015b2e:	f7f8 fb47 	bl	800e1c0 <lwip_htons>
 8015b32:	4603      	mov	r3, r0
 8015b34:	461a      	mov	r2, r3
 8015b36:	693b      	ldr	r3, [r7, #16]
 8015b38:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8015b3a:	693b      	ldr	r3, [r7, #16]
 8015b3c:	2200      	movs	r2, #0
 8015b3e:	741a      	strb	r2, [r3, #16]
 8015b40:	2200      	movs	r2, #0
 8015b42:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8015b44:	693b      	ldr	r3, [r7, #16]
 8015b46:	2200      	movs	r2, #0
 8015b48:	749a      	strb	r2, [r3, #18]
 8015b4a:	2200      	movs	r2, #0
 8015b4c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8015b4e:	697b      	ldr	r3, [r7, #20]
}
 8015b50:	4618      	mov	r0, r3
 8015b52:	3718      	adds	r7, #24
 8015b54:	46bd      	mov	sp, r7
 8015b56:	bd80      	pop	{r7, pc}
 8015b58:	080211b8 	.word	0x080211b8
 8015b5c:	08021890 	.word	0x08021890
 8015b60:	0802120c 	.word	0x0802120c

08015b64 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8015b64:	b5b0      	push	{r4, r5, r7, lr}
 8015b66:	b08a      	sub	sp, #40	; 0x28
 8015b68:	af04      	add	r7, sp, #16
 8015b6a:	60f8      	str	r0, [r7, #12]
 8015b6c:	607b      	str	r3, [r7, #4]
 8015b6e:	460b      	mov	r3, r1
 8015b70:	817b      	strh	r3, [r7, #10]
 8015b72:	4613      	mov	r3, r2
 8015b74:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8015b76:	68fb      	ldr	r3, [r7, #12]
 8015b78:	2b00      	cmp	r3, #0
 8015b7a:	d106      	bne.n	8015b8a <tcp_output_alloc_header+0x26>
 8015b7c:	4b15      	ldr	r3, [pc, #84]	; (8015bd4 <tcp_output_alloc_header+0x70>)
 8015b7e:	f240 7242 	movw	r2, #1858	; 0x742
 8015b82:	4915      	ldr	r1, [pc, #84]	; (8015bd8 <tcp_output_alloc_header+0x74>)
 8015b84:	4815      	ldr	r0, [pc, #84]	; (8015bdc <tcp_output_alloc_header+0x78>)
 8015b86:	f006 ffb3 	bl	801caf0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8015b8a:	68fb      	ldr	r3, [r7, #12]
 8015b8c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8015b8e:	68fb      	ldr	r3, [r7, #12]
 8015b90:	8adb      	ldrh	r3, [r3, #22]
 8015b92:	68fa      	ldr	r2, [r7, #12]
 8015b94:	8b12      	ldrh	r2, [r2, #24]
 8015b96:	68f9      	ldr	r1, [r7, #12]
 8015b98:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8015b9a:	893d      	ldrh	r5, [r7, #8]
 8015b9c:	897c      	ldrh	r4, [r7, #10]
 8015b9e:	9103      	str	r1, [sp, #12]
 8015ba0:	2110      	movs	r1, #16
 8015ba2:	9102      	str	r1, [sp, #8]
 8015ba4:	9201      	str	r2, [sp, #4]
 8015ba6:	9300      	str	r3, [sp, #0]
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	462a      	mov	r2, r5
 8015bac:	4621      	mov	r1, r4
 8015bae:	f7ff ff67 	bl	8015a80 <tcp_output_alloc_header_common>
 8015bb2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8015bb4:	697b      	ldr	r3, [r7, #20]
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	d006      	beq.n	8015bc8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015bba:	68fb      	ldr	r3, [r7, #12]
 8015bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015bbe:	68fa      	ldr	r2, [r7, #12]
 8015bc0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8015bc2:	441a      	add	r2, r3
 8015bc4:	68fb      	ldr	r3, [r7, #12]
 8015bc6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8015bc8:	697b      	ldr	r3, [r7, #20]
}
 8015bca:	4618      	mov	r0, r3
 8015bcc:	3718      	adds	r7, #24
 8015bce:	46bd      	mov	sp, r7
 8015bd0:	bdb0      	pop	{r4, r5, r7, pc}
 8015bd2:	bf00      	nop
 8015bd4:	080211b8 	.word	0x080211b8
 8015bd8:	080218c0 	.word	0x080218c0
 8015bdc:	0802120c 	.word	0x0802120c

08015be0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8015be0:	b580      	push	{r7, lr}
 8015be2:	b088      	sub	sp, #32
 8015be4:	af00      	add	r7, sp, #0
 8015be6:	60f8      	str	r0, [r7, #12]
 8015be8:	60b9      	str	r1, [r7, #8]
 8015bea:	4611      	mov	r1, r2
 8015bec:	461a      	mov	r2, r3
 8015bee:	460b      	mov	r3, r1
 8015bf0:	71fb      	strb	r3, [r7, #7]
 8015bf2:	4613      	mov	r3, r2
 8015bf4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8015bf6:	2300      	movs	r3, #0
 8015bf8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8015bfa:	68bb      	ldr	r3, [r7, #8]
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d106      	bne.n	8015c0e <tcp_output_fill_options+0x2e>
 8015c00:	4b13      	ldr	r3, [pc, #76]	; (8015c50 <tcp_output_fill_options+0x70>)
 8015c02:	f240 7256 	movw	r2, #1878	; 0x756
 8015c06:	4913      	ldr	r1, [pc, #76]	; (8015c54 <tcp_output_fill_options+0x74>)
 8015c08:	4813      	ldr	r0, [pc, #76]	; (8015c58 <tcp_output_fill_options+0x78>)
 8015c0a:	f006 ff71 	bl	801caf0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8015c0e:	68bb      	ldr	r3, [r7, #8]
 8015c10:	685b      	ldr	r3, [r3, #4]
 8015c12:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8015c14:	69bb      	ldr	r3, [r7, #24]
 8015c16:	3314      	adds	r3, #20
 8015c18:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8015c1a:	69bb      	ldr	r3, [r7, #24]
 8015c1c:	f103 0214 	add.w	r2, r3, #20
 8015c20:	8bfb      	ldrh	r3, [r7, #30]
 8015c22:	009b      	lsls	r3, r3, #2
 8015c24:	4619      	mov	r1, r3
 8015c26:	79fb      	ldrb	r3, [r7, #7]
 8015c28:	009b      	lsls	r3, r3, #2
 8015c2a:	f003 0304 	and.w	r3, r3, #4
 8015c2e:	440b      	add	r3, r1
 8015c30:	4413      	add	r3, r2
 8015c32:	697a      	ldr	r2, [r7, #20]
 8015c34:	429a      	cmp	r2, r3
 8015c36:	d006      	beq.n	8015c46 <tcp_output_fill_options+0x66>
 8015c38:	4b05      	ldr	r3, [pc, #20]	; (8015c50 <tcp_output_fill_options+0x70>)
 8015c3a:	f240 7275 	movw	r2, #1909	; 0x775
 8015c3e:	4907      	ldr	r1, [pc, #28]	; (8015c5c <tcp_output_fill_options+0x7c>)
 8015c40:	4805      	ldr	r0, [pc, #20]	; (8015c58 <tcp_output_fill_options+0x78>)
 8015c42:	f006 ff55 	bl	801caf0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8015c46:	bf00      	nop
 8015c48:	3720      	adds	r7, #32
 8015c4a:	46bd      	mov	sp, r7
 8015c4c:	bd80      	pop	{r7, pc}
 8015c4e:	bf00      	nop
 8015c50:	080211b8 	.word	0x080211b8
 8015c54:	080218e8 	.word	0x080218e8
 8015c58:	0802120c 	.word	0x0802120c
 8015c5c:	080217e0 	.word	0x080217e0

08015c60 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8015c60:	b580      	push	{r7, lr}
 8015c62:	b08a      	sub	sp, #40	; 0x28
 8015c64:	af04      	add	r7, sp, #16
 8015c66:	60f8      	str	r0, [r7, #12]
 8015c68:	60b9      	str	r1, [r7, #8]
 8015c6a:	607a      	str	r2, [r7, #4]
 8015c6c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8015c6e:	68bb      	ldr	r3, [r7, #8]
 8015c70:	2b00      	cmp	r3, #0
 8015c72:	d106      	bne.n	8015c82 <tcp_output_control_segment+0x22>
 8015c74:	4b1c      	ldr	r3, [pc, #112]	; (8015ce8 <tcp_output_control_segment+0x88>)
 8015c76:	f240 7287 	movw	r2, #1927	; 0x787
 8015c7a:	491c      	ldr	r1, [pc, #112]	; (8015cec <tcp_output_control_segment+0x8c>)
 8015c7c:	481c      	ldr	r0, [pc, #112]	; (8015cf0 <tcp_output_control_segment+0x90>)
 8015c7e:	f006 ff37 	bl	801caf0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8015c82:	683a      	ldr	r2, [r7, #0]
 8015c84:	6879      	ldr	r1, [r7, #4]
 8015c86:	68f8      	ldr	r0, [r7, #12]
 8015c88:	f7fe fae8 	bl	801425c <tcp_route>
 8015c8c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8015c8e:	693b      	ldr	r3, [r7, #16]
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	d102      	bne.n	8015c9a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8015c94:	23fc      	movs	r3, #252	; 0xfc
 8015c96:	75fb      	strb	r3, [r7, #23]
 8015c98:	e01c      	b.n	8015cd4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8015c9a:	68fb      	ldr	r3, [r7, #12]
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d006      	beq.n	8015cae <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8015ca0:	68fb      	ldr	r3, [r7, #12]
 8015ca2:	7adb      	ldrb	r3, [r3, #11]
 8015ca4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8015ca6:	68fb      	ldr	r3, [r7, #12]
 8015ca8:	7a9b      	ldrb	r3, [r3, #10]
 8015caa:	757b      	strb	r3, [r7, #21]
 8015cac:	e003      	b.n	8015cb6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8015cae:	23ff      	movs	r3, #255	; 0xff
 8015cb0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8015cb2:	2300      	movs	r3, #0
 8015cb4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8015cb6:	7dba      	ldrb	r2, [r7, #22]
 8015cb8:	693b      	ldr	r3, [r7, #16]
 8015cba:	9302      	str	r3, [sp, #8]
 8015cbc:	2306      	movs	r3, #6
 8015cbe:	9301      	str	r3, [sp, #4]
 8015cc0:	7d7b      	ldrb	r3, [r7, #21]
 8015cc2:	9300      	str	r3, [sp, #0]
 8015cc4:	4613      	mov	r3, r2
 8015cc6:	683a      	ldr	r2, [r7, #0]
 8015cc8:	6879      	ldr	r1, [r7, #4]
 8015cca:	68b8      	ldr	r0, [r7, #8]
 8015ccc:	f002 faea 	bl	80182a4 <ip4_output_if>
 8015cd0:	4603      	mov	r3, r0
 8015cd2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8015cd4:	68b8      	ldr	r0, [r7, #8]
 8015cd6:	f7f9 fe89 	bl	800f9ec <pbuf_free>
  return err;
 8015cda:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015cde:	4618      	mov	r0, r3
 8015ce0:	3718      	adds	r7, #24
 8015ce2:	46bd      	mov	sp, r7
 8015ce4:	bd80      	pop	{r7, pc}
 8015ce6:	bf00      	nop
 8015ce8:	080211b8 	.word	0x080211b8
 8015cec:	08021910 	.word	0x08021910
 8015cf0:	0802120c 	.word	0x0802120c

08015cf4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8015cf4:	b590      	push	{r4, r7, lr}
 8015cf6:	b08b      	sub	sp, #44	; 0x2c
 8015cf8:	af04      	add	r7, sp, #16
 8015cfa:	60f8      	str	r0, [r7, #12]
 8015cfc:	60b9      	str	r1, [r7, #8]
 8015cfe:	607a      	str	r2, [r7, #4]
 8015d00:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8015d02:	683b      	ldr	r3, [r7, #0]
 8015d04:	2b00      	cmp	r3, #0
 8015d06:	d106      	bne.n	8015d16 <tcp_rst+0x22>
 8015d08:	4b1f      	ldr	r3, [pc, #124]	; (8015d88 <tcp_rst+0x94>)
 8015d0a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8015d0e:	491f      	ldr	r1, [pc, #124]	; (8015d8c <tcp_rst+0x98>)
 8015d10:	481f      	ldr	r0, [pc, #124]	; (8015d90 <tcp_rst+0x9c>)
 8015d12:	f006 feed 	bl	801caf0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8015d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d18:	2b00      	cmp	r3, #0
 8015d1a:	d106      	bne.n	8015d2a <tcp_rst+0x36>
 8015d1c:	4b1a      	ldr	r3, [pc, #104]	; (8015d88 <tcp_rst+0x94>)
 8015d1e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8015d22:	491c      	ldr	r1, [pc, #112]	; (8015d94 <tcp_rst+0xa0>)
 8015d24:	481a      	ldr	r0, [pc, #104]	; (8015d90 <tcp_rst+0x9c>)
 8015d26:	f006 fee3 	bl	801caf0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015d2a:	2300      	movs	r3, #0
 8015d2c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8015d2e:	f246 0308 	movw	r3, #24584	; 0x6008
 8015d32:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8015d34:	7dfb      	ldrb	r3, [r7, #23]
 8015d36:	b29c      	uxth	r4, r3
 8015d38:	68b8      	ldr	r0, [r7, #8]
 8015d3a:	f7f8 fa56 	bl	800e1ea <lwip_htonl>
 8015d3e:	4602      	mov	r2, r0
 8015d40:	8abb      	ldrh	r3, [r7, #20]
 8015d42:	9303      	str	r3, [sp, #12]
 8015d44:	2314      	movs	r3, #20
 8015d46:	9302      	str	r3, [sp, #8]
 8015d48:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8015d4a:	9301      	str	r3, [sp, #4]
 8015d4c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8015d4e:	9300      	str	r3, [sp, #0]
 8015d50:	4613      	mov	r3, r2
 8015d52:	2200      	movs	r2, #0
 8015d54:	4621      	mov	r1, r4
 8015d56:	6878      	ldr	r0, [r7, #4]
 8015d58:	f7ff fe92 	bl	8015a80 <tcp_output_alloc_header_common>
 8015d5c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8015d5e:	693b      	ldr	r3, [r7, #16]
 8015d60:	2b00      	cmp	r3, #0
 8015d62:	d00c      	beq.n	8015d7e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015d64:	7dfb      	ldrb	r3, [r7, #23]
 8015d66:	2200      	movs	r2, #0
 8015d68:	6939      	ldr	r1, [r7, #16]
 8015d6a:	68f8      	ldr	r0, [r7, #12]
 8015d6c:	f7ff ff38 	bl	8015be0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8015d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d72:	683a      	ldr	r2, [r7, #0]
 8015d74:	6939      	ldr	r1, [r7, #16]
 8015d76:	68f8      	ldr	r0, [r7, #12]
 8015d78:	f7ff ff72 	bl	8015c60 <tcp_output_control_segment>
 8015d7c:	e000      	b.n	8015d80 <tcp_rst+0x8c>
    return;
 8015d7e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8015d80:	371c      	adds	r7, #28
 8015d82:	46bd      	mov	sp, r7
 8015d84:	bd90      	pop	{r4, r7, pc}
 8015d86:	bf00      	nop
 8015d88:	080211b8 	.word	0x080211b8
 8015d8c:	0802193c 	.word	0x0802193c
 8015d90:	0802120c 	.word	0x0802120c
 8015d94:	08021958 	.word	0x08021958

08015d98 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8015d98:	b590      	push	{r4, r7, lr}
 8015d9a:	b087      	sub	sp, #28
 8015d9c:	af00      	add	r7, sp, #0
 8015d9e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8015da0:	2300      	movs	r3, #0
 8015da2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8015da4:	2300      	movs	r3, #0
 8015da6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	2b00      	cmp	r3, #0
 8015dac:	d106      	bne.n	8015dbc <tcp_send_empty_ack+0x24>
 8015dae:	4b28      	ldr	r3, [pc, #160]	; (8015e50 <tcp_send_empty_ack+0xb8>)
 8015db0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8015db4:	4927      	ldr	r1, [pc, #156]	; (8015e54 <tcp_send_empty_ack+0xbc>)
 8015db6:	4828      	ldr	r0, [pc, #160]	; (8015e58 <tcp_send_empty_ack+0xc0>)
 8015db8:	f006 fe9a 	bl	801caf0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015dbc:	7dfb      	ldrb	r3, [r7, #23]
 8015dbe:	009b      	lsls	r3, r3, #2
 8015dc0:	b2db      	uxtb	r3, r3
 8015dc2:	f003 0304 	and.w	r3, r3, #4
 8015dc6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8015dc8:	7d7b      	ldrb	r3, [r7, #21]
 8015dca:	b29c      	uxth	r4, r3
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015dd0:	4618      	mov	r0, r3
 8015dd2:	f7f8 fa0a 	bl	800e1ea <lwip_htonl>
 8015dd6:	4603      	mov	r3, r0
 8015dd8:	2200      	movs	r2, #0
 8015dda:	4621      	mov	r1, r4
 8015ddc:	6878      	ldr	r0, [r7, #4]
 8015dde:	f7ff fec1 	bl	8015b64 <tcp_output_alloc_header>
 8015de2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015de4:	693b      	ldr	r3, [r7, #16]
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	d109      	bne.n	8015dfe <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	8b5b      	ldrh	r3, [r3, #26]
 8015dee:	f043 0303 	orr.w	r3, r3, #3
 8015df2:	b29a      	uxth	r2, r3
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8015df8:	f06f 0301 	mvn.w	r3, #1
 8015dfc:	e023      	b.n	8015e46 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8015dfe:	7dbb      	ldrb	r3, [r7, #22]
 8015e00:	7dfa      	ldrb	r2, [r7, #23]
 8015e02:	6939      	ldr	r1, [r7, #16]
 8015e04:	6878      	ldr	r0, [r7, #4]
 8015e06:	f7ff feeb 	bl	8015be0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015e0a:	687a      	ldr	r2, [r7, #4]
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	3304      	adds	r3, #4
 8015e10:	6939      	ldr	r1, [r7, #16]
 8015e12:	6878      	ldr	r0, [r7, #4]
 8015e14:	f7ff ff24 	bl	8015c60 <tcp_output_control_segment>
 8015e18:	4603      	mov	r3, r0
 8015e1a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8015e1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	d007      	beq.n	8015e34 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	8b5b      	ldrh	r3, [r3, #26]
 8015e28:	f043 0303 	orr.w	r3, r3, #3
 8015e2c:	b29a      	uxth	r2, r3
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	835a      	strh	r2, [r3, #26]
 8015e32:	e006      	b.n	8015e42 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	8b5b      	ldrh	r3, [r3, #26]
 8015e38:	f023 0303 	bic.w	r3, r3, #3
 8015e3c:	b29a      	uxth	r2, r3
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8015e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015e46:	4618      	mov	r0, r3
 8015e48:	371c      	adds	r7, #28
 8015e4a:	46bd      	mov	sp, r7
 8015e4c:	bd90      	pop	{r4, r7, pc}
 8015e4e:	bf00      	nop
 8015e50:	080211b8 	.word	0x080211b8
 8015e54:	08021974 	.word	0x08021974
 8015e58:	0802120c 	.word	0x0802120c

08015e5c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8015e5c:	b590      	push	{r4, r7, lr}
 8015e5e:	b087      	sub	sp, #28
 8015e60:	af00      	add	r7, sp, #0
 8015e62:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015e64:	2300      	movs	r3, #0
 8015e66:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	d106      	bne.n	8015e7c <tcp_keepalive+0x20>
 8015e6e:	4b18      	ldr	r3, [pc, #96]	; (8015ed0 <tcp_keepalive+0x74>)
 8015e70:	f640 0224 	movw	r2, #2084	; 0x824
 8015e74:	4917      	ldr	r1, [pc, #92]	; (8015ed4 <tcp_keepalive+0x78>)
 8015e76:	4818      	ldr	r0, [pc, #96]	; (8015ed8 <tcp_keepalive+0x7c>)
 8015e78:	f006 fe3a 	bl	801caf0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8015e7c:	7dfb      	ldrb	r3, [r7, #23]
 8015e7e:	b29c      	uxth	r4, r3
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015e84:	3b01      	subs	r3, #1
 8015e86:	4618      	mov	r0, r3
 8015e88:	f7f8 f9af 	bl	800e1ea <lwip_htonl>
 8015e8c:	4603      	mov	r3, r0
 8015e8e:	2200      	movs	r2, #0
 8015e90:	4621      	mov	r1, r4
 8015e92:	6878      	ldr	r0, [r7, #4]
 8015e94:	f7ff fe66 	bl	8015b64 <tcp_output_alloc_header>
 8015e98:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015e9a:	693b      	ldr	r3, [r7, #16]
 8015e9c:	2b00      	cmp	r3, #0
 8015e9e:	d102      	bne.n	8015ea6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8015ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8015ea4:	e010      	b.n	8015ec8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015ea6:	7dfb      	ldrb	r3, [r7, #23]
 8015ea8:	2200      	movs	r2, #0
 8015eaa:	6939      	ldr	r1, [r7, #16]
 8015eac:	6878      	ldr	r0, [r7, #4]
 8015eae:	f7ff fe97 	bl	8015be0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015eb2:	687a      	ldr	r2, [r7, #4]
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	3304      	adds	r3, #4
 8015eb8:	6939      	ldr	r1, [r7, #16]
 8015eba:	6878      	ldr	r0, [r7, #4]
 8015ebc:	f7ff fed0 	bl	8015c60 <tcp_output_control_segment>
 8015ec0:	4603      	mov	r3, r0
 8015ec2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015ec4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015ec8:	4618      	mov	r0, r3
 8015eca:	371c      	adds	r7, #28
 8015ecc:	46bd      	mov	sp, r7
 8015ece:	bd90      	pop	{r4, r7, pc}
 8015ed0:	080211b8 	.word	0x080211b8
 8015ed4:	08021994 	.word	0x08021994
 8015ed8:	0802120c 	.word	0x0802120c

08015edc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8015edc:	b590      	push	{r4, r7, lr}
 8015ede:	b08b      	sub	sp, #44	; 0x2c
 8015ee0:	af00      	add	r7, sp, #0
 8015ee2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015ee4:	2300      	movs	r3, #0
 8015ee6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	d106      	bne.n	8015efe <tcp_zero_window_probe+0x22>
 8015ef0:	4b4c      	ldr	r3, [pc, #304]	; (8016024 <tcp_zero_window_probe+0x148>)
 8015ef2:	f640 024f 	movw	r2, #2127	; 0x84f
 8015ef6:	494c      	ldr	r1, [pc, #304]	; (8016028 <tcp_zero_window_probe+0x14c>)
 8015ef8:	484c      	ldr	r0, [pc, #304]	; (801602c <tcp_zero_window_probe+0x150>)
 8015efa:	f006 fdf9 	bl	801caf0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015f02:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8015f04:	6a3b      	ldr	r3, [r7, #32]
 8015f06:	2b00      	cmp	r3, #0
 8015f08:	d101      	bne.n	8015f0e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8015f0a:	2300      	movs	r3, #0
 8015f0c:	e086      	b.n	801601c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8015f0e:	687b      	ldr	r3, [r7, #4]
 8015f10:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8015f14:	2bff      	cmp	r3, #255	; 0xff
 8015f16:	d007      	beq.n	8015f28 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8015f1e:	3301      	adds	r3, #1
 8015f20:	b2da      	uxtb	r2, r3
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8015f28:	6a3b      	ldr	r3, [r7, #32]
 8015f2a:	68db      	ldr	r3, [r3, #12]
 8015f2c:	899b      	ldrh	r3, [r3, #12]
 8015f2e:	b29b      	uxth	r3, r3
 8015f30:	4618      	mov	r0, r3
 8015f32:	f7f8 f945 	bl	800e1c0 <lwip_htons>
 8015f36:	4603      	mov	r3, r0
 8015f38:	b2db      	uxtb	r3, r3
 8015f3a:	f003 0301 	and.w	r3, r3, #1
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d005      	beq.n	8015f4e <tcp_zero_window_probe+0x72>
 8015f42:	6a3b      	ldr	r3, [r7, #32]
 8015f44:	891b      	ldrh	r3, [r3, #8]
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	d101      	bne.n	8015f4e <tcp_zero_window_probe+0x72>
 8015f4a:	2301      	movs	r3, #1
 8015f4c:	e000      	b.n	8015f50 <tcp_zero_window_probe+0x74>
 8015f4e:	2300      	movs	r3, #0
 8015f50:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8015f52:	7ffb      	ldrb	r3, [r7, #31]
 8015f54:	2b00      	cmp	r3, #0
 8015f56:	bf0c      	ite	eq
 8015f58:	2301      	moveq	r3, #1
 8015f5a:	2300      	movne	r3, #0
 8015f5c:	b2db      	uxtb	r3, r3
 8015f5e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8015f60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015f64:	b299      	uxth	r1, r3
 8015f66:	6a3b      	ldr	r3, [r7, #32]
 8015f68:	68db      	ldr	r3, [r3, #12]
 8015f6a:	685b      	ldr	r3, [r3, #4]
 8015f6c:	8bba      	ldrh	r2, [r7, #28]
 8015f6e:	6878      	ldr	r0, [r7, #4]
 8015f70:	f7ff fdf8 	bl	8015b64 <tcp_output_alloc_header>
 8015f74:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8015f76:	69bb      	ldr	r3, [r7, #24]
 8015f78:	2b00      	cmp	r3, #0
 8015f7a:	d102      	bne.n	8015f82 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8015f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8015f80:	e04c      	b.n	801601c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8015f82:	69bb      	ldr	r3, [r7, #24]
 8015f84:	685b      	ldr	r3, [r3, #4]
 8015f86:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8015f88:	7ffb      	ldrb	r3, [r7, #31]
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d011      	beq.n	8015fb2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8015f8e:	697b      	ldr	r3, [r7, #20]
 8015f90:	899b      	ldrh	r3, [r3, #12]
 8015f92:	b29b      	uxth	r3, r3
 8015f94:	b21b      	sxth	r3, r3
 8015f96:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8015f9a:	b21c      	sxth	r4, r3
 8015f9c:	2011      	movs	r0, #17
 8015f9e:	f7f8 f90f 	bl	800e1c0 <lwip_htons>
 8015fa2:	4603      	mov	r3, r0
 8015fa4:	b21b      	sxth	r3, r3
 8015fa6:	4323      	orrs	r3, r4
 8015fa8:	b21b      	sxth	r3, r3
 8015faa:	b29a      	uxth	r2, r3
 8015fac:	697b      	ldr	r3, [r7, #20]
 8015fae:	819a      	strh	r2, [r3, #12]
 8015fb0:	e010      	b.n	8015fd4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8015fb2:	69bb      	ldr	r3, [r7, #24]
 8015fb4:	685b      	ldr	r3, [r3, #4]
 8015fb6:	3314      	adds	r3, #20
 8015fb8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8015fba:	6a3b      	ldr	r3, [r7, #32]
 8015fbc:	6858      	ldr	r0, [r3, #4]
 8015fbe:	6a3b      	ldr	r3, [r7, #32]
 8015fc0:	685b      	ldr	r3, [r3, #4]
 8015fc2:	891a      	ldrh	r2, [r3, #8]
 8015fc4:	6a3b      	ldr	r3, [r7, #32]
 8015fc6:	891b      	ldrh	r3, [r3, #8]
 8015fc8:	1ad3      	subs	r3, r2, r3
 8015fca:	b29b      	uxth	r3, r3
 8015fcc:	2201      	movs	r2, #1
 8015fce:	6939      	ldr	r1, [r7, #16]
 8015fd0:	f7f9 ff12 	bl	800fdf8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8015fd4:	6a3b      	ldr	r3, [r7, #32]
 8015fd6:	68db      	ldr	r3, [r3, #12]
 8015fd8:	685b      	ldr	r3, [r3, #4]
 8015fda:	4618      	mov	r0, r3
 8015fdc:	f7f8 f905 	bl	800e1ea <lwip_htonl>
 8015fe0:	4603      	mov	r3, r0
 8015fe2:	3301      	adds	r3, #1
 8015fe4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015fe6:	687b      	ldr	r3, [r7, #4]
 8015fe8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015fea:	68fb      	ldr	r3, [r7, #12]
 8015fec:	1ad3      	subs	r3, r2, r3
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	da02      	bge.n	8015ff8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	68fa      	ldr	r2, [r7, #12]
 8015ff6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015ff8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015ffc:	2200      	movs	r2, #0
 8015ffe:	69b9      	ldr	r1, [r7, #24]
 8016000:	6878      	ldr	r0, [r7, #4]
 8016002:	f7ff fded 	bl	8015be0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8016006:	687a      	ldr	r2, [r7, #4]
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	3304      	adds	r3, #4
 801600c:	69b9      	ldr	r1, [r7, #24]
 801600e:	6878      	ldr	r0, [r7, #4]
 8016010:	f7ff fe26 	bl	8015c60 <tcp_output_control_segment>
 8016014:	4603      	mov	r3, r0
 8016016:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8016018:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801601c:	4618      	mov	r0, r3
 801601e:	372c      	adds	r7, #44	; 0x2c
 8016020:	46bd      	mov	sp, r7
 8016022:	bd90      	pop	{r4, r7, pc}
 8016024:	080211b8 	.word	0x080211b8
 8016028:	080219b0 	.word	0x080219b0
 801602c:	0802120c 	.word	0x0802120c

08016030 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8016030:	b580      	push	{r7, lr}
 8016032:	b082      	sub	sp, #8
 8016034:	af00      	add	r7, sp, #0
 8016036:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8016038:	f7f9 ffcc 	bl	800ffd4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801603c:	4b0a      	ldr	r3, [pc, #40]	; (8016068 <tcpip_tcp_timer+0x38>)
 801603e:	681b      	ldr	r3, [r3, #0]
 8016040:	2b00      	cmp	r3, #0
 8016042:	d103      	bne.n	801604c <tcpip_tcp_timer+0x1c>
 8016044:	4b09      	ldr	r3, [pc, #36]	; (801606c <tcpip_tcp_timer+0x3c>)
 8016046:	681b      	ldr	r3, [r3, #0]
 8016048:	2b00      	cmp	r3, #0
 801604a:	d005      	beq.n	8016058 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801604c:	2200      	movs	r2, #0
 801604e:	4908      	ldr	r1, [pc, #32]	; (8016070 <tcpip_tcp_timer+0x40>)
 8016050:	20fa      	movs	r0, #250	; 0xfa
 8016052:	f000 f8f3 	bl	801623c <sys_timeout>
 8016056:	e003      	b.n	8016060 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8016058:	4b06      	ldr	r3, [pc, #24]	; (8016074 <tcpip_tcp_timer+0x44>)
 801605a:	2200      	movs	r2, #0
 801605c:	601a      	str	r2, [r3, #0]
  }
}
 801605e:	bf00      	nop
 8016060:	bf00      	nop
 8016062:	3708      	adds	r7, #8
 8016064:	46bd      	mov	sp, r7
 8016066:	bd80      	pop	{r7, pc}
 8016068:	20008318 	.word	0x20008318
 801606c:	20008328 	.word	0x20008328
 8016070:	08016031 	.word	0x08016031
 8016074:	200014cc 	.word	0x200014cc

08016078 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8016078:	b580      	push	{r7, lr}
 801607a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801607c:	4b0a      	ldr	r3, [pc, #40]	; (80160a8 <tcp_timer_needed+0x30>)
 801607e:	681b      	ldr	r3, [r3, #0]
 8016080:	2b00      	cmp	r3, #0
 8016082:	d10f      	bne.n	80160a4 <tcp_timer_needed+0x2c>
 8016084:	4b09      	ldr	r3, [pc, #36]	; (80160ac <tcp_timer_needed+0x34>)
 8016086:	681b      	ldr	r3, [r3, #0]
 8016088:	2b00      	cmp	r3, #0
 801608a:	d103      	bne.n	8016094 <tcp_timer_needed+0x1c>
 801608c:	4b08      	ldr	r3, [pc, #32]	; (80160b0 <tcp_timer_needed+0x38>)
 801608e:	681b      	ldr	r3, [r3, #0]
 8016090:	2b00      	cmp	r3, #0
 8016092:	d007      	beq.n	80160a4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8016094:	4b04      	ldr	r3, [pc, #16]	; (80160a8 <tcp_timer_needed+0x30>)
 8016096:	2201      	movs	r2, #1
 8016098:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801609a:	2200      	movs	r2, #0
 801609c:	4905      	ldr	r1, [pc, #20]	; (80160b4 <tcp_timer_needed+0x3c>)
 801609e:	20fa      	movs	r0, #250	; 0xfa
 80160a0:	f000 f8cc 	bl	801623c <sys_timeout>
  }
}
 80160a4:	bf00      	nop
 80160a6:	bd80      	pop	{r7, pc}
 80160a8:	200014cc 	.word	0x200014cc
 80160ac:	20008318 	.word	0x20008318
 80160b0:	20008328 	.word	0x20008328
 80160b4:	08016031 	.word	0x08016031

080160b8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80160b8:	b580      	push	{r7, lr}
 80160ba:	b086      	sub	sp, #24
 80160bc:	af00      	add	r7, sp, #0
 80160be:	60f8      	str	r0, [r7, #12]
 80160c0:	60b9      	str	r1, [r7, #8]
 80160c2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80160c4:	200a      	movs	r0, #10
 80160c6:	f7f8 fd31 	bl	800eb2c <memp_malloc>
 80160ca:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80160cc:	693b      	ldr	r3, [r7, #16]
 80160ce:	2b00      	cmp	r3, #0
 80160d0:	d109      	bne.n	80160e6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80160d2:	693b      	ldr	r3, [r7, #16]
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	d151      	bne.n	801617c <sys_timeout_abs+0xc4>
 80160d8:	4b2a      	ldr	r3, [pc, #168]	; (8016184 <sys_timeout_abs+0xcc>)
 80160da:	22be      	movs	r2, #190	; 0xbe
 80160dc:	492a      	ldr	r1, [pc, #168]	; (8016188 <sys_timeout_abs+0xd0>)
 80160de:	482b      	ldr	r0, [pc, #172]	; (801618c <sys_timeout_abs+0xd4>)
 80160e0:	f006 fd06 	bl	801caf0 <iprintf>
    return;
 80160e4:	e04a      	b.n	801617c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80160e6:	693b      	ldr	r3, [r7, #16]
 80160e8:	2200      	movs	r2, #0
 80160ea:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80160ec:	693b      	ldr	r3, [r7, #16]
 80160ee:	68ba      	ldr	r2, [r7, #8]
 80160f0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80160f2:	693b      	ldr	r3, [r7, #16]
 80160f4:	687a      	ldr	r2, [r7, #4]
 80160f6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80160f8:	693b      	ldr	r3, [r7, #16]
 80160fa:	68fa      	ldr	r2, [r7, #12]
 80160fc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80160fe:	4b24      	ldr	r3, [pc, #144]	; (8016190 <sys_timeout_abs+0xd8>)
 8016100:	681b      	ldr	r3, [r3, #0]
 8016102:	2b00      	cmp	r3, #0
 8016104:	d103      	bne.n	801610e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8016106:	4a22      	ldr	r2, [pc, #136]	; (8016190 <sys_timeout_abs+0xd8>)
 8016108:	693b      	ldr	r3, [r7, #16]
 801610a:	6013      	str	r3, [r2, #0]
    return;
 801610c:	e037      	b.n	801617e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801610e:	693b      	ldr	r3, [r7, #16]
 8016110:	685a      	ldr	r2, [r3, #4]
 8016112:	4b1f      	ldr	r3, [pc, #124]	; (8016190 <sys_timeout_abs+0xd8>)
 8016114:	681b      	ldr	r3, [r3, #0]
 8016116:	685b      	ldr	r3, [r3, #4]
 8016118:	1ad3      	subs	r3, r2, r3
 801611a:	0fdb      	lsrs	r3, r3, #31
 801611c:	f003 0301 	and.w	r3, r3, #1
 8016120:	b2db      	uxtb	r3, r3
 8016122:	2b00      	cmp	r3, #0
 8016124:	d007      	beq.n	8016136 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8016126:	4b1a      	ldr	r3, [pc, #104]	; (8016190 <sys_timeout_abs+0xd8>)
 8016128:	681a      	ldr	r2, [r3, #0]
 801612a:	693b      	ldr	r3, [r7, #16]
 801612c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801612e:	4a18      	ldr	r2, [pc, #96]	; (8016190 <sys_timeout_abs+0xd8>)
 8016130:	693b      	ldr	r3, [r7, #16]
 8016132:	6013      	str	r3, [r2, #0]
 8016134:	e023      	b.n	801617e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8016136:	4b16      	ldr	r3, [pc, #88]	; (8016190 <sys_timeout_abs+0xd8>)
 8016138:	681b      	ldr	r3, [r3, #0]
 801613a:	617b      	str	r3, [r7, #20]
 801613c:	e01a      	b.n	8016174 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801613e:	697b      	ldr	r3, [r7, #20]
 8016140:	681b      	ldr	r3, [r3, #0]
 8016142:	2b00      	cmp	r3, #0
 8016144:	d00b      	beq.n	801615e <sys_timeout_abs+0xa6>
 8016146:	693b      	ldr	r3, [r7, #16]
 8016148:	685a      	ldr	r2, [r3, #4]
 801614a:	697b      	ldr	r3, [r7, #20]
 801614c:	681b      	ldr	r3, [r3, #0]
 801614e:	685b      	ldr	r3, [r3, #4]
 8016150:	1ad3      	subs	r3, r2, r3
 8016152:	0fdb      	lsrs	r3, r3, #31
 8016154:	f003 0301 	and.w	r3, r3, #1
 8016158:	b2db      	uxtb	r3, r3
 801615a:	2b00      	cmp	r3, #0
 801615c:	d007      	beq.n	801616e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801615e:	697b      	ldr	r3, [r7, #20]
 8016160:	681a      	ldr	r2, [r3, #0]
 8016162:	693b      	ldr	r3, [r7, #16]
 8016164:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8016166:	697b      	ldr	r3, [r7, #20]
 8016168:	693a      	ldr	r2, [r7, #16]
 801616a:	601a      	str	r2, [r3, #0]
        break;
 801616c:	e007      	b.n	801617e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801616e:	697b      	ldr	r3, [r7, #20]
 8016170:	681b      	ldr	r3, [r3, #0]
 8016172:	617b      	str	r3, [r7, #20]
 8016174:	697b      	ldr	r3, [r7, #20]
 8016176:	2b00      	cmp	r3, #0
 8016178:	d1e1      	bne.n	801613e <sys_timeout_abs+0x86>
 801617a:	e000      	b.n	801617e <sys_timeout_abs+0xc6>
    return;
 801617c:	bf00      	nop
      }
    }
  }
}
 801617e:	3718      	adds	r7, #24
 8016180:	46bd      	mov	sp, r7
 8016182:	bd80      	pop	{r7, pc}
 8016184:	080219d4 	.word	0x080219d4
 8016188:	08021a08 	.word	0x08021a08
 801618c:	08021a48 	.word	0x08021a48
 8016190:	200014c4 	.word	0x200014c4

08016194 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8016194:	b580      	push	{r7, lr}
 8016196:	b086      	sub	sp, #24
 8016198:	af00      	add	r7, sp, #0
 801619a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80161a0:	697b      	ldr	r3, [r7, #20]
 80161a2:	685b      	ldr	r3, [r3, #4]
 80161a4:	4798      	blx	r3

  now = sys_now();
 80161a6:	f7ef ffed 	bl	8006184 <sys_now>
 80161aa:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80161ac:	697b      	ldr	r3, [r7, #20]
 80161ae:	681a      	ldr	r2, [r3, #0]
 80161b0:	4b0f      	ldr	r3, [pc, #60]	; (80161f0 <lwip_cyclic_timer+0x5c>)
 80161b2:	681b      	ldr	r3, [r3, #0]
 80161b4:	4413      	add	r3, r2
 80161b6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80161b8:	68fa      	ldr	r2, [r7, #12]
 80161ba:	693b      	ldr	r3, [r7, #16]
 80161bc:	1ad3      	subs	r3, r2, r3
 80161be:	0fdb      	lsrs	r3, r3, #31
 80161c0:	f003 0301 	and.w	r3, r3, #1
 80161c4:	b2db      	uxtb	r3, r3
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	d009      	beq.n	80161de <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80161ca:	697b      	ldr	r3, [r7, #20]
 80161cc:	681a      	ldr	r2, [r3, #0]
 80161ce:	693b      	ldr	r3, [r7, #16]
 80161d0:	4413      	add	r3, r2
 80161d2:	687a      	ldr	r2, [r7, #4]
 80161d4:	4907      	ldr	r1, [pc, #28]	; (80161f4 <lwip_cyclic_timer+0x60>)
 80161d6:	4618      	mov	r0, r3
 80161d8:	f7ff ff6e 	bl	80160b8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80161dc:	e004      	b.n	80161e8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80161de:	687a      	ldr	r2, [r7, #4]
 80161e0:	4904      	ldr	r1, [pc, #16]	; (80161f4 <lwip_cyclic_timer+0x60>)
 80161e2:	68f8      	ldr	r0, [r7, #12]
 80161e4:	f7ff ff68 	bl	80160b8 <sys_timeout_abs>
}
 80161e8:	bf00      	nop
 80161ea:	3718      	adds	r7, #24
 80161ec:	46bd      	mov	sp, r7
 80161ee:	bd80      	pop	{r7, pc}
 80161f0:	200014c8 	.word	0x200014c8
 80161f4:	08016195 	.word	0x08016195

080161f8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80161f8:	b580      	push	{r7, lr}
 80161fa:	b082      	sub	sp, #8
 80161fc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80161fe:	2301      	movs	r3, #1
 8016200:	607b      	str	r3, [r7, #4]
 8016202:	e00e      	b.n	8016222 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8016204:	4a0b      	ldr	r2, [pc, #44]	; (8016234 <sys_timeouts_init+0x3c>)
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	00db      	lsls	r3, r3, #3
 8016210:	4a08      	ldr	r2, [pc, #32]	; (8016234 <sys_timeouts_init+0x3c>)
 8016212:	4413      	add	r3, r2
 8016214:	461a      	mov	r2, r3
 8016216:	4908      	ldr	r1, [pc, #32]	; (8016238 <sys_timeouts_init+0x40>)
 8016218:	f000 f810 	bl	801623c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801621c:	687b      	ldr	r3, [r7, #4]
 801621e:	3301      	adds	r3, #1
 8016220:	607b      	str	r3, [r7, #4]
 8016222:	687b      	ldr	r3, [r7, #4]
 8016224:	2b02      	cmp	r3, #2
 8016226:	d9ed      	bls.n	8016204 <sys_timeouts_init+0xc>
  }
}
 8016228:	bf00      	nop
 801622a:	bf00      	nop
 801622c:	3708      	adds	r7, #8
 801622e:	46bd      	mov	sp, r7
 8016230:	bd80      	pop	{r7, pc}
 8016232:	bf00      	nop
 8016234:	08022880 	.word	0x08022880
 8016238:	08016195 	.word	0x08016195

0801623c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801623c:	b580      	push	{r7, lr}
 801623e:	b086      	sub	sp, #24
 8016240:	af00      	add	r7, sp, #0
 8016242:	60f8      	str	r0, [r7, #12]
 8016244:	60b9      	str	r1, [r7, #8]
 8016246:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8016248:	68fb      	ldr	r3, [r7, #12]
 801624a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801624e:	d306      	bcc.n	801625e <sys_timeout+0x22>
 8016250:	4b0a      	ldr	r3, [pc, #40]	; (801627c <sys_timeout+0x40>)
 8016252:	f240 1229 	movw	r2, #297	; 0x129
 8016256:	490a      	ldr	r1, [pc, #40]	; (8016280 <sys_timeout+0x44>)
 8016258:	480a      	ldr	r0, [pc, #40]	; (8016284 <sys_timeout+0x48>)
 801625a:	f006 fc49 	bl	801caf0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801625e:	f7ef ff91 	bl	8006184 <sys_now>
 8016262:	4602      	mov	r2, r0
 8016264:	68fb      	ldr	r3, [r7, #12]
 8016266:	4413      	add	r3, r2
 8016268:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801626a:	687a      	ldr	r2, [r7, #4]
 801626c:	68b9      	ldr	r1, [r7, #8]
 801626e:	6978      	ldr	r0, [r7, #20]
 8016270:	f7ff ff22 	bl	80160b8 <sys_timeout_abs>
#endif
}
 8016274:	bf00      	nop
 8016276:	3718      	adds	r7, #24
 8016278:	46bd      	mov	sp, r7
 801627a:	bd80      	pop	{r7, pc}
 801627c:	080219d4 	.word	0x080219d4
 8016280:	08021a70 	.word	0x08021a70
 8016284:	08021a48 	.word	0x08021a48

08016288 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8016288:	b580      	push	{r7, lr}
 801628a:	b084      	sub	sp, #16
 801628c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801628e:	f7ef ff79 	bl	8006184 <sys_now>
 8016292:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8016294:	4b17      	ldr	r3, [pc, #92]	; (80162f4 <sys_check_timeouts+0x6c>)
 8016296:	681b      	ldr	r3, [r3, #0]
 8016298:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801629a:	68bb      	ldr	r3, [r7, #8]
 801629c:	2b00      	cmp	r3, #0
 801629e:	d022      	beq.n	80162e6 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80162a0:	68bb      	ldr	r3, [r7, #8]
 80162a2:	685b      	ldr	r3, [r3, #4]
 80162a4:	68fa      	ldr	r2, [r7, #12]
 80162a6:	1ad3      	subs	r3, r2, r3
 80162a8:	0fdb      	lsrs	r3, r3, #31
 80162aa:	f003 0301 	and.w	r3, r3, #1
 80162ae:	b2db      	uxtb	r3, r3
 80162b0:	2b00      	cmp	r3, #0
 80162b2:	d11a      	bne.n	80162ea <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80162b4:	68bb      	ldr	r3, [r7, #8]
 80162b6:	681b      	ldr	r3, [r3, #0]
 80162b8:	4a0e      	ldr	r2, [pc, #56]	; (80162f4 <sys_check_timeouts+0x6c>)
 80162ba:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80162bc:	68bb      	ldr	r3, [r7, #8]
 80162be:	689b      	ldr	r3, [r3, #8]
 80162c0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80162c2:	68bb      	ldr	r3, [r7, #8]
 80162c4:	68db      	ldr	r3, [r3, #12]
 80162c6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80162c8:	68bb      	ldr	r3, [r7, #8]
 80162ca:	685b      	ldr	r3, [r3, #4]
 80162cc:	4a0a      	ldr	r2, [pc, #40]	; (80162f8 <sys_check_timeouts+0x70>)
 80162ce:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80162d0:	68b9      	ldr	r1, [r7, #8]
 80162d2:	200a      	movs	r0, #10
 80162d4:	f7f8 fc7c 	bl	800ebd0 <memp_free>
    if (handler != NULL) {
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	2b00      	cmp	r3, #0
 80162dc:	d0da      	beq.n	8016294 <sys_check_timeouts+0xc>
      handler(arg);
 80162de:	687b      	ldr	r3, [r7, #4]
 80162e0:	6838      	ldr	r0, [r7, #0]
 80162e2:	4798      	blx	r3
  do {
 80162e4:	e7d6      	b.n	8016294 <sys_check_timeouts+0xc>
      return;
 80162e6:	bf00      	nop
 80162e8:	e000      	b.n	80162ec <sys_check_timeouts+0x64>
      return;
 80162ea:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80162ec:	3710      	adds	r7, #16
 80162ee:	46bd      	mov	sp, r7
 80162f0:	bd80      	pop	{r7, pc}
 80162f2:	bf00      	nop
 80162f4:	200014c4 	.word	0x200014c4
 80162f8:	200014c8 	.word	0x200014c8

080162fc <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80162fc:	b580      	push	{r7, lr}
 80162fe:	b082      	sub	sp, #8
 8016300:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8016302:	4b16      	ldr	r3, [pc, #88]	; (801635c <sys_timeouts_sleeptime+0x60>)
 8016304:	681b      	ldr	r3, [r3, #0]
 8016306:	2b00      	cmp	r3, #0
 8016308:	d102      	bne.n	8016310 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801630a:	f04f 33ff 	mov.w	r3, #4294967295
 801630e:	e020      	b.n	8016352 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8016310:	f7ef ff38 	bl	8006184 <sys_now>
 8016314:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8016316:	4b11      	ldr	r3, [pc, #68]	; (801635c <sys_timeouts_sleeptime+0x60>)
 8016318:	681b      	ldr	r3, [r3, #0]
 801631a:	685a      	ldr	r2, [r3, #4]
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	1ad3      	subs	r3, r2, r3
 8016320:	0fdb      	lsrs	r3, r3, #31
 8016322:	f003 0301 	and.w	r3, r3, #1
 8016326:	b2db      	uxtb	r3, r3
 8016328:	2b00      	cmp	r3, #0
 801632a:	d001      	beq.n	8016330 <sys_timeouts_sleeptime+0x34>
    return 0;
 801632c:	2300      	movs	r3, #0
 801632e:	e010      	b.n	8016352 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8016330:	4b0a      	ldr	r3, [pc, #40]	; (801635c <sys_timeouts_sleeptime+0x60>)
 8016332:	681b      	ldr	r3, [r3, #0]
 8016334:	685a      	ldr	r2, [r3, #4]
 8016336:	687b      	ldr	r3, [r7, #4]
 8016338:	1ad3      	subs	r3, r2, r3
 801633a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801633c:	683b      	ldr	r3, [r7, #0]
 801633e:	2b00      	cmp	r3, #0
 8016340:	da06      	bge.n	8016350 <sys_timeouts_sleeptime+0x54>
 8016342:	4b07      	ldr	r3, [pc, #28]	; (8016360 <sys_timeouts_sleeptime+0x64>)
 8016344:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8016348:	4906      	ldr	r1, [pc, #24]	; (8016364 <sys_timeouts_sleeptime+0x68>)
 801634a:	4807      	ldr	r0, [pc, #28]	; (8016368 <sys_timeouts_sleeptime+0x6c>)
 801634c:	f006 fbd0 	bl	801caf0 <iprintf>
    return ret;
 8016350:	683b      	ldr	r3, [r7, #0]
  }
}
 8016352:	4618      	mov	r0, r3
 8016354:	3708      	adds	r7, #8
 8016356:	46bd      	mov	sp, r7
 8016358:	bd80      	pop	{r7, pc}
 801635a:	bf00      	nop
 801635c:	200014c4 	.word	0x200014c4
 8016360:	080219d4 	.word	0x080219d4
 8016364:	08021aa8 	.word	0x08021aa8
 8016368:	08021a48 	.word	0x08021a48

0801636c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801636c:	b580      	push	{r7, lr}
 801636e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8016370:	f006 fbd6 	bl	801cb20 <rand>
 8016374:	4603      	mov	r3, r0
 8016376:	b29b      	uxth	r3, r3
 8016378:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801637c:	b29b      	uxth	r3, r3
 801637e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8016382:	b29a      	uxth	r2, r3
 8016384:	4b01      	ldr	r3, [pc, #4]	; (801638c <udp_init+0x20>)
 8016386:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8016388:	bf00      	nop
 801638a:	bd80      	pop	{r7, pc}
 801638c:	10000018 	.word	0x10000018

08016390 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8016390:	b480      	push	{r7}
 8016392:	b083      	sub	sp, #12
 8016394:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8016396:	2300      	movs	r3, #0
 8016398:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801639a:	4b17      	ldr	r3, [pc, #92]	; (80163f8 <udp_new_port+0x68>)
 801639c:	881b      	ldrh	r3, [r3, #0]
 801639e:	1c5a      	adds	r2, r3, #1
 80163a0:	b291      	uxth	r1, r2
 80163a2:	4a15      	ldr	r2, [pc, #84]	; (80163f8 <udp_new_port+0x68>)
 80163a4:	8011      	strh	r1, [r2, #0]
 80163a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80163aa:	4293      	cmp	r3, r2
 80163ac:	d103      	bne.n	80163b6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80163ae:	4b12      	ldr	r3, [pc, #72]	; (80163f8 <udp_new_port+0x68>)
 80163b0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80163b4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80163b6:	4b11      	ldr	r3, [pc, #68]	; (80163fc <udp_new_port+0x6c>)
 80163b8:	681b      	ldr	r3, [r3, #0]
 80163ba:	603b      	str	r3, [r7, #0]
 80163bc:	e011      	b.n	80163e2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80163be:	683b      	ldr	r3, [r7, #0]
 80163c0:	8a5a      	ldrh	r2, [r3, #18]
 80163c2:	4b0d      	ldr	r3, [pc, #52]	; (80163f8 <udp_new_port+0x68>)
 80163c4:	881b      	ldrh	r3, [r3, #0]
 80163c6:	429a      	cmp	r2, r3
 80163c8:	d108      	bne.n	80163dc <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80163ca:	88fb      	ldrh	r3, [r7, #6]
 80163cc:	3301      	adds	r3, #1
 80163ce:	80fb      	strh	r3, [r7, #6]
 80163d0:	88fb      	ldrh	r3, [r7, #6]
 80163d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80163d6:	d3e0      	bcc.n	801639a <udp_new_port+0xa>
        return 0;
 80163d8:	2300      	movs	r3, #0
 80163da:	e007      	b.n	80163ec <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80163dc:	683b      	ldr	r3, [r7, #0]
 80163de:	68db      	ldr	r3, [r3, #12]
 80163e0:	603b      	str	r3, [r7, #0]
 80163e2:	683b      	ldr	r3, [r7, #0]
 80163e4:	2b00      	cmp	r3, #0
 80163e6:	d1ea      	bne.n	80163be <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80163e8:	4b03      	ldr	r3, [pc, #12]	; (80163f8 <udp_new_port+0x68>)
 80163ea:	881b      	ldrh	r3, [r3, #0]
}
 80163ec:	4618      	mov	r0, r3
 80163ee:	370c      	adds	r7, #12
 80163f0:	46bd      	mov	sp, r7
 80163f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163f6:	4770      	bx	lr
 80163f8:	10000018 	.word	0x10000018
 80163fc:	20008330 	.word	0x20008330

08016400 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8016400:	b580      	push	{r7, lr}
 8016402:	b084      	sub	sp, #16
 8016404:	af00      	add	r7, sp, #0
 8016406:	60f8      	str	r0, [r7, #12]
 8016408:	60b9      	str	r1, [r7, #8]
 801640a:	4613      	mov	r3, r2
 801640c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801640e:	68fb      	ldr	r3, [r7, #12]
 8016410:	2b00      	cmp	r3, #0
 8016412:	d105      	bne.n	8016420 <udp_input_local_match+0x20>
 8016414:	4b27      	ldr	r3, [pc, #156]	; (80164b4 <udp_input_local_match+0xb4>)
 8016416:	2287      	movs	r2, #135	; 0x87
 8016418:	4927      	ldr	r1, [pc, #156]	; (80164b8 <udp_input_local_match+0xb8>)
 801641a:	4828      	ldr	r0, [pc, #160]	; (80164bc <udp_input_local_match+0xbc>)
 801641c:	f006 fb68 	bl	801caf0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8016420:	68bb      	ldr	r3, [r7, #8]
 8016422:	2b00      	cmp	r3, #0
 8016424:	d105      	bne.n	8016432 <udp_input_local_match+0x32>
 8016426:	4b23      	ldr	r3, [pc, #140]	; (80164b4 <udp_input_local_match+0xb4>)
 8016428:	2288      	movs	r2, #136	; 0x88
 801642a:	4925      	ldr	r1, [pc, #148]	; (80164c0 <udp_input_local_match+0xc0>)
 801642c:	4823      	ldr	r0, [pc, #140]	; (80164bc <udp_input_local_match+0xbc>)
 801642e:	f006 fb5f 	bl	801caf0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016432:	68fb      	ldr	r3, [r7, #12]
 8016434:	7a1b      	ldrb	r3, [r3, #8]
 8016436:	2b00      	cmp	r3, #0
 8016438:	d00b      	beq.n	8016452 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801643a:	68fb      	ldr	r3, [r7, #12]
 801643c:	7a1a      	ldrb	r2, [r3, #8]
 801643e:	4b21      	ldr	r3, [pc, #132]	; (80164c4 <udp_input_local_match+0xc4>)
 8016440:	685b      	ldr	r3, [r3, #4]
 8016442:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016446:	3301      	adds	r3, #1
 8016448:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801644a:	429a      	cmp	r2, r3
 801644c:	d001      	beq.n	8016452 <udp_input_local_match+0x52>
    return 0;
 801644e:	2300      	movs	r3, #0
 8016450:	e02b      	b.n	80164aa <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8016452:	79fb      	ldrb	r3, [r7, #7]
 8016454:	2b00      	cmp	r3, #0
 8016456:	d018      	beq.n	801648a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016458:	68fb      	ldr	r3, [r7, #12]
 801645a:	2b00      	cmp	r3, #0
 801645c:	d013      	beq.n	8016486 <udp_input_local_match+0x86>
 801645e:	68fb      	ldr	r3, [r7, #12]
 8016460:	681b      	ldr	r3, [r3, #0]
 8016462:	2b00      	cmp	r3, #0
 8016464:	d00f      	beq.n	8016486 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016466:	4b17      	ldr	r3, [pc, #92]	; (80164c4 <udp_input_local_match+0xc4>)
 8016468:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801646a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801646e:	d00a      	beq.n	8016486 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8016470:	68fb      	ldr	r3, [r7, #12]
 8016472:	681a      	ldr	r2, [r3, #0]
 8016474:	4b13      	ldr	r3, [pc, #76]	; (80164c4 <udp_input_local_match+0xc4>)
 8016476:	695b      	ldr	r3, [r3, #20]
 8016478:	405a      	eors	r2, r3
 801647a:	68bb      	ldr	r3, [r7, #8]
 801647c:	3308      	adds	r3, #8
 801647e:	681b      	ldr	r3, [r3, #0]
 8016480:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016482:	2b00      	cmp	r3, #0
 8016484:	d110      	bne.n	80164a8 <udp_input_local_match+0xa8>
          return 1;
 8016486:	2301      	movs	r3, #1
 8016488:	e00f      	b.n	80164aa <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801648a:	68fb      	ldr	r3, [r7, #12]
 801648c:	2b00      	cmp	r3, #0
 801648e:	d009      	beq.n	80164a4 <udp_input_local_match+0xa4>
 8016490:	68fb      	ldr	r3, [r7, #12]
 8016492:	681b      	ldr	r3, [r3, #0]
 8016494:	2b00      	cmp	r3, #0
 8016496:	d005      	beq.n	80164a4 <udp_input_local_match+0xa4>
 8016498:	68fb      	ldr	r3, [r7, #12]
 801649a:	681a      	ldr	r2, [r3, #0]
 801649c:	4b09      	ldr	r3, [pc, #36]	; (80164c4 <udp_input_local_match+0xc4>)
 801649e:	695b      	ldr	r3, [r3, #20]
 80164a0:	429a      	cmp	r2, r3
 80164a2:	d101      	bne.n	80164a8 <udp_input_local_match+0xa8>
        return 1;
 80164a4:	2301      	movs	r3, #1
 80164a6:	e000      	b.n	80164aa <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80164a8:	2300      	movs	r3, #0
}
 80164aa:	4618      	mov	r0, r3
 80164ac:	3710      	adds	r7, #16
 80164ae:	46bd      	mov	sp, r7
 80164b0:	bd80      	pop	{r7, pc}
 80164b2:	bf00      	nop
 80164b4:	08021abc 	.word	0x08021abc
 80164b8:	08021aec 	.word	0x08021aec
 80164bc:	08021b10 	.word	0x08021b10
 80164c0:	08021b38 	.word	0x08021b38
 80164c4:	20004c04 	.word	0x20004c04

080164c8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80164c8:	b590      	push	{r4, r7, lr}
 80164ca:	b08d      	sub	sp, #52	; 0x34
 80164cc:	af02      	add	r7, sp, #8
 80164ce:	6078      	str	r0, [r7, #4]
 80164d0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80164d2:	2300      	movs	r3, #0
 80164d4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	2b00      	cmp	r3, #0
 80164da:	d105      	bne.n	80164e8 <udp_input+0x20>
 80164dc:	4b7c      	ldr	r3, [pc, #496]	; (80166d0 <udp_input+0x208>)
 80164de:	22cf      	movs	r2, #207	; 0xcf
 80164e0:	497c      	ldr	r1, [pc, #496]	; (80166d4 <udp_input+0x20c>)
 80164e2:	487d      	ldr	r0, [pc, #500]	; (80166d8 <udp_input+0x210>)
 80164e4:	f006 fb04 	bl	801caf0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80164e8:	683b      	ldr	r3, [r7, #0]
 80164ea:	2b00      	cmp	r3, #0
 80164ec:	d105      	bne.n	80164fa <udp_input+0x32>
 80164ee:	4b78      	ldr	r3, [pc, #480]	; (80166d0 <udp_input+0x208>)
 80164f0:	22d0      	movs	r2, #208	; 0xd0
 80164f2:	497a      	ldr	r1, [pc, #488]	; (80166dc <udp_input+0x214>)
 80164f4:	4878      	ldr	r0, [pc, #480]	; (80166d8 <udp_input+0x210>)
 80164f6:	f006 fafb 	bl	801caf0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80164fa:	687b      	ldr	r3, [r7, #4]
 80164fc:	895b      	ldrh	r3, [r3, #10]
 80164fe:	2b07      	cmp	r3, #7
 8016500:	d803      	bhi.n	801650a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8016502:	6878      	ldr	r0, [r7, #4]
 8016504:	f7f9 fa72 	bl	800f9ec <pbuf_free>
    goto end;
 8016508:	e0de      	b.n	80166c8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801650a:	687b      	ldr	r3, [r7, #4]
 801650c:	685b      	ldr	r3, [r3, #4]
 801650e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8016510:	4b73      	ldr	r3, [pc, #460]	; (80166e0 <udp_input+0x218>)
 8016512:	695b      	ldr	r3, [r3, #20]
 8016514:	4a72      	ldr	r2, [pc, #456]	; (80166e0 <udp_input+0x218>)
 8016516:	6812      	ldr	r2, [r2, #0]
 8016518:	4611      	mov	r1, r2
 801651a:	4618      	mov	r0, r3
 801651c:	f001 ff9a 	bl	8018454 <ip4_addr_isbroadcast_u32>
 8016520:	4603      	mov	r3, r0
 8016522:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8016524:	697b      	ldr	r3, [r7, #20]
 8016526:	881b      	ldrh	r3, [r3, #0]
 8016528:	b29b      	uxth	r3, r3
 801652a:	4618      	mov	r0, r3
 801652c:	f7f7 fe48 	bl	800e1c0 <lwip_htons>
 8016530:	4603      	mov	r3, r0
 8016532:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8016534:	697b      	ldr	r3, [r7, #20]
 8016536:	885b      	ldrh	r3, [r3, #2]
 8016538:	b29b      	uxth	r3, r3
 801653a:	4618      	mov	r0, r3
 801653c:	f7f7 fe40 	bl	800e1c0 <lwip_htons>
 8016540:	4603      	mov	r3, r0
 8016542:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8016544:	2300      	movs	r3, #0
 8016546:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8016548:	2300      	movs	r3, #0
 801654a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801654c:	2300      	movs	r3, #0
 801654e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016550:	4b64      	ldr	r3, [pc, #400]	; (80166e4 <udp_input+0x21c>)
 8016552:	681b      	ldr	r3, [r3, #0]
 8016554:	627b      	str	r3, [r7, #36]	; 0x24
 8016556:	e054      	b.n	8016602 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8016558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801655a:	8a5b      	ldrh	r3, [r3, #18]
 801655c:	89fa      	ldrh	r2, [r7, #14]
 801655e:	429a      	cmp	r2, r3
 8016560:	d14a      	bne.n	80165f8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8016562:	7cfb      	ldrb	r3, [r7, #19]
 8016564:	461a      	mov	r2, r3
 8016566:	6839      	ldr	r1, [r7, #0]
 8016568:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801656a:	f7ff ff49 	bl	8016400 <udp_input_local_match>
 801656e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8016570:	2b00      	cmp	r3, #0
 8016572:	d041      	beq.n	80165f8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8016574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016576:	7c1b      	ldrb	r3, [r3, #16]
 8016578:	f003 0304 	and.w	r3, r3, #4
 801657c:	2b00      	cmp	r3, #0
 801657e:	d11d      	bne.n	80165bc <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8016580:	69fb      	ldr	r3, [r7, #28]
 8016582:	2b00      	cmp	r3, #0
 8016584:	d102      	bne.n	801658c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8016586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016588:	61fb      	str	r3, [r7, #28]
 801658a:	e017      	b.n	80165bc <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801658c:	7cfb      	ldrb	r3, [r7, #19]
 801658e:	2b00      	cmp	r3, #0
 8016590:	d014      	beq.n	80165bc <udp_input+0xf4>
 8016592:	4b53      	ldr	r3, [pc, #332]	; (80166e0 <udp_input+0x218>)
 8016594:	695b      	ldr	r3, [r3, #20]
 8016596:	f1b3 3fff 	cmp.w	r3, #4294967295
 801659a:	d10f      	bne.n	80165bc <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801659c:	69fb      	ldr	r3, [r7, #28]
 801659e:	681a      	ldr	r2, [r3, #0]
 80165a0:	683b      	ldr	r3, [r7, #0]
 80165a2:	3304      	adds	r3, #4
 80165a4:	681b      	ldr	r3, [r3, #0]
 80165a6:	429a      	cmp	r2, r3
 80165a8:	d008      	beq.n	80165bc <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80165aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165ac:	681a      	ldr	r2, [r3, #0]
 80165ae:	683b      	ldr	r3, [r7, #0]
 80165b0:	3304      	adds	r3, #4
 80165b2:	681b      	ldr	r3, [r3, #0]
 80165b4:	429a      	cmp	r2, r3
 80165b6:	d101      	bne.n	80165bc <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80165b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165ba:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80165bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165be:	8a9b      	ldrh	r3, [r3, #20]
 80165c0:	8a3a      	ldrh	r2, [r7, #16]
 80165c2:	429a      	cmp	r2, r3
 80165c4:	d118      	bne.n	80165f8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80165c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165c8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	d005      	beq.n	80165da <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80165ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165d0:	685a      	ldr	r2, [r3, #4]
 80165d2:	4b43      	ldr	r3, [pc, #268]	; (80166e0 <udp_input+0x218>)
 80165d4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80165d6:	429a      	cmp	r2, r3
 80165d8:	d10e      	bne.n	80165f8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80165da:	6a3b      	ldr	r3, [r7, #32]
 80165dc:	2b00      	cmp	r3, #0
 80165de:	d014      	beq.n	801660a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80165e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165e2:	68da      	ldr	r2, [r3, #12]
 80165e4:	6a3b      	ldr	r3, [r7, #32]
 80165e6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80165e8:	4b3e      	ldr	r3, [pc, #248]	; (80166e4 <udp_input+0x21c>)
 80165ea:	681a      	ldr	r2, [r3, #0]
 80165ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165ee:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80165f0:	4a3c      	ldr	r2, [pc, #240]	; (80166e4 <udp_input+0x21c>)
 80165f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165f4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80165f6:	e008      	b.n	801660a <udp_input+0x142>
      }
    }

    prev = pcb;
 80165f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165fa:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80165fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165fe:	68db      	ldr	r3, [r3, #12]
 8016600:	627b      	str	r3, [r7, #36]	; 0x24
 8016602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016604:	2b00      	cmp	r3, #0
 8016606:	d1a7      	bne.n	8016558 <udp_input+0x90>
 8016608:	e000      	b.n	801660c <udp_input+0x144>
        break;
 801660a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801660c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801660e:	2b00      	cmp	r3, #0
 8016610:	d101      	bne.n	8016616 <udp_input+0x14e>
    pcb = uncon_pcb;
 8016612:	69fb      	ldr	r3, [r7, #28]
 8016614:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8016616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016618:	2b00      	cmp	r3, #0
 801661a:	d002      	beq.n	8016622 <udp_input+0x15a>
    for_us = 1;
 801661c:	2301      	movs	r3, #1
 801661e:	76fb      	strb	r3, [r7, #27]
 8016620:	e00a      	b.n	8016638 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8016622:	683b      	ldr	r3, [r7, #0]
 8016624:	3304      	adds	r3, #4
 8016626:	681a      	ldr	r2, [r3, #0]
 8016628:	4b2d      	ldr	r3, [pc, #180]	; (80166e0 <udp_input+0x218>)
 801662a:	695b      	ldr	r3, [r3, #20]
 801662c:	429a      	cmp	r2, r3
 801662e:	bf0c      	ite	eq
 8016630:	2301      	moveq	r3, #1
 8016632:	2300      	movne	r3, #0
 8016634:	b2db      	uxtb	r3, r3
 8016636:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8016638:	7efb      	ldrb	r3, [r7, #27]
 801663a:	2b00      	cmp	r3, #0
 801663c:	d041      	beq.n	80166c2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801663e:	2108      	movs	r1, #8
 8016640:	6878      	ldr	r0, [r7, #4]
 8016642:	f7f9 f91b 	bl	800f87c <pbuf_remove_header>
 8016646:	4603      	mov	r3, r0
 8016648:	2b00      	cmp	r3, #0
 801664a:	d00a      	beq.n	8016662 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801664c:	4b20      	ldr	r3, [pc, #128]	; (80166d0 <udp_input+0x208>)
 801664e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8016652:	4925      	ldr	r1, [pc, #148]	; (80166e8 <udp_input+0x220>)
 8016654:	4820      	ldr	r0, [pc, #128]	; (80166d8 <udp_input+0x210>)
 8016656:	f006 fa4b 	bl	801caf0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801665a:	6878      	ldr	r0, [r7, #4]
 801665c:	f7f9 f9c6 	bl	800f9ec <pbuf_free>
      goto end;
 8016660:	e032      	b.n	80166c8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8016662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016664:	2b00      	cmp	r3, #0
 8016666:	d012      	beq.n	801668e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8016668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801666a:	699b      	ldr	r3, [r3, #24]
 801666c:	2b00      	cmp	r3, #0
 801666e:	d00a      	beq.n	8016686 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8016670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016672:	699c      	ldr	r4, [r3, #24]
 8016674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016676:	69d8      	ldr	r0, [r3, #28]
 8016678:	8a3b      	ldrh	r3, [r7, #16]
 801667a:	9300      	str	r3, [sp, #0]
 801667c:	4b1b      	ldr	r3, [pc, #108]	; (80166ec <udp_input+0x224>)
 801667e:	687a      	ldr	r2, [r7, #4]
 8016680:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016682:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8016684:	e021      	b.n	80166ca <udp_input+0x202>
        pbuf_free(p);
 8016686:	6878      	ldr	r0, [r7, #4]
 8016688:	f7f9 f9b0 	bl	800f9ec <pbuf_free>
        goto end;
 801668c:	e01c      	b.n	80166c8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801668e:	7cfb      	ldrb	r3, [r7, #19]
 8016690:	2b00      	cmp	r3, #0
 8016692:	d112      	bne.n	80166ba <udp_input+0x1f2>
 8016694:	4b12      	ldr	r3, [pc, #72]	; (80166e0 <udp_input+0x218>)
 8016696:	695b      	ldr	r3, [r3, #20]
 8016698:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801669c:	2be0      	cmp	r3, #224	; 0xe0
 801669e:	d00c      	beq.n	80166ba <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80166a0:	4b0f      	ldr	r3, [pc, #60]	; (80166e0 <udp_input+0x218>)
 80166a2:	899b      	ldrh	r3, [r3, #12]
 80166a4:	3308      	adds	r3, #8
 80166a6:	b29b      	uxth	r3, r3
 80166a8:	b21b      	sxth	r3, r3
 80166aa:	4619      	mov	r1, r3
 80166ac:	6878      	ldr	r0, [r7, #4]
 80166ae:	f7f9 f958 	bl	800f962 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80166b2:	2103      	movs	r1, #3
 80166b4:	6878      	ldr	r0, [r7, #4]
 80166b6:	f001 fbad 	bl	8017e14 <icmp_dest_unreach>
      pbuf_free(p);
 80166ba:	6878      	ldr	r0, [r7, #4]
 80166bc:	f7f9 f996 	bl	800f9ec <pbuf_free>
  return;
 80166c0:	e003      	b.n	80166ca <udp_input+0x202>
    pbuf_free(p);
 80166c2:	6878      	ldr	r0, [r7, #4]
 80166c4:	f7f9 f992 	bl	800f9ec <pbuf_free>
  return;
 80166c8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80166ca:	372c      	adds	r7, #44	; 0x2c
 80166cc:	46bd      	mov	sp, r7
 80166ce:	bd90      	pop	{r4, r7, pc}
 80166d0:	08021abc 	.word	0x08021abc
 80166d4:	08021b60 	.word	0x08021b60
 80166d8:	08021b10 	.word	0x08021b10
 80166dc:	08021b78 	.word	0x08021b78
 80166e0:	20004c04 	.word	0x20004c04
 80166e4:	20008330 	.word	0x20008330
 80166e8:	08021b94 	.word	0x08021b94
 80166ec:	20004c14 	.word	0x20004c14

080166f0 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 80166f0:	b580      	push	{r7, lr}
 80166f2:	b082      	sub	sp, #8
 80166f4:	af00      	add	r7, sp, #0
 80166f6:	6078      	str	r0, [r7, #4]
 80166f8:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	2b00      	cmp	r3, #0
 80166fe:	d109      	bne.n	8016714 <udp_send+0x24>
 8016700:	4b11      	ldr	r3, [pc, #68]	; (8016748 <udp_send+0x58>)
 8016702:	f240 12d5 	movw	r2, #469	; 0x1d5
 8016706:	4911      	ldr	r1, [pc, #68]	; (801674c <udp_send+0x5c>)
 8016708:	4811      	ldr	r0, [pc, #68]	; (8016750 <udp_send+0x60>)
 801670a:	f006 f9f1 	bl	801caf0 <iprintf>
 801670e:	f06f 030f 	mvn.w	r3, #15
 8016712:	e015      	b.n	8016740 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8016714:	683b      	ldr	r3, [r7, #0]
 8016716:	2b00      	cmp	r3, #0
 8016718:	d109      	bne.n	801672e <udp_send+0x3e>
 801671a:	4b0b      	ldr	r3, [pc, #44]	; (8016748 <udp_send+0x58>)
 801671c:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8016720:	490c      	ldr	r1, [pc, #48]	; (8016754 <udp_send+0x64>)
 8016722:	480b      	ldr	r0, [pc, #44]	; (8016750 <udp_send+0x60>)
 8016724:	f006 f9e4 	bl	801caf0 <iprintf>
 8016728:	f06f 030f 	mvn.w	r3, #15
 801672c:	e008      	b.n	8016740 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	1d1a      	adds	r2, r3, #4
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	8a9b      	ldrh	r3, [r3, #20]
 8016736:	6839      	ldr	r1, [r7, #0]
 8016738:	6878      	ldr	r0, [r7, #4]
 801673a:	f000 f80d 	bl	8016758 <udp_sendto>
 801673e:	4603      	mov	r3, r0
}
 8016740:	4618      	mov	r0, r3
 8016742:	3708      	adds	r7, #8
 8016744:	46bd      	mov	sp, r7
 8016746:	bd80      	pop	{r7, pc}
 8016748:	08021abc 	.word	0x08021abc
 801674c:	08021bb0 	.word	0x08021bb0
 8016750:	08021b10 	.word	0x08021b10
 8016754:	08021bc8 	.word	0x08021bc8

08016758 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8016758:	b580      	push	{r7, lr}
 801675a:	b088      	sub	sp, #32
 801675c:	af02      	add	r7, sp, #8
 801675e:	60f8      	str	r0, [r7, #12]
 8016760:	60b9      	str	r1, [r7, #8]
 8016762:	607a      	str	r2, [r7, #4]
 8016764:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8016766:	68fb      	ldr	r3, [r7, #12]
 8016768:	2b00      	cmp	r3, #0
 801676a:	d109      	bne.n	8016780 <udp_sendto+0x28>
 801676c:	4b23      	ldr	r3, [pc, #140]	; (80167fc <udp_sendto+0xa4>)
 801676e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8016772:	4923      	ldr	r1, [pc, #140]	; (8016800 <udp_sendto+0xa8>)
 8016774:	4823      	ldr	r0, [pc, #140]	; (8016804 <udp_sendto+0xac>)
 8016776:	f006 f9bb 	bl	801caf0 <iprintf>
 801677a:	f06f 030f 	mvn.w	r3, #15
 801677e:	e038      	b.n	80167f2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8016780:	68bb      	ldr	r3, [r7, #8]
 8016782:	2b00      	cmp	r3, #0
 8016784:	d109      	bne.n	801679a <udp_sendto+0x42>
 8016786:	4b1d      	ldr	r3, [pc, #116]	; (80167fc <udp_sendto+0xa4>)
 8016788:	f240 2219 	movw	r2, #537	; 0x219
 801678c:	491e      	ldr	r1, [pc, #120]	; (8016808 <udp_sendto+0xb0>)
 801678e:	481d      	ldr	r0, [pc, #116]	; (8016804 <udp_sendto+0xac>)
 8016790:	f006 f9ae 	bl	801caf0 <iprintf>
 8016794:	f06f 030f 	mvn.w	r3, #15
 8016798:	e02b      	b.n	80167f2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	2b00      	cmp	r3, #0
 801679e:	d109      	bne.n	80167b4 <udp_sendto+0x5c>
 80167a0:	4b16      	ldr	r3, [pc, #88]	; (80167fc <udp_sendto+0xa4>)
 80167a2:	f240 221a 	movw	r2, #538	; 0x21a
 80167a6:	4919      	ldr	r1, [pc, #100]	; (801680c <udp_sendto+0xb4>)
 80167a8:	4816      	ldr	r0, [pc, #88]	; (8016804 <udp_sendto+0xac>)
 80167aa:	f006 f9a1 	bl	801caf0 <iprintf>
 80167ae:	f06f 030f 	mvn.w	r3, #15
 80167b2:	e01e      	b.n	80167f2 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80167b4:	68fb      	ldr	r3, [r7, #12]
 80167b6:	7a1b      	ldrb	r3, [r3, #8]
 80167b8:	2b00      	cmp	r3, #0
 80167ba:	d006      	beq.n	80167ca <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 80167bc:	68fb      	ldr	r3, [r7, #12]
 80167be:	7a1b      	ldrb	r3, [r3, #8]
 80167c0:	4618      	mov	r0, r3
 80167c2:	f7f8 fd1b 	bl	800f1fc <netif_get_by_index>
 80167c6:	6178      	str	r0, [r7, #20]
 80167c8:	e003      	b.n	80167d2 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 80167ca:	6878      	ldr	r0, [r7, #4]
 80167cc:	f001 fbac 	bl	8017f28 <ip4_route>
 80167d0:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 80167d2:	697b      	ldr	r3, [r7, #20]
 80167d4:	2b00      	cmp	r3, #0
 80167d6:	d102      	bne.n	80167de <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 80167d8:	f06f 0303 	mvn.w	r3, #3
 80167dc:	e009      	b.n	80167f2 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80167de:	887a      	ldrh	r2, [r7, #2]
 80167e0:	697b      	ldr	r3, [r7, #20]
 80167e2:	9300      	str	r3, [sp, #0]
 80167e4:	4613      	mov	r3, r2
 80167e6:	687a      	ldr	r2, [r7, #4]
 80167e8:	68b9      	ldr	r1, [r7, #8]
 80167ea:	68f8      	ldr	r0, [r7, #12]
 80167ec:	f000 f810 	bl	8016810 <udp_sendto_if>
 80167f0:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80167f2:	4618      	mov	r0, r3
 80167f4:	3718      	adds	r7, #24
 80167f6:	46bd      	mov	sp, r7
 80167f8:	bd80      	pop	{r7, pc}
 80167fa:	bf00      	nop
 80167fc:	08021abc 	.word	0x08021abc
 8016800:	08021be0 	.word	0x08021be0
 8016804:	08021b10 	.word	0x08021b10
 8016808:	08021bf8 	.word	0x08021bf8
 801680c:	08021c14 	.word	0x08021c14

08016810 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8016810:	b580      	push	{r7, lr}
 8016812:	b088      	sub	sp, #32
 8016814:	af02      	add	r7, sp, #8
 8016816:	60f8      	str	r0, [r7, #12]
 8016818:	60b9      	str	r1, [r7, #8]
 801681a:	607a      	str	r2, [r7, #4]
 801681c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801681e:	68fb      	ldr	r3, [r7, #12]
 8016820:	2b00      	cmp	r3, #0
 8016822:	d109      	bne.n	8016838 <udp_sendto_if+0x28>
 8016824:	4b2e      	ldr	r3, [pc, #184]	; (80168e0 <udp_sendto_if+0xd0>)
 8016826:	f44f 7220 	mov.w	r2, #640	; 0x280
 801682a:	492e      	ldr	r1, [pc, #184]	; (80168e4 <udp_sendto_if+0xd4>)
 801682c:	482e      	ldr	r0, [pc, #184]	; (80168e8 <udp_sendto_if+0xd8>)
 801682e:	f006 f95f 	bl	801caf0 <iprintf>
 8016832:	f06f 030f 	mvn.w	r3, #15
 8016836:	e04f      	b.n	80168d8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8016838:	68bb      	ldr	r3, [r7, #8]
 801683a:	2b00      	cmp	r3, #0
 801683c:	d109      	bne.n	8016852 <udp_sendto_if+0x42>
 801683e:	4b28      	ldr	r3, [pc, #160]	; (80168e0 <udp_sendto_if+0xd0>)
 8016840:	f240 2281 	movw	r2, #641	; 0x281
 8016844:	4929      	ldr	r1, [pc, #164]	; (80168ec <udp_sendto_if+0xdc>)
 8016846:	4828      	ldr	r0, [pc, #160]	; (80168e8 <udp_sendto_if+0xd8>)
 8016848:	f006 f952 	bl	801caf0 <iprintf>
 801684c:	f06f 030f 	mvn.w	r3, #15
 8016850:	e042      	b.n	80168d8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	2b00      	cmp	r3, #0
 8016856:	d109      	bne.n	801686c <udp_sendto_if+0x5c>
 8016858:	4b21      	ldr	r3, [pc, #132]	; (80168e0 <udp_sendto_if+0xd0>)
 801685a:	f240 2282 	movw	r2, #642	; 0x282
 801685e:	4924      	ldr	r1, [pc, #144]	; (80168f0 <udp_sendto_if+0xe0>)
 8016860:	4821      	ldr	r0, [pc, #132]	; (80168e8 <udp_sendto_if+0xd8>)
 8016862:	f006 f945 	bl	801caf0 <iprintf>
 8016866:	f06f 030f 	mvn.w	r3, #15
 801686a:	e035      	b.n	80168d8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801686c:	6a3b      	ldr	r3, [r7, #32]
 801686e:	2b00      	cmp	r3, #0
 8016870:	d109      	bne.n	8016886 <udp_sendto_if+0x76>
 8016872:	4b1b      	ldr	r3, [pc, #108]	; (80168e0 <udp_sendto_if+0xd0>)
 8016874:	f240 2283 	movw	r2, #643	; 0x283
 8016878:	491e      	ldr	r1, [pc, #120]	; (80168f4 <udp_sendto_if+0xe4>)
 801687a:	481b      	ldr	r0, [pc, #108]	; (80168e8 <udp_sendto_if+0xd8>)
 801687c:	f006 f938 	bl	801caf0 <iprintf>
 8016880:	f06f 030f 	mvn.w	r3, #15
 8016884:	e028      	b.n	80168d8 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016886:	68fb      	ldr	r3, [r7, #12]
 8016888:	2b00      	cmp	r3, #0
 801688a:	d009      	beq.n	80168a0 <udp_sendto_if+0x90>
 801688c:	68fb      	ldr	r3, [r7, #12]
 801688e:	681b      	ldr	r3, [r3, #0]
 8016890:	2b00      	cmp	r3, #0
 8016892:	d005      	beq.n	80168a0 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8016894:	68fb      	ldr	r3, [r7, #12]
 8016896:	681b      	ldr	r3, [r3, #0]
 8016898:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801689c:	2be0      	cmp	r3, #224	; 0xe0
 801689e:	d103      	bne.n	80168a8 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80168a0:	6a3b      	ldr	r3, [r7, #32]
 80168a2:	3304      	adds	r3, #4
 80168a4:	617b      	str	r3, [r7, #20]
 80168a6:	e00b      	b.n	80168c0 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80168a8:	68fb      	ldr	r3, [r7, #12]
 80168aa:	681a      	ldr	r2, [r3, #0]
 80168ac:	6a3b      	ldr	r3, [r7, #32]
 80168ae:	3304      	adds	r3, #4
 80168b0:	681b      	ldr	r3, [r3, #0]
 80168b2:	429a      	cmp	r2, r3
 80168b4:	d002      	beq.n	80168bc <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80168b6:	f06f 0303 	mvn.w	r3, #3
 80168ba:	e00d      	b.n	80168d8 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80168bc:	68fb      	ldr	r3, [r7, #12]
 80168be:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80168c0:	887a      	ldrh	r2, [r7, #2]
 80168c2:	697b      	ldr	r3, [r7, #20]
 80168c4:	9301      	str	r3, [sp, #4]
 80168c6:	6a3b      	ldr	r3, [r7, #32]
 80168c8:	9300      	str	r3, [sp, #0]
 80168ca:	4613      	mov	r3, r2
 80168cc:	687a      	ldr	r2, [r7, #4]
 80168ce:	68b9      	ldr	r1, [r7, #8]
 80168d0:	68f8      	ldr	r0, [r7, #12]
 80168d2:	f000 f811 	bl	80168f8 <udp_sendto_if_src>
 80168d6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80168d8:	4618      	mov	r0, r3
 80168da:	3718      	adds	r7, #24
 80168dc:	46bd      	mov	sp, r7
 80168de:	bd80      	pop	{r7, pc}
 80168e0:	08021abc 	.word	0x08021abc
 80168e4:	08021c30 	.word	0x08021c30
 80168e8:	08021b10 	.word	0x08021b10
 80168ec:	08021c4c 	.word	0x08021c4c
 80168f0:	08021c68 	.word	0x08021c68
 80168f4:	08021c88 	.word	0x08021c88

080168f8 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80168f8:	b580      	push	{r7, lr}
 80168fa:	b08c      	sub	sp, #48	; 0x30
 80168fc:	af04      	add	r7, sp, #16
 80168fe:	60f8      	str	r0, [r7, #12]
 8016900:	60b9      	str	r1, [r7, #8]
 8016902:	607a      	str	r2, [r7, #4]
 8016904:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8016906:	68fb      	ldr	r3, [r7, #12]
 8016908:	2b00      	cmp	r3, #0
 801690a:	d109      	bne.n	8016920 <udp_sendto_if_src+0x28>
 801690c:	4b65      	ldr	r3, [pc, #404]	; (8016aa4 <udp_sendto_if_src+0x1ac>)
 801690e:	f240 22d1 	movw	r2, #721	; 0x2d1
 8016912:	4965      	ldr	r1, [pc, #404]	; (8016aa8 <udp_sendto_if_src+0x1b0>)
 8016914:	4865      	ldr	r0, [pc, #404]	; (8016aac <udp_sendto_if_src+0x1b4>)
 8016916:	f006 f8eb 	bl	801caf0 <iprintf>
 801691a:	f06f 030f 	mvn.w	r3, #15
 801691e:	e0bc      	b.n	8016a9a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8016920:	68bb      	ldr	r3, [r7, #8]
 8016922:	2b00      	cmp	r3, #0
 8016924:	d109      	bne.n	801693a <udp_sendto_if_src+0x42>
 8016926:	4b5f      	ldr	r3, [pc, #380]	; (8016aa4 <udp_sendto_if_src+0x1ac>)
 8016928:	f240 22d2 	movw	r2, #722	; 0x2d2
 801692c:	4960      	ldr	r1, [pc, #384]	; (8016ab0 <udp_sendto_if_src+0x1b8>)
 801692e:	485f      	ldr	r0, [pc, #380]	; (8016aac <udp_sendto_if_src+0x1b4>)
 8016930:	f006 f8de 	bl	801caf0 <iprintf>
 8016934:	f06f 030f 	mvn.w	r3, #15
 8016938:	e0af      	b.n	8016a9a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	2b00      	cmp	r3, #0
 801693e:	d109      	bne.n	8016954 <udp_sendto_if_src+0x5c>
 8016940:	4b58      	ldr	r3, [pc, #352]	; (8016aa4 <udp_sendto_if_src+0x1ac>)
 8016942:	f240 22d3 	movw	r2, #723	; 0x2d3
 8016946:	495b      	ldr	r1, [pc, #364]	; (8016ab4 <udp_sendto_if_src+0x1bc>)
 8016948:	4858      	ldr	r0, [pc, #352]	; (8016aac <udp_sendto_if_src+0x1b4>)
 801694a:	f006 f8d1 	bl	801caf0 <iprintf>
 801694e:	f06f 030f 	mvn.w	r3, #15
 8016952:	e0a2      	b.n	8016a9a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8016954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016956:	2b00      	cmp	r3, #0
 8016958:	d109      	bne.n	801696e <udp_sendto_if_src+0x76>
 801695a:	4b52      	ldr	r3, [pc, #328]	; (8016aa4 <udp_sendto_if_src+0x1ac>)
 801695c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8016960:	4955      	ldr	r1, [pc, #340]	; (8016ab8 <udp_sendto_if_src+0x1c0>)
 8016962:	4852      	ldr	r0, [pc, #328]	; (8016aac <udp_sendto_if_src+0x1b4>)
 8016964:	f006 f8c4 	bl	801caf0 <iprintf>
 8016968:	f06f 030f 	mvn.w	r3, #15
 801696c:	e095      	b.n	8016a9a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801696e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016970:	2b00      	cmp	r3, #0
 8016972:	d109      	bne.n	8016988 <udp_sendto_if_src+0x90>
 8016974:	4b4b      	ldr	r3, [pc, #300]	; (8016aa4 <udp_sendto_if_src+0x1ac>)
 8016976:	f240 22d5 	movw	r2, #725	; 0x2d5
 801697a:	4950      	ldr	r1, [pc, #320]	; (8016abc <udp_sendto_if_src+0x1c4>)
 801697c:	484b      	ldr	r0, [pc, #300]	; (8016aac <udp_sendto_if_src+0x1b4>)
 801697e:	f006 f8b7 	bl	801caf0 <iprintf>
 8016982:	f06f 030f 	mvn.w	r3, #15
 8016986:	e088      	b.n	8016a9a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8016988:	68fb      	ldr	r3, [r7, #12]
 801698a:	8a5b      	ldrh	r3, [r3, #18]
 801698c:	2b00      	cmp	r3, #0
 801698e:	d10f      	bne.n	80169b0 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8016990:	68f9      	ldr	r1, [r7, #12]
 8016992:	68fb      	ldr	r3, [r7, #12]
 8016994:	8a5b      	ldrh	r3, [r3, #18]
 8016996:	461a      	mov	r2, r3
 8016998:	68f8      	ldr	r0, [r7, #12]
 801699a:	f000 f893 	bl	8016ac4 <udp_bind>
 801699e:	4603      	mov	r3, r0
 80169a0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80169a2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80169a6:	2b00      	cmp	r3, #0
 80169a8:	d002      	beq.n	80169b0 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80169aa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80169ae:	e074      	b.n	8016a9a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80169b0:	68bb      	ldr	r3, [r7, #8]
 80169b2:	891b      	ldrh	r3, [r3, #8]
 80169b4:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80169b8:	4293      	cmp	r3, r2
 80169ba:	d902      	bls.n	80169c2 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80169bc:	f04f 33ff 	mov.w	r3, #4294967295
 80169c0:	e06b      	b.n	8016a9a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80169c2:	2108      	movs	r1, #8
 80169c4:	68b8      	ldr	r0, [r7, #8]
 80169c6:	f7f8 ff49 	bl	800f85c <pbuf_add_header>
 80169ca:	4603      	mov	r3, r0
 80169cc:	2b00      	cmp	r3, #0
 80169ce:	d015      	beq.n	80169fc <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80169d0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80169d4:	2108      	movs	r1, #8
 80169d6:	2022      	movs	r0, #34	; 0x22
 80169d8:	f7f8 fcf2 	bl	800f3c0 <pbuf_alloc>
 80169dc:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80169de:	69fb      	ldr	r3, [r7, #28]
 80169e0:	2b00      	cmp	r3, #0
 80169e2:	d102      	bne.n	80169ea <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80169e4:	f04f 33ff 	mov.w	r3, #4294967295
 80169e8:	e057      	b.n	8016a9a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80169ea:	68bb      	ldr	r3, [r7, #8]
 80169ec:	891b      	ldrh	r3, [r3, #8]
 80169ee:	2b00      	cmp	r3, #0
 80169f0:	d006      	beq.n	8016a00 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80169f2:	68b9      	ldr	r1, [r7, #8]
 80169f4:	69f8      	ldr	r0, [r7, #28]
 80169f6:	f7f9 f91d 	bl	800fc34 <pbuf_chain>
 80169fa:	e001      	b.n	8016a00 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80169fc:	68bb      	ldr	r3, [r7, #8]
 80169fe:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8016a00:	69fb      	ldr	r3, [r7, #28]
 8016a02:	895b      	ldrh	r3, [r3, #10]
 8016a04:	2b07      	cmp	r3, #7
 8016a06:	d806      	bhi.n	8016a16 <udp_sendto_if_src+0x11e>
 8016a08:	4b26      	ldr	r3, [pc, #152]	; (8016aa4 <udp_sendto_if_src+0x1ac>)
 8016a0a:	f240 320d 	movw	r2, #781	; 0x30d
 8016a0e:	492c      	ldr	r1, [pc, #176]	; (8016ac0 <udp_sendto_if_src+0x1c8>)
 8016a10:	4826      	ldr	r0, [pc, #152]	; (8016aac <udp_sendto_if_src+0x1b4>)
 8016a12:	f006 f86d 	bl	801caf0 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8016a16:	69fb      	ldr	r3, [r7, #28]
 8016a18:	685b      	ldr	r3, [r3, #4]
 8016a1a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8016a1c:	68fb      	ldr	r3, [r7, #12]
 8016a1e:	8a5b      	ldrh	r3, [r3, #18]
 8016a20:	4618      	mov	r0, r3
 8016a22:	f7f7 fbcd 	bl	800e1c0 <lwip_htons>
 8016a26:	4603      	mov	r3, r0
 8016a28:	461a      	mov	r2, r3
 8016a2a:	697b      	ldr	r3, [r7, #20]
 8016a2c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8016a2e:	887b      	ldrh	r3, [r7, #2]
 8016a30:	4618      	mov	r0, r3
 8016a32:	f7f7 fbc5 	bl	800e1c0 <lwip_htons>
 8016a36:	4603      	mov	r3, r0
 8016a38:	461a      	mov	r2, r3
 8016a3a:	697b      	ldr	r3, [r7, #20]
 8016a3c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8016a3e:	697b      	ldr	r3, [r7, #20]
 8016a40:	2200      	movs	r2, #0
 8016a42:	719a      	strb	r2, [r3, #6]
 8016a44:	2200      	movs	r2, #0
 8016a46:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8016a48:	69fb      	ldr	r3, [r7, #28]
 8016a4a:	891b      	ldrh	r3, [r3, #8]
 8016a4c:	4618      	mov	r0, r3
 8016a4e:	f7f7 fbb7 	bl	800e1c0 <lwip_htons>
 8016a52:	4603      	mov	r3, r0
 8016a54:	461a      	mov	r2, r3
 8016a56:	697b      	ldr	r3, [r7, #20]
 8016a58:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8016a5a:	2311      	movs	r3, #17
 8016a5c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8016a5e:	68fb      	ldr	r3, [r7, #12]
 8016a60:	7adb      	ldrb	r3, [r3, #11]
 8016a62:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8016a64:	68fb      	ldr	r3, [r7, #12]
 8016a66:	7a9b      	ldrb	r3, [r3, #10]
 8016a68:	7cb9      	ldrb	r1, [r7, #18]
 8016a6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016a6c:	9202      	str	r2, [sp, #8]
 8016a6e:	7cfa      	ldrb	r2, [r7, #19]
 8016a70:	9201      	str	r2, [sp, #4]
 8016a72:	9300      	str	r3, [sp, #0]
 8016a74:	460b      	mov	r3, r1
 8016a76:	687a      	ldr	r2, [r7, #4]
 8016a78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016a7a:	69f8      	ldr	r0, [r7, #28]
 8016a7c:	f001 fc3c 	bl	80182f8 <ip4_output_if_src>
 8016a80:	4603      	mov	r3, r0
 8016a82:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8016a84:	69fa      	ldr	r2, [r7, #28]
 8016a86:	68bb      	ldr	r3, [r7, #8]
 8016a88:	429a      	cmp	r2, r3
 8016a8a:	d004      	beq.n	8016a96 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8016a8c:	69f8      	ldr	r0, [r7, #28]
 8016a8e:	f7f8 ffad 	bl	800f9ec <pbuf_free>
    q = NULL;
 8016a92:	2300      	movs	r3, #0
 8016a94:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8016a96:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8016a9a:	4618      	mov	r0, r3
 8016a9c:	3720      	adds	r7, #32
 8016a9e:	46bd      	mov	sp, r7
 8016aa0:	bd80      	pop	{r7, pc}
 8016aa2:	bf00      	nop
 8016aa4:	08021abc 	.word	0x08021abc
 8016aa8:	08021ca8 	.word	0x08021ca8
 8016aac:	08021b10 	.word	0x08021b10
 8016ab0:	08021cc8 	.word	0x08021cc8
 8016ab4:	08021ce8 	.word	0x08021ce8
 8016ab8:	08021d0c 	.word	0x08021d0c
 8016abc:	08021d30 	.word	0x08021d30
 8016ac0:	08021d54 	.word	0x08021d54

08016ac4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8016ac4:	b580      	push	{r7, lr}
 8016ac6:	b086      	sub	sp, #24
 8016ac8:	af00      	add	r7, sp, #0
 8016aca:	60f8      	str	r0, [r7, #12]
 8016acc:	60b9      	str	r1, [r7, #8]
 8016ace:	4613      	mov	r3, r2
 8016ad0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8016ad2:	68bb      	ldr	r3, [r7, #8]
 8016ad4:	2b00      	cmp	r3, #0
 8016ad6:	d101      	bne.n	8016adc <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8016ad8:	4b39      	ldr	r3, [pc, #228]	; (8016bc0 <udp_bind+0xfc>)
 8016ada:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8016adc:	68fb      	ldr	r3, [r7, #12]
 8016ade:	2b00      	cmp	r3, #0
 8016ae0:	d109      	bne.n	8016af6 <udp_bind+0x32>
 8016ae2:	4b38      	ldr	r3, [pc, #224]	; (8016bc4 <udp_bind+0x100>)
 8016ae4:	f240 32b7 	movw	r2, #951	; 0x3b7
 8016ae8:	4937      	ldr	r1, [pc, #220]	; (8016bc8 <udp_bind+0x104>)
 8016aea:	4838      	ldr	r0, [pc, #224]	; (8016bcc <udp_bind+0x108>)
 8016aec:	f006 f800 	bl	801caf0 <iprintf>
 8016af0:	f06f 030f 	mvn.w	r3, #15
 8016af4:	e060      	b.n	8016bb8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8016af6:	2300      	movs	r3, #0
 8016af8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016afa:	4b35      	ldr	r3, [pc, #212]	; (8016bd0 <udp_bind+0x10c>)
 8016afc:	681b      	ldr	r3, [r3, #0]
 8016afe:	617b      	str	r3, [r7, #20]
 8016b00:	e009      	b.n	8016b16 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8016b02:	68fa      	ldr	r2, [r7, #12]
 8016b04:	697b      	ldr	r3, [r7, #20]
 8016b06:	429a      	cmp	r2, r3
 8016b08:	d102      	bne.n	8016b10 <udp_bind+0x4c>
      rebind = 1;
 8016b0a:	2301      	movs	r3, #1
 8016b0c:	74fb      	strb	r3, [r7, #19]
      break;
 8016b0e:	e005      	b.n	8016b1c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016b10:	697b      	ldr	r3, [r7, #20]
 8016b12:	68db      	ldr	r3, [r3, #12]
 8016b14:	617b      	str	r3, [r7, #20]
 8016b16:	697b      	ldr	r3, [r7, #20]
 8016b18:	2b00      	cmp	r3, #0
 8016b1a:	d1f2      	bne.n	8016b02 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8016b1c:	88fb      	ldrh	r3, [r7, #6]
 8016b1e:	2b00      	cmp	r3, #0
 8016b20:	d109      	bne.n	8016b36 <udp_bind+0x72>
    port = udp_new_port();
 8016b22:	f7ff fc35 	bl	8016390 <udp_new_port>
 8016b26:	4603      	mov	r3, r0
 8016b28:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8016b2a:	88fb      	ldrh	r3, [r7, #6]
 8016b2c:	2b00      	cmp	r3, #0
 8016b2e:	d12c      	bne.n	8016b8a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8016b30:	f06f 0307 	mvn.w	r3, #7
 8016b34:	e040      	b.n	8016bb8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016b36:	4b26      	ldr	r3, [pc, #152]	; (8016bd0 <udp_bind+0x10c>)
 8016b38:	681b      	ldr	r3, [r3, #0]
 8016b3a:	617b      	str	r3, [r7, #20]
 8016b3c:	e022      	b.n	8016b84 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8016b3e:	68fa      	ldr	r2, [r7, #12]
 8016b40:	697b      	ldr	r3, [r7, #20]
 8016b42:	429a      	cmp	r2, r3
 8016b44:	d01b      	beq.n	8016b7e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8016b46:	697b      	ldr	r3, [r7, #20]
 8016b48:	8a5b      	ldrh	r3, [r3, #18]
 8016b4a:	88fa      	ldrh	r2, [r7, #6]
 8016b4c:	429a      	cmp	r2, r3
 8016b4e:	d116      	bne.n	8016b7e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8016b50:	697b      	ldr	r3, [r7, #20]
 8016b52:	681a      	ldr	r2, [r3, #0]
 8016b54:	68bb      	ldr	r3, [r7, #8]
 8016b56:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8016b58:	429a      	cmp	r2, r3
 8016b5a:	d00d      	beq.n	8016b78 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8016b5c:	68bb      	ldr	r3, [r7, #8]
 8016b5e:	2b00      	cmp	r3, #0
 8016b60:	d00a      	beq.n	8016b78 <udp_bind+0xb4>
 8016b62:	68bb      	ldr	r3, [r7, #8]
 8016b64:	681b      	ldr	r3, [r3, #0]
 8016b66:	2b00      	cmp	r3, #0
 8016b68:	d006      	beq.n	8016b78 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8016b6a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8016b6c:	2b00      	cmp	r3, #0
 8016b6e:	d003      	beq.n	8016b78 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8016b70:	697b      	ldr	r3, [r7, #20]
 8016b72:	681b      	ldr	r3, [r3, #0]
 8016b74:	2b00      	cmp	r3, #0
 8016b76:	d102      	bne.n	8016b7e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8016b78:	f06f 0307 	mvn.w	r3, #7
 8016b7c:	e01c      	b.n	8016bb8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016b7e:	697b      	ldr	r3, [r7, #20]
 8016b80:	68db      	ldr	r3, [r3, #12]
 8016b82:	617b      	str	r3, [r7, #20]
 8016b84:	697b      	ldr	r3, [r7, #20]
 8016b86:	2b00      	cmp	r3, #0
 8016b88:	d1d9      	bne.n	8016b3e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8016b8a:	68bb      	ldr	r3, [r7, #8]
 8016b8c:	2b00      	cmp	r3, #0
 8016b8e:	d002      	beq.n	8016b96 <udp_bind+0xd2>
 8016b90:	68bb      	ldr	r3, [r7, #8]
 8016b92:	681b      	ldr	r3, [r3, #0]
 8016b94:	e000      	b.n	8016b98 <udp_bind+0xd4>
 8016b96:	2300      	movs	r3, #0
 8016b98:	68fa      	ldr	r2, [r7, #12]
 8016b9a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8016b9c:	68fb      	ldr	r3, [r7, #12]
 8016b9e:	88fa      	ldrh	r2, [r7, #6]
 8016ba0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8016ba2:	7cfb      	ldrb	r3, [r7, #19]
 8016ba4:	2b00      	cmp	r3, #0
 8016ba6:	d106      	bne.n	8016bb6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8016ba8:	4b09      	ldr	r3, [pc, #36]	; (8016bd0 <udp_bind+0x10c>)
 8016baa:	681a      	ldr	r2, [r3, #0]
 8016bac:	68fb      	ldr	r3, [r7, #12]
 8016bae:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8016bb0:	4a07      	ldr	r2, [pc, #28]	; (8016bd0 <udp_bind+0x10c>)
 8016bb2:	68fb      	ldr	r3, [r7, #12]
 8016bb4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8016bb6:	2300      	movs	r3, #0
}
 8016bb8:	4618      	mov	r0, r3
 8016bba:	3718      	adds	r7, #24
 8016bbc:	46bd      	mov	sp, r7
 8016bbe:	bd80      	pop	{r7, pc}
 8016bc0:	08022898 	.word	0x08022898
 8016bc4:	08021abc 	.word	0x08021abc
 8016bc8:	08021d84 	.word	0x08021d84
 8016bcc:	08021b10 	.word	0x08021b10
 8016bd0:	20008330 	.word	0x20008330

08016bd4 <udp_bind_netif>:
 *
 * @see udp_disconnect()
 */
void
udp_bind_netif(struct udp_pcb *pcb, const struct netif *netif)
{
 8016bd4:	b480      	push	{r7}
 8016bd6:	b083      	sub	sp, #12
 8016bd8:	af00      	add	r7, sp, #0
 8016bda:	6078      	str	r0, [r7, #4]
 8016bdc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif != NULL) {
 8016bde:	683b      	ldr	r3, [r7, #0]
 8016be0:	2b00      	cmp	r3, #0
 8016be2:	d007      	beq.n	8016bf4 <udp_bind_netif+0x20>
    pcb->netif_idx = netif_get_index(netif);
 8016be4:	683b      	ldr	r3, [r7, #0]
 8016be6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016bea:	3301      	adds	r3, #1
 8016bec:	b2da      	uxtb	r2, r3
 8016bee:	687b      	ldr	r3, [r7, #4]
 8016bf0:	721a      	strb	r2, [r3, #8]
  } else {
    pcb->netif_idx = NETIF_NO_INDEX;
  }
}
 8016bf2:	e002      	b.n	8016bfa <udp_bind_netif+0x26>
    pcb->netif_idx = NETIF_NO_INDEX;
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	2200      	movs	r2, #0
 8016bf8:	721a      	strb	r2, [r3, #8]
}
 8016bfa:	bf00      	nop
 8016bfc:	370c      	adds	r7, #12
 8016bfe:	46bd      	mov	sp, r7
 8016c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c04:	4770      	bx	lr
	...

08016c08 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8016c08:	b580      	push	{r7, lr}
 8016c0a:	b084      	sub	sp, #16
 8016c0c:	af00      	add	r7, sp, #0
 8016c0e:	60f8      	str	r0, [r7, #12]
 8016c10:	60b9      	str	r1, [r7, #8]
 8016c12:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8016c14:	68fb      	ldr	r3, [r7, #12]
 8016c16:	2b00      	cmp	r3, #0
 8016c18:	d107      	bne.n	8016c2a <udp_recv+0x22>
 8016c1a:	4b08      	ldr	r3, [pc, #32]	; (8016c3c <udp_recv+0x34>)
 8016c1c:	f240 428a 	movw	r2, #1162	; 0x48a
 8016c20:	4907      	ldr	r1, [pc, #28]	; (8016c40 <udp_recv+0x38>)
 8016c22:	4808      	ldr	r0, [pc, #32]	; (8016c44 <udp_recv+0x3c>)
 8016c24:	f005 ff64 	bl	801caf0 <iprintf>
 8016c28:	e005      	b.n	8016c36 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8016c2a:	68fb      	ldr	r3, [r7, #12]
 8016c2c:	68ba      	ldr	r2, [r7, #8]
 8016c2e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8016c30:	68fb      	ldr	r3, [r7, #12]
 8016c32:	687a      	ldr	r2, [r7, #4]
 8016c34:	61da      	str	r2, [r3, #28]
}
 8016c36:	3710      	adds	r7, #16
 8016c38:	46bd      	mov	sp, r7
 8016c3a:	bd80      	pop	{r7, pc}
 8016c3c:	08021abc 	.word	0x08021abc
 8016c40:	08021df0 	.word	0x08021df0
 8016c44:	08021b10 	.word	0x08021b10

08016c48 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8016c48:	b580      	push	{r7, lr}
 8016c4a:	b084      	sub	sp, #16
 8016c4c:	af00      	add	r7, sp, #0
 8016c4e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	2b00      	cmp	r3, #0
 8016c54:	d107      	bne.n	8016c66 <udp_remove+0x1e>
 8016c56:	4b19      	ldr	r3, [pc, #100]	; (8016cbc <udp_remove+0x74>)
 8016c58:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8016c5c:	4918      	ldr	r1, [pc, #96]	; (8016cc0 <udp_remove+0x78>)
 8016c5e:	4819      	ldr	r0, [pc, #100]	; (8016cc4 <udp_remove+0x7c>)
 8016c60:	f005 ff46 	bl	801caf0 <iprintf>
 8016c64:	e026      	b.n	8016cb4 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8016c66:	4b18      	ldr	r3, [pc, #96]	; (8016cc8 <udp_remove+0x80>)
 8016c68:	681b      	ldr	r3, [r3, #0]
 8016c6a:	687a      	ldr	r2, [r7, #4]
 8016c6c:	429a      	cmp	r2, r3
 8016c6e:	d105      	bne.n	8016c7c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8016c70:	4b15      	ldr	r3, [pc, #84]	; (8016cc8 <udp_remove+0x80>)
 8016c72:	681b      	ldr	r3, [r3, #0]
 8016c74:	68db      	ldr	r3, [r3, #12]
 8016c76:	4a14      	ldr	r2, [pc, #80]	; (8016cc8 <udp_remove+0x80>)
 8016c78:	6013      	str	r3, [r2, #0]
 8016c7a:	e017      	b.n	8016cac <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8016c7c:	4b12      	ldr	r3, [pc, #72]	; (8016cc8 <udp_remove+0x80>)
 8016c7e:	681b      	ldr	r3, [r3, #0]
 8016c80:	60fb      	str	r3, [r7, #12]
 8016c82:	e010      	b.n	8016ca6 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8016c84:	68fb      	ldr	r3, [r7, #12]
 8016c86:	68db      	ldr	r3, [r3, #12]
 8016c88:	2b00      	cmp	r3, #0
 8016c8a:	d009      	beq.n	8016ca0 <udp_remove+0x58>
 8016c8c:	68fb      	ldr	r3, [r7, #12]
 8016c8e:	68db      	ldr	r3, [r3, #12]
 8016c90:	687a      	ldr	r2, [r7, #4]
 8016c92:	429a      	cmp	r2, r3
 8016c94:	d104      	bne.n	8016ca0 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	68da      	ldr	r2, [r3, #12]
 8016c9a:	68fb      	ldr	r3, [r7, #12]
 8016c9c:	60da      	str	r2, [r3, #12]
        break;
 8016c9e:	e005      	b.n	8016cac <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8016ca0:	68fb      	ldr	r3, [r7, #12]
 8016ca2:	68db      	ldr	r3, [r3, #12]
 8016ca4:	60fb      	str	r3, [r7, #12]
 8016ca6:	68fb      	ldr	r3, [r7, #12]
 8016ca8:	2b00      	cmp	r3, #0
 8016caa:	d1eb      	bne.n	8016c84 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8016cac:	6879      	ldr	r1, [r7, #4]
 8016cae:	2000      	movs	r0, #0
 8016cb0:	f7f7 ff8e 	bl	800ebd0 <memp_free>
}
 8016cb4:	3710      	adds	r7, #16
 8016cb6:	46bd      	mov	sp, r7
 8016cb8:	bd80      	pop	{r7, pc}
 8016cba:	bf00      	nop
 8016cbc:	08021abc 	.word	0x08021abc
 8016cc0:	08021e08 	.word	0x08021e08
 8016cc4:	08021b10 	.word	0x08021b10
 8016cc8:	20008330 	.word	0x20008330

08016ccc <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8016ccc:	b580      	push	{r7, lr}
 8016cce:	b082      	sub	sp, #8
 8016cd0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8016cd2:	2000      	movs	r0, #0
 8016cd4:	f7f7 ff2a 	bl	800eb2c <memp_malloc>
 8016cd8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	d007      	beq.n	8016cf0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8016ce0:	2220      	movs	r2, #32
 8016ce2:	2100      	movs	r1, #0
 8016ce4:	6878      	ldr	r0, [r7, #4]
 8016ce6:	f005 f88d 	bl	801be04 <memset>
    pcb->ttl = UDP_TTL;
 8016cea:	687b      	ldr	r3, [r7, #4]
 8016cec:	22ff      	movs	r2, #255	; 0xff
 8016cee:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8016cf0:	687b      	ldr	r3, [r7, #4]
}
 8016cf2:	4618      	mov	r0, r3
 8016cf4:	3708      	adds	r7, #8
 8016cf6:	46bd      	mov	sp, r7
 8016cf8:	bd80      	pop	{r7, pc}

08016cfa <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8016cfa:	b580      	push	{r7, lr}
 8016cfc:	b084      	sub	sp, #16
 8016cfe:	af00      	add	r7, sp, #0
 8016d00:	4603      	mov	r3, r0
 8016d02:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8016d04:	f7ff ffe2 	bl	8016ccc <udp_new>
 8016d08:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8016d0a:	68fb      	ldr	r3, [r7, #12]
}
 8016d0c:	4618      	mov	r0, r3
 8016d0e:	3710      	adds	r7, #16
 8016d10:	46bd      	mov	sp, r7
 8016d12:	bd80      	pop	{r7, pc}

08016d14 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8016d14:	b480      	push	{r7}
 8016d16:	b085      	sub	sp, #20
 8016d18:	af00      	add	r7, sp, #0
 8016d1a:	6078      	str	r0, [r7, #4]
 8016d1c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8016d1e:	687b      	ldr	r3, [r7, #4]
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d01e      	beq.n	8016d62 <udp_netif_ip_addr_changed+0x4e>
 8016d24:	687b      	ldr	r3, [r7, #4]
 8016d26:	681b      	ldr	r3, [r3, #0]
 8016d28:	2b00      	cmp	r3, #0
 8016d2a:	d01a      	beq.n	8016d62 <udp_netif_ip_addr_changed+0x4e>
 8016d2c:	683b      	ldr	r3, [r7, #0]
 8016d2e:	2b00      	cmp	r3, #0
 8016d30:	d017      	beq.n	8016d62 <udp_netif_ip_addr_changed+0x4e>
 8016d32:	683b      	ldr	r3, [r7, #0]
 8016d34:	681b      	ldr	r3, [r3, #0]
 8016d36:	2b00      	cmp	r3, #0
 8016d38:	d013      	beq.n	8016d62 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016d3a:	4b0d      	ldr	r3, [pc, #52]	; (8016d70 <udp_netif_ip_addr_changed+0x5c>)
 8016d3c:	681b      	ldr	r3, [r3, #0]
 8016d3e:	60fb      	str	r3, [r7, #12]
 8016d40:	e00c      	b.n	8016d5c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8016d42:	68fb      	ldr	r3, [r7, #12]
 8016d44:	681a      	ldr	r2, [r3, #0]
 8016d46:	687b      	ldr	r3, [r7, #4]
 8016d48:	681b      	ldr	r3, [r3, #0]
 8016d4a:	429a      	cmp	r2, r3
 8016d4c:	d103      	bne.n	8016d56 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8016d4e:	683b      	ldr	r3, [r7, #0]
 8016d50:	681a      	ldr	r2, [r3, #0]
 8016d52:	68fb      	ldr	r3, [r7, #12]
 8016d54:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016d56:	68fb      	ldr	r3, [r7, #12]
 8016d58:	68db      	ldr	r3, [r3, #12]
 8016d5a:	60fb      	str	r3, [r7, #12]
 8016d5c:	68fb      	ldr	r3, [r7, #12]
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	d1ef      	bne.n	8016d42 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8016d62:	bf00      	nop
 8016d64:	3714      	adds	r7, #20
 8016d66:	46bd      	mov	sp, r7
 8016d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d6c:	4770      	bx	lr
 8016d6e:	bf00      	nop
 8016d70:	20008330 	.word	0x20008330

08016d74 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8016d74:	b580      	push	{r7, lr}
 8016d76:	b082      	sub	sp, #8
 8016d78:	af00      	add	r7, sp, #0
 8016d7a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8016d7c:	4915      	ldr	r1, [pc, #84]	; (8016dd4 <etharp_free_entry+0x60>)
 8016d7e:	687a      	ldr	r2, [r7, #4]
 8016d80:	4613      	mov	r3, r2
 8016d82:	005b      	lsls	r3, r3, #1
 8016d84:	4413      	add	r3, r2
 8016d86:	00db      	lsls	r3, r3, #3
 8016d88:	440b      	add	r3, r1
 8016d8a:	681b      	ldr	r3, [r3, #0]
 8016d8c:	2b00      	cmp	r3, #0
 8016d8e:	d013      	beq.n	8016db8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8016d90:	4910      	ldr	r1, [pc, #64]	; (8016dd4 <etharp_free_entry+0x60>)
 8016d92:	687a      	ldr	r2, [r7, #4]
 8016d94:	4613      	mov	r3, r2
 8016d96:	005b      	lsls	r3, r3, #1
 8016d98:	4413      	add	r3, r2
 8016d9a:	00db      	lsls	r3, r3, #3
 8016d9c:	440b      	add	r3, r1
 8016d9e:	681b      	ldr	r3, [r3, #0]
 8016da0:	4618      	mov	r0, r3
 8016da2:	f7f8 fe23 	bl	800f9ec <pbuf_free>
    arp_table[i].q = NULL;
 8016da6:	490b      	ldr	r1, [pc, #44]	; (8016dd4 <etharp_free_entry+0x60>)
 8016da8:	687a      	ldr	r2, [r7, #4]
 8016daa:	4613      	mov	r3, r2
 8016dac:	005b      	lsls	r3, r3, #1
 8016dae:	4413      	add	r3, r2
 8016db0:	00db      	lsls	r3, r3, #3
 8016db2:	440b      	add	r3, r1
 8016db4:	2200      	movs	r2, #0
 8016db6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8016db8:	4906      	ldr	r1, [pc, #24]	; (8016dd4 <etharp_free_entry+0x60>)
 8016dba:	687a      	ldr	r2, [r7, #4]
 8016dbc:	4613      	mov	r3, r2
 8016dbe:	005b      	lsls	r3, r3, #1
 8016dc0:	4413      	add	r3, r2
 8016dc2:	00db      	lsls	r3, r3, #3
 8016dc4:	440b      	add	r3, r1
 8016dc6:	3314      	adds	r3, #20
 8016dc8:	2200      	movs	r2, #0
 8016dca:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8016dcc:	bf00      	nop
 8016dce:	3708      	adds	r7, #8
 8016dd0:	46bd      	mov	sp, r7
 8016dd2:	bd80      	pop	{r7, pc}
 8016dd4:	200014d0 	.word	0x200014d0

08016dd8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8016dd8:	b580      	push	{r7, lr}
 8016dda:	b082      	sub	sp, #8
 8016ddc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016dde:	2300      	movs	r3, #0
 8016de0:	607b      	str	r3, [r7, #4]
 8016de2:	e096      	b.n	8016f12 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8016de4:	494f      	ldr	r1, [pc, #316]	; (8016f24 <etharp_tmr+0x14c>)
 8016de6:	687a      	ldr	r2, [r7, #4]
 8016de8:	4613      	mov	r3, r2
 8016dea:	005b      	lsls	r3, r3, #1
 8016dec:	4413      	add	r3, r2
 8016dee:	00db      	lsls	r3, r3, #3
 8016df0:	440b      	add	r3, r1
 8016df2:	3314      	adds	r3, #20
 8016df4:	781b      	ldrb	r3, [r3, #0]
 8016df6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8016df8:	78fb      	ldrb	r3, [r7, #3]
 8016dfa:	2b00      	cmp	r3, #0
 8016dfc:	f000 8086 	beq.w	8016f0c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8016e00:	4948      	ldr	r1, [pc, #288]	; (8016f24 <etharp_tmr+0x14c>)
 8016e02:	687a      	ldr	r2, [r7, #4]
 8016e04:	4613      	mov	r3, r2
 8016e06:	005b      	lsls	r3, r3, #1
 8016e08:	4413      	add	r3, r2
 8016e0a:	00db      	lsls	r3, r3, #3
 8016e0c:	440b      	add	r3, r1
 8016e0e:	3312      	adds	r3, #18
 8016e10:	881b      	ldrh	r3, [r3, #0]
 8016e12:	3301      	adds	r3, #1
 8016e14:	b298      	uxth	r0, r3
 8016e16:	4943      	ldr	r1, [pc, #268]	; (8016f24 <etharp_tmr+0x14c>)
 8016e18:	687a      	ldr	r2, [r7, #4]
 8016e1a:	4613      	mov	r3, r2
 8016e1c:	005b      	lsls	r3, r3, #1
 8016e1e:	4413      	add	r3, r2
 8016e20:	00db      	lsls	r3, r3, #3
 8016e22:	440b      	add	r3, r1
 8016e24:	3312      	adds	r3, #18
 8016e26:	4602      	mov	r2, r0
 8016e28:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016e2a:	493e      	ldr	r1, [pc, #248]	; (8016f24 <etharp_tmr+0x14c>)
 8016e2c:	687a      	ldr	r2, [r7, #4]
 8016e2e:	4613      	mov	r3, r2
 8016e30:	005b      	lsls	r3, r3, #1
 8016e32:	4413      	add	r3, r2
 8016e34:	00db      	lsls	r3, r3, #3
 8016e36:	440b      	add	r3, r1
 8016e38:	3312      	adds	r3, #18
 8016e3a:	881b      	ldrh	r3, [r3, #0]
 8016e3c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8016e40:	d215      	bcs.n	8016e6e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016e42:	4938      	ldr	r1, [pc, #224]	; (8016f24 <etharp_tmr+0x14c>)
 8016e44:	687a      	ldr	r2, [r7, #4]
 8016e46:	4613      	mov	r3, r2
 8016e48:	005b      	lsls	r3, r3, #1
 8016e4a:	4413      	add	r3, r2
 8016e4c:	00db      	lsls	r3, r3, #3
 8016e4e:	440b      	add	r3, r1
 8016e50:	3314      	adds	r3, #20
 8016e52:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016e54:	2b01      	cmp	r3, #1
 8016e56:	d10e      	bne.n	8016e76 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8016e58:	4932      	ldr	r1, [pc, #200]	; (8016f24 <etharp_tmr+0x14c>)
 8016e5a:	687a      	ldr	r2, [r7, #4]
 8016e5c:	4613      	mov	r3, r2
 8016e5e:	005b      	lsls	r3, r3, #1
 8016e60:	4413      	add	r3, r2
 8016e62:	00db      	lsls	r3, r3, #3
 8016e64:	440b      	add	r3, r1
 8016e66:	3312      	adds	r3, #18
 8016e68:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016e6a:	2b04      	cmp	r3, #4
 8016e6c:	d903      	bls.n	8016e76 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8016e6e:	6878      	ldr	r0, [r7, #4]
 8016e70:	f7ff ff80 	bl	8016d74 <etharp_free_entry>
 8016e74:	e04a      	b.n	8016f0c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8016e76:	492b      	ldr	r1, [pc, #172]	; (8016f24 <etharp_tmr+0x14c>)
 8016e78:	687a      	ldr	r2, [r7, #4]
 8016e7a:	4613      	mov	r3, r2
 8016e7c:	005b      	lsls	r3, r3, #1
 8016e7e:	4413      	add	r3, r2
 8016e80:	00db      	lsls	r3, r3, #3
 8016e82:	440b      	add	r3, r1
 8016e84:	3314      	adds	r3, #20
 8016e86:	781b      	ldrb	r3, [r3, #0]
 8016e88:	2b03      	cmp	r3, #3
 8016e8a:	d10a      	bne.n	8016ea2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8016e8c:	4925      	ldr	r1, [pc, #148]	; (8016f24 <etharp_tmr+0x14c>)
 8016e8e:	687a      	ldr	r2, [r7, #4]
 8016e90:	4613      	mov	r3, r2
 8016e92:	005b      	lsls	r3, r3, #1
 8016e94:	4413      	add	r3, r2
 8016e96:	00db      	lsls	r3, r3, #3
 8016e98:	440b      	add	r3, r1
 8016e9a:	3314      	adds	r3, #20
 8016e9c:	2204      	movs	r2, #4
 8016e9e:	701a      	strb	r2, [r3, #0]
 8016ea0:	e034      	b.n	8016f0c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8016ea2:	4920      	ldr	r1, [pc, #128]	; (8016f24 <etharp_tmr+0x14c>)
 8016ea4:	687a      	ldr	r2, [r7, #4]
 8016ea6:	4613      	mov	r3, r2
 8016ea8:	005b      	lsls	r3, r3, #1
 8016eaa:	4413      	add	r3, r2
 8016eac:	00db      	lsls	r3, r3, #3
 8016eae:	440b      	add	r3, r1
 8016eb0:	3314      	adds	r3, #20
 8016eb2:	781b      	ldrb	r3, [r3, #0]
 8016eb4:	2b04      	cmp	r3, #4
 8016eb6:	d10a      	bne.n	8016ece <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8016eb8:	491a      	ldr	r1, [pc, #104]	; (8016f24 <etharp_tmr+0x14c>)
 8016eba:	687a      	ldr	r2, [r7, #4]
 8016ebc:	4613      	mov	r3, r2
 8016ebe:	005b      	lsls	r3, r3, #1
 8016ec0:	4413      	add	r3, r2
 8016ec2:	00db      	lsls	r3, r3, #3
 8016ec4:	440b      	add	r3, r1
 8016ec6:	3314      	adds	r3, #20
 8016ec8:	2202      	movs	r2, #2
 8016eca:	701a      	strb	r2, [r3, #0]
 8016ecc:	e01e      	b.n	8016f0c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016ece:	4915      	ldr	r1, [pc, #84]	; (8016f24 <etharp_tmr+0x14c>)
 8016ed0:	687a      	ldr	r2, [r7, #4]
 8016ed2:	4613      	mov	r3, r2
 8016ed4:	005b      	lsls	r3, r3, #1
 8016ed6:	4413      	add	r3, r2
 8016ed8:	00db      	lsls	r3, r3, #3
 8016eda:	440b      	add	r3, r1
 8016edc:	3314      	adds	r3, #20
 8016ede:	781b      	ldrb	r3, [r3, #0]
 8016ee0:	2b01      	cmp	r3, #1
 8016ee2:	d113      	bne.n	8016f0c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8016ee4:	490f      	ldr	r1, [pc, #60]	; (8016f24 <etharp_tmr+0x14c>)
 8016ee6:	687a      	ldr	r2, [r7, #4]
 8016ee8:	4613      	mov	r3, r2
 8016eea:	005b      	lsls	r3, r3, #1
 8016eec:	4413      	add	r3, r2
 8016eee:	00db      	lsls	r3, r3, #3
 8016ef0:	440b      	add	r3, r1
 8016ef2:	3308      	adds	r3, #8
 8016ef4:	6818      	ldr	r0, [r3, #0]
 8016ef6:	687a      	ldr	r2, [r7, #4]
 8016ef8:	4613      	mov	r3, r2
 8016efa:	005b      	lsls	r3, r3, #1
 8016efc:	4413      	add	r3, r2
 8016efe:	00db      	lsls	r3, r3, #3
 8016f00:	4a08      	ldr	r2, [pc, #32]	; (8016f24 <etharp_tmr+0x14c>)
 8016f02:	4413      	add	r3, r2
 8016f04:	3304      	adds	r3, #4
 8016f06:	4619      	mov	r1, r3
 8016f08:	f000 fe6e 	bl	8017be8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016f0c:	687b      	ldr	r3, [r7, #4]
 8016f0e:	3301      	adds	r3, #1
 8016f10:	607b      	str	r3, [r7, #4]
 8016f12:	687b      	ldr	r3, [r7, #4]
 8016f14:	2b09      	cmp	r3, #9
 8016f16:	f77f af65 	ble.w	8016de4 <etharp_tmr+0xc>
      }
    }
  }
}
 8016f1a:	bf00      	nop
 8016f1c:	bf00      	nop
 8016f1e:	3708      	adds	r7, #8
 8016f20:	46bd      	mov	sp, r7
 8016f22:	bd80      	pop	{r7, pc}
 8016f24:	200014d0 	.word	0x200014d0

08016f28 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8016f28:	b580      	push	{r7, lr}
 8016f2a:	b08a      	sub	sp, #40	; 0x28
 8016f2c:	af00      	add	r7, sp, #0
 8016f2e:	60f8      	str	r0, [r7, #12]
 8016f30:	460b      	mov	r3, r1
 8016f32:	607a      	str	r2, [r7, #4]
 8016f34:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8016f36:	230a      	movs	r3, #10
 8016f38:	84fb      	strh	r3, [r7, #38]	; 0x26
 8016f3a:	230a      	movs	r3, #10
 8016f3c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8016f3e:	230a      	movs	r3, #10
 8016f40:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8016f42:	2300      	movs	r3, #0
 8016f44:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8016f46:	230a      	movs	r3, #10
 8016f48:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8016f4a:	2300      	movs	r3, #0
 8016f4c:	83bb      	strh	r3, [r7, #28]
 8016f4e:	2300      	movs	r3, #0
 8016f50:	837b      	strh	r3, [r7, #26]
 8016f52:	2300      	movs	r3, #0
 8016f54:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016f56:	2300      	movs	r3, #0
 8016f58:	843b      	strh	r3, [r7, #32]
 8016f5a:	e0ae      	b.n	80170ba <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8016f5c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016f60:	49a6      	ldr	r1, [pc, #664]	; (80171fc <etharp_find_entry+0x2d4>)
 8016f62:	4613      	mov	r3, r2
 8016f64:	005b      	lsls	r3, r3, #1
 8016f66:	4413      	add	r3, r2
 8016f68:	00db      	lsls	r3, r3, #3
 8016f6a:	440b      	add	r3, r1
 8016f6c:	3314      	adds	r3, #20
 8016f6e:	781b      	ldrb	r3, [r3, #0]
 8016f70:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8016f72:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016f76:	2b0a      	cmp	r3, #10
 8016f78:	d105      	bne.n	8016f86 <etharp_find_entry+0x5e>
 8016f7a:	7dfb      	ldrb	r3, [r7, #23]
 8016f7c:	2b00      	cmp	r3, #0
 8016f7e:	d102      	bne.n	8016f86 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8016f80:	8c3b      	ldrh	r3, [r7, #32]
 8016f82:	847b      	strh	r3, [r7, #34]	; 0x22
 8016f84:	e095      	b.n	80170b2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8016f86:	7dfb      	ldrb	r3, [r7, #23]
 8016f88:	2b00      	cmp	r3, #0
 8016f8a:	f000 8092 	beq.w	80170b2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8016f8e:	7dfb      	ldrb	r3, [r7, #23]
 8016f90:	2b01      	cmp	r3, #1
 8016f92:	d009      	beq.n	8016fa8 <etharp_find_entry+0x80>
 8016f94:	7dfb      	ldrb	r3, [r7, #23]
 8016f96:	2b01      	cmp	r3, #1
 8016f98:	d806      	bhi.n	8016fa8 <etharp_find_entry+0x80>
 8016f9a:	4b99      	ldr	r3, [pc, #612]	; (8017200 <etharp_find_entry+0x2d8>)
 8016f9c:	f240 1223 	movw	r2, #291	; 0x123
 8016fa0:	4998      	ldr	r1, [pc, #608]	; (8017204 <etharp_find_entry+0x2dc>)
 8016fa2:	4899      	ldr	r0, [pc, #612]	; (8017208 <etharp_find_entry+0x2e0>)
 8016fa4:	f005 fda4 	bl	801caf0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8016fa8:	68fb      	ldr	r3, [r7, #12]
 8016faa:	2b00      	cmp	r3, #0
 8016fac:	d020      	beq.n	8016ff0 <etharp_find_entry+0xc8>
 8016fae:	68fb      	ldr	r3, [r7, #12]
 8016fb0:	6819      	ldr	r1, [r3, #0]
 8016fb2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016fb6:	4891      	ldr	r0, [pc, #580]	; (80171fc <etharp_find_entry+0x2d4>)
 8016fb8:	4613      	mov	r3, r2
 8016fba:	005b      	lsls	r3, r3, #1
 8016fbc:	4413      	add	r3, r2
 8016fbe:	00db      	lsls	r3, r3, #3
 8016fc0:	4403      	add	r3, r0
 8016fc2:	3304      	adds	r3, #4
 8016fc4:	681b      	ldr	r3, [r3, #0]
 8016fc6:	4299      	cmp	r1, r3
 8016fc8:	d112      	bne.n	8016ff0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8016fca:	687b      	ldr	r3, [r7, #4]
 8016fcc:	2b00      	cmp	r3, #0
 8016fce:	d00c      	beq.n	8016fea <etharp_find_entry+0xc2>
 8016fd0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016fd4:	4989      	ldr	r1, [pc, #548]	; (80171fc <etharp_find_entry+0x2d4>)
 8016fd6:	4613      	mov	r3, r2
 8016fd8:	005b      	lsls	r3, r3, #1
 8016fda:	4413      	add	r3, r2
 8016fdc:	00db      	lsls	r3, r3, #3
 8016fde:	440b      	add	r3, r1
 8016fe0:	3308      	adds	r3, #8
 8016fe2:	681b      	ldr	r3, [r3, #0]
 8016fe4:	687a      	ldr	r2, [r7, #4]
 8016fe6:	429a      	cmp	r2, r3
 8016fe8:	d102      	bne.n	8016ff0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8016fea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016fee:	e100      	b.n	80171f2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8016ff0:	7dfb      	ldrb	r3, [r7, #23]
 8016ff2:	2b01      	cmp	r3, #1
 8016ff4:	d140      	bne.n	8017078 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8016ff6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016ffa:	4980      	ldr	r1, [pc, #512]	; (80171fc <etharp_find_entry+0x2d4>)
 8016ffc:	4613      	mov	r3, r2
 8016ffe:	005b      	lsls	r3, r3, #1
 8017000:	4413      	add	r3, r2
 8017002:	00db      	lsls	r3, r3, #3
 8017004:	440b      	add	r3, r1
 8017006:	681b      	ldr	r3, [r3, #0]
 8017008:	2b00      	cmp	r3, #0
 801700a:	d01a      	beq.n	8017042 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801700c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017010:	497a      	ldr	r1, [pc, #488]	; (80171fc <etharp_find_entry+0x2d4>)
 8017012:	4613      	mov	r3, r2
 8017014:	005b      	lsls	r3, r3, #1
 8017016:	4413      	add	r3, r2
 8017018:	00db      	lsls	r3, r3, #3
 801701a:	440b      	add	r3, r1
 801701c:	3312      	adds	r3, #18
 801701e:	881b      	ldrh	r3, [r3, #0]
 8017020:	8bba      	ldrh	r2, [r7, #28]
 8017022:	429a      	cmp	r2, r3
 8017024:	d845      	bhi.n	80170b2 <etharp_find_entry+0x18a>
            old_queue = i;
 8017026:	8c3b      	ldrh	r3, [r7, #32]
 8017028:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801702a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801702e:	4973      	ldr	r1, [pc, #460]	; (80171fc <etharp_find_entry+0x2d4>)
 8017030:	4613      	mov	r3, r2
 8017032:	005b      	lsls	r3, r3, #1
 8017034:	4413      	add	r3, r2
 8017036:	00db      	lsls	r3, r3, #3
 8017038:	440b      	add	r3, r1
 801703a:	3312      	adds	r3, #18
 801703c:	881b      	ldrh	r3, [r3, #0]
 801703e:	83bb      	strh	r3, [r7, #28]
 8017040:	e037      	b.n	80170b2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8017042:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017046:	496d      	ldr	r1, [pc, #436]	; (80171fc <etharp_find_entry+0x2d4>)
 8017048:	4613      	mov	r3, r2
 801704a:	005b      	lsls	r3, r3, #1
 801704c:	4413      	add	r3, r2
 801704e:	00db      	lsls	r3, r3, #3
 8017050:	440b      	add	r3, r1
 8017052:	3312      	adds	r3, #18
 8017054:	881b      	ldrh	r3, [r3, #0]
 8017056:	8b7a      	ldrh	r2, [r7, #26]
 8017058:	429a      	cmp	r2, r3
 801705a:	d82a      	bhi.n	80170b2 <etharp_find_entry+0x18a>
            old_pending = i;
 801705c:	8c3b      	ldrh	r3, [r7, #32]
 801705e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8017060:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017064:	4965      	ldr	r1, [pc, #404]	; (80171fc <etharp_find_entry+0x2d4>)
 8017066:	4613      	mov	r3, r2
 8017068:	005b      	lsls	r3, r3, #1
 801706a:	4413      	add	r3, r2
 801706c:	00db      	lsls	r3, r3, #3
 801706e:	440b      	add	r3, r1
 8017070:	3312      	adds	r3, #18
 8017072:	881b      	ldrh	r3, [r3, #0]
 8017074:	837b      	strh	r3, [r7, #26]
 8017076:	e01c      	b.n	80170b2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8017078:	7dfb      	ldrb	r3, [r7, #23]
 801707a:	2b01      	cmp	r3, #1
 801707c:	d919      	bls.n	80170b2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801707e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017082:	495e      	ldr	r1, [pc, #376]	; (80171fc <etharp_find_entry+0x2d4>)
 8017084:	4613      	mov	r3, r2
 8017086:	005b      	lsls	r3, r3, #1
 8017088:	4413      	add	r3, r2
 801708a:	00db      	lsls	r3, r3, #3
 801708c:	440b      	add	r3, r1
 801708e:	3312      	adds	r3, #18
 8017090:	881b      	ldrh	r3, [r3, #0]
 8017092:	8b3a      	ldrh	r2, [r7, #24]
 8017094:	429a      	cmp	r2, r3
 8017096:	d80c      	bhi.n	80170b2 <etharp_find_entry+0x18a>
            old_stable = i;
 8017098:	8c3b      	ldrh	r3, [r7, #32]
 801709a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801709c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80170a0:	4956      	ldr	r1, [pc, #344]	; (80171fc <etharp_find_entry+0x2d4>)
 80170a2:	4613      	mov	r3, r2
 80170a4:	005b      	lsls	r3, r3, #1
 80170a6:	4413      	add	r3, r2
 80170a8:	00db      	lsls	r3, r3, #3
 80170aa:	440b      	add	r3, r1
 80170ac:	3312      	adds	r3, #18
 80170ae:	881b      	ldrh	r3, [r3, #0]
 80170b0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80170b2:	8c3b      	ldrh	r3, [r7, #32]
 80170b4:	3301      	adds	r3, #1
 80170b6:	b29b      	uxth	r3, r3
 80170b8:	843b      	strh	r3, [r7, #32]
 80170ba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80170be:	2b09      	cmp	r3, #9
 80170c0:	f77f af4c 	ble.w	8016f5c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80170c4:	7afb      	ldrb	r3, [r7, #11]
 80170c6:	f003 0302 	and.w	r3, r3, #2
 80170ca:	2b00      	cmp	r3, #0
 80170cc:	d108      	bne.n	80170e0 <etharp_find_entry+0x1b8>
 80170ce:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80170d2:	2b0a      	cmp	r3, #10
 80170d4:	d107      	bne.n	80170e6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80170d6:	7afb      	ldrb	r3, [r7, #11]
 80170d8:	f003 0301 	and.w	r3, r3, #1
 80170dc:	2b00      	cmp	r3, #0
 80170de:	d102      	bne.n	80170e6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80170e0:	f04f 33ff 	mov.w	r3, #4294967295
 80170e4:	e085      	b.n	80171f2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80170e6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80170ea:	2b09      	cmp	r3, #9
 80170ec:	dc02      	bgt.n	80170f4 <etharp_find_entry+0x1cc>
    i = empty;
 80170ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80170f0:	843b      	strh	r3, [r7, #32]
 80170f2:	e039      	b.n	8017168 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80170f4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80170f8:	2b09      	cmp	r3, #9
 80170fa:	dc14      	bgt.n	8017126 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80170fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80170fe:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8017100:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017104:	493d      	ldr	r1, [pc, #244]	; (80171fc <etharp_find_entry+0x2d4>)
 8017106:	4613      	mov	r3, r2
 8017108:	005b      	lsls	r3, r3, #1
 801710a:	4413      	add	r3, r2
 801710c:	00db      	lsls	r3, r3, #3
 801710e:	440b      	add	r3, r1
 8017110:	681b      	ldr	r3, [r3, #0]
 8017112:	2b00      	cmp	r3, #0
 8017114:	d018      	beq.n	8017148 <etharp_find_entry+0x220>
 8017116:	4b3a      	ldr	r3, [pc, #232]	; (8017200 <etharp_find_entry+0x2d8>)
 8017118:	f240 126d 	movw	r2, #365	; 0x16d
 801711c:	493b      	ldr	r1, [pc, #236]	; (801720c <etharp_find_entry+0x2e4>)
 801711e:	483a      	ldr	r0, [pc, #232]	; (8017208 <etharp_find_entry+0x2e0>)
 8017120:	f005 fce6 	bl	801caf0 <iprintf>
 8017124:	e010      	b.n	8017148 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8017126:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801712a:	2b09      	cmp	r3, #9
 801712c:	dc02      	bgt.n	8017134 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801712e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017130:	843b      	strh	r3, [r7, #32]
 8017132:	e009      	b.n	8017148 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8017134:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8017138:	2b09      	cmp	r3, #9
 801713a:	dc02      	bgt.n	8017142 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801713c:	8bfb      	ldrh	r3, [r7, #30]
 801713e:	843b      	strh	r3, [r7, #32]
 8017140:	e002      	b.n	8017148 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8017142:	f04f 33ff 	mov.w	r3, #4294967295
 8017146:	e054      	b.n	80171f2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8017148:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801714c:	2b09      	cmp	r3, #9
 801714e:	dd06      	ble.n	801715e <etharp_find_entry+0x236>
 8017150:	4b2b      	ldr	r3, [pc, #172]	; (8017200 <etharp_find_entry+0x2d8>)
 8017152:	f240 127f 	movw	r2, #383	; 0x17f
 8017156:	492e      	ldr	r1, [pc, #184]	; (8017210 <etharp_find_entry+0x2e8>)
 8017158:	482b      	ldr	r0, [pc, #172]	; (8017208 <etharp_find_entry+0x2e0>)
 801715a:	f005 fcc9 	bl	801caf0 <iprintf>
    etharp_free_entry(i);
 801715e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017162:	4618      	mov	r0, r3
 8017164:	f7ff fe06 	bl	8016d74 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8017168:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801716c:	2b09      	cmp	r3, #9
 801716e:	dd06      	ble.n	801717e <etharp_find_entry+0x256>
 8017170:	4b23      	ldr	r3, [pc, #140]	; (8017200 <etharp_find_entry+0x2d8>)
 8017172:	f240 1283 	movw	r2, #387	; 0x183
 8017176:	4926      	ldr	r1, [pc, #152]	; (8017210 <etharp_find_entry+0x2e8>)
 8017178:	4823      	ldr	r0, [pc, #140]	; (8017208 <etharp_find_entry+0x2e0>)
 801717a:	f005 fcb9 	bl	801caf0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801717e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017182:	491e      	ldr	r1, [pc, #120]	; (80171fc <etharp_find_entry+0x2d4>)
 8017184:	4613      	mov	r3, r2
 8017186:	005b      	lsls	r3, r3, #1
 8017188:	4413      	add	r3, r2
 801718a:	00db      	lsls	r3, r3, #3
 801718c:	440b      	add	r3, r1
 801718e:	3314      	adds	r3, #20
 8017190:	781b      	ldrb	r3, [r3, #0]
 8017192:	2b00      	cmp	r3, #0
 8017194:	d006      	beq.n	80171a4 <etharp_find_entry+0x27c>
 8017196:	4b1a      	ldr	r3, [pc, #104]	; (8017200 <etharp_find_entry+0x2d8>)
 8017198:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801719c:	491d      	ldr	r1, [pc, #116]	; (8017214 <etharp_find_entry+0x2ec>)
 801719e:	481a      	ldr	r0, [pc, #104]	; (8017208 <etharp_find_entry+0x2e0>)
 80171a0:	f005 fca6 	bl	801caf0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80171a4:	68fb      	ldr	r3, [r7, #12]
 80171a6:	2b00      	cmp	r3, #0
 80171a8:	d00b      	beq.n	80171c2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80171aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80171ae:	68fb      	ldr	r3, [r7, #12]
 80171b0:	6819      	ldr	r1, [r3, #0]
 80171b2:	4812      	ldr	r0, [pc, #72]	; (80171fc <etharp_find_entry+0x2d4>)
 80171b4:	4613      	mov	r3, r2
 80171b6:	005b      	lsls	r3, r3, #1
 80171b8:	4413      	add	r3, r2
 80171ba:	00db      	lsls	r3, r3, #3
 80171bc:	4403      	add	r3, r0
 80171be:	3304      	adds	r3, #4
 80171c0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80171c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80171c6:	490d      	ldr	r1, [pc, #52]	; (80171fc <etharp_find_entry+0x2d4>)
 80171c8:	4613      	mov	r3, r2
 80171ca:	005b      	lsls	r3, r3, #1
 80171cc:	4413      	add	r3, r2
 80171ce:	00db      	lsls	r3, r3, #3
 80171d0:	440b      	add	r3, r1
 80171d2:	3312      	adds	r3, #18
 80171d4:	2200      	movs	r2, #0
 80171d6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80171d8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80171dc:	4907      	ldr	r1, [pc, #28]	; (80171fc <etharp_find_entry+0x2d4>)
 80171de:	4613      	mov	r3, r2
 80171e0:	005b      	lsls	r3, r3, #1
 80171e2:	4413      	add	r3, r2
 80171e4:	00db      	lsls	r3, r3, #3
 80171e6:	440b      	add	r3, r1
 80171e8:	3308      	adds	r3, #8
 80171ea:	687a      	ldr	r2, [r7, #4]
 80171ec:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80171ee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80171f2:	4618      	mov	r0, r3
 80171f4:	3728      	adds	r7, #40	; 0x28
 80171f6:	46bd      	mov	sp, r7
 80171f8:	bd80      	pop	{r7, pc}
 80171fa:	bf00      	nop
 80171fc:	200014d0 	.word	0x200014d0
 8017200:	08021e20 	.word	0x08021e20
 8017204:	08021e58 	.word	0x08021e58
 8017208:	08021e98 	.word	0x08021e98
 801720c:	08021ec0 	.word	0x08021ec0
 8017210:	08021ed8 	.word	0x08021ed8
 8017214:	08021eec 	.word	0x08021eec

08017218 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8017218:	b580      	push	{r7, lr}
 801721a:	b088      	sub	sp, #32
 801721c:	af02      	add	r7, sp, #8
 801721e:	60f8      	str	r0, [r7, #12]
 8017220:	60b9      	str	r1, [r7, #8]
 8017222:	607a      	str	r2, [r7, #4]
 8017224:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8017226:	68fb      	ldr	r3, [r7, #12]
 8017228:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801722c:	2b06      	cmp	r3, #6
 801722e:	d006      	beq.n	801723e <etharp_update_arp_entry+0x26>
 8017230:	4b48      	ldr	r3, [pc, #288]	; (8017354 <etharp_update_arp_entry+0x13c>)
 8017232:	f240 12a9 	movw	r2, #425	; 0x1a9
 8017236:	4948      	ldr	r1, [pc, #288]	; (8017358 <etharp_update_arp_entry+0x140>)
 8017238:	4848      	ldr	r0, [pc, #288]	; (801735c <etharp_update_arp_entry+0x144>)
 801723a:	f005 fc59 	bl	801caf0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801723e:	68bb      	ldr	r3, [r7, #8]
 8017240:	2b00      	cmp	r3, #0
 8017242:	d012      	beq.n	801726a <etharp_update_arp_entry+0x52>
 8017244:	68bb      	ldr	r3, [r7, #8]
 8017246:	681b      	ldr	r3, [r3, #0]
 8017248:	2b00      	cmp	r3, #0
 801724a:	d00e      	beq.n	801726a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801724c:	68bb      	ldr	r3, [r7, #8]
 801724e:	681b      	ldr	r3, [r3, #0]
 8017250:	68f9      	ldr	r1, [r7, #12]
 8017252:	4618      	mov	r0, r3
 8017254:	f001 f8fe 	bl	8018454 <ip4_addr_isbroadcast_u32>
 8017258:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801725a:	2b00      	cmp	r3, #0
 801725c:	d105      	bne.n	801726a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801725e:	68bb      	ldr	r3, [r7, #8]
 8017260:	681b      	ldr	r3, [r3, #0]
 8017262:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8017266:	2be0      	cmp	r3, #224	; 0xe0
 8017268:	d102      	bne.n	8017270 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801726a:	f06f 030f 	mvn.w	r3, #15
 801726e:	e06c      	b.n	801734a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8017270:	78fb      	ldrb	r3, [r7, #3]
 8017272:	68fa      	ldr	r2, [r7, #12]
 8017274:	4619      	mov	r1, r3
 8017276:	68b8      	ldr	r0, [r7, #8]
 8017278:	f7ff fe56 	bl	8016f28 <etharp_find_entry>
 801727c:	4603      	mov	r3, r0
 801727e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8017280:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8017284:	2b00      	cmp	r3, #0
 8017286:	da02      	bge.n	801728e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8017288:	8afb      	ldrh	r3, [r7, #22]
 801728a:	b25b      	sxtb	r3, r3
 801728c:	e05d      	b.n	801734a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801728e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017292:	4933      	ldr	r1, [pc, #204]	; (8017360 <etharp_update_arp_entry+0x148>)
 8017294:	4613      	mov	r3, r2
 8017296:	005b      	lsls	r3, r3, #1
 8017298:	4413      	add	r3, r2
 801729a:	00db      	lsls	r3, r3, #3
 801729c:	440b      	add	r3, r1
 801729e:	3314      	adds	r3, #20
 80172a0:	2202      	movs	r2, #2
 80172a2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80172a4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80172a8:	492d      	ldr	r1, [pc, #180]	; (8017360 <etharp_update_arp_entry+0x148>)
 80172aa:	4613      	mov	r3, r2
 80172ac:	005b      	lsls	r3, r3, #1
 80172ae:	4413      	add	r3, r2
 80172b0:	00db      	lsls	r3, r3, #3
 80172b2:	440b      	add	r3, r1
 80172b4:	3308      	adds	r3, #8
 80172b6:	68fa      	ldr	r2, [r7, #12]
 80172b8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80172ba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80172be:	4613      	mov	r3, r2
 80172c0:	005b      	lsls	r3, r3, #1
 80172c2:	4413      	add	r3, r2
 80172c4:	00db      	lsls	r3, r3, #3
 80172c6:	3308      	adds	r3, #8
 80172c8:	4a25      	ldr	r2, [pc, #148]	; (8017360 <etharp_update_arp_entry+0x148>)
 80172ca:	4413      	add	r3, r2
 80172cc:	3304      	adds	r3, #4
 80172ce:	2206      	movs	r2, #6
 80172d0:	6879      	ldr	r1, [r7, #4]
 80172d2:	4618      	mov	r0, r3
 80172d4:	f004 fd6e 	bl	801bdb4 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80172d8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80172dc:	4920      	ldr	r1, [pc, #128]	; (8017360 <etharp_update_arp_entry+0x148>)
 80172de:	4613      	mov	r3, r2
 80172e0:	005b      	lsls	r3, r3, #1
 80172e2:	4413      	add	r3, r2
 80172e4:	00db      	lsls	r3, r3, #3
 80172e6:	440b      	add	r3, r1
 80172e8:	3312      	adds	r3, #18
 80172ea:	2200      	movs	r2, #0
 80172ec:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80172ee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80172f2:	491b      	ldr	r1, [pc, #108]	; (8017360 <etharp_update_arp_entry+0x148>)
 80172f4:	4613      	mov	r3, r2
 80172f6:	005b      	lsls	r3, r3, #1
 80172f8:	4413      	add	r3, r2
 80172fa:	00db      	lsls	r3, r3, #3
 80172fc:	440b      	add	r3, r1
 80172fe:	681b      	ldr	r3, [r3, #0]
 8017300:	2b00      	cmp	r3, #0
 8017302:	d021      	beq.n	8017348 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8017304:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017308:	4915      	ldr	r1, [pc, #84]	; (8017360 <etharp_update_arp_entry+0x148>)
 801730a:	4613      	mov	r3, r2
 801730c:	005b      	lsls	r3, r3, #1
 801730e:	4413      	add	r3, r2
 8017310:	00db      	lsls	r3, r3, #3
 8017312:	440b      	add	r3, r1
 8017314:	681b      	ldr	r3, [r3, #0]
 8017316:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8017318:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801731c:	4910      	ldr	r1, [pc, #64]	; (8017360 <etharp_update_arp_entry+0x148>)
 801731e:	4613      	mov	r3, r2
 8017320:	005b      	lsls	r3, r3, #1
 8017322:	4413      	add	r3, r2
 8017324:	00db      	lsls	r3, r3, #3
 8017326:	440b      	add	r3, r1
 8017328:	2200      	movs	r2, #0
 801732a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801732c:	68fb      	ldr	r3, [r7, #12]
 801732e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8017332:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017336:	9300      	str	r3, [sp, #0]
 8017338:	687b      	ldr	r3, [r7, #4]
 801733a:	6939      	ldr	r1, [r7, #16]
 801733c:	68f8      	ldr	r0, [r7, #12]
 801733e:	f002 f813 	bl	8019368 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8017342:	6938      	ldr	r0, [r7, #16]
 8017344:	f7f8 fb52 	bl	800f9ec <pbuf_free>
  }
  return ERR_OK;
 8017348:	2300      	movs	r3, #0
}
 801734a:	4618      	mov	r0, r3
 801734c:	3718      	adds	r7, #24
 801734e:	46bd      	mov	sp, r7
 8017350:	bd80      	pop	{r7, pc}
 8017352:	bf00      	nop
 8017354:	08021e20 	.word	0x08021e20
 8017358:	08021f18 	.word	0x08021f18
 801735c:	08021e98 	.word	0x08021e98
 8017360:	200014d0 	.word	0x200014d0

08017364 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8017364:	b580      	push	{r7, lr}
 8017366:	b084      	sub	sp, #16
 8017368:	af00      	add	r7, sp, #0
 801736a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801736c:	2300      	movs	r3, #0
 801736e:	60fb      	str	r3, [r7, #12]
 8017370:	e01e      	b.n	80173b0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8017372:	4913      	ldr	r1, [pc, #76]	; (80173c0 <etharp_cleanup_netif+0x5c>)
 8017374:	68fa      	ldr	r2, [r7, #12]
 8017376:	4613      	mov	r3, r2
 8017378:	005b      	lsls	r3, r3, #1
 801737a:	4413      	add	r3, r2
 801737c:	00db      	lsls	r3, r3, #3
 801737e:	440b      	add	r3, r1
 8017380:	3314      	adds	r3, #20
 8017382:	781b      	ldrb	r3, [r3, #0]
 8017384:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8017386:	7afb      	ldrb	r3, [r7, #11]
 8017388:	2b00      	cmp	r3, #0
 801738a:	d00e      	beq.n	80173aa <etharp_cleanup_netif+0x46>
 801738c:	490c      	ldr	r1, [pc, #48]	; (80173c0 <etharp_cleanup_netif+0x5c>)
 801738e:	68fa      	ldr	r2, [r7, #12]
 8017390:	4613      	mov	r3, r2
 8017392:	005b      	lsls	r3, r3, #1
 8017394:	4413      	add	r3, r2
 8017396:	00db      	lsls	r3, r3, #3
 8017398:	440b      	add	r3, r1
 801739a:	3308      	adds	r3, #8
 801739c:	681b      	ldr	r3, [r3, #0]
 801739e:	687a      	ldr	r2, [r7, #4]
 80173a0:	429a      	cmp	r2, r3
 80173a2:	d102      	bne.n	80173aa <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80173a4:	68f8      	ldr	r0, [r7, #12]
 80173a6:	f7ff fce5 	bl	8016d74 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80173aa:	68fb      	ldr	r3, [r7, #12]
 80173ac:	3301      	adds	r3, #1
 80173ae:	60fb      	str	r3, [r7, #12]
 80173b0:	68fb      	ldr	r3, [r7, #12]
 80173b2:	2b09      	cmp	r3, #9
 80173b4:	dddd      	ble.n	8017372 <etharp_cleanup_netif+0xe>
    }
  }
}
 80173b6:	bf00      	nop
 80173b8:	bf00      	nop
 80173ba:	3710      	adds	r7, #16
 80173bc:	46bd      	mov	sp, r7
 80173be:	bd80      	pop	{r7, pc}
 80173c0:	200014d0 	.word	0x200014d0

080173c4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80173c4:	b5b0      	push	{r4, r5, r7, lr}
 80173c6:	b08a      	sub	sp, #40	; 0x28
 80173c8:	af04      	add	r7, sp, #16
 80173ca:	6078      	str	r0, [r7, #4]
 80173cc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80173ce:	683b      	ldr	r3, [r7, #0]
 80173d0:	2b00      	cmp	r3, #0
 80173d2:	d107      	bne.n	80173e4 <etharp_input+0x20>
 80173d4:	4b3d      	ldr	r3, [pc, #244]	; (80174cc <etharp_input+0x108>)
 80173d6:	f240 228a 	movw	r2, #650	; 0x28a
 80173da:	493d      	ldr	r1, [pc, #244]	; (80174d0 <etharp_input+0x10c>)
 80173dc:	483d      	ldr	r0, [pc, #244]	; (80174d4 <etharp_input+0x110>)
 80173de:	f005 fb87 	bl	801caf0 <iprintf>
 80173e2:	e06f      	b.n	80174c4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80173e4:	687b      	ldr	r3, [r7, #4]
 80173e6:	685b      	ldr	r3, [r3, #4]
 80173e8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80173ea:	693b      	ldr	r3, [r7, #16]
 80173ec:	881b      	ldrh	r3, [r3, #0]
 80173ee:	b29b      	uxth	r3, r3
 80173f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80173f4:	d10c      	bne.n	8017410 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80173f6:	693b      	ldr	r3, [r7, #16]
 80173f8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80173fa:	2b06      	cmp	r3, #6
 80173fc:	d108      	bne.n	8017410 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80173fe:	693b      	ldr	r3, [r7, #16]
 8017400:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8017402:	2b04      	cmp	r3, #4
 8017404:	d104      	bne.n	8017410 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8017406:	693b      	ldr	r3, [r7, #16]
 8017408:	885b      	ldrh	r3, [r3, #2]
 801740a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801740c:	2b08      	cmp	r3, #8
 801740e:	d003      	beq.n	8017418 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8017410:	6878      	ldr	r0, [r7, #4]
 8017412:	f7f8 faeb 	bl	800f9ec <pbuf_free>
    return;
 8017416:	e055      	b.n	80174c4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8017418:	693b      	ldr	r3, [r7, #16]
 801741a:	330e      	adds	r3, #14
 801741c:	681b      	ldr	r3, [r3, #0]
 801741e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8017420:	693b      	ldr	r3, [r7, #16]
 8017422:	3318      	adds	r3, #24
 8017424:	681b      	ldr	r3, [r3, #0]
 8017426:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017428:	683b      	ldr	r3, [r7, #0]
 801742a:	3304      	adds	r3, #4
 801742c:	681b      	ldr	r3, [r3, #0]
 801742e:	2b00      	cmp	r3, #0
 8017430:	d102      	bne.n	8017438 <etharp_input+0x74>
    for_us = 0;
 8017432:	2300      	movs	r3, #0
 8017434:	75fb      	strb	r3, [r7, #23]
 8017436:	e009      	b.n	801744c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8017438:	68ba      	ldr	r2, [r7, #8]
 801743a:	683b      	ldr	r3, [r7, #0]
 801743c:	3304      	adds	r3, #4
 801743e:	681b      	ldr	r3, [r3, #0]
 8017440:	429a      	cmp	r2, r3
 8017442:	bf0c      	ite	eq
 8017444:	2301      	moveq	r3, #1
 8017446:	2300      	movne	r3, #0
 8017448:	b2db      	uxtb	r3, r3
 801744a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801744c:	693b      	ldr	r3, [r7, #16]
 801744e:	f103 0208 	add.w	r2, r3, #8
 8017452:	7dfb      	ldrb	r3, [r7, #23]
 8017454:	2b00      	cmp	r3, #0
 8017456:	d001      	beq.n	801745c <etharp_input+0x98>
 8017458:	2301      	movs	r3, #1
 801745a:	e000      	b.n	801745e <etharp_input+0x9a>
 801745c:	2302      	movs	r3, #2
 801745e:	f107 010c 	add.w	r1, r7, #12
 8017462:	6838      	ldr	r0, [r7, #0]
 8017464:	f7ff fed8 	bl	8017218 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8017468:	693b      	ldr	r3, [r7, #16]
 801746a:	88db      	ldrh	r3, [r3, #6]
 801746c:	b29b      	uxth	r3, r3
 801746e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017472:	d003      	beq.n	801747c <etharp_input+0xb8>
 8017474:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017478:	d01e      	beq.n	80174b8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801747a:	e020      	b.n	80174be <etharp_input+0xfa>
      if (for_us) {
 801747c:	7dfb      	ldrb	r3, [r7, #23]
 801747e:	2b00      	cmp	r3, #0
 8017480:	d01c      	beq.n	80174bc <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8017482:	683b      	ldr	r3, [r7, #0]
 8017484:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8017488:	693b      	ldr	r3, [r7, #16]
 801748a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801748e:	683b      	ldr	r3, [r7, #0]
 8017490:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8017494:	683b      	ldr	r3, [r7, #0]
 8017496:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8017498:	693a      	ldr	r2, [r7, #16]
 801749a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801749c:	2102      	movs	r1, #2
 801749e:	9103      	str	r1, [sp, #12]
 80174a0:	f107 010c 	add.w	r1, r7, #12
 80174a4:	9102      	str	r1, [sp, #8]
 80174a6:	9201      	str	r2, [sp, #4]
 80174a8:	9300      	str	r3, [sp, #0]
 80174aa:	462b      	mov	r3, r5
 80174ac:	4622      	mov	r2, r4
 80174ae:	4601      	mov	r1, r0
 80174b0:	6838      	ldr	r0, [r7, #0]
 80174b2:	f000 faeb 	bl	8017a8c <etharp_raw>
      break;
 80174b6:	e001      	b.n	80174bc <etharp_input+0xf8>
      break;
 80174b8:	bf00      	nop
 80174ba:	e000      	b.n	80174be <etharp_input+0xfa>
      break;
 80174bc:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80174be:	6878      	ldr	r0, [r7, #4]
 80174c0:	f7f8 fa94 	bl	800f9ec <pbuf_free>
}
 80174c4:	3718      	adds	r7, #24
 80174c6:	46bd      	mov	sp, r7
 80174c8:	bdb0      	pop	{r4, r5, r7, pc}
 80174ca:	bf00      	nop
 80174cc:	08021e20 	.word	0x08021e20
 80174d0:	08021f70 	.word	0x08021f70
 80174d4:	08021e98 	.word	0x08021e98

080174d8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80174d8:	b580      	push	{r7, lr}
 80174da:	b086      	sub	sp, #24
 80174dc:	af02      	add	r7, sp, #8
 80174de:	60f8      	str	r0, [r7, #12]
 80174e0:	60b9      	str	r1, [r7, #8]
 80174e2:	4613      	mov	r3, r2
 80174e4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80174e6:	79fa      	ldrb	r2, [r7, #7]
 80174e8:	4944      	ldr	r1, [pc, #272]	; (80175fc <etharp_output_to_arp_index+0x124>)
 80174ea:	4613      	mov	r3, r2
 80174ec:	005b      	lsls	r3, r3, #1
 80174ee:	4413      	add	r3, r2
 80174f0:	00db      	lsls	r3, r3, #3
 80174f2:	440b      	add	r3, r1
 80174f4:	3314      	adds	r3, #20
 80174f6:	781b      	ldrb	r3, [r3, #0]
 80174f8:	2b01      	cmp	r3, #1
 80174fa:	d806      	bhi.n	801750a <etharp_output_to_arp_index+0x32>
 80174fc:	4b40      	ldr	r3, [pc, #256]	; (8017600 <etharp_output_to_arp_index+0x128>)
 80174fe:	f240 22ee 	movw	r2, #750	; 0x2ee
 8017502:	4940      	ldr	r1, [pc, #256]	; (8017604 <etharp_output_to_arp_index+0x12c>)
 8017504:	4840      	ldr	r0, [pc, #256]	; (8017608 <etharp_output_to_arp_index+0x130>)
 8017506:	f005 faf3 	bl	801caf0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801750a:	79fa      	ldrb	r2, [r7, #7]
 801750c:	493b      	ldr	r1, [pc, #236]	; (80175fc <etharp_output_to_arp_index+0x124>)
 801750e:	4613      	mov	r3, r2
 8017510:	005b      	lsls	r3, r3, #1
 8017512:	4413      	add	r3, r2
 8017514:	00db      	lsls	r3, r3, #3
 8017516:	440b      	add	r3, r1
 8017518:	3314      	adds	r3, #20
 801751a:	781b      	ldrb	r3, [r3, #0]
 801751c:	2b02      	cmp	r3, #2
 801751e:	d153      	bne.n	80175c8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8017520:	79fa      	ldrb	r2, [r7, #7]
 8017522:	4936      	ldr	r1, [pc, #216]	; (80175fc <etharp_output_to_arp_index+0x124>)
 8017524:	4613      	mov	r3, r2
 8017526:	005b      	lsls	r3, r3, #1
 8017528:	4413      	add	r3, r2
 801752a:	00db      	lsls	r3, r3, #3
 801752c:	440b      	add	r3, r1
 801752e:	3312      	adds	r3, #18
 8017530:	881b      	ldrh	r3, [r3, #0]
 8017532:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8017536:	d919      	bls.n	801756c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8017538:	79fa      	ldrb	r2, [r7, #7]
 801753a:	4613      	mov	r3, r2
 801753c:	005b      	lsls	r3, r3, #1
 801753e:	4413      	add	r3, r2
 8017540:	00db      	lsls	r3, r3, #3
 8017542:	4a2e      	ldr	r2, [pc, #184]	; (80175fc <etharp_output_to_arp_index+0x124>)
 8017544:	4413      	add	r3, r2
 8017546:	3304      	adds	r3, #4
 8017548:	4619      	mov	r1, r3
 801754a:	68f8      	ldr	r0, [r7, #12]
 801754c:	f000 fb4c 	bl	8017be8 <etharp_request>
 8017550:	4603      	mov	r3, r0
 8017552:	2b00      	cmp	r3, #0
 8017554:	d138      	bne.n	80175c8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8017556:	79fa      	ldrb	r2, [r7, #7]
 8017558:	4928      	ldr	r1, [pc, #160]	; (80175fc <etharp_output_to_arp_index+0x124>)
 801755a:	4613      	mov	r3, r2
 801755c:	005b      	lsls	r3, r3, #1
 801755e:	4413      	add	r3, r2
 8017560:	00db      	lsls	r3, r3, #3
 8017562:	440b      	add	r3, r1
 8017564:	3314      	adds	r3, #20
 8017566:	2203      	movs	r2, #3
 8017568:	701a      	strb	r2, [r3, #0]
 801756a:	e02d      	b.n	80175c8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801756c:	79fa      	ldrb	r2, [r7, #7]
 801756e:	4923      	ldr	r1, [pc, #140]	; (80175fc <etharp_output_to_arp_index+0x124>)
 8017570:	4613      	mov	r3, r2
 8017572:	005b      	lsls	r3, r3, #1
 8017574:	4413      	add	r3, r2
 8017576:	00db      	lsls	r3, r3, #3
 8017578:	440b      	add	r3, r1
 801757a:	3312      	adds	r3, #18
 801757c:	881b      	ldrh	r3, [r3, #0]
 801757e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8017582:	d321      	bcc.n	80175c8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8017584:	79fa      	ldrb	r2, [r7, #7]
 8017586:	4613      	mov	r3, r2
 8017588:	005b      	lsls	r3, r3, #1
 801758a:	4413      	add	r3, r2
 801758c:	00db      	lsls	r3, r3, #3
 801758e:	4a1b      	ldr	r2, [pc, #108]	; (80175fc <etharp_output_to_arp_index+0x124>)
 8017590:	4413      	add	r3, r2
 8017592:	1d19      	adds	r1, r3, #4
 8017594:	79fa      	ldrb	r2, [r7, #7]
 8017596:	4613      	mov	r3, r2
 8017598:	005b      	lsls	r3, r3, #1
 801759a:	4413      	add	r3, r2
 801759c:	00db      	lsls	r3, r3, #3
 801759e:	3308      	adds	r3, #8
 80175a0:	4a16      	ldr	r2, [pc, #88]	; (80175fc <etharp_output_to_arp_index+0x124>)
 80175a2:	4413      	add	r3, r2
 80175a4:	3304      	adds	r3, #4
 80175a6:	461a      	mov	r2, r3
 80175a8:	68f8      	ldr	r0, [r7, #12]
 80175aa:	f000 fafb 	bl	8017ba4 <etharp_request_dst>
 80175ae:	4603      	mov	r3, r0
 80175b0:	2b00      	cmp	r3, #0
 80175b2:	d109      	bne.n	80175c8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80175b4:	79fa      	ldrb	r2, [r7, #7]
 80175b6:	4911      	ldr	r1, [pc, #68]	; (80175fc <etharp_output_to_arp_index+0x124>)
 80175b8:	4613      	mov	r3, r2
 80175ba:	005b      	lsls	r3, r3, #1
 80175bc:	4413      	add	r3, r2
 80175be:	00db      	lsls	r3, r3, #3
 80175c0:	440b      	add	r3, r1
 80175c2:	3314      	adds	r3, #20
 80175c4:	2203      	movs	r2, #3
 80175c6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80175c8:	68fb      	ldr	r3, [r7, #12]
 80175ca:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80175ce:	79fa      	ldrb	r2, [r7, #7]
 80175d0:	4613      	mov	r3, r2
 80175d2:	005b      	lsls	r3, r3, #1
 80175d4:	4413      	add	r3, r2
 80175d6:	00db      	lsls	r3, r3, #3
 80175d8:	3308      	adds	r3, #8
 80175da:	4a08      	ldr	r2, [pc, #32]	; (80175fc <etharp_output_to_arp_index+0x124>)
 80175dc:	4413      	add	r3, r2
 80175de:	3304      	adds	r3, #4
 80175e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80175e4:	9200      	str	r2, [sp, #0]
 80175e6:	460a      	mov	r2, r1
 80175e8:	68b9      	ldr	r1, [r7, #8]
 80175ea:	68f8      	ldr	r0, [r7, #12]
 80175ec:	f001 febc 	bl	8019368 <ethernet_output>
 80175f0:	4603      	mov	r3, r0
}
 80175f2:	4618      	mov	r0, r3
 80175f4:	3710      	adds	r7, #16
 80175f6:	46bd      	mov	sp, r7
 80175f8:	bd80      	pop	{r7, pc}
 80175fa:	bf00      	nop
 80175fc:	200014d0 	.word	0x200014d0
 8017600:	08021e20 	.word	0x08021e20
 8017604:	08021f90 	.word	0x08021f90
 8017608:	08021e98 	.word	0x08021e98

0801760c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801760c:	b580      	push	{r7, lr}
 801760e:	b08a      	sub	sp, #40	; 0x28
 8017610:	af02      	add	r7, sp, #8
 8017612:	60f8      	str	r0, [r7, #12]
 8017614:	60b9      	str	r1, [r7, #8]
 8017616:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8017618:	687b      	ldr	r3, [r7, #4]
 801761a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801761c:	68fb      	ldr	r3, [r7, #12]
 801761e:	2b00      	cmp	r3, #0
 8017620:	d106      	bne.n	8017630 <etharp_output+0x24>
 8017622:	4b73      	ldr	r3, [pc, #460]	; (80177f0 <etharp_output+0x1e4>)
 8017624:	f240 321e 	movw	r2, #798	; 0x31e
 8017628:	4972      	ldr	r1, [pc, #456]	; (80177f4 <etharp_output+0x1e8>)
 801762a:	4873      	ldr	r0, [pc, #460]	; (80177f8 <etharp_output+0x1ec>)
 801762c:	f005 fa60 	bl	801caf0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8017630:	68bb      	ldr	r3, [r7, #8]
 8017632:	2b00      	cmp	r3, #0
 8017634:	d106      	bne.n	8017644 <etharp_output+0x38>
 8017636:	4b6e      	ldr	r3, [pc, #440]	; (80177f0 <etharp_output+0x1e4>)
 8017638:	f240 321f 	movw	r2, #799	; 0x31f
 801763c:	496f      	ldr	r1, [pc, #444]	; (80177fc <etharp_output+0x1f0>)
 801763e:	486e      	ldr	r0, [pc, #440]	; (80177f8 <etharp_output+0x1ec>)
 8017640:	f005 fa56 	bl	801caf0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8017644:	687b      	ldr	r3, [r7, #4]
 8017646:	2b00      	cmp	r3, #0
 8017648:	d106      	bne.n	8017658 <etharp_output+0x4c>
 801764a:	4b69      	ldr	r3, [pc, #420]	; (80177f0 <etharp_output+0x1e4>)
 801764c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8017650:	496b      	ldr	r1, [pc, #428]	; (8017800 <etharp_output+0x1f4>)
 8017652:	4869      	ldr	r0, [pc, #420]	; (80177f8 <etharp_output+0x1ec>)
 8017654:	f005 fa4c 	bl	801caf0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8017658:	687b      	ldr	r3, [r7, #4]
 801765a:	681b      	ldr	r3, [r3, #0]
 801765c:	68f9      	ldr	r1, [r7, #12]
 801765e:	4618      	mov	r0, r3
 8017660:	f000 fef8 	bl	8018454 <ip4_addr_isbroadcast_u32>
 8017664:	4603      	mov	r3, r0
 8017666:	2b00      	cmp	r3, #0
 8017668:	d002      	beq.n	8017670 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801766a:	4b66      	ldr	r3, [pc, #408]	; (8017804 <etharp_output+0x1f8>)
 801766c:	61fb      	str	r3, [r7, #28]
 801766e:	e0af      	b.n	80177d0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8017670:	687b      	ldr	r3, [r7, #4]
 8017672:	681b      	ldr	r3, [r3, #0]
 8017674:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017678:	2be0      	cmp	r3, #224	; 0xe0
 801767a:	d118      	bne.n	80176ae <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801767c:	2301      	movs	r3, #1
 801767e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8017680:	2300      	movs	r3, #0
 8017682:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8017684:	235e      	movs	r3, #94	; 0x5e
 8017686:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8017688:	687b      	ldr	r3, [r7, #4]
 801768a:	3301      	adds	r3, #1
 801768c:	781b      	ldrb	r3, [r3, #0]
 801768e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017692:	b2db      	uxtb	r3, r3
 8017694:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8017696:	687b      	ldr	r3, [r7, #4]
 8017698:	3302      	adds	r3, #2
 801769a:	781b      	ldrb	r3, [r3, #0]
 801769c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801769e:	687b      	ldr	r3, [r7, #4]
 80176a0:	3303      	adds	r3, #3
 80176a2:	781b      	ldrb	r3, [r3, #0]
 80176a4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80176a6:	f107 0310 	add.w	r3, r7, #16
 80176aa:	61fb      	str	r3, [r7, #28]
 80176ac:	e090      	b.n	80177d0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80176ae:	687b      	ldr	r3, [r7, #4]
 80176b0:	681a      	ldr	r2, [r3, #0]
 80176b2:	68fb      	ldr	r3, [r7, #12]
 80176b4:	3304      	adds	r3, #4
 80176b6:	681b      	ldr	r3, [r3, #0]
 80176b8:	405a      	eors	r2, r3
 80176ba:	68fb      	ldr	r3, [r7, #12]
 80176bc:	3308      	adds	r3, #8
 80176be:	681b      	ldr	r3, [r3, #0]
 80176c0:	4013      	ands	r3, r2
 80176c2:	2b00      	cmp	r3, #0
 80176c4:	d012      	beq.n	80176ec <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80176c6:	687b      	ldr	r3, [r7, #4]
 80176c8:	681b      	ldr	r3, [r3, #0]
 80176ca:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80176cc:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80176d0:	4293      	cmp	r3, r2
 80176d2:	d00b      	beq.n	80176ec <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80176d4:	68fb      	ldr	r3, [r7, #12]
 80176d6:	330c      	adds	r3, #12
 80176d8:	681b      	ldr	r3, [r3, #0]
 80176da:	2b00      	cmp	r3, #0
 80176dc:	d003      	beq.n	80176e6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80176de:	68fb      	ldr	r3, [r7, #12]
 80176e0:	330c      	adds	r3, #12
 80176e2:	61bb      	str	r3, [r7, #24]
 80176e4:	e002      	b.n	80176ec <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80176e6:	f06f 0303 	mvn.w	r3, #3
 80176ea:	e07d      	b.n	80177e8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80176ec:	4b46      	ldr	r3, [pc, #280]	; (8017808 <etharp_output+0x1fc>)
 80176ee:	781b      	ldrb	r3, [r3, #0]
 80176f0:	4619      	mov	r1, r3
 80176f2:	4a46      	ldr	r2, [pc, #280]	; (801780c <etharp_output+0x200>)
 80176f4:	460b      	mov	r3, r1
 80176f6:	005b      	lsls	r3, r3, #1
 80176f8:	440b      	add	r3, r1
 80176fa:	00db      	lsls	r3, r3, #3
 80176fc:	4413      	add	r3, r2
 80176fe:	3314      	adds	r3, #20
 8017700:	781b      	ldrb	r3, [r3, #0]
 8017702:	2b01      	cmp	r3, #1
 8017704:	d925      	bls.n	8017752 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8017706:	4b40      	ldr	r3, [pc, #256]	; (8017808 <etharp_output+0x1fc>)
 8017708:	781b      	ldrb	r3, [r3, #0]
 801770a:	4619      	mov	r1, r3
 801770c:	4a3f      	ldr	r2, [pc, #252]	; (801780c <etharp_output+0x200>)
 801770e:	460b      	mov	r3, r1
 8017710:	005b      	lsls	r3, r3, #1
 8017712:	440b      	add	r3, r1
 8017714:	00db      	lsls	r3, r3, #3
 8017716:	4413      	add	r3, r2
 8017718:	3308      	adds	r3, #8
 801771a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801771c:	68fa      	ldr	r2, [r7, #12]
 801771e:	429a      	cmp	r2, r3
 8017720:	d117      	bne.n	8017752 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8017722:	69bb      	ldr	r3, [r7, #24]
 8017724:	681a      	ldr	r2, [r3, #0]
 8017726:	4b38      	ldr	r3, [pc, #224]	; (8017808 <etharp_output+0x1fc>)
 8017728:	781b      	ldrb	r3, [r3, #0]
 801772a:	4618      	mov	r0, r3
 801772c:	4937      	ldr	r1, [pc, #220]	; (801780c <etharp_output+0x200>)
 801772e:	4603      	mov	r3, r0
 8017730:	005b      	lsls	r3, r3, #1
 8017732:	4403      	add	r3, r0
 8017734:	00db      	lsls	r3, r3, #3
 8017736:	440b      	add	r3, r1
 8017738:	3304      	adds	r3, #4
 801773a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801773c:	429a      	cmp	r2, r3
 801773e:	d108      	bne.n	8017752 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8017740:	4b31      	ldr	r3, [pc, #196]	; (8017808 <etharp_output+0x1fc>)
 8017742:	781b      	ldrb	r3, [r3, #0]
 8017744:	461a      	mov	r2, r3
 8017746:	68b9      	ldr	r1, [r7, #8]
 8017748:	68f8      	ldr	r0, [r7, #12]
 801774a:	f7ff fec5 	bl	80174d8 <etharp_output_to_arp_index>
 801774e:	4603      	mov	r3, r0
 8017750:	e04a      	b.n	80177e8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8017752:	2300      	movs	r3, #0
 8017754:	75fb      	strb	r3, [r7, #23]
 8017756:	e031      	b.n	80177bc <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017758:	7dfa      	ldrb	r2, [r7, #23]
 801775a:	492c      	ldr	r1, [pc, #176]	; (801780c <etharp_output+0x200>)
 801775c:	4613      	mov	r3, r2
 801775e:	005b      	lsls	r3, r3, #1
 8017760:	4413      	add	r3, r2
 8017762:	00db      	lsls	r3, r3, #3
 8017764:	440b      	add	r3, r1
 8017766:	3314      	adds	r3, #20
 8017768:	781b      	ldrb	r3, [r3, #0]
 801776a:	2b01      	cmp	r3, #1
 801776c:	d923      	bls.n	80177b6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801776e:	7dfa      	ldrb	r2, [r7, #23]
 8017770:	4926      	ldr	r1, [pc, #152]	; (801780c <etharp_output+0x200>)
 8017772:	4613      	mov	r3, r2
 8017774:	005b      	lsls	r3, r3, #1
 8017776:	4413      	add	r3, r2
 8017778:	00db      	lsls	r3, r3, #3
 801777a:	440b      	add	r3, r1
 801777c:	3308      	adds	r3, #8
 801777e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017780:	68fa      	ldr	r2, [r7, #12]
 8017782:	429a      	cmp	r2, r3
 8017784:	d117      	bne.n	80177b6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8017786:	69bb      	ldr	r3, [r7, #24]
 8017788:	6819      	ldr	r1, [r3, #0]
 801778a:	7dfa      	ldrb	r2, [r7, #23]
 801778c:	481f      	ldr	r0, [pc, #124]	; (801780c <etharp_output+0x200>)
 801778e:	4613      	mov	r3, r2
 8017790:	005b      	lsls	r3, r3, #1
 8017792:	4413      	add	r3, r2
 8017794:	00db      	lsls	r3, r3, #3
 8017796:	4403      	add	r3, r0
 8017798:	3304      	adds	r3, #4
 801779a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801779c:	4299      	cmp	r1, r3
 801779e:	d10a      	bne.n	80177b6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80177a0:	4a19      	ldr	r2, [pc, #100]	; (8017808 <etharp_output+0x1fc>)
 80177a2:	7dfb      	ldrb	r3, [r7, #23]
 80177a4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80177a6:	7dfb      	ldrb	r3, [r7, #23]
 80177a8:	461a      	mov	r2, r3
 80177aa:	68b9      	ldr	r1, [r7, #8]
 80177ac:	68f8      	ldr	r0, [r7, #12]
 80177ae:	f7ff fe93 	bl	80174d8 <etharp_output_to_arp_index>
 80177b2:	4603      	mov	r3, r0
 80177b4:	e018      	b.n	80177e8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80177b6:	7dfb      	ldrb	r3, [r7, #23]
 80177b8:	3301      	adds	r3, #1
 80177ba:	75fb      	strb	r3, [r7, #23]
 80177bc:	7dfb      	ldrb	r3, [r7, #23]
 80177be:	2b09      	cmp	r3, #9
 80177c0:	d9ca      	bls.n	8017758 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80177c2:	68ba      	ldr	r2, [r7, #8]
 80177c4:	69b9      	ldr	r1, [r7, #24]
 80177c6:	68f8      	ldr	r0, [r7, #12]
 80177c8:	f000 f822 	bl	8017810 <etharp_query>
 80177cc:	4603      	mov	r3, r0
 80177ce:	e00b      	b.n	80177e8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80177d0:	68fb      	ldr	r3, [r7, #12]
 80177d2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80177d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80177da:	9300      	str	r3, [sp, #0]
 80177dc:	69fb      	ldr	r3, [r7, #28]
 80177de:	68b9      	ldr	r1, [r7, #8]
 80177e0:	68f8      	ldr	r0, [r7, #12]
 80177e2:	f001 fdc1 	bl	8019368 <ethernet_output>
 80177e6:	4603      	mov	r3, r0
}
 80177e8:	4618      	mov	r0, r3
 80177ea:	3720      	adds	r7, #32
 80177ec:	46bd      	mov	sp, r7
 80177ee:	bd80      	pop	{r7, pc}
 80177f0:	08021e20 	.word	0x08021e20
 80177f4:	08021f70 	.word	0x08021f70
 80177f8:	08021e98 	.word	0x08021e98
 80177fc:	08021fc0 	.word	0x08021fc0
 8017800:	08021f60 	.word	0x08021f60
 8017804:	0802289c 	.word	0x0802289c
 8017808:	200015c0 	.word	0x200015c0
 801780c:	200014d0 	.word	0x200014d0

08017810 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8017810:	b580      	push	{r7, lr}
 8017812:	b08c      	sub	sp, #48	; 0x30
 8017814:	af02      	add	r7, sp, #8
 8017816:	60f8      	str	r0, [r7, #12]
 8017818:	60b9      	str	r1, [r7, #8]
 801781a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801781c:	68fb      	ldr	r3, [r7, #12]
 801781e:	3326      	adds	r3, #38	; 0x26
 8017820:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8017822:	23ff      	movs	r3, #255	; 0xff
 8017824:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8017828:	2300      	movs	r3, #0
 801782a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801782c:	68bb      	ldr	r3, [r7, #8]
 801782e:	681b      	ldr	r3, [r3, #0]
 8017830:	68f9      	ldr	r1, [r7, #12]
 8017832:	4618      	mov	r0, r3
 8017834:	f000 fe0e 	bl	8018454 <ip4_addr_isbroadcast_u32>
 8017838:	4603      	mov	r3, r0
 801783a:	2b00      	cmp	r3, #0
 801783c:	d10c      	bne.n	8017858 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801783e:	68bb      	ldr	r3, [r7, #8]
 8017840:	681b      	ldr	r3, [r3, #0]
 8017842:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8017846:	2be0      	cmp	r3, #224	; 0xe0
 8017848:	d006      	beq.n	8017858 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801784a:	68bb      	ldr	r3, [r7, #8]
 801784c:	2b00      	cmp	r3, #0
 801784e:	d003      	beq.n	8017858 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8017850:	68bb      	ldr	r3, [r7, #8]
 8017852:	681b      	ldr	r3, [r3, #0]
 8017854:	2b00      	cmp	r3, #0
 8017856:	d102      	bne.n	801785e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8017858:	f06f 030f 	mvn.w	r3, #15
 801785c:	e101      	b.n	8017a62 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801785e:	68fa      	ldr	r2, [r7, #12]
 8017860:	2101      	movs	r1, #1
 8017862:	68b8      	ldr	r0, [r7, #8]
 8017864:	f7ff fb60 	bl	8016f28 <etharp_find_entry>
 8017868:	4603      	mov	r3, r0
 801786a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801786c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017870:	2b00      	cmp	r3, #0
 8017872:	da02      	bge.n	801787a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8017874:	8a7b      	ldrh	r3, [r7, #18]
 8017876:	b25b      	sxtb	r3, r3
 8017878:	e0f3      	b.n	8017a62 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801787a:	8a7b      	ldrh	r3, [r7, #18]
 801787c:	2b7e      	cmp	r3, #126	; 0x7e
 801787e:	d906      	bls.n	801788e <etharp_query+0x7e>
 8017880:	4b7a      	ldr	r3, [pc, #488]	; (8017a6c <etharp_query+0x25c>)
 8017882:	f240 32c1 	movw	r2, #961	; 0x3c1
 8017886:	497a      	ldr	r1, [pc, #488]	; (8017a70 <etharp_query+0x260>)
 8017888:	487a      	ldr	r0, [pc, #488]	; (8017a74 <etharp_query+0x264>)
 801788a:	f005 f931 	bl	801caf0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801788e:	8a7b      	ldrh	r3, [r7, #18]
 8017890:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8017892:	7c7a      	ldrb	r2, [r7, #17]
 8017894:	4978      	ldr	r1, [pc, #480]	; (8017a78 <etharp_query+0x268>)
 8017896:	4613      	mov	r3, r2
 8017898:	005b      	lsls	r3, r3, #1
 801789a:	4413      	add	r3, r2
 801789c:	00db      	lsls	r3, r3, #3
 801789e:	440b      	add	r3, r1
 80178a0:	3314      	adds	r3, #20
 80178a2:	781b      	ldrb	r3, [r3, #0]
 80178a4:	2b00      	cmp	r3, #0
 80178a6:	d115      	bne.n	80178d4 <etharp_query+0xc4>
    is_new_entry = 1;
 80178a8:	2301      	movs	r3, #1
 80178aa:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80178ac:	7c7a      	ldrb	r2, [r7, #17]
 80178ae:	4972      	ldr	r1, [pc, #456]	; (8017a78 <etharp_query+0x268>)
 80178b0:	4613      	mov	r3, r2
 80178b2:	005b      	lsls	r3, r3, #1
 80178b4:	4413      	add	r3, r2
 80178b6:	00db      	lsls	r3, r3, #3
 80178b8:	440b      	add	r3, r1
 80178ba:	3314      	adds	r3, #20
 80178bc:	2201      	movs	r2, #1
 80178be:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80178c0:	7c7a      	ldrb	r2, [r7, #17]
 80178c2:	496d      	ldr	r1, [pc, #436]	; (8017a78 <etharp_query+0x268>)
 80178c4:	4613      	mov	r3, r2
 80178c6:	005b      	lsls	r3, r3, #1
 80178c8:	4413      	add	r3, r2
 80178ca:	00db      	lsls	r3, r3, #3
 80178cc:	440b      	add	r3, r1
 80178ce:	3308      	adds	r3, #8
 80178d0:	68fa      	ldr	r2, [r7, #12]
 80178d2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80178d4:	7c7a      	ldrb	r2, [r7, #17]
 80178d6:	4968      	ldr	r1, [pc, #416]	; (8017a78 <etharp_query+0x268>)
 80178d8:	4613      	mov	r3, r2
 80178da:	005b      	lsls	r3, r3, #1
 80178dc:	4413      	add	r3, r2
 80178de:	00db      	lsls	r3, r3, #3
 80178e0:	440b      	add	r3, r1
 80178e2:	3314      	adds	r3, #20
 80178e4:	781b      	ldrb	r3, [r3, #0]
 80178e6:	2b01      	cmp	r3, #1
 80178e8:	d011      	beq.n	801790e <etharp_query+0xfe>
 80178ea:	7c7a      	ldrb	r2, [r7, #17]
 80178ec:	4962      	ldr	r1, [pc, #392]	; (8017a78 <etharp_query+0x268>)
 80178ee:	4613      	mov	r3, r2
 80178f0:	005b      	lsls	r3, r3, #1
 80178f2:	4413      	add	r3, r2
 80178f4:	00db      	lsls	r3, r3, #3
 80178f6:	440b      	add	r3, r1
 80178f8:	3314      	adds	r3, #20
 80178fa:	781b      	ldrb	r3, [r3, #0]
 80178fc:	2b01      	cmp	r3, #1
 80178fe:	d806      	bhi.n	801790e <etharp_query+0xfe>
 8017900:	4b5a      	ldr	r3, [pc, #360]	; (8017a6c <etharp_query+0x25c>)
 8017902:	f240 32cd 	movw	r2, #973	; 0x3cd
 8017906:	495d      	ldr	r1, [pc, #372]	; (8017a7c <etharp_query+0x26c>)
 8017908:	485a      	ldr	r0, [pc, #360]	; (8017a74 <etharp_query+0x264>)
 801790a:	f005 f8f1 	bl	801caf0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801790e:	6a3b      	ldr	r3, [r7, #32]
 8017910:	2b00      	cmp	r3, #0
 8017912:	d102      	bne.n	801791a <etharp_query+0x10a>
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	2b00      	cmp	r3, #0
 8017918:	d10c      	bne.n	8017934 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801791a:	68b9      	ldr	r1, [r7, #8]
 801791c:	68f8      	ldr	r0, [r7, #12]
 801791e:	f000 f963 	bl	8017be8 <etharp_request>
 8017922:	4603      	mov	r3, r0
 8017924:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8017928:	687b      	ldr	r3, [r7, #4]
 801792a:	2b00      	cmp	r3, #0
 801792c:	d102      	bne.n	8017934 <etharp_query+0x124>
      return result;
 801792e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8017932:	e096      	b.n	8017a62 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8017934:	687b      	ldr	r3, [r7, #4]
 8017936:	2b00      	cmp	r3, #0
 8017938:	d106      	bne.n	8017948 <etharp_query+0x138>
 801793a:	4b4c      	ldr	r3, [pc, #304]	; (8017a6c <etharp_query+0x25c>)
 801793c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8017940:	494f      	ldr	r1, [pc, #316]	; (8017a80 <etharp_query+0x270>)
 8017942:	484c      	ldr	r0, [pc, #304]	; (8017a74 <etharp_query+0x264>)
 8017944:	f005 f8d4 	bl	801caf0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8017948:	7c7a      	ldrb	r2, [r7, #17]
 801794a:	494b      	ldr	r1, [pc, #300]	; (8017a78 <etharp_query+0x268>)
 801794c:	4613      	mov	r3, r2
 801794e:	005b      	lsls	r3, r3, #1
 8017950:	4413      	add	r3, r2
 8017952:	00db      	lsls	r3, r3, #3
 8017954:	440b      	add	r3, r1
 8017956:	3314      	adds	r3, #20
 8017958:	781b      	ldrb	r3, [r3, #0]
 801795a:	2b01      	cmp	r3, #1
 801795c:	d917      	bls.n	801798e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801795e:	4a49      	ldr	r2, [pc, #292]	; (8017a84 <etharp_query+0x274>)
 8017960:	7c7b      	ldrb	r3, [r7, #17]
 8017962:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8017964:	7c7a      	ldrb	r2, [r7, #17]
 8017966:	4613      	mov	r3, r2
 8017968:	005b      	lsls	r3, r3, #1
 801796a:	4413      	add	r3, r2
 801796c:	00db      	lsls	r3, r3, #3
 801796e:	3308      	adds	r3, #8
 8017970:	4a41      	ldr	r2, [pc, #260]	; (8017a78 <etharp_query+0x268>)
 8017972:	4413      	add	r3, r2
 8017974:	3304      	adds	r3, #4
 8017976:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801797a:	9200      	str	r2, [sp, #0]
 801797c:	697a      	ldr	r2, [r7, #20]
 801797e:	6879      	ldr	r1, [r7, #4]
 8017980:	68f8      	ldr	r0, [r7, #12]
 8017982:	f001 fcf1 	bl	8019368 <ethernet_output>
 8017986:	4603      	mov	r3, r0
 8017988:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801798c:	e067      	b.n	8017a5e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801798e:	7c7a      	ldrb	r2, [r7, #17]
 8017990:	4939      	ldr	r1, [pc, #228]	; (8017a78 <etharp_query+0x268>)
 8017992:	4613      	mov	r3, r2
 8017994:	005b      	lsls	r3, r3, #1
 8017996:	4413      	add	r3, r2
 8017998:	00db      	lsls	r3, r3, #3
 801799a:	440b      	add	r3, r1
 801799c:	3314      	adds	r3, #20
 801799e:	781b      	ldrb	r3, [r3, #0]
 80179a0:	2b01      	cmp	r3, #1
 80179a2:	d15c      	bne.n	8017a5e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80179a4:	2300      	movs	r3, #0
 80179a6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	61fb      	str	r3, [r7, #28]
    while (p) {
 80179ac:	e01c      	b.n	80179e8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80179ae:	69fb      	ldr	r3, [r7, #28]
 80179b0:	895a      	ldrh	r2, [r3, #10]
 80179b2:	69fb      	ldr	r3, [r7, #28]
 80179b4:	891b      	ldrh	r3, [r3, #8]
 80179b6:	429a      	cmp	r2, r3
 80179b8:	d10a      	bne.n	80179d0 <etharp_query+0x1c0>
 80179ba:	69fb      	ldr	r3, [r7, #28]
 80179bc:	681b      	ldr	r3, [r3, #0]
 80179be:	2b00      	cmp	r3, #0
 80179c0:	d006      	beq.n	80179d0 <etharp_query+0x1c0>
 80179c2:	4b2a      	ldr	r3, [pc, #168]	; (8017a6c <etharp_query+0x25c>)
 80179c4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80179c8:	492f      	ldr	r1, [pc, #188]	; (8017a88 <etharp_query+0x278>)
 80179ca:	482a      	ldr	r0, [pc, #168]	; (8017a74 <etharp_query+0x264>)
 80179cc:	f005 f890 	bl	801caf0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80179d0:	69fb      	ldr	r3, [r7, #28]
 80179d2:	7b1b      	ldrb	r3, [r3, #12]
 80179d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80179d8:	2b00      	cmp	r3, #0
 80179da:	d002      	beq.n	80179e2 <etharp_query+0x1d2>
        copy_needed = 1;
 80179dc:	2301      	movs	r3, #1
 80179de:	61bb      	str	r3, [r7, #24]
        break;
 80179e0:	e005      	b.n	80179ee <etharp_query+0x1de>
      }
      p = p->next;
 80179e2:	69fb      	ldr	r3, [r7, #28]
 80179e4:	681b      	ldr	r3, [r3, #0]
 80179e6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80179e8:	69fb      	ldr	r3, [r7, #28]
 80179ea:	2b00      	cmp	r3, #0
 80179ec:	d1df      	bne.n	80179ae <etharp_query+0x19e>
    }
    if (copy_needed) {
 80179ee:	69bb      	ldr	r3, [r7, #24]
 80179f0:	2b00      	cmp	r3, #0
 80179f2:	d007      	beq.n	8017a04 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80179f4:	687a      	ldr	r2, [r7, #4]
 80179f6:	f44f 7120 	mov.w	r1, #640	; 0x280
 80179fa:	200e      	movs	r0, #14
 80179fc:	f7f8 fa6e 	bl	800fedc <pbuf_clone>
 8017a00:	61f8      	str	r0, [r7, #28]
 8017a02:	e004      	b.n	8017a0e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8017a04:	687b      	ldr	r3, [r7, #4]
 8017a06:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8017a08:	69f8      	ldr	r0, [r7, #28]
 8017a0a:	f7f8 f895 	bl	800fb38 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8017a0e:	69fb      	ldr	r3, [r7, #28]
 8017a10:	2b00      	cmp	r3, #0
 8017a12:	d021      	beq.n	8017a58 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8017a14:	7c7a      	ldrb	r2, [r7, #17]
 8017a16:	4918      	ldr	r1, [pc, #96]	; (8017a78 <etharp_query+0x268>)
 8017a18:	4613      	mov	r3, r2
 8017a1a:	005b      	lsls	r3, r3, #1
 8017a1c:	4413      	add	r3, r2
 8017a1e:	00db      	lsls	r3, r3, #3
 8017a20:	440b      	add	r3, r1
 8017a22:	681b      	ldr	r3, [r3, #0]
 8017a24:	2b00      	cmp	r3, #0
 8017a26:	d00a      	beq.n	8017a3e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8017a28:	7c7a      	ldrb	r2, [r7, #17]
 8017a2a:	4913      	ldr	r1, [pc, #76]	; (8017a78 <etharp_query+0x268>)
 8017a2c:	4613      	mov	r3, r2
 8017a2e:	005b      	lsls	r3, r3, #1
 8017a30:	4413      	add	r3, r2
 8017a32:	00db      	lsls	r3, r3, #3
 8017a34:	440b      	add	r3, r1
 8017a36:	681b      	ldr	r3, [r3, #0]
 8017a38:	4618      	mov	r0, r3
 8017a3a:	f7f7 ffd7 	bl	800f9ec <pbuf_free>
      }
      arp_table[i].q = p;
 8017a3e:	7c7a      	ldrb	r2, [r7, #17]
 8017a40:	490d      	ldr	r1, [pc, #52]	; (8017a78 <etharp_query+0x268>)
 8017a42:	4613      	mov	r3, r2
 8017a44:	005b      	lsls	r3, r3, #1
 8017a46:	4413      	add	r3, r2
 8017a48:	00db      	lsls	r3, r3, #3
 8017a4a:	440b      	add	r3, r1
 8017a4c:	69fa      	ldr	r2, [r7, #28]
 8017a4e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8017a50:	2300      	movs	r3, #0
 8017a52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017a56:	e002      	b.n	8017a5e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8017a58:	23ff      	movs	r3, #255	; 0xff
 8017a5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8017a5e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8017a62:	4618      	mov	r0, r3
 8017a64:	3728      	adds	r7, #40	; 0x28
 8017a66:	46bd      	mov	sp, r7
 8017a68:	bd80      	pop	{r7, pc}
 8017a6a:	bf00      	nop
 8017a6c:	08021e20 	.word	0x08021e20
 8017a70:	08021fcc 	.word	0x08021fcc
 8017a74:	08021e98 	.word	0x08021e98
 8017a78:	200014d0 	.word	0x200014d0
 8017a7c:	08021fdc 	.word	0x08021fdc
 8017a80:	08021fc0 	.word	0x08021fc0
 8017a84:	200015c0 	.word	0x200015c0
 8017a88:	08022004 	.word	0x08022004

08017a8c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8017a8c:	b580      	push	{r7, lr}
 8017a8e:	b08a      	sub	sp, #40	; 0x28
 8017a90:	af02      	add	r7, sp, #8
 8017a92:	60f8      	str	r0, [r7, #12]
 8017a94:	60b9      	str	r1, [r7, #8]
 8017a96:	607a      	str	r2, [r7, #4]
 8017a98:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8017a9a:	2300      	movs	r3, #0
 8017a9c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8017a9e:	68fb      	ldr	r3, [r7, #12]
 8017aa0:	2b00      	cmp	r3, #0
 8017aa2:	d106      	bne.n	8017ab2 <etharp_raw+0x26>
 8017aa4:	4b3a      	ldr	r3, [pc, #232]	; (8017b90 <etharp_raw+0x104>)
 8017aa6:	f240 4257 	movw	r2, #1111	; 0x457
 8017aaa:	493a      	ldr	r1, [pc, #232]	; (8017b94 <etharp_raw+0x108>)
 8017aac:	483a      	ldr	r0, [pc, #232]	; (8017b98 <etharp_raw+0x10c>)
 8017aae:	f005 f81f 	bl	801caf0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8017ab2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017ab6:	211c      	movs	r1, #28
 8017ab8:	200e      	movs	r0, #14
 8017aba:	f7f7 fc81 	bl	800f3c0 <pbuf_alloc>
 8017abe:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8017ac0:	69bb      	ldr	r3, [r7, #24]
 8017ac2:	2b00      	cmp	r3, #0
 8017ac4:	d102      	bne.n	8017acc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8017ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8017aca:	e05d      	b.n	8017b88 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8017acc:	69bb      	ldr	r3, [r7, #24]
 8017ace:	895b      	ldrh	r3, [r3, #10]
 8017ad0:	2b1b      	cmp	r3, #27
 8017ad2:	d806      	bhi.n	8017ae2 <etharp_raw+0x56>
 8017ad4:	4b2e      	ldr	r3, [pc, #184]	; (8017b90 <etharp_raw+0x104>)
 8017ad6:	f240 4262 	movw	r2, #1122	; 0x462
 8017ada:	4930      	ldr	r1, [pc, #192]	; (8017b9c <etharp_raw+0x110>)
 8017adc:	482e      	ldr	r0, [pc, #184]	; (8017b98 <etharp_raw+0x10c>)
 8017ade:	f005 f807 	bl	801caf0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8017ae2:	69bb      	ldr	r3, [r7, #24]
 8017ae4:	685b      	ldr	r3, [r3, #4]
 8017ae6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8017ae8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8017aea:	4618      	mov	r0, r3
 8017aec:	f7f6 fb68 	bl	800e1c0 <lwip_htons>
 8017af0:	4603      	mov	r3, r0
 8017af2:	461a      	mov	r2, r3
 8017af4:	697b      	ldr	r3, [r7, #20]
 8017af6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8017af8:	68fb      	ldr	r3, [r7, #12]
 8017afa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8017afe:	2b06      	cmp	r3, #6
 8017b00:	d006      	beq.n	8017b10 <etharp_raw+0x84>
 8017b02:	4b23      	ldr	r3, [pc, #140]	; (8017b90 <etharp_raw+0x104>)
 8017b04:	f240 4269 	movw	r2, #1129	; 0x469
 8017b08:	4925      	ldr	r1, [pc, #148]	; (8017ba0 <etharp_raw+0x114>)
 8017b0a:	4823      	ldr	r0, [pc, #140]	; (8017b98 <etharp_raw+0x10c>)
 8017b0c:	f004 fff0 	bl	801caf0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8017b10:	697b      	ldr	r3, [r7, #20]
 8017b12:	3308      	adds	r3, #8
 8017b14:	2206      	movs	r2, #6
 8017b16:	6839      	ldr	r1, [r7, #0]
 8017b18:	4618      	mov	r0, r3
 8017b1a:	f004 f94b 	bl	801bdb4 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8017b1e:	697b      	ldr	r3, [r7, #20]
 8017b20:	3312      	adds	r3, #18
 8017b22:	2206      	movs	r2, #6
 8017b24:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017b26:	4618      	mov	r0, r3
 8017b28:	f004 f944 	bl	801bdb4 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8017b2c:	697b      	ldr	r3, [r7, #20]
 8017b2e:	330e      	adds	r3, #14
 8017b30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017b32:	6812      	ldr	r2, [r2, #0]
 8017b34:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8017b36:	697b      	ldr	r3, [r7, #20]
 8017b38:	3318      	adds	r3, #24
 8017b3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017b3c:	6812      	ldr	r2, [r2, #0]
 8017b3e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8017b40:	697b      	ldr	r3, [r7, #20]
 8017b42:	2200      	movs	r2, #0
 8017b44:	701a      	strb	r2, [r3, #0]
 8017b46:	2200      	movs	r2, #0
 8017b48:	f042 0201 	orr.w	r2, r2, #1
 8017b4c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8017b4e:	697b      	ldr	r3, [r7, #20]
 8017b50:	2200      	movs	r2, #0
 8017b52:	f042 0208 	orr.w	r2, r2, #8
 8017b56:	709a      	strb	r2, [r3, #2]
 8017b58:	2200      	movs	r2, #0
 8017b5a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8017b5c:	697b      	ldr	r3, [r7, #20]
 8017b5e:	2206      	movs	r2, #6
 8017b60:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8017b62:	697b      	ldr	r3, [r7, #20]
 8017b64:	2204      	movs	r2, #4
 8017b66:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8017b68:	f640 0306 	movw	r3, #2054	; 0x806
 8017b6c:	9300      	str	r3, [sp, #0]
 8017b6e:	687b      	ldr	r3, [r7, #4]
 8017b70:	68ba      	ldr	r2, [r7, #8]
 8017b72:	69b9      	ldr	r1, [r7, #24]
 8017b74:	68f8      	ldr	r0, [r7, #12]
 8017b76:	f001 fbf7 	bl	8019368 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8017b7a:	69b8      	ldr	r0, [r7, #24]
 8017b7c:	f7f7 ff36 	bl	800f9ec <pbuf_free>
  p = NULL;
 8017b80:	2300      	movs	r3, #0
 8017b82:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8017b84:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017b88:	4618      	mov	r0, r3
 8017b8a:	3720      	adds	r7, #32
 8017b8c:	46bd      	mov	sp, r7
 8017b8e:	bd80      	pop	{r7, pc}
 8017b90:	08021e20 	.word	0x08021e20
 8017b94:	08021f70 	.word	0x08021f70
 8017b98:	08021e98 	.word	0x08021e98
 8017b9c:	08022020 	.word	0x08022020
 8017ba0:	08022054 	.word	0x08022054

08017ba4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8017ba4:	b580      	push	{r7, lr}
 8017ba6:	b088      	sub	sp, #32
 8017ba8:	af04      	add	r7, sp, #16
 8017baa:	60f8      	str	r0, [r7, #12]
 8017bac:	60b9      	str	r1, [r7, #8]
 8017bae:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017bb0:	68fb      	ldr	r3, [r7, #12]
 8017bb2:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8017bb6:	68fb      	ldr	r3, [r7, #12]
 8017bb8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8017bbc:	68fb      	ldr	r3, [r7, #12]
 8017bbe:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017bc0:	2201      	movs	r2, #1
 8017bc2:	9203      	str	r2, [sp, #12]
 8017bc4:	68ba      	ldr	r2, [r7, #8]
 8017bc6:	9202      	str	r2, [sp, #8]
 8017bc8:	4a06      	ldr	r2, [pc, #24]	; (8017be4 <etharp_request_dst+0x40>)
 8017bca:	9201      	str	r2, [sp, #4]
 8017bcc:	9300      	str	r3, [sp, #0]
 8017bce:	4603      	mov	r3, r0
 8017bd0:	687a      	ldr	r2, [r7, #4]
 8017bd2:	68f8      	ldr	r0, [r7, #12]
 8017bd4:	f7ff ff5a 	bl	8017a8c <etharp_raw>
 8017bd8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8017bda:	4618      	mov	r0, r3
 8017bdc:	3710      	adds	r7, #16
 8017bde:	46bd      	mov	sp, r7
 8017be0:	bd80      	pop	{r7, pc}
 8017be2:	bf00      	nop
 8017be4:	080228a4 	.word	0x080228a4

08017be8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8017be8:	b580      	push	{r7, lr}
 8017bea:	b082      	sub	sp, #8
 8017bec:	af00      	add	r7, sp, #0
 8017bee:	6078      	str	r0, [r7, #4]
 8017bf0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8017bf2:	4a05      	ldr	r2, [pc, #20]	; (8017c08 <etharp_request+0x20>)
 8017bf4:	6839      	ldr	r1, [r7, #0]
 8017bf6:	6878      	ldr	r0, [r7, #4]
 8017bf8:	f7ff ffd4 	bl	8017ba4 <etharp_request_dst>
 8017bfc:	4603      	mov	r3, r0
}
 8017bfe:	4618      	mov	r0, r3
 8017c00:	3708      	adds	r7, #8
 8017c02:	46bd      	mov	sp, r7
 8017c04:	bd80      	pop	{r7, pc}
 8017c06:	bf00      	nop
 8017c08:	0802289c 	.word	0x0802289c

08017c0c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8017c0c:	b580      	push	{r7, lr}
 8017c0e:	b08e      	sub	sp, #56	; 0x38
 8017c10:	af04      	add	r7, sp, #16
 8017c12:	6078      	str	r0, [r7, #4]
 8017c14:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8017c16:	4b79      	ldr	r3, [pc, #484]	; (8017dfc <icmp_input+0x1f0>)
 8017c18:	689b      	ldr	r3, [r3, #8]
 8017c1a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8017c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c1e:	781b      	ldrb	r3, [r3, #0]
 8017c20:	f003 030f 	and.w	r3, r3, #15
 8017c24:	b2db      	uxtb	r3, r3
 8017c26:	009b      	lsls	r3, r3, #2
 8017c28:	b2db      	uxtb	r3, r3
 8017c2a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8017c2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017c2e:	2b13      	cmp	r3, #19
 8017c30:	f240 80cd 	bls.w	8017dce <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8017c34:	687b      	ldr	r3, [r7, #4]
 8017c36:	895b      	ldrh	r3, [r3, #10]
 8017c38:	2b03      	cmp	r3, #3
 8017c3a:	f240 80ca 	bls.w	8017dd2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8017c3e:	687b      	ldr	r3, [r7, #4]
 8017c40:	685b      	ldr	r3, [r3, #4]
 8017c42:	781b      	ldrb	r3, [r3, #0]
 8017c44:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8017c48:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8017c4c:	2b00      	cmp	r3, #0
 8017c4e:	f000 80b7 	beq.w	8017dc0 <icmp_input+0x1b4>
 8017c52:	2b08      	cmp	r3, #8
 8017c54:	f040 80b7 	bne.w	8017dc6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8017c58:	4b69      	ldr	r3, [pc, #420]	; (8017e00 <icmp_input+0x1f4>)
 8017c5a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017c5c:	4b67      	ldr	r3, [pc, #412]	; (8017dfc <icmp_input+0x1f0>)
 8017c5e:	695b      	ldr	r3, [r3, #20]
 8017c60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017c64:	2be0      	cmp	r3, #224	; 0xe0
 8017c66:	f000 80bb 	beq.w	8017de0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8017c6a:	4b64      	ldr	r3, [pc, #400]	; (8017dfc <icmp_input+0x1f0>)
 8017c6c:	695b      	ldr	r3, [r3, #20]
 8017c6e:	4a63      	ldr	r2, [pc, #396]	; (8017dfc <icmp_input+0x1f0>)
 8017c70:	6812      	ldr	r2, [r2, #0]
 8017c72:	4611      	mov	r1, r2
 8017c74:	4618      	mov	r0, r3
 8017c76:	f000 fbed 	bl	8018454 <ip4_addr_isbroadcast_u32>
 8017c7a:	4603      	mov	r3, r0
 8017c7c:	2b00      	cmp	r3, #0
 8017c7e:	f040 80b1 	bne.w	8017de4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8017c82:	687b      	ldr	r3, [r7, #4]
 8017c84:	891b      	ldrh	r3, [r3, #8]
 8017c86:	2b07      	cmp	r3, #7
 8017c88:	f240 80a5 	bls.w	8017dd6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017c8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017c8e:	330e      	adds	r3, #14
 8017c90:	4619      	mov	r1, r3
 8017c92:	6878      	ldr	r0, [r7, #4]
 8017c94:	f7f7 fde2 	bl	800f85c <pbuf_add_header>
 8017c98:	4603      	mov	r3, r0
 8017c9a:	2b00      	cmp	r3, #0
 8017c9c:	d04b      	beq.n	8017d36 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8017c9e:	687b      	ldr	r3, [r7, #4]
 8017ca0:	891a      	ldrh	r2, [r3, #8]
 8017ca2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017ca4:	4413      	add	r3, r2
 8017ca6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8017ca8:	687b      	ldr	r3, [r7, #4]
 8017caa:	891b      	ldrh	r3, [r3, #8]
 8017cac:	8b7a      	ldrh	r2, [r7, #26]
 8017cae:	429a      	cmp	r2, r3
 8017cb0:	f0c0 809a 	bcc.w	8017de8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8017cb4:	8b7b      	ldrh	r3, [r7, #26]
 8017cb6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017cba:	4619      	mov	r1, r3
 8017cbc:	200e      	movs	r0, #14
 8017cbe:	f7f7 fb7f 	bl	800f3c0 <pbuf_alloc>
 8017cc2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8017cc4:	697b      	ldr	r3, [r7, #20]
 8017cc6:	2b00      	cmp	r3, #0
 8017cc8:	f000 8090 	beq.w	8017dec <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8017ccc:	697b      	ldr	r3, [r7, #20]
 8017cce:	895b      	ldrh	r3, [r3, #10]
 8017cd0:	461a      	mov	r2, r3
 8017cd2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017cd4:	3308      	adds	r3, #8
 8017cd6:	429a      	cmp	r2, r3
 8017cd8:	d203      	bcs.n	8017ce2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8017cda:	6978      	ldr	r0, [r7, #20]
 8017cdc:	f7f7 fe86 	bl	800f9ec <pbuf_free>
          goto icmperr;
 8017ce0:	e085      	b.n	8017dee <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8017ce2:	697b      	ldr	r3, [r7, #20]
 8017ce4:	685b      	ldr	r3, [r3, #4]
 8017ce6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8017ce8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017cea:	4618      	mov	r0, r3
 8017cec:	f004 f862 	bl	801bdb4 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8017cf0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017cf2:	4619      	mov	r1, r3
 8017cf4:	6978      	ldr	r0, [r7, #20]
 8017cf6:	f7f7 fdc1 	bl	800f87c <pbuf_remove_header>
 8017cfa:	4603      	mov	r3, r0
 8017cfc:	2b00      	cmp	r3, #0
 8017cfe:	d009      	beq.n	8017d14 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8017d00:	4b40      	ldr	r3, [pc, #256]	; (8017e04 <icmp_input+0x1f8>)
 8017d02:	22b6      	movs	r2, #182	; 0xb6
 8017d04:	4940      	ldr	r1, [pc, #256]	; (8017e08 <icmp_input+0x1fc>)
 8017d06:	4841      	ldr	r0, [pc, #260]	; (8017e0c <icmp_input+0x200>)
 8017d08:	f004 fef2 	bl	801caf0 <iprintf>
          pbuf_free(r);
 8017d0c:	6978      	ldr	r0, [r7, #20]
 8017d0e:	f7f7 fe6d 	bl	800f9ec <pbuf_free>
          goto icmperr;
 8017d12:	e06c      	b.n	8017dee <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8017d14:	6879      	ldr	r1, [r7, #4]
 8017d16:	6978      	ldr	r0, [r7, #20]
 8017d18:	f7f7 ff9c 	bl	800fc54 <pbuf_copy>
 8017d1c:	4603      	mov	r3, r0
 8017d1e:	2b00      	cmp	r3, #0
 8017d20:	d003      	beq.n	8017d2a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8017d22:	6978      	ldr	r0, [r7, #20]
 8017d24:	f7f7 fe62 	bl	800f9ec <pbuf_free>
          goto icmperr;
 8017d28:	e061      	b.n	8017dee <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8017d2a:	6878      	ldr	r0, [r7, #4]
 8017d2c:	f7f7 fe5e 	bl	800f9ec <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8017d30:	697b      	ldr	r3, [r7, #20]
 8017d32:	607b      	str	r3, [r7, #4]
 8017d34:	e00f      	b.n	8017d56 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017d36:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017d38:	330e      	adds	r3, #14
 8017d3a:	4619      	mov	r1, r3
 8017d3c:	6878      	ldr	r0, [r7, #4]
 8017d3e:	f7f7 fd9d 	bl	800f87c <pbuf_remove_header>
 8017d42:	4603      	mov	r3, r0
 8017d44:	2b00      	cmp	r3, #0
 8017d46:	d006      	beq.n	8017d56 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8017d48:	4b2e      	ldr	r3, [pc, #184]	; (8017e04 <icmp_input+0x1f8>)
 8017d4a:	22c7      	movs	r2, #199	; 0xc7
 8017d4c:	4930      	ldr	r1, [pc, #192]	; (8017e10 <icmp_input+0x204>)
 8017d4e:	482f      	ldr	r0, [pc, #188]	; (8017e0c <icmp_input+0x200>)
 8017d50:	f004 fece 	bl	801caf0 <iprintf>
          goto icmperr;
 8017d54:	e04b      	b.n	8017dee <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8017d56:	687b      	ldr	r3, [r7, #4]
 8017d58:	685b      	ldr	r3, [r3, #4]
 8017d5a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8017d5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017d5e:	4619      	mov	r1, r3
 8017d60:	6878      	ldr	r0, [r7, #4]
 8017d62:	f7f7 fd7b 	bl	800f85c <pbuf_add_header>
 8017d66:	4603      	mov	r3, r0
 8017d68:	2b00      	cmp	r3, #0
 8017d6a:	d12b      	bne.n	8017dc4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8017d6c:	687b      	ldr	r3, [r7, #4]
 8017d6e:	685b      	ldr	r3, [r3, #4]
 8017d70:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8017d72:	69fb      	ldr	r3, [r7, #28]
 8017d74:	681a      	ldr	r2, [r3, #0]
 8017d76:	68fb      	ldr	r3, [r7, #12]
 8017d78:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8017d7a:	4b20      	ldr	r3, [pc, #128]	; (8017dfc <icmp_input+0x1f0>)
 8017d7c:	691a      	ldr	r2, [r3, #16]
 8017d7e:	68fb      	ldr	r3, [r7, #12]
 8017d80:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8017d82:	693b      	ldr	r3, [r7, #16]
 8017d84:	2200      	movs	r2, #0
 8017d86:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8017d88:	693b      	ldr	r3, [r7, #16]
 8017d8a:	2200      	movs	r2, #0
 8017d8c:	709a      	strb	r2, [r3, #2]
 8017d8e:	2200      	movs	r2, #0
 8017d90:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8017d92:	68fb      	ldr	r3, [r7, #12]
 8017d94:	22ff      	movs	r2, #255	; 0xff
 8017d96:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8017d98:	68fb      	ldr	r3, [r7, #12]
 8017d9a:	2200      	movs	r2, #0
 8017d9c:	729a      	strb	r2, [r3, #10]
 8017d9e:	2200      	movs	r2, #0
 8017da0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8017da2:	683b      	ldr	r3, [r7, #0]
 8017da4:	9302      	str	r3, [sp, #8]
 8017da6:	2301      	movs	r3, #1
 8017da8:	9301      	str	r3, [sp, #4]
 8017daa:	2300      	movs	r3, #0
 8017dac:	9300      	str	r3, [sp, #0]
 8017dae:	23ff      	movs	r3, #255	; 0xff
 8017db0:	2200      	movs	r2, #0
 8017db2:	69f9      	ldr	r1, [r7, #28]
 8017db4:	6878      	ldr	r0, [r7, #4]
 8017db6:	f000 fa75 	bl	80182a4 <ip4_output_if>
 8017dba:	4603      	mov	r3, r0
 8017dbc:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8017dbe:	e001      	b.n	8017dc4 <icmp_input+0x1b8>
      break;
 8017dc0:	bf00      	nop
 8017dc2:	e000      	b.n	8017dc6 <icmp_input+0x1ba>
      break;
 8017dc4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8017dc6:	6878      	ldr	r0, [r7, #4]
 8017dc8:	f7f7 fe10 	bl	800f9ec <pbuf_free>
  return;
 8017dcc:	e013      	b.n	8017df6 <icmp_input+0x1ea>
    goto lenerr;
 8017dce:	bf00      	nop
 8017dd0:	e002      	b.n	8017dd8 <icmp_input+0x1cc>
    goto lenerr;
 8017dd2:	bf00      	nop
 8017dd4:	e000      	b.n	8017dd8 <icmp_input+0x1cc>
        goto lenerr;
 8017dd6:	bf00      	nop
lenerr:
  pbuf_free(p);
 8017dd8:	6878      	ldr	r0, [r7, #4]
 8017dda:	f7f7 fe07 	bl	800f9ec <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017dde:	e00a      	b.n	8017df6 <icmp_input+0x1ea>
        goto icmperr;
 8017de0:	bf00      	nop
 8017de2:	e004      	b.n	8017dee <icmp_input+0x1e2>
        goto icmperr;
 8017de4:	bf00      	nop
 8017de6:	e002      	b.n	8017dee <icmp_input+0x1e2>
          goto icmperr;
 8017de8:	bf00      	nop
 8017dea:	e000      	b.n	8017dee <icmp_input+0x1e2>
          goto icmperr;
 8017dec:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8017dee:	6878      	ldr	r0, [r7, #4]
 8017df0:	f7f7 fdfc 	bl	800f9ec <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017df4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8017df6:	3728      	adds	r7, #40	; 0x28
 8017df8:	46bd      	mov	sp, r7
 8017dfa:	bd80      	pop	{r7, pc}
 8017dfc:	20004c04 	.word	0x20004c04
 8017e00:	20004c18 	.word	0x20004c18
 8017e04:	08022098 	.word	0x08022098
 8017e08:	080220d0 	.word	0x080220d0
 8017e0c:	08022108 	.word	0x08022108
 8017e10:	08022130 	.word	0x08022130

08017e14 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8017e14:	b580      	push	{r7, lr}
 8017e16:	b082      	sub	sp, #8
 8017e18:	af00      	add	r7, sp, #0
 8017e1a:	6078      	str	r0, [r7, #4]
 8017e1c:	460b      	mov	r3, r1
 8017e1e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8017e20:	78fb      	ldrb	r3, [r7, #3]
 8017e22:	461a      	mov	r2, r3
 8017e24:	2103      	movs	r1, #3
 8017e26:	6878      	ldr	r0, [r7, #4]
 8017e28:	f000 f814 	bl	8017e54 <icmp_send_response>
}
 8017e2c:	bf00      	nop
 8017e2e:	3708      	adds	r7, #8
 8017e30:	46bd      	mov	sp, r7
 8017e32:	bd80      	pop	{r7, pc}

08017e34 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8017e34:	b580      	push	{r7, lr}
 8017e36:	b082      	sub	sp, #8
 8017e38:	af00      	add	r7, sp, #0
 8017e3a:	6078      	str	r0, [r7, #4]
 8017e3c:	460b      	mov	r3, r1
 8017e3e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8017e40:	78fb      	ldrb	r3, [r7, #3]
 8017e42:	461a      	mov	r2, r3
 8017e44:	210b      	movs	r1, #11
 8017e46:	6878      	ldr	r0, [r7, #4]
 8017e48:	f000 f804 	bl	8017e54 <icmp_send_response>
}
 8017e4c:	bf00      	nop
 8017e4e:	3708      	adds	r7, #8
 8017e50:	46bd      	mov	sp, r7
 8017e52:	bd80      	pop	{r7, pc}

08017e54 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8017e54:	b580      	push	{r7, lr}
 8017e56:	b08c      	sub	sp, #48	; 0x30
 8017e58:	af04      	add	r7, sp, #16
 8017e5a:	6078      	str	r0, [r7, #4]
 8017e5c:	460b      	mov	r3, r1
 8017e5e:	70fb      	strb	r3, [r7, #3]
 8017e60:	4613      	mov	r3, r2
 8017e62:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8017e64:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017e68:	2124      	movs	r1, #36	; 0x24
 8017e6a:	2022      	movs	r0, #34	; 0x22
 8017e6c:	f7f7 faa8 	bl	800f3c0 <pbuf_alloc>
 8017e70:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8017e72:	69fb      	ldr	r3, [r7, #28]
 8017e74:	2b00      	cmp	r3, #0
 8017e76:	d04c      	beq.n	8017f12 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8017e78:	69fb      	ldr	r3, [r7, #28]
 8017e7a:	895b      	ldrh	r3, [r3, #10]
 8017e7c:	2b23      	cmp	r3, #35	; 0x23
 8017e7e:	d806      	bhi.n	8017e8e <icmp_send_response+0x3a>
 8017e80:	4b26      	ldr	r3, [pc, #152]	; (8017f1c <icmp_send_response+0xc8>)
 8017e82:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8017e86:	4926      	ldr	r1, [pc, #152]	; (8017f20 <icmp_send_response+0xcc>)
 8017e88:	4826      	ldr	r0, [pc, #152]	; (8017f24 <icmp_send_response+0xd0>)
 8017e8a:	f004 fe31 	bl	801caf0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8017e8e:	687b      	ldr	r3, [r7, #4]
 8017e90:	685b      	ldr	r3, [r3, #4]
 8017e92:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8017e94:	69fb      	ldr	r3, [r7, #28]
 8017e96:	685b      	ldr	r3, [r3, #4]
 8017e98:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8017e9a:	697b      	ldr	r3, [r7, #20]
 8017e9c:	78fa      	ldrb	r2, [r7, #3]
 8017e9e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8017ea0:	697b      	ldr	r3, [r7, #20]
 8017ea2:	78ba      	ldrb	r2, [r7, #2]
 8017ea4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8017ea6:	697b      	ldr	r3, [r7, #20]
 8017ea8:	2200      	movs	r2, #0
 8017eaa:	711a      	strb	r2, [r3, #4]
 8017eac:	2200      	movs	r2, #0
 8017eae:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8017eb0:	697b      	ldr	r3, [r7, #20]
 8017eb2:	2200      	movs	r2, #0
 8017eb4:	719a      	strb	r2, [r3, #6]
 8017eb6:	2200      	movs	r2, #0
 8017eb8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8017eba:	69fb      	ldr	r3, [r7, #28]
 8017ebc:	685b      	ldr	r3, [r3, #4]
 8017ebe:	f103 0008 	add.w	r0, r3, #8
 8017ec2:	687b      	ldr	r3, [r7, #4]
 8017ec4:	685b      	ldr	r3, [r3, #4]
 8017ec6:	221c      	movs	r2, #28
 8017ec8:	4619      	mov	r1, r3
 8017eca:	f003 ff73 	bl	801bdb4 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8017ece:	69bb      	ldr	r3, [r7, #24]
 8017ed0:	68db      	ldr	r3, [r3, #12]
 8017ed2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8017ed4:	f107 030c 	add.w	r3, r7, #12
 8017ed8:	4618      	mov	r0, r3
 8017eda:	f000 f825 	bl	8017f28 <ip4_route>
 8017ede:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8017ee0:	693b      	ldr	r3, [r7, #16]
 8017ee2:	2b00      	cmp	r3, #0
 8017ee4:	d011      	beq.n	8017f0a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8017ee6:	697b      	ldr	r3, [r7, #20]
 8017ee8:	2200      	movs	r2, #0
 8017eea:	709a      	strb	r2, [r3, #2]
 8017eec:	2200      	movs	r2, #0
 8017eee:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8017ef0:	f107 020c 	add.w	r2, r7, #12
 8017ef4:	693b      	ldr	r3, [r7, #16]
 8017ef6:	9302      	str	r3, [sp, #8]
 8017ef8:	2301      	movs	r3, #1
 8017efa:	9301      	str	r3, [sp, #4]
 8017efc:	2300      	movs	r3, #0
 8017efe:	9300      	str	r3, [sp, #0]
 8017f00:	23ff      	movs	r3, #255	; 0xff
 8017f02:	2100      	movs	r1, #0
 8017f04:	69f8      	ldr	r0, [r7, #28]
 8017f06:	f000 f9cd 	bl	80182a4 <ip4_output_if>
  }
  pbuf_free(q);
 8017f0a:	69f8      	ldr	r0, [r7, #28]
 8017f0c:	f7f7 fd6e 	bl	800f9ec <pbuf_free>
 8017f10:	e000      	b.n	8017f14 <icmp_send_response+0xc0>
    return;
 8017f12:	bf00      	nop
}
 8017f14:	3720      	adds	r7, #32
 8017f16:	46bd      	mov	sp, r7
 8017f18:	bd80      	pop	{r7, pc}
 8017f1a:	bf00      	nop
 8017f1c:	08022098 	.word	0x08022098
 8017f20:	08022164 	.word	0x08022164
 8017f24:	08022108 	.word	0x08022108

08017f28 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8017f28:	b480      	push	{r7}
 8017f2a:	b085      	sub	sp, #20
 8017f2c:	af00      	add	r7, sp, #0
 8017f2e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8017f30:	4b33      	ldr	r3, [pc, #204]	; (8018000 <ip4_route+0xd8>)
 8017f32:	681b      	ldr	r3, [r3, #0]
 8017f34:	60fb      	str	r3, [r7, #12]
 8017f36:	e036      	b.n	8017fa6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017f38:	68fb      	ldr	r3, [r7, #12]
 8017f3a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017f3e:	f003 0301 	and.w	r3, r3, #1
 8017f42:	b2db      	uxtb	r3, r3
 8017f44:	2b00      	cmp	r3, #0
 8017f46:	d02b      	beq.n	8017fa0 <ip4_route+0x78>
 8017f48:	68fb      	ldr	r3, [r7, #12]
 8017f4a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017f4e:	089b      	lsrs	r3, r3, #2
 8017f50:	f003 0301 	and.w	r3, r3, #1
 8017f54:	b2db      	uxtb	r3, r3
 8017f56:	2b00      	cmp	r3, #0
 8017f58:	d022      	beq.n	8017fa0 <ip4_route+0x78>
 8017f5a:	68fb      	ldr	r3, [r7, #12]
 8017f5c:	3304      	adds	r3, #4
 8017f5e:	681b      	ldr	r3, [r3, #0]
 8017f60:	2b00      	cmp	r3, #0
 8017f62:	d01d      	beq.n	8017fa0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8017f64:	687b      	ldr	r3, [r7, #4]
 8017f66:	681a      	ldr	r2, [r3, #0]
 8017f68:	68fb      	ldr	r3, [r7, #12]
 8017f6a:	3304      	adds	r3, #4
 8017f6c:	681b      	ldr	r3, [r3, #0]
 8017f6e:	405a      	eors	r2, r3
 8017f70:	68fb      	ldr	r3, [r7, #12]
 8017f72:	3308      	adds	r3, #8
 8017f74:	681b      	ldr	r3, [r3, #0]
 8017f76:	4013      	ands	r3, r2
 8017f78:	2b00      	cmp	r3, #0
 8017f7a:	d101      	bne.n	8017f80 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8017f7c:	68fb      	ldr	r3, [r7, #12]
 8017f7e:	e038      	b.n	8017ff2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8017f80:	68fb      	ldr	r3, [r7, #12]
 8017f82:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017f86:	f003 0302 	and.w	r3, r3, #2
 8017f8a:	2b00      	cmp	r3, #0
 8017f8c:	d108      	bne.n	8017fa0 <ip4_route+0x78>
 8017f8e:	687b      	ldr	r3, [r7, #4]
 8017f90:	681a      	ldr	r2, [r3, #0]
 8017f92:	68fb      	ldr	r3, [r7, #12]
 8017f94:	330c      	adds	r3, #12
 8017f96:	681b      	ldr	r3, [r3, #0]
 8017f98:	429a      	cmp	r2, r3
 8017f9a:	d101      	bne.n	8017fa0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8017f9c:	68fb      	ldr	r3, [r7, #12]
 8017f9e:	e028      	b.n	8017ff2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8017fa0:	68fb      	ldr	r3, [r7, #12]
 8017fa2:	681b      	ldr	r3, [r3, #0]
 8017fa4:	60fb      	str	r3, [r7, #12]
 8017fa6:	68fb      	ldr	r3, [r7, #12]
 8017fa8:	2b00      	cmp	r3, #0
 8017faa:	d1c5      	bne.n	8017f38 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017fac:	4b15      	ldr	r3, [pc, #84]	; (8018004 <ip4_route+0xdc>)
 8017fae:	681b      	ldr	r3, [r3, #0]
 8017fb0:	2b00      	cmp	r3, #0
 8017fb2:	d01a      	beq.n	8017fea <ip4_route+0xc2>
 8017fb4:	4b13      	ldr	r3, [pc, #76]	; (8018004 <ip4_route+0xdc>)
 8017fb6:	681b      	ldr	r3, [r3, #0]
 8017fb8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017fbc:	f003 0301 	and.w	r3, r3, #1
 8017fc0:	2b00      	cmp	r3, #0
 8017fc2:	d012      	beq.n	8017fea <ip4_route+0xc2>
 8017fc4:	4b0f      	ldr	r3, [pc, #60]	; (8018004 <ip4_route+0xdc>)
 8017fc6:	681b      	ldr	r3, [r3, #0]
 8017fc8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017fcc:	f003 0304 	and.w	r3, r3, #4
 8017fd0:	2b00      	cmp	r3, #0
 8017fd2:	d00a      	beq.n	8017fea <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017fd4:	4b0b      	ldr	r3, [pc, #44]	; (8018004 <ip4_route+0xdc>)
 8017fd6:	681b      	ldr	r3, [r3, #0]
 8017fd8:	3304      	adds	r3, #4
 8017fda:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017fdc:	2b00      	cmp	r3, #0
 8017fde:	d004      	beq.n	8017fea <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017fe0:	687b      	ldr	r3, [r7, #4]
 8017fe2:	681b      	ldr	r3, [r3, #0]
 8017fe4:	b2db      	uxtb	r3, r3
 8017fe6:	2b7f      	cmp	r3, #127	; 0x7f
 8017fe8:	d101      	bne.n	8017fee <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8017fea:	2300      	movs	r3, #0
 8017fec:	e001      	b.n	8017ff2 <ip4_route+0xca>
  }

  return netif_default;
 8017fee:	4b05      	ldr	r3, [pc, #20]	; (8018004 <ip4_route+0xdc>)
 8017ff0:	681b      	ldr	r3, [r3, #0]
}
 8017ff2:	4618      	mov	r0, r3
 8017ff4:	3714      	adds	r7, #20
 8017ff6:	46bd      	mov	sp, r7
 8017ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ffc:	4770      	bx	lr
 8017ffe:	bf00      	nop
 8018000:	20008308 	.word	0x20008308
 8018004:	2000830c 	.word	0x2000830c

08018008 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8018008:	b580      	push	{r7, lr}
 801800a:	b082      	sub	sp, #8
 801800c:	af00      	add	r7, sp, #0
 801800e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8018010:	687b      	ldr	r3, [r7, #4]
 8018012:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018016:	f003 0301 	and.w	r3, r3, #1
 801801a:	b2db      	uxtb	r3, r3
 801801c:	2b00      	cmp	r3, #0
 801801e:	d016      	beq.n	801804e <ip4_input_accept+0x46>
 8018020:	687b      	ldr	r3, [r7, #4]
 8018022:	3304      	adds	r3, #4
 8018024:	681b      	ldr	r3, [r3, #0]
 8018026:	2b00      	cmp	r3, #0
 8018028:	d011      	beq.n	801804e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801802a:	4b0b      	ldr	r3, [pc, #44]	; (8018058 <ip4_input_accept+0x50>)
 801802c:	695a      	ldr	r2, [r3, #20]
 801802e:	687b      	ldr	r3, [r7, #4]
 8018030:	3304      	adds	r3, #4
 8018032:	681b      	ldr	r3, [r3, #0]
 8018034:	429a      	cmp	r2, r3
 8018036:	d008      	beq.n	801804a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8018038:	4b07      	ldr	r3, [pc, #28]	; (8018058 <ip4_input_accept+0x50>)
 801803a:	695b      	ldr	r3, [r3, #20]
 801803c:	6879      	ldr	r1, [r7, #4]
 801803e:	4618      	mov	r0, r3
 8018040:	f000 fa08 	bl	8018454 <ip4_addr_isbroadcast_u32>
 8018044:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8018046:	2b00      	cmp	r3, #0
 8018048:	d001      	beq.n	801804e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801804a:	2301      	movs	r3, #1
 801804c:	e000      	b.n	8018050 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801804e:	2300      	movs	r3, #0
}
 8018050:	4618      	mov	r0, r3
 8018052:	3708      	adds	r7, #8
 8018054:	46bd      	mov	sp, r7
 8018056:	bd80      	pop	{r7, pc}
 8018058:	20004c04 	.word	0x20004c04

0801805c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801805c:	b580      	push	{r7, lr}
 801805e:	b086      	sub	sp, #24
 8018060:	af00      	add	r7, sp, #0
 8018062:	6078      	str	r0, [r7, #4]
 8018064:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8018066:	687b      	ldr	r3, [r7, #4]
 8018068:	685b      	ldr	r3, [r3, #4]
 801806a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801806c:	697b      	ldr	r3, [r7, #20]
 801806e:	781b      	ldrb	r3, [r3, #0]
 8018070:	091b      	lsrs	r3, r3, #4
 8018072:	b2db      	uxtb	r3, r3
 8018074:	2b04      	cmp	r3, #4
 8018076:	d004      	beq.n	8018082 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8018078:	6878      	ldr	r0, [r7, #4]
 801807a:	f7f7 fcb7 	bl	800f9ec <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801807e:	2300      	movs	r3, #0
 8018080:	e107      	b.n	8018292 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8018082:	697b      	ldr	r3, [r7, #20]
 8018084:	781b      	ldrb	r3, [r3, #0]
 8018086:	f003 030f 	and.w	r3, r3, #15
 801808a:	b2db      	uxtb	r3, r3
 801808c:	009b      	lsls	r3, r3, #2
 801808e:	b2db      	uxtb	r3, r3
 8018090:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8018092:	697b      	ldr	r3, [r7, #20]
 8018094:	885b      	ldrh	r3, [r3, #2]
 8018096:	b29b      	uxth	r3, r3
 8018098:	4618      	mov	r0, r3
 801809a:	f7f6 f891 	bl	800e1c0 <lwip_htons>
 801809e:	4603      	mov	r3, r0
 80180a0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80180a2:	687b      	ldr	r3, [r7, #4]
 80180a4:	891b      	ldrh	r3, [r3, #8]
 80180a6:	89ba      	ldrh	r2, [r7, #12]
 80180a8:	429a      	cmp	r2, r3
 80180aa:	d204      	bcs.n	80180b6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80180ac:	89bb      	ldrh	r3, [r7, #12]
 80180ae:	4619      	mov	r1, r3
 80180b0:	6878      	ldr	r0, [r7, #4]
 80180b2:	f7f7 fae3 	bl	800f67c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80180b6:	687b      	ldr	r3, [r7, #4]
 80180b8:	895b      	ldrh	r3, [r3, #10]
 80180ba:	89fa      	ldrh	r2, [r7, #14]
 80180bc:	429a      	cmp	r2, r3
 80180be:	d807      	bhi.n	80180d0 <ip4_input+0x74>
 80180c0:	687b      	ldr	r3, [r7, #4]
 80180c2:	891b      	ldrh	r3, [r3, #8]
 80180c4:	89ba      	ldrh	r2, [r7, #12]
 80180c6:	429a      	cmp	r2, r3
 80180c8:	d802      	bhi.n	80180d0 <ip4_input+0x74>
 80180ca:	89fb      	ldrh	r3, [r7, #14]
 80180cc:	2b13      	cmp	r3, #19
 80180ce:	d804      	bhi.n	80180da <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80180d0:	6878      	ldr	r0, [r7, #4]
 80180d2:	f7f7 fc8b 	bl	800f9ec <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80180d6:	2300      	movs	r3, #0
 80180d8:	e0db      	b.n	8018292 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80180da:	697b      	ldr	r3, [r7, #20]
 80180dc:	691b      	ldr	r3, [r3, #16]
 80180de:	4a6f      	ldr	r2, [pc, #444]	; (801829c <ip4_input+0x240>)
 80180e0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80180e2:	697b      	ldr	r3, [r7, #20]
 80180e4:	68db      	ldr	r3, [r3, #12]
 80180e6:	4a6d      	ldr	r2, [pc, #436]	; (801829c <ip4_input+0x240>)
 80180e8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80180ea:	4b6c      	ldr	r3, [pc, #432]	; (801829c <ip4_input+0x240>)
 80180ec:	695b      	ldr	r3, [r3, #20]
 80180ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80180f2:	2be0      	cmp	r3, #224	; 0xe0
 80180f4:	d112      	bne.n	801811c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80180f6:	683b      	ldr	r3, [r7, #0]
 80180f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80180fc:	f003 0301 	and.w	r3, r3, #1
 8018100:	b2db      	uxtb	r3, r3
 8018102:	2b00      	cmp	r3, #0
 8018104:	d007      	beq.n	8018116 <ip4_input+0xba>
 8018106:	683b      	ldr	r3, [r7, #0]
 8018108:	3304      	adds	r3, #4
 801810a:	681b      	ldr	r3, [r3, #0]
 801810c:	2b00      	cmp	r3, #0
 801810e:	d002      	beq.n	8018116 <ip4_input+0xba>
      netif = inp;
 8018110:	683b      	ldr	r3, [r7, #0]
 8018112:	613b      	str	r3, [r7, #16]
 8018114:	e02a      	b.n	801816c <ip4_input+0x110>
    } else {
      netif = NULL;
 8018116:	2300      	movs	r3, #0
 8018118:	613b      	str	r3, [r7, #16]
 801811a:	e027      	b.n	801816c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801811c:	6838      	ldr	r0, [r7, #0]
 801811e:	f7ff ff73 	bl	8018008 <ip4_input_accept>
 8018122:	4603      	mov	r3, r0
 8018124:	2b00      	cmp	r3, #0
 8018126:	d002      	beq.n	801812e <ip4_input+0xd2>
      netif = inp;
 8018128:	683b      	ldr	r3, [r7, #0]
 801812a:	613b      	str	r3, [r7, #16]
 801812c:	e01e      	b.n	801816c <ip4_input+0x110>
    } else {
      netif = NULL;
 801812e:	2300      	movs	r3, #0
 8018130:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8018132:	4b5a      	ldr	r3, [pc, #360]	; (801829c <ip4_input+0x240>)
 8018134:	695b      	ldr	r3, [r3, #20]
 8018136:	b2db      	uxtb	r3, r3
 8018138:	2b7f      	cmp	r3, #127	; 0x7f
 801813a:	d017      	beq.n	801816c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801813c:	4b58      	ldr	r3, [pc, #352]	; (80182a0 <ip4_input+0x244>)
 801813e:	681b      	ldr	r3, [r3, #0]
 8018140:	613b      	str	r3, [r7, #16]
 8018142:	e00e      	b.n	8018162 <ip4_input+0x106>
          if (netif == inp) {
 8018144:	693a      	ldr	r2, [r7, #16]
 8018146:	683b      	ldr	r3, [r7, #0]
 8018148:	429a      	cmp	r2, r3
 801814a:	d006      	beq.n	801815a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801814c:	6938      	ldr	r0, [r7, #16]
 801814e:	f7ff ff5b 	bl	8018008 <ip4_input_accept>
 8018152:	4603      	mov	r3, r0
 8018154:	2b00      	cmp	r3, #0
 8018156:	d108      	bne.n	801816a <ip4_input+0x10e>
 8018158:	e000      	b.n	801815c <ip4_input+0x100>
            continue;
 801815a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801815c:	693b      	ldr	r3, [r7, #16]
 801815e:	681b      	ldr	r3, [r3, #0]
 8018160:	613b      	str	r3, [r7, #16]
 8018162:	693b      	ldr	r3, [r7, #16]
 8018164:	2b00      	cmp	r3, #0
 8018166:	d1ed      	bne.n	8018144 <ip4_input+0xe8>
 8018168:	e000      	b.n	801816c <ip4_input+0x110>
            break;
 801816a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801816c:	4b4b      	ldr	r3, [pc, #300]	; (801829c <ip4_input+0x240>)
 801816e:	691b      	ldr	r3, [r3, #16]
 8018170:	6839      	ldr	r1, [r7, #0]
 8018172:	4618      	mov	r0, r3
 8018174:	f000 f96e 	bl	8018454 <ip4_addr_isbroadcast_u32>
 8018178:	4603      	mov	r3, r0
 801817a:	2b00      	cmp	r3, #0
 801817c:	d105      	bne.n	801818a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801817e:	4b47      	ldr	r3, [pc, #284]	; (801829c <ip4_input+0x240>)
 8018180:	691b      	ldr	r3, [r3, #16]
 8018182:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8018186:	2be0      	cmp	r3, #224	; 0xe0
 8018188:	d104      	bne.n	8018194 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801818a:	6878      	ldr	r0, [r7, #4]
 801818c:	f7f7 fc2e 	bl	800f9ec <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8018190:	2300      	movs	r3, #0
 8018192:	e07e      	b.n	8018292 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8018194:	693b      	ldr	r3, [r7, #16]
 8018196:	2b00      	cmp	r3, #0
 8018198:	d104      	bne.n	80181a4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801819a:	6878      	ldr	r0, [r7, #4]
 801819c:	f7f7 fc26 	bl	800f9ec <pbuf_free>
    return ERR_OK;
 80181a0:	2300      	movs	r3, #0
 80181a2:	e076      	b.n	8018292 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80181a4:	697b      	ldr	r3, [r7, #20]
 80181a6:	88db      	ldrh	r3, [r3, #6]
 80181a8:	b29b      	uxth	r3, r3
 80181aa:	461a      	mov	r2, r3
 80181ac:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80181b0:	4013      	ands	r3, r2
 80181b2:	2b00      	cmp	r3, #0
 80181b4:	d00b      	beq.n	80181ce <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80181b6:	6878      	ldr	r0, [r7, #4]
 80181b8:	f000 fd14 	bl	8018be4 <ip4_reass>
 80181bc:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80181be:	687b      	ldr	r3, [r7, #4]
 80181c0:	2b00      	cmp	r3, #0
 80181c2:	d101      	bne.n	80181c8 <ip4_input+0x16c>
      return ERR_OK;
 80181c4:	2300      	movs	r3, #0
 80181c6:	e064      	b.n	8018292 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80181c8:	687b      	ldr	r3, [r7, #4]
 80181ca:	685b      	ldr	r3, [r3, #4]
 80181cc:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80181ce:	4a33      	ldr	r2, [pc, #204]	; (801829c <ip4_input+0x240>)
 80181d0:	693b      	ldr	r3, [r7, #16]
 80181d2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80181d4:	4a31      	ldr	r2, [pc, #196]	; (801829c <ip4_input+0x240>)
 80181d6:	683b      	ldr	r3, [r7, #0]
 80181d8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80181da:	4a30      	ldr	r2, [pc, #192]	; (801829c <ip4_input+0x240>)
 80181dc:	697b      	ldr	r3, [r7, #20]
 80181de:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80181e0:	697b      	ldr	r3, [r7, #20]
 80181e2:	781b      	ldrb	r3, [r3, #0]
 80181e4:	f003 030f 	and.w	r3, r3, #15
 80181e8:	b2db      	uxtb	r3, r3
 80181ea:	009b      	lsls	r3, r3, #2
 80181ec:	b2db      	uxtb	r3, r3
 80181ee:	b29a      	uxth	r2, r3
 80181f0:	4b2a      	ldr	r3, [pc, #168]	; (801829c <ip4_input+0x240>)
 80181f2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80181f4:	89fb      	ldrh	r3, [r7, #14]
 80181f6:	4619      	mov	r1, r3
 80181f8:	6878      	ldr	r0, [r7, #4]
 80181fa:	f7f7 fb3f 	bl	800f87c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80181fe:	697b      	ldr	r3, [r7, #20]
 8018200:	7a5b      	ldrb	r3, [r3, #9]
 8018202:	2b11      	cmp	r3, #17
 8018204:	d006      	beq.n	8018214 <ip4_input+0x1b8>
 8018206:	2b11      	cmp	r3, #17
 8018208:	dc13      	bgt.n	8018232 <ip4_input+0x1d6>
 801820a:	2b01      	cmp	r3, #1
 801820c:	d00c      	beq.n	8018228 <ip4_input+0x1cc>
 801820e:	2b06      	cmp	r3, #6
 8018210:	d005      	beq.n	801821e <ip4_input+0x1c2>
 8018212:	e00e      	b.n	8018232 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8018214:	6839      	ldr	r1, [r7, #0]
 8018216:	6878      	ldr	r0, [r7, #4]
 8018218:	f7fe f956 	bl	80164c8 <udp_input>
        break;
 801821c:	e026      	b.n	801826c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801821e:	6839      	ldr	r1, [r7, #0]
 8018220:	6878      	ldr	r0, [r7, #4]
 8018222:	f7f9 fd13 	bl	8011c4c <tcp_input>
        break;
 8018226:	e021      	b.n	801826c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8018228:	6839      	ldr	r1, [r7, #0]
 801822a:	6878      	ldr	r0, [r7, #4]
 801822c:	f7ff fcee 	bl	8017c0c <icmp_input>
        break;
 8018230:	e01c      	b.n	801826c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018232:	4b1a      	ldr	r3, [pc, #104]	; (801829c <ip4_input+0x240>)
 8018234:	695b      	ldr	r3, [r3, #20]
 8018236:	6939      	ldr	r1, [r7, #16]
 8018238:	4618      	mov	r0, r3
 801823a:	f000 f90b 	bl	8018454 <ip4_addr_isbroadcast_u32>
 801823e:	4603      	mov	r3, r0
 8018240:	2b00      	cmp	r3, #0
 8018242:	d10f      	bne.n	8018264 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018244:	4b15      	ldr	r3, [pc, #84]	; (801829c <ip4_input+0x240>)
 8018246:	695b      	ldr	r3, [r3, #20]
 8018248:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801824c:	2be0      	cmp	r3, #224	; 0xe0
 801824e:	d009      	beq.n	8018264 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8018250:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8018254:	4619      	mov	r1, r3
 8018256:	6878      	ldr	r0, [r7, #4]
 8018258:	f7f7 fb83 	bl	800f962 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801825c:	2102      	movs	r1, #2
 801825e:	6878      	ldr	r0, [r7, #4]
 8018260:	f7ff fdd8 	bl	8017e14 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8018264:	6878      	ldr	r0, [r7, #4]
 8018266:	f7f7 fbc1 	bl	800f9ec <pbuf_free>
        break;
 801826a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801826c:	4b0b      	ldr	r3, [pc, #44]	; (801829c <ip4_input+0x240>)
 801826e:	2200      	movs	r2, #0
 8018270:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8018272:	4b0a      	ldr	r3, [pc, #40]	; (801829c <ip4_input+0x240>)
 8018274:	2200      	movs	r2, #0
 8018276:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8018278:	4b08      	ldr	r3, [pc, #32]	; (801829c <ip4_input+0x240>)
 801827a:	2200      	movs	r2, #0
 801827c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801827e:	4b07      	ldr	r3, [pc, #28]	; (801829c <ip4_input+0x240>)
 8018280:	2200      	movs	r2, #0
 8018282:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8018284:	4b05      	ldr	r3, [pc, #20]	; (801829c <ip4_input+0x240>)
 8018286:	2200      	movs	r2, #0
 8018288:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801828a:	4b04      	ldr	r3, [pc, #16]	; (801829c <ip4_input+0x240>)
 801828c:	2200      	movs	r2, #0
 801828e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8018290:	2300      	movs	r3, #0
}
 8018292:	4618      	mov	r0, r3
 8018294:	3718      	adds	r7, #24
 8018296:	46bd      	mov	sp, r7
 8018298:	bd80      	pop	{r7, pc}
 801829a:	bf00      	nop
 801829c:	20004c04 	.word	0x20004c04
 80182a0:	20008308 	.word	0x20008308

080182a4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80182a4:	b580      	push	{r7, lr}
 80182a6:	b08a      	sub	sp, #40	; 0x28
 80182a8:	af04      	add	r7, sp, #16
 80182aa:	60f8      	str	r0, [r7, #12]
 80182ac:	60b9      	str	r1, [r7, #8]
 80182ae:	607a      	str	r2, [r7, #4]
 80182b0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80182b2:	68bb      	ldr	r3, [r7, #8]
 80182b4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80182b6:	687b      	ldr	r3, [r7, #4]
 80182b8:	2b00      	cmp	r3, #0
 80182ba:	d009      	beq.n	80182d0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80182bc:	68bb      	ldr	r3, [r7, #8]
 80182be:	2b00      	cmp	r3, #0
 80182c0:	d003      	beq.n	80182ca <ip4_output_if+0x26>
 80182c2:	68bb      	ldr	r3, [r7, #8]
 80182c4:	681b      	ldr	r3, [r3, #0]
 80182c6:	2b00      	cmp	r3, #0
 80182c8:	d102      	bne.n	80182d0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80182ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182cc:	3304      	adds	r3, #4
 80182ce:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80182d0:	78fa      	ldrb	r2, [r7, #3]
 80182d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182d4:	9302      	str	r3, [sp, #8]
 80182d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80182da:	9301      	str	r3, [sp, #4]
 80182dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80182e0:	9300      	str	r3, [sp, #0]
 80182e2:	4613      	mov	r3, r2
 80182e4:	687a      	ldr	r2, [r7, #4]
 80182e6:	6979      	ldr	r1, [r7, #20]
 80182e8:	68f8      	ldr	r0, [r7, #12]
 80182ea:	f000 f805 	bl	80182f8 <ip4_output_if_src>
 80182ee:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80182f0:	4618      	mov	r0, r3
 80182f2:	3718      	adds	r7, #24
 80182f4:	46bd      	mov	sp, r7
 80182f6:	bd80      	pop	{r7, pc}

080182f8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80182f8:	b580      	push	{r7, lr}
 80182fa:	b088      	sub	sp, #32
 80182fc:	af00      	add	r7, sp, #0
 80182fe:	60f8      	str	r0, [r7, #12]
 8018300:	60b9      	str	r1, [r7, #8]
 8018302:	607a      	str	r2, [r7, #4]
 8018304:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8018306:	68fb      	ldr	r3, [r7, #12]
 8018308:	7b9b      	ldrb	r3, [r3, #14]
 801830a:	2b01      	cmp	r3, #1
 801830c:	d006      	beq.n	801831c <ip4_output_if_src+0x24>
 801830e:	4b4b      	ldr	r3, [pc, #300]	; (801843c <ip4_output_if_src+0x144>)
 8018310:	f44f 7255 	mov.w	r2, #852	; 0x354
 8018314:	494a      	ldr	r1, [pc, #296]	; (8018440 <ip4_output_if_src+0x148>)
 8018316:	484b      	ldr	r0, [pc, #300]	; (8018444 <ip4_output_if_src+0x14c>)
 8018318:	f004 fbea 	bl	801caf0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801831c:	687b      	ldr	r3, [r7, #4]
 801831e:	2b00      	cmp	r3, #0
 8018320:	d060      	beq.n	80183e4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8018322:	2314      	movs	r3, #20
 8018324:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8018326:	2114      	movs	r1, #20
 8018328:	68f8      	ldr	r0, [r7, #12]
 801832a:	f7f7 fa97 	bl	800f85c <pbuf_add_header>
 801832e:	4603      	mov	r3, r0
 8018330:	2b00      	cmp	r3, #0
 8018332:	d002      	beq.n	801833a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8018334:	f06f 0301 	mvn.w	r3, #1
 8018338:	e07c      	b.n	8018434 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801833a:	68fb      	ldr	r3, [r7, #12]
 801833c:	685b      	ldr	r3, [r3, #4]
 801833e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8018340:	68fb      	ldr	r3, [r7, #12]
 8018342:	895b      	ldrh	r3, [r3, #10]
 8018344:	2b13      	cmp	r3, #19
 8018346:	d806      	bhi.n	8018356 <ip4_output_if_src+0x5e>
 8018348:	4b3c      	ldr	r3, [pc, #240]	; (801843c <ip4_output_if_src+0x144>)
 801834a:	f44f 7262 	mov.w	r2, #904	; 0x388
 801834e:	493e      	ldr	r1, [pc, #248]	; (8018448 <ip4_output_if_src+0x150>)
 8018350:	483c      	ldr	r0, [pc, #240]	; (8018444 <ip4_output_if_src+0x14c>)
 8018352:	f004 fbcd 	bl	801caf0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8018356:	69fb      	ldr	r3, [r7, #28]
 8018358:	78fa      	ldrb	r2, [r7, #3]
 801835a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801835c:	69fb      	ldr	r3, [r7, #28]
 801835e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8018362:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8018364:	687b      	ldr	r3, [r7, #4]
 8018366:	681a      	ldr	r2, [r3, #0]
 8018368:	69fb      	ldr	r3, [r7, #28]
 801836a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801836c:	8b7b      	ldrh	r3, [r7, #26]
 801836e:	089b      	lsrs	r3, r3, #2
 8018370:	b29b      	uxth	r3, r3
 8018372:	b2db      	uxtb	r3, r3
 8018374:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018378:	b2da      	uxtb	r2, r3
 801837a:	69fb      	ldr	r3, [r7, #28]
 801837c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801837e:	69fb      	ldr	r3, [r7, #28]
 8018380:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8018384:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8018386:	68fb      	ldr	r3, [r7, #12]
 8018388:	891b      	ldrh	r3, [r3, #8]
 801838a:	4618      	mov	r0, r3
 801838c:	f7f5 ff18 	bl	800e1c0 <lwip_htons>
 8018390:	4603      	mov	r3, r0
 8018392:	461a      	mov	r2, r3
 8018394:	69fb      	ldr	r3, [r7, #28]
 8018396:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8018398:	69fb      	ldr	r3, [r7, #28]
 801839a:	2200      	movs	r2, #0
 801839c:	719a      	strb	r2, [r3, #6]
 801839e:	2200      	movs	r2, #0
 80183a0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80183a2:	4b2a      	ldr	r3, [pc, #168]	; (801844c <ip4_output_if_src+0x154>)
 80183a4:	881b      	ldrh	r3, [r3, #0]
 80183a6:	4618      	mov	r0, r3
 80183a8:	f7f5 ff0a 	bl	800e1c0 <lwip_htons>
 80183ac:	4603      	mov	r3, r0
 80183ae:	461a      	mov	r2, r3
 80183b0:	69fb      	ldr	r3, [r7, #28]
 80183b2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80183b4:	4b25      	ldr	r3, [pc, #148]	; (801844c <ip4_output_if_src+0x154>)
 80183b6:	881b      	ldrh	r3, [r3, #0]
 80183b8:	3301      	adds	r3, #1
 80183ba:	b29a      	uxth	r2, r3
 80183bc:	4b23      	ldr	r3, [pc, #140]	; (801844c <ip4_output_if_src+0x154>)
 80183be:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80183c0:	68bb      	ldr	r3, [r7, #8]
 80183c2:	2b00      	cmp	r3, #0
 80183c4:	d104      	bne.n	80183d0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80183c6:	4b22      	ldr	r3, [pc, #136]	; (8018450 <ip4_output_if_src+0x158>)
 80183c8:	681a      	ldr	r2, [r3, #0]
 80183ca:	69fb      	ldr	r3, [r7, #28]
 80183cc:	60da      	str	r2, [r3, #12]
 80183ce:	e003      	b.n	80183d8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80183d0:	68bb      	ldr	r3, [r7, #8]
 80183d2:	681a      	ldr	r2, [r3, #0]
 80183d4:	69fb      	ldr	r3, [r7, #28]
 80183d6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80183d8:	69fb      	ldr	r3, [r7, #28]
 80183da:	2200      	movs	r2, #0
 80183dc:	729a      	strb	r2, [r3, #10]
 80183de:	2200      	movs	r2, #0
 80183e0:	72da      	strb	r2, [r3, #11]
 80183e2:	e00f      	b.n	8018404 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80183e4:	68fb      	ldr	r3, [r7, #12]
 80183e6:	895b      	ldrh	r3, [r3, #10]
 80183e8:	2b13      	cmp	r3, #19
 80183ea:	d802      	bhi.n	80183f2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80183ec:	f06f 0301 	mvn.w	r3, #1
 80183f0:	e020      	b.n	8018434 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80183f2:	68fb      	ldr	r3, [r7, #12]
 80183f4:	685b      	ldr	r3, [r3, #4]
 80183f6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80183f8:	69fb      	ldr	r3, [r7, #28]
 80183fa:	691b      	ldr	r3, [r3, #16]
 80183fc:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80183fe:	f107 0314 	add.w	r3, r7, #20
 8018402:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8018404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018406:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8018408:	2b00      	cmp	r3, #0
 801840a:	d00c      	beq.n	8018426 <ip4_output_if_src+0x12e>
 801840c:	68fb      	ldr	r3, [r7, #12]
 801840e:	891a      	ldrh	r2, [r3, #8]
 8018410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018412:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8018414:	429a      	cmp	r2, r3
 8018416:	d906      	bls.n	8018426 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8018418:	687a      	ldr	r2, [r7, #4]
 801841a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801841c:	68f8      	ldr	r0, [r7, #12]
 801841e:	f000 fdcf 	bl	8018fc0 <ip4_frag>
 8018422:	4603      	mov	r3, r0
 8018424:	e006      	b.n	8018434 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8018426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018428:	695b      	ldr	r3, [r3, #20]
 801842a:	687a      	ldr	r2, [r7, #4]
 801842c:	68f9      	ldr	r1, [r7, #12]
 801842e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018430:	4798      	blx	r3
 8018432:	4603      	mov	r3, r0
}
 8018434:	4618      	mov	r0, r3
 8018436:	3720      	adds	r7, #32
 8018438:	46bd      	mov	sp, r7
 801843a:	bd80      	pop	{r7, pc}
 801843c:	08022190 	.word	0x08022190
 8018440:	080221c4 	.word	0x080221c4
 8018444:	080221d0 	.word	0x080221d0
 8018448:	080221f8 	.word	0x080221f8
 801844c:	200015c2 	.word	0x200015c2
 8018450:	08022898 	.word	0x08022898

08018454 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8018454:	b480      	push	{r7}
 8018456:	b085      	sub	sp, #20
 8018458:	af00      	add	r7, sp, #0
 801845a:	6078      	str	r0, [r7, #4]
 801845c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801845e:	687b      	ldr	r3, [r7, #4]
 8018460:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8018462:	687b      	ldr	r3, [r7, #4]
 8018464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018468:	d002      	beq.n	8018470 <ip4_addr_isbroadcast_u32+0x1c>
 801846a:	687b      	ldr	r3, [r7, #4]
 801846c:	2b00      	cmp	r3, #0
 801846e:	d101      	bne.n	8018474 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8018470:	2301      	movs	r3, #1
 8018472:	e02a      	b.n	80184ca <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8018474:	683b      	ldr	r3, [r7, #0]
 8018476:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801847a:	f003 0302 	and.w	r3, r3, #2
 801847e:	2b00      	cmp	r3, #0
 8018480:	d101      	bne.n	8018486 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8018482:	2300      	movs	r3, #0
 8018484:	e021      	b.n	80184ca <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8018486:	683b      	ldr	r3, [r7, #0]
 8018488:	3304      	adds	r3, #4
 801848a:	681b      	ldr	r3, [r3, #0]
 801848c:	687a      	ldr	r2, [r7, #4]
 801848e:	429a      	cmp	r2, r3
 8018490:	d101      	bne.n	8018496 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8018492:	2300      	movs	r3, #0
 8018494:	e019      	b.n	80184ca <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8018496:	68fa      	ldr	r2, [r7, #12]
 8018498:	683b      	ldr	r3, [r7, #0]
 801849a:	3304      	adds	r3, #4
 801849c:	681b      	ldr	r3, [r3, #0]
 801849e:	405a      	eors	r2, r3
 80184a0:	683b      	ldr	r3, [r7, #0]
 80184a2:	3308      	adds	r3, #8
 80184a4:	681b      	ldr	r3, [r3, #0]
 80184a6:	4013      	ands	r3, r2
 80184a8:	2b00      	cmp	r3, #0
 80184aa:	d10d      	bne.n	80184c8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80184ac:	683b      	ldr	r3, [r7, #0]
 80184ae:	3308      	adds	r3, #8
 80184b0:	681b      	ldr	r3, [r3, #0]
 80184b2:	43da      	mvns	r2, r3
 80184b4:	687b      	ldr	r3, [r7, #4]
 80184b6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80184b8:	683b      	ldr	r3, [r7, #0]
 80184ba:	3308      	adds	r3, #8
 80184bc:	681b      	ldr	r3, [r3, #0]
 80184be:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80184c0:	429a      	cmp	r2, r3
 80184c2:	d101      	bne.n	80184c8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80184c4:	2301      	movs	r3, #1
 80184c6:	e000      	b.n	80184ca <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80184c8:	2300      	movs	r3, #0
  }
}
 80184ca:	4618      	mov	r0, r3
 80184cc:	3714      	adds	r7, #20
 80184ce:	46bd      	mov	sp, r7
 80184d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184d4:	4770      	bx	lr
	...

080184d8 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 80184d8:	b480      	push	{r7}
 80184da:	b08d      	sub	sp, #52	; 0x34
 80184dc:	af00      	add	r7, sp, #0
 80184de:	60f8      	str	r0, [r7, #12]
 80184e0:	60b9      	str	r1, [r7, #8]
 80184e2:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 80184e4:	2300      	movs	r3, #0
 80184e6:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 80184e8:	68fb      	ldr	r3, [r7, #12]
 80184ea:	681b      	ldr	r3, [r3, #0]
 80184ec:	61bb      	str	r3, [r7, #24]

  rp = buf;
 80184ee:	68bb      	ldr	r3, [r7, #8]
 80184f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 80184f2:	f107 0318 	add.w	r3, r7, #24
 80184f6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 80184f8:	2300      	movs	r3, #0
 80184fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80184fe:	e059      	b.n	80185b4 <ip4addr_ntoa_r+0xdc>
    i = 0;
 8018500:	2300      	movs	r3, #0
 8018502:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 8018506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018508:	781a      	ldrb	r2, [r3, #0]
 801850a:	4b33      	ldr	r3, [pc, #204]	; (80185d8 <ip4addr_ntoa_r+0x100>)
 801850c:	fba3 1302 	umull	r1, r3, r3, r2
 8018510:	08d9      	lsrs	r1, r3, #3
 8018512:	460b      	mov	r3, r1
 8018514:	009b      	lsls	r3, r3, #2
 8018516:	440b      	add	r3, r1
 8018518:	005b      	lsls	r3, r3, #1
 801851a:	1ad3      	subs	r3, r2, r3
 801851c:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 801851e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018520:	781b      	ldrb	r3, [r3, #0]
 8018522:	4a2d      	ldr	r2, [pc, #180]	; (80185d8 <ip4addr_ntoa_r+0x100>)
 8018524:	fba2 2303 	umull	r2, r3, r2, r3
 8018528:	08db      	lsrs	r3, r3, #3
 801852a:	b2da      	uxtb	r2, r3
 801852c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801852e:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8018530:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018534:	1c5a      	adds	r2, r3, #1
 8018536:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 801853a:	4619      	mov	r1, r3
 801853c:	7ffb      	ldrb	r3, [r7, #31]
 801853e:	3330      	adds	r3, #48	; 0x30
 8018540:	b2da      	uxtb	r2, r3
 8018542:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018546:	440b      	add	r3, r1
 8018548:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 801854c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801854e:	781b      	ldrb	r3, [r3, #0]
 8018550:	2b00      	cmp	r3, #0
 8018552:	d1d8      	bne.n	8018506 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8018554:	e012      	b.n	801857c <ip4addr_ntoa_r+0xa4>
      if (len++ >= buflen) {
 8018556:	6a3b      	ldr	r3, [r7, #32]
 8018558:	1c5a      	adds	r2, r3, #1
 801855a:	623a      	str	r2, [r7, #32]
 801855c:	687a      	ldr	r2, [r7, #4]
 801855e:	429a      	cmp	r2, r3
 8018560:	dc01      	bgt.n	8018566 <ip4addr_ntoa_r+0x8e>
        return NULL;
 8018562:	2300      	movs	r3, #0
 8018564:	e031      	b.n	80185ca <ip4addr_ntoa_r+0xf2>
      }
      *rp++ = inv[i];
 8018566:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801856a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801856c:	1c59      	adds	r1, r3, #1
 801856e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8018570:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8018574:	440a      	add	r2, r1
 8018576:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 801857a:	701a      	strb	r2, [r3, #0]
    while (i--) {
 801857c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018580:	1e5a      	subs	r2, r3, #1
 8018582:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8018586:	2b00      	cmp	r3, #0
 8018588:	d1e5      	bne.n	8018556 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 801858a:	6a3b      	ldr	r3, [r7, #32]
 801858c:	1c5a      	adds	r2, r3, #1
 801858e:	623a      	str	r2, [r7, #32]
 8018590:	687a      	ldr	r2, [r7, #4]
 8018592:	429a      	cmp	r2, r3
 8018594:	dc01      	bgt.n	801859a <ip4addr_ntoa_r+0xc2>
      return NULL;
 8018596:	2300      	movs	r3, #0
 8018598:	e017      	b.n	80185ca <ip4addr_ntoa_r+0xf2>
    }
    *rp++ = '.';
 801859a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801859c:	1c5a      	adds	r2, r3, #1
 801859e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80185a0:	222e      	movs	r2, #46	; 0x2e
 80185a2:	701a      	strb	r2, [r3, #0]
    ap++;
 80185a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185a6:	3301      	adds	r3, #1
 80185a8:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 80185aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80185ae:	3301      	adds	r3, #1
 80185b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80185b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80185b8:	2b03      	cmp	r3, #3
 80185ba:	d9a1      	bls.n	8018500 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 80185bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80185be:	3b01      	subs	r3, #1
 80185c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80185c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80185c4:	2200      	movs	r2, #0
 80185c6:	701a      	strb	r2, [r3, #0]
  return buf;
 80185c8:	68bb      	ldr	r3, [r7, #8]
}
 80185ca:	4618      	mov	r0, r3
 80185cc:	3734      	adds	r7, #52	; 0x34
 80185ce:	46bd      	mov	sp, r7
 80185d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185d4:	4770      	bx	lr
 80185d6:	bf00      	nop
 80185d8:	cccccccd 	.word	0xcccccccd

080185dc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80185dc:	b580      	push	{r7, lr}
 80185de:	b084      	sub	sp, #16
 80185e0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80185e2:	2300      	movs	r3, #0
 80185e4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80185e6:	4b12      	ldr	r3, [pc, #72]	; (8018630 <ip_reass_tmr+0x54>)
 80185e8:	681b      	ldr	r3, [r3, #0]
 80185ea:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80185ec:	e018      	b.n	8018620 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80185ee:	68fb      	ldr	r3, [r7, #12]
 80185f0:	7fdb      	ldrb	r3, [r3, #31]
 80185f2:	2b00      	cmp	r3, #0
 80185f4:	d00b      	beq.n	801860e <ip_reass_tmr+0x32>
      r->timer--;
 80185f6:	68fb      	ldr	r3, [r7, #12]
 80185f8:	7fdb      	ldrb	r3, [r3, #31]
 80185fa:	3b01      	subs	r3, #1
 80185fc:	b2da      	uxtb	r2, r3
 80185fe:	68fb      	ldr	r3, [r7, #12]
 8018600:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8018602:	68fb      	ldr	r3, [r7, #12]
 8018604:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8018606:	68fb      	ldr	r3, [r7, #12]
 8018608:	681b      	ldr	r3, [r3, #0]
 801860a:	60fb      	str	r3, [r7, #12]
 801860c:	e008      	b.n	8018620 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801860e:	68fb      	ldr	r3, [r7, #12]
 8018610:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8018612:	68fb      	ldr	r3, [r7, #12]
 8018614:	681b      	ldr	r3, [r3, #0]
 8018616:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8018618:	68b9      	ldr	r1, [r7, #8]
 801861a:	6878      	ldr	r0, [r7, #4]
 801861c:	f000 f80a 	bl	8018634 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8018620:	68fb      	ldr	r3, [r7, #12]
 8018622:	2b00      	cmp	r3, #0
 8018624:	d1e3      	bne.n	80185ee <ip_reass_tmr+0x12>
    }
  }
}
 8018626:	bf00      	nop
 8018628:	bf00      	nop
 801862a:	3710      	adds	r7, #16
 801862c:	46bd      	mov	sp, r7
 801862e:	bd80      	pop	{r7, pc}
 8018630:	200015c4 	.word	0x200015c4

08018634 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018634:	b580      	push	{r7, lr}
 8018636:	b088      	sub	sp, #32
 8018638:	af00      	add	r7, sp, #0
 801863a:	6078      	str	r0, [r7, #4]
 801863c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801863e:	2300      	movs	r3, #0
 8018640:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8018642:	683a      	ldr	r2, [r7, #0]
 8018644:	687b      	ldr	r3, [r7, #4]
 8018646:	429a      	cmp	r2, r3
 8018648:	d105      	bne.n	8018656 <ip_reass_free_complete_datagram+0x22>
 801864a:	4b45      	ldr	r3, [pc, #276]	; (8018760 <ip_reass_free_complete_datagram+0x12c>)
 801864c:	22ab      	movs	r2, #171	; 0xab
 801864e:	4945      	ldr	r1, [pc, #276]	; (8018764 <ip_reass_free_complete_datagram+0x130>)
 8018650:	4845      	ldr	r0, [pc, #276]	; (8018768 <ip_reass_free_complete_datagram+0x134>)
 8018652:	f004 fa4d 	bl	801caf0 <iprintf>
  if (prev != NULL) {
 8018656:	683b      	ldr	r3, [r7, #0]
 8018658:	2b00      	cmp	r3, #0
 801865a:	d00a      	beq.n	8018672 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801865c:	683b      	ldr	r3, [r7, #0]
 801865e:	681b      	ldr	r3, [r3, #0]
 8018660:	687a      	ldr	r2, [r7, #4]
 8018662:	429a      	cmp	r2, r3
 8018664:	d005      	beq.n	8018672 <ip_reass_free_complete_datagram+0x3e>
 8018666:	4b3e      	ldr	r3, [pc, #248]	; (8018760 <ip_reass_free_complete_datagram+0x12c>)
 8018668:	22ad      	movs	r2, #173	; 0xad
 801866a:	4940      	ldr	r1, [pc, #256]	; (801876c <ip_reass_free_complete_datagram+0x138>)
 801866c:	483e      	ldr	r0, [pc, #248]	; (8018768 <ip_reass_free_complete_datagram+0x134>)
 801866e:	f004 fa3f 	bl	801caf0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8018672:	687b      	ldr	r3, [r7, #4]
 8018674:	685b      	ldr	r3, [r3, #4]
 8018676:	685b      	ldr	r3, [r3, #4]
 8018678:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801867a:	697b      	ldr	r3, [r7, #20]
 801867c:	889b      	ldrh	r3, [r3, #4]
 801867e:	b29b      	uxth	r3, r3
 8018680:	2b00      	cmp	r3, #0
 8018682:	d12a      	bne.n	80186da <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8018684:	687b      	ldr	r3, [r7, #4]
 8018686:	685b      	ldr	r3, [r3, #4]
 8018688:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801868a:	697b      	ldr	r3, [r7, #20]
 801868c:	681a      	ldr	r2, [r3, #0]
 801868e:	687b      	ldr	r3, [r7, #4]
 8018690:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8018692:	69bb      	ldr	r3, [r7, #24]
 8018694:	6858      	ldr	r0, [r3, #4]
 8018696:	687b      	ldr	r3, [r7, #4]
 8018698:	3308      	adds	r3, #8
 801869a:	2214      	movs	r2, #20
 801869c:	4619      	mov	r1, r3
 801869e:	f003 fb89 	bl	801bdb4 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80186a2:	2101      	movs	r1, #1
 80186a4:	69b8      	ldr	r0, [r7, #24]
 80186a6:	f7ff fbc5 	bl	8017e34 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80186aa:	69b8      	ldr	r0, [r7, #24]
 80186ac:	f7f7 fa2c 	bl	800fb08 <pbuf_clen>
 80186b0:	4603      	mov	r3, r0
 80186b2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80186b4:	8bfa      	ldrh	r2, [r7, #30]
 80186b6:	8a7b      	ldrh	r3, [r7, #18]
 80186b8:	4413      	add	r3, r2
 80186ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80186be:	db05      	blt.n	80186cc <ip_reass_free_complete_datagram+0x98>
 80186c0:	4b27      	ldr	r3, [pc, #156]	; (8018760 <ip_reass_free_complete_datagram+0x12c>)
 80186c2:	22bc      	movs	r2, #188	; 0xbc
 80186c4:	492a      	ldr	r1, [pc, #168]	; (8018770 <ip_reass_free_complete_datagram+0x13c>)
 80186c6:	4828      	ldr	r0, [pc, #160]	; (8018768 <ip_reass_free_complete_datagram+0x134>)
 80186c8:	f004 fa12 	bl	801caf0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80186cc:	8bfa      	ldrh	r2, [r7, #30]
 80186ce:	8a7b      	ldrh	r3, [r7, #18]
 80186d0:	4413      	add	r3, r2
 80186d2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80186d4:	69b8      	ldr	r0, [r7, #24]
 80186d6:	f7f7 f989 	bl	800f9ec <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80186da:	687b      	ldr	r3, [r7, #4]
 80186dc:	685b      	ldr	r3, [r3, #4]
 80186de:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80186e0:	e01f      	b.n	8018722 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80186e2:	69bb      	ldr	r3, [r7, #24]
 80186e4:	685b      	ldr	r3, [r3, #4]
 80186e6:	617b      	str	r3, [r7, #20]
    pcur = p;
 80186e8:	69bb      	ldr	r3, [r7, #24]
 80186ea:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80186ec:	697b      	ldr	r3, [r7, #20]
 80186ee:	681b      	ldr	r3, [r3, #0]
 80186f0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80186f2:	68f8      	ldr	r0, [r7, #12]
 80186f4:	f7f7 fa08 	bl	800fb08 <pbuf_clen>
 80186f8:	4603      	mov	r3, r0
 80186fa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80186fc:	8bfa      	ldrh	r2, [r7, #30]
 80186fe:	8a7b      	ldrh	r3, [r7, #18]
 8018700:	4413      	add	r3, r2
 8018702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018706:	db05      	blt.n	8018714 <ip_reass_free_complete_datagram+0xe0>
 8018708:	4b15      	ldr	r3, [pc, #84]	; (8018760 <ip_reass_free_complete_datagram+0x12c>)
 801870a:	22cc      	movs	r2, #204	; 0xcc
 801870c:	4918      	ldr	r1, [pc, #96]	; (8018770 <ip_reass_free_complete_datagram+0x13c>)
 801870e:	4816      	ldr	r0, [pc, #88]	; (8018768 <ip_reass_free_complete_datagram+0x134>)
 8018710:	f004 f9ee 	bl	801caf0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8018714:	8bfa      	ldrh	r2, [r7, #30]
 8018716:	8a7b      	ldrh	r3, [r7, #18]
 8018718:	4413      	add	r3, r2
 801871a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801871c:	68f8      	ldr	r0, [r7, #12]
 801871e:	f7f7 f965 	bl	800f9ec <pbuf_free>
  while (p != NULL) {
 8018722:	69bb      	ldr	r3, [r7, #24]
 8018724:	2b00      	cmp	r3, #0
 8018726:	d1dc      	bne.n	80186e2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8018728:	6839      	ldr	r1, [r7, #0]
 801872a:	6878      	ldr	r0, [r7, #4]
 801872c:	f000 f8c2 	bl	80188b4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8018730:	4b10      	ldr	r3, [pc, #64]	; (8018774 <ip_reass_free_complete_datagram+0x140>)
 8018732:	881b      	ldrh	r3, [r3, #0]
 8018734:	8bfa      	ldrh	r2, [r7, #30]
 8018736:	429a      	cmp	r2, r3
 8018738:	d905      	bls.n	8018746 <ip_reass_free_complete_datagram+0x112>
 801873a:	4b09      	ldr	r3, [pc, #36]	; (8018760 <ip_reass_free_complete_datagram+0x12c>)
 801873c:	22d2      	movs	r2, #210	; 0xd2
 801873e:	490e      	ldr	r1, [pc, #56]	; (8018778 <ip_reass_free_complete_datagram+0x144>)
 8018740:	4809      	ldr	r0, [pc, #36]	; (8018768 <ip_reass_free_complete_datagram+0x134>)
 8018742:	f004 f9d5 	bl	801caf0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8018746:	4b0b      	ldr	r3, [pc, #44]	; (8018774 <ip_reass_free_complete_datagram+0x140>)
 8018748:	881a      	ldrh	r2, [r3, #0]
 801874a:	8bfb      	ldrh	r3, [r7, #30]
 801874c:	1ad3      	subs	r3, r2, r3
 801874e:	b29a      	uxth	r2, r3
 8018750:	4b08      	ldr	r3, [pc, #32]	; (8018774 <ip_reass_free_complete_datagram+0x140>)
 8018752:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8018754:	8bfb      	ldrh	r3, [r7, #30]
}
 8018756:	4618      	mov	r0, r3
 8018758:	3720      	adds	r7, #32
 801875a:	46bd      	mov	sp, r7
 801875c:	bd80      	pop	{r7, pc}
 801875e:	bf00      	nop
 8018760:	08022228 	.word	0x08022228
 8018764:	08022264 	.word	0x08022264
 8018768:	08022270 	.word	0x08022270
 801876c:	08022298 	.word	0x08022298
 8018770:	080222ac 	.word	0x080222ac
 8018774:	200015c8 	.word	0x200015c8
 8018778:	080222cc 	.word	0x080222cc

0801877c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801877c:	b580      	push	{r7, lr}
 801877e:	b08a      	sub	sp, #40	; 0x28
 8018780:	af00      	add	r7, sp, #0
 8018782:	6078      	str	r0, [r7, #4]
 8018784:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8018786:	2300      	movs	r3, #0
 8018788:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801878a:	2300      	movs	r3, #0
 801878c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801878e:	2300      	movs	r3, #0
 8018790:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8018792:	2300      	movs	r3, #0
 8018794:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8018796:	2300      	movs	r3, #0
 8018798:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801879a:	4b28      	ldr	r3, [pc, #160]	; (801883c <ip_reass_remove_oldest_datagram+0xc0>)
 801879c:	681b      	ldr	r3, [r3, #0]
 801879e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80187a0:	e030      	b.n	8018804 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80187a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187a4:	695a      	ldr	r2, [r3, #20]
 80187a6:	687b      	ldr	r3, [r7, #4]
 80187a8:	68db      	ldr	r3, [r3, #12]
 80187aa:	429a      	cmp	r2, r3
 80187ac:	d10c      	bne.n	80187c8 <ip_reass_remove_oldest_datagram+0x4c>
 80187ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187b0:	699a      	ldr	r2, [r3, #24]
 80187b2:	687b      	ldr	r3, [r7, #4]
 80187b4:	691b      	ldr	r3, [r3, #16]
 80187b6:	429a      	cmp	r2, r3
 80187b8:	d106      	bne.n	80187c8 <ip_reass_remove_oldest_datagram+0x4c>
 80187ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187bc:	899a      	ldrh	r2, [r3, #12]
 80187be:	687b      	ldr	r3, [r7, #4]
 80187c0:	889b      	ldrh	r3, [r3, #4]
 80187c2:	b29b      	uxth	r3, r3
 80187c4:	429a      	cmp	r2, r3
 80187c6:	d014      	beq.n	80187f2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80187c8:	693b      	ldr	r3, [r7, #16]
 80187ca:	3301      	adds	r3, #1
 80187cc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80187ce:	6a3b      	ldr	r3, [r7, #32]
 80187d0:	2b00      	cmp	r3, #0
 80187d2:	d104      	bne.n	80187de <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80187d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187d6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80187d8:	69fb      	ldr	r3, [r7, #28]
 80187da:	61bb      	str	r3, [r7, #24]
 80187dc:	e009      	b.n	80187f2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80187de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187e0:	7fda      	ldrb	r2, [r3, #31]
 80187e2:	6a3b      	ldr	r3, [r7, #32]
 80187e4:	7fdb      	ldrb	r3, [r3, #31]
 80187e6:	429a      	cmp	r2, r3
 80187e8:	d803      	bhi.n	80187f2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80187ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187ec:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80187ee:	69fb      	ldr	r3, [r7, #28]
 80187f0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80187f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187f4:	681b      	ldr	r3, [r3, #0]
 80187f6:	2b00      	cmp	r3, #0
 80187f8:	d001      	beq.n	80187fe <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80187fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187fc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80187fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018800:	681b      	ldr	r3, [r3, #0]
 8018802:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8018804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018806:	2b00      	cmp	r3, #0
 8018808:	d1cb      	bne.n	80187a2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801880a:	6a3b      	ldr	r3, [r7, #32]
 801880c:	2b00      	cmp	r3, #0
 801880e:	d008      	beq.n	8018822 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8018810:	69b9      	ldr	r1, [r7, #24]
 8018812:	6a38      	ldr	r0, [r7, #32]
 8018814:	f7ff ff0e 	bl	8018634 <ip_reass_free_complete_datagram>
 8018818:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801881a:	697a      	ldr	r2, [r7, #20]
 801881c:	68fb      	ldr	r3, [r7, #12]
 801881e:	4413      	add	r3, r2
 8018820:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8018822:	697a      	ldr	r2, [r7, #20]
 8018824:	683b      	ldr	r3, [r7, #0]
 8018826:	429a      	cmp	r2, r3
 8018828:	da02      	bge.n	8018830 <ip_reass_remove_oldest_datagram+0xb4>
 801882a:	693b      	ldr	r3, [r7, #16]
 801882c:	2b01      	cmp	r3, #1
 801882e:	dcac      	bgt.n	801878a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8018830:	697b      	ldr	r3, [r7, #20]
}
 8018832:	4618      	mov	r0, r3
 8018834:	3728      	adds	r7, #40	; 0x28
 8018836:	46bd      	mov	sp, r7
 8018838:	bd80      	pop	{r7, pc}
 801883a:	bf00      	nop
 801883c:	200015c4 	.word	0x200015c4

08018840 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8018840:	b580      	push	{r7, lr}
 8018842:	b084      	sub	sp, #16
 8018844:	af00      	add	r7, sp, #0
 8018846:	6078      	str	r0, [r7, #4]
 8018848:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801884a:	2004      	movs	r0, #4
 801884c:	f7f6 f96e 	bl	800eb2c <memp_malloc>
 8018850:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8018852:	68fb      	ldr	r3, [r7, #12]
 8018854:	2b00      	cmp	r3, #0
 8018856:	d110      	bne.n	801887a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8018858:	6839      	ldr	r1, [r7, #0]
 801885a:	6878      	ldr	r0, [r7, #4]
 801885c:	f7ff ff8e 	bl	801877c <ip_reass_remove_oldest_datagram>
 8018860:	4602      	mov	r2, r0
 8018862:	683b      	ldr	r3, [r7, #0]
 8018864:	4293      	cmp	r3, r2
 8018866:	dc03      	bgt.n	8018870 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018868:	2004      	movs	r0, #4
 801886a:	f7f6 f95f 	bl	800eb2c <memp_malloc>
 801886e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8018870:	68fb      	ldr	r3, [r7, #12]
 8018872:	2b00      	cmp	r3, #0
 8018874:	d101      	bne.n	801887a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8018876:	2300      	movs	r3, #0
 8018878:	e016      	b.n	80188a8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801887a:	2220      	movs	r2, #32
 801887c:	2100      	movs	r1, #0
 801887e:	68f8      	ldr	r0, [r7, #12]
 8018880:	f003 fac0 	bl	801be04 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8018884:	68fb      	ldr	r3, [r7, #12]
 8018886:	220f      	movs	r2, #15
 8018888:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801888a:	4b09      	ldr	r3, [pc, #36]	; (80188b0 <ip_reass_enqueue_new_datagram+0x70>)
 801888c:	681a      	ldr	r2, [r3, #0]
 801888e:	68fb      	ldr	r3, [r7, #12]
 8018890:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8018892:	4a07      	ldr	r2, [pc, #28]	; (80188b0 <ip_reass_enqueue_new_datagram+0x70>)
 8018894:	68fb      	ldr	r3, [r7, #12]
 8018896:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8018898:	68fb      	ldr	r3, [r7, #12]
 801889a:	3308      	adds	r3, #8
 801889c:	2214      	movs	r2, #20
 801889e:	6879      	ldr	r1, [r7, #4]
 80188a0:	4618      	mov	r0, r3
 80188a2:	f003 fa87 	bl	801bdb4 <memcpy>
  return ipr;
 80188a6:	68fb      	ldr	r3, [r7, #12]
}
 80188a8:	4618      	mov	r0, r3
 80188aa:	3710      	adds	r7, #16
 80188ac:	46bd      	mov	sp, r7
 80188ae:	bd80      	pop	{r7, pc}
 80188b0:	200015c4 	.word	0x200015c4

080188b4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80188b4:	b580      	push	{r7, lr}
 80188b6:	b082      	sub	sp, #8
 80188b8:	af00      	add	r7, sp, #0
 80188ba:	6078      	str	r0, [r7, #4]
 80188bc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80188be:	4b10      	ldr	r3, [pc, #64]	; (8018900 <ip_reass_dequeue_datagram+0x4c>)
 80188c0:	681b      	ldr	r3, [r3, #0]
 80188c2:	687a      	ldr	r2, [r7, #4]
 80188c4:	429a      	cmp	r2, r3
 80188c6:	d104      	bne.n	80188d2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80188c8:	687b      	ldr	r3, [r7, #4]
 80188ca:	681b      	ldr	r3, [r3, #0]
 80188cc:	4a0c      	ldr	r2, [pc, #48]	; (8018900 <ip_reass_dequeue_datagram+0x4c>)
 80188ce:	6013      	str	r3, [r2, #0]
 80188d0:	e00d      	b.n	80188ee <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80188d2:	683b      	ldr	r3, [r7, #0]
 80188d4:	2b00      	cmp	r3, #0
 80188d6:	d106      	bne.n	80188e6 <ip_reass_dequeue_datagram+0x32>
 80188d8:	4b0a      	ldr	r3, [pc, #40]	; (8018904 <ip_reass_dequeue_datagram+0x50>)
 80188da:	f240 1245 	movw	r2, #325	; 0x145
 80188de:	490a      	ldr	r1, [pc, #40]	; (8018908 <ip_reass_dequeue_datagram+0x54>)
 80188e0:	480a      	ldr	r0, [pc, #40]	; (801890c <ip_reass_dequeue_datagram+0x58>)
 80188e2:	f004 f905 	bl	801caf0 <iprintf>
    prev->next = ipr->next;
 80188e6:	687b      	ldr	r3, [r7, #4]
 80188e8:	681a      	ldr	r2, [r3, #0]
 80188ea:	683b      	ldr	r3, [r7, #0]
 80188ec:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80188ee:	6879      	ldr	r1, [r7, #4]
 80188f0:	2004      	movs	r0, #4
 80188f2:	f7f6 f96d 	bl	800ebd0 <memp_free>
}
 80188f6:	bf00      	nop
 80188f8:	3708      	adds	r7, #8
 80188fa:	46bd      	mov	sp, r7
 80188fc:	bd80      	pop	{r7, pc}
 80188fe:	bf00      	nop
 8018900:	200015c4 	.word	0x200015c4
 8018904:	08022228 	.word	0x08022228
 8018908:	080222f0 	.word	0x080222f0
 801890c:	08022270 	.word	0x08022270

08018910 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8018910:	b580      	push	{r7, lr}
 8018912:	b08c      	sub	sp, #48	; 0x30
 8018914:	af00      	add	r7, sp, #0
 8018916:	60f8      	str	r0, [r7, #12]
 8018918:	60b9      	str	r1, [r7, #8]
 801891a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801891c:	2300      	movs	r3, #0
 801891e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8018920:	2301      	movs	r3, #1
 8018922:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8018924:	68bb      	ldr	r3, [r7, #8]
 8018926:	685b      	ldr	r3, [r3, #4]
 8018928:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801892a:	69fb      	ldr	r3, [r7, #28]
 801892c:	885b      	ldrh	r3, [r3, #2]
 801892e:	b29b      	uxth	r3, r3
 8018930:	4618      	mov	r0, r3
 8018932:	f7f5 fc45 	bl	800e1c0 <lwip_htons>
 8018936:	4603      	mov	r3, r0
 8018938:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801893a:	69fb      	ldr	r3, [r7, #28]
 801893c:	781b      	ldrb	r3, [r3, #0]
 801893e:	f003 030f 	and.w	r3, r3, #15
 8018942:	b2db      	uxtb	r3, r3
 8018944:	009b      	lsls	r3, r3, #2
 8018946:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8018948:	7e7b      	ldrb	r3, [r7, #25]
 801894a:	b29b      	uxth	r3, r3
 801894c:	8b7a      	ldrh	r2, [r7, #26]
 801894e:	429a      	cmp	r2, r3
 8018950:	d202      	bcs.n	8018958 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018952:	f04f 33ff 	mov.w	r3, #4294967295
 8018956:	e135      	b.n	8018bc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8018958:	7e7b      	ldrb	r3, [r7, #25]
 801895a:	b29b      	uxth	r3, r3
 801895c:	8b7a      	ldrh	r2, [r7, #26]
 801895e:	1ad3      	subs	r3, r2, r3
 8018960:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8018962:	69fb      	ldr	r3, [r7, #28]
 8018964:	88db      	ldrh	r3, [r3, #6]
 8018966:	b29b      	uxth	r3, r3
 8018968:	4618      	mov	r0, r3
 801896a:	f7f5 fc29 	bl	800e1c0 <lwip_htons>
 801896e:	4603      	mov	r3, r0
 8018970:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018974:	b29b      	uxth	r3, r3
 8018976:	00db      	lsls	r3, r3, #3
 8018978:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801897a:	68bb      	ldr	r3, [r7, #8]
 801897c:	685b      	ldr	r3, [r3, #4]
 801897e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8018980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018982:	2200      	movs	r2, #0
 8018984:	701a      	strb	r2, [r3, #0]
 8018986:	2200      	movs	r2, #0
 8018988:	705a      	strb	r2, [r3, #1]
 801898a:	2200      	movs	r2, #0
 801898c:	709a      	strb	r2, [r3, #2]
 801898e:	2200      	movs	r2, #0
 8018990:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8018992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018994:	8afa      	ldrh	r2, [r7, #22]
 8018996:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8018998:	8afa      	ldrh	r2, [r7, #22]
 801899a:	8b7b      	ldrh	r3, [r7, #26]
 801899c:	4413      	add	r3, r2
 801899e:	b29a      	uxth	r2, r3
 80189a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80189a2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80189a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80189a6:	88db      	ldrh	r3, [r3, #6]
 80189a8:	b29b      	uxth	r3, r3
 80189aa:	8afa      	ldrh	r2, [r7, #22]
 80189ac:	429a      	cmp	r2, r3
 80189ae:	d902      	bls.n	80189b6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80189b0:	f04f 33ff 	mov.w	r3, #4294967295
 80189b4:	e106      	b.n	8018bc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80189b6:	68fb      	ldr	r3, [r7, #12]
 80189b8:	685b      	ldr	r3, [r3, #4]
 80189ba:	627b      	str	r3, [r7, #36]	; 0x24
 80189bc:	e068      	b.n	8018a90 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80189be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189c0:	685b      	ldr	r3, [r3, #4]
 80189c2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80189c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80189c6:	889b      	ldrh	r3, [r3, #4]
 80189c8:	b29a      	uxth	r2, r3
 80189ca:	693b      	ldr	r3, [r7, #16]
 80189cc:	889b      	ldrh	r3, [r3, #4]
 80189ce:	b29b      	uxth	r3, r3
 80189d0:	429a      	cmp	r2, r3
 80189d2:	d235      	bcs.n	8018a40 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80189d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80189d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80189d8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80189da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189dc:	2b00      	cmp	r3, #0
 80189de:	d020      	beq.n	8018a22 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80189e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80189e2:	889b      	ldrh	r3, [r3, #4]
 80189e4:	b29a      	uxth	r2, r3
 80189e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189e8:	88db      	ldrh	r3, [r3, #6]
 80189ea:	b29b      	uxth	r3, r3
 80189ec:	429a      	cmp	r2, r3
 80189ee:	d307      	bcc.n	8018a00 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80189f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80189f2:	88db      	ldrh	r3, [r3, #6]
 80189f4:	b29a      	uxth	r2, r3
 80189f6:	693b      	ldr	r3, [r7, #16]
 80189f8:	889b      	ldrh	r3, [r3, #4]
 80189fa:	b29b      	uxth	r3, r3
 80189fc:	429a      	cmp	r2, r3
 80189fe:	d902      	bls.n	8018a06 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018a00:	f04f 33ff 	mov.w	r3, #4294967295
 8018a04:	e0de      	b.n	8018bc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8018a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a08:	68ba      	ldr	r2, [r7, #8]
 8018a0a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8018a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a0e:	88db      	ldrh	r3, [r3, #6]
 8018a10:	b29a      	uxth	r2, r3
 8018a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a14:	889b      	ldrh	r3, [r3, #4]
 8018a16:	b29b      	uxth	r3, r3
 8018a18:	429a      	cmp	r2, r3
 8018a1a:	d03d      	beq.n	8018a98 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018a1c:	2300      	movs	r3, #0
 8018a1e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8018a20:	e03a      	b.n	8018a98 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8018a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a24:	88db      	ldrh	r3, [r3, #6]
 8018a26:	b29a      	uxth	r2, r3
 8018a28:	693b      	ldr	r3, [r7, #16]
 8018a2a:	889b      	ldrh	r3, [r3, #4]
 8018a2c:	b29b      	uxth	r3, r3
 8018a2e:	429a      	cmp	r2, r3
 8018a30:	d902      	bls.n	8018a38 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018a32:	f04f 33ff 	mov.w	r3, #4294967295
 8018a36:	e0c5      	b.n	8018bc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8018a38:	68fb      	ldr	r3, [r7, #12]
 8018a3a:	68ba      	ldr	r2, [r7, #8]
 8018a3c:	605a      	str	r2, [r3, #4]
      break;
 8018a3e:	e02b      	b.n	8018a98 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8018a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a42:	889b      	ldrh	r3, [r3, #4]
 8018a44:	b29a      	uxth	r2, r3
 8018a46:	693b      	ldr	r3, [r7, #16]
 8018a48:	889b      	ldrh	r3, [r3, #4]
 8018a4a:	b29b      	uxth	r3, r3
 8018a4c:	429a      	cmp	r2, r3
 8018a4e:	d102      	bne.n	8018a56 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018a50:	f04f 33ff 	mov.w	r3, #4294967295
 8018a54:	e0b6      	b.n	8018bc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8018a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a58:	889b      	ldrh	r3, [r3, #4]
 8018a5a:	b29a      	uxth	r2, r3
 8018a5c:	693b      	ldr	r3, [r7, #16]
 8018a5e:	88db      	ldrh	r3, [r3, #6]
 8018a60:	b29b      	uxth	r3, r3
 8018a62:	429a      	cmp	r2, r3
 8018a64:	d202      	bcs.n	8018a6c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018a66:	f04f 33ff 	mov.w	r3, #4294967295
 8018a6a:	e0ab      	b.n	8018bc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8018a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a6e:	2b00      	cmp	r3, #0
 8018a70:	d009      	beq.n	8018a86 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8018a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a74:	88db      	ldrh	r3, [r3, #6]
 8018a76:	b29a      	uxth	r2, r3
 8018a78:	693b      	ldr	r3, [r7, #16]
 8018a7a:	889b      	ldrh	r3, [r3, #4]
 8018a7c:	b29b      	uxth	r3, r3
 8018a7e:	429a      	cmp	r2, r3
 8018a80:	d001      	beq.n	8018a86 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018a82:	2300      	movs	r3, #0
 8018a84:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8018a86:	693b      	ldr	r3, [r7, #16]
 8018a88:	681b      	ldr	r3, [r3, #0]
 8018a8a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8018a8c:	693b      	ldr	r3, [r7, #16]
 8018a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8018a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a92:	2b00      	cmp	r3, #0
 8018a94:	d193      	bne.n	80189be <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8018a96:	e000      	b.n	8018a9a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8018a98:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8018a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a9c:	2b00      	cmp	r3, #0
 8018a9e:	d12d      	bne.n	8018afc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8018aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018aa2:	2b00      	cmp	r3, #0
 8018aa4:	d01c      	beq.n	8018ae0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8018aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018aa8:	88db      	ldrh	r3, [r3, #6]
 8018aaa:	b29a      	uxth	r2, r3
 8018aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018aae:	889b      	ldrh	r3, [r3, #4]
 8018ab0:	b29b      	uxth	r3, r3
 8018ab2:	429a      	cmp	r2, r3
 8018ab4:	d906      	bls.n	8018ac4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8018ab6:	4b45      	ldr	r3, [pc, #276]	; (8018bcc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018ab8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8018abc:	4944      	ldr	r1, [pc, #272]	; (8018bd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8018abe:	4845      	ldr	r0, [pc, #276]	; (8018bd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018ac0:	f004 f816 	bl	801caf0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8018ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ac6:	68ba      	ldr	r2, [r7, #8]
 8018ac8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8018aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018acc:	88db      	ldrh	r3, [r3, #6]
 8018ace:	b29a      	uxth	r2, r3
 8018ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ad2:	889b      	ldrh	r3, [r3, #4]
 8018ad4:	b29b      	uxth	r3, r3
 8018ad6:	429a      	cmp	r2, r3
 8018ad8:	d010      	beq.n	8018afc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8018ada:	2300      	movs	r3, #0
 8018adc:	623b      	str	r3, [r7, #32]
 8018ade:	e00d      	b.n	8018afc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8018ae0:	68fb      	ldr	r3, [r7, #12]
 8018ae2:	685b      	ldr	r3, [r3, #4]
 8018ae4:	2b00      	cmp	r3, #0
 8018ae6:	d006      	beq.n	8018af6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8018ae8:	4b38      	ldr	r3, [pc, #224]	; (8018bcc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018aea:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8018aee:	493a      	ldr	r1, [pc, #232]	; (8018bd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8018af0:	4838      	ldr	r0, [pc, #224]	; (8018bd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018af2:	f003 fffd 	bl	801caf0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8018af6:	68fb      	ldr	r3, [r7, #12]
 8018af8:	68ba      	ldr	r2, [r7, #8]
 8018afa:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8018afc:	687b      	ldr	r3, [r7, #4]
 8018afe:	2b00      	cmp	r3, #0
 8018b00:	d105      	bne.n	8018b0e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8018b02:	68fb      	ldr	r3, [r7, #12]
 8018b04:	7f9b      	ldrb	r3, [r3, #30]
 8018b06:	f003 0301 	and.w	r3, r3, #1
 8018b0a:	2b00      	cmp	r3, #0
 8018b0c:	d059      	beq.n	8018bc2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8018b0e:	6a3b      	ldr	r3, [r7, #32]
 8018b10:	2b00      	cmp	r3, #0
 8018b12:	d04f      	beq.n	8018bb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8018b14:	68fb      	ldr	r3, [r7, #12]
 8018b16:	685b      	ldr	r3, [r3, #4]
 8018b18:	2b00      	cmp	r3, #0
 8018b1a:	d006      	beq.n	8018b2a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8018b1c:	68fb      	ldr	r3, [r7, #12]
 8018b1e:	685b      	ldr	r3, [r3, #4]
 8018b20:	685b      	ldr	r3, [r3, #4]
 8018b22:	889b      	ldrh	r3, [r3, #4]
 8018b24:	b29b      	uxth	r3, r3
 8018b26:	2b00      	cmp	r3, #0
 8018b28:	d002      	beq.n	8018b30 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8018b2a:	2300      	movs	r3, #0
 8018b2c:	623b      	str	r3, [r7, #32]
 8018b2e:	e041      	b.n	8018bb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8018b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b32:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8018b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b36:	681b      	ldr	r3, [r3, #0]
 8018b38:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8018b3a:	e012      	b.n	8018b62 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8018b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b3e:	685b      	ldr	r3, [r3, #4]
 8018b40:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8018b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b44:	88db      	ldrh	r3, [r3, #6]
 8018b46:	b29a      	uxth	r2, r3
 8018b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b4a:	889b      	ldrh	r3, [r3, #4]
 8018b4c:	b29b      	uxth	r3, r3
 8018b4e:	429a      	cmp	r2, r3
 8018b50:	d002      	beq.n	8018b58 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8018b52:	2300      	movs	r3, #0
 8018b54:	623b      	str	r3, [r7, #32]
            break;
 8018b56:	e007      	b.n	8018b68 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8018b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b5a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8018b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b5e:	681b      	ldr	r3, [r3, #0]
 8018b60:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8018b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b64:	2b00      	cmp	r3, #0
 8018b66:	d1e9      	bne.n	8018b3c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8018b68:	6a3b      	ldr	r3, [r7, #32]
 8018b6a:	2b00      	cmp	r3, #0
 8018b6c:	d022      	beq.n	8018bb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8018b6e:	68fb      	ldr	r3, [r7, #12]
 8018b70:	685b      	ldr	r3, [r3, #4]
 8018b72:	2b00      	cmp	r3, #0
 8018b74:	d106      	bne.n	8018b84 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8018b76:	4b15      	ldr	r3, [pc, #84]	; (8018bcc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018b78:	f240 12df 	movw	r2, #479	; 0x1df
 8018b7c:	4917      	ldr	r1, [pc, #92]	; (8018bdc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018b7e:	4815      	ldr	r0, [pc, #84]	; (8018bd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018b80:	f003 ffb6 	bl	801caf0 <iprintf>
          LWIP_ASSERT("sanity check",
 8018b84:	68fb      	ldr	r3, [r7, #12]
 8018b86:	685b      	ldr	r3, [r3, #4]
 8018b88:	685b      	ldr	r3, [r3, #4]
 8018b8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018b8c:	429a      	cmp	r2, r3
 8018b8e:	d106      	bne.n	8018b9e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8018b90:	4b0e      	ldr	r3, [pc, #56]	; (8018bcc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018b92:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8018b96:	4911      	ldr	r1, [pc, #68]	; (8018bdc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018b98:	480e      	ldr	r0, [pc, #56]	; (8018bd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018b9a:	f003 ffa9 	bl	801caf0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8018b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ba0:	681b      	ldr	r3, [r3, #0]
 8018ba2:	2b00      	cmp	r3, #0
 8018ba4:	d006      	beq.n	8018bb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8018ba6:	4b09      	ldr	r3, [pc, #36]	; (8018bcc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018ba8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8018bac:	490c      	ldr	r1, [pc, #48]	; (8018be0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8018bae:	4809      	ldr	r0, [pc, #36]	; (8018bd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018bb0:	f003 ff9e 	bl	801caf0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8018bb4:	6a3b      	ldr	r3, [r7, #32]
 8018bb6:	2b00      	cmp	r3, #0
 8018bb8:	bf14      	ite	ne
 8018bba:	2301      	movne	r3, #1
 8018bbc:	2300      	moveq	r3, #0
 8018bbe:	b2db      	uxtb	r3, r3
 8018bc0:	e000      	b.n	8018bc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8018bc2:	2300      	movs	r3, #0
}
 8018bc4:	4618      	mov	r0, r3
 8018bc6:	3730      	adds	r7, #48	; 0x30
 8018bc8:	46bd      	mov	sp, r7
 8018bca:	bd80      	pop	{r7, pc}
 8018bcc:	08022228 	.word	0x08022228
 8018bd0:	0802230c 	.word	0x0802230c
 8018bd4:	08022270 	.word	0x08022270
 8018bd8:	0802232c 	.word	0x0802232c
 8018bdc:	08022364 	.word	0x08022364
 8018be0:	08022374 	.word	0x08022374

08018be4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8018be4:	b580      	push	{r7, lr}
 8018be6:	b08e      	sub	sp, #56	; 0x38
 8018be8:	af00      	add	r7, sp, #0
 8018bea:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8018bec:	687b      	ldr	r3, [r7, #4]
 8018bee:	685b      	ldr	r3, [r3, #4]
 8018bf0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8018bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018bf4:	781b      	ldrb	r3, [r3, #0]
 8018bf6:	f003 030f 	and.w	r3, r3, #15
 8018bfa:	b2db      	uxtb	r3, r3
 8018bfc:	009b      	lsls	r3, r3, #2
 8018bfe:	b2db      	uxtb	r3, r3
 8018c00:	2b14      	cmp	r3, #20
 8018c02:	f040 8167 	bne.w	8018ed4 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8018c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c08:	88db      	ldrh	r3, [r3, #6]
 8018c0a:	b29b      	uxth	r3, r3
 8018c0c:	4618      	mov	r0, r3
 8018c0e:	f7f5 fad7 	bl	800e1c0 <lwip_htons>
 8018c12:	4603      	mov	r3, r0
 8018c14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018c18:	b29b      	uxth	r3, r3
 8018c1a:	00db      	lsls	r3, r3, #3
 8018c1c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8018c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c20:	885b      	ldrh	r3, [r3, #2]
 8018c22:	b29b      	uxth	r3, r3
 8018c24:	4618      	mov	r0, r3
 8018c26:	f7f5 facb 	bl	800e1c0 <lwip_htons>
 8018c2a:	4603      	mov	r3, r0
 8018c2c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8018c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c30:	781b      	ldrb	r3, [r3, #0]
 8018c32:	f003 030f 	and.w	r3, r3, #15
 8018c36:	b2db      	uxtb	r3, r3
 8018c38:	009b      	lsls	r3, r3, #2
 8018c3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8018c3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018c42:	b29b      	uxth	r3, r3
 8018c44:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018c46:	429a      	cmp	r2, r3
 8018c48:	f0c0 8146 	bcc.w	8018ed8 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8018c4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018c50:	b29b      	uxth	r3, r3
 8018c52:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018c54:	1ad3      	subs	r3, r2, r3
 8018c56:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8018c58:	6878      	ldr	r0, [r7, #4]
 8018c5a:	f7f6 ff55 	bl	800fb08 <pbuf_clen>
 8018c5e:	4603      	mov	r3, r0
 8018c60:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8018c62:	4b9f      	ldr	r3, [pc, #636]	; (8018ee0 <ip4_reass+0x2fc>)
 8018c64:	881b      	ldrh	r3, [r3, #0]
 8018c66:	461a      	mov	r2, r3
 8018c68:	8c3b      	ldrh	r3, [r7, #32]
 8018c6a:	4413      	add	r3, r2
 8018c6c:	2b0a      	cmp	r3, #10
 8018c6e:	dd10      	ble.n	8018c92 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018c70:	8c3b      	ldrh	r3, [r7, #32]
 8018c72:	4619      	mov	r1, r3
 8018c74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018c76:	f7ff fd81 	bl	801877c <ip_reass_remove_oldest_datagram>
 8018c7a:	4603      	mov	r3, r0
 8018c7c:	2b00      	cmp	r3, #0
 8018c7e:	f000 812d 	beq.w	8018edc <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8018c82:	4b97      	ldr	r3, [pc, #604]	; (8018ee0 <ip4_reass+0x2fc>)
 8018c84:	881b      	ldrh	r3, [r3, #0]
 8018c86:	461a      	mov	r2, r3
 8018c88:	8c3b      	ldrh	r3, [r7, #32]
 8018c8a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018c8c:	2b0a      	cmp	r3, #10
 8018c8e:	f300 8125 	bgt.w	8018edc <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018c92:	4b94      	ldr	r3, [pc, #592]	; (8018ee4 <ip4_reass+0x300>)
 8018c94:	681b      	ldr	r3, [r3, #0]
 8018c96:	633b      	str	r3, [r7, #48]	; 0x30
 8018c98:	e015      	b.n	8018cc6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8018c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c9c:	695a      	ldr	r2, [r3, #20]
 8018c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ca0:	68db      	ldr	r3, [r3, #12]
 8018ca2:	429a      	cmp	r2, r3
 8018ca4:	d10c      	bne.n	8018cc0 <ip4_reass+0xdc>
 8018ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ca8:	699a      	ldr	r2, [r3, #24]
 8018caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018cac:	691b      	ldr	r3, [r3, #16]
 8018cae:	429a      	cmp	r2, r3
 8018cb0:	d106      	bne.n	8018cc0 <ip4_reass+0xdc>
 8018cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018cb4:	899a      	ldrh	r2, [r3, #12]
 8018cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018cb8:	889b      	ldrh	r3, [r3, #4]
 8018cba:	b29b      	uxth	r3, r3
 8018cbc:	429a      	cmp	r2, r3
 8018cbe:	d006      	beq.n	8018cce <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018cc2:	681b      	ldr	r3, [r3, #0]
 8018cc4:	633b      	str	r3, [r7, #48]	; 0x30
 8018cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018cc8:	2b00      	cmp	r3, #0
 8018cca:	d1e6      	bne.n	8018c9a <ip4_reass+0xb6>
 8018ccc:	e000      	b.n	8018cd0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8018cce:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8018cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018cd2:	2b00      	cmp	r3, #0
 8018cd4:	d109      	bne.n	8018cea <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8018cd6:	8c3b      	ldrh	r3, [r7, #32]
 8018cd8:	4619      	mov	r1, r3
 8018cda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018cdc:	f7ff fdb0 	bl	8018840 <ip_reass_enqueue_new_datagram>
 8018ce0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8018ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ce4:	2b00      	cmp	r3, #0
 8018ce6:	d11c      	bne.n	8018d22 <ip4_reass+0x13e>
      goto nullreturn;
 8018ce8:	e109      	b.n	8018efe <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018cec:	88db      	ldrh	r3, [r3, #6]
 8018cee:	b29b      	uxth	r3, r3
 8018cf0:	4618      	mov	r0, r3
 8018cf2:	f7f5 fa65 	bl	800e1c0 <lwip_htons>
 8018cf6:	4603      	mov	r3, r0
 8018cf8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018cfc:	2b00      	cmp	r3, #0
 8018cfe:	d110      	bne.n	8018d22 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8018d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d02:	89db      	ldrh	r3, [r3, #14]
 8018d04:	4618      	mov	r0, r3
 8018d06:	f7f5 fa5b 	bl	800e1c0 <lwip_htons>
 8018d0a:	4603      	mov	r3, r0
 8018d0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018d10:	2b00      	cmp	r3, #0
 8018d12:	d006      	beq.n	8018d22 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8018d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d16:	3308      	adds	r3, #8
 8018d18:	2214      	movs	r2, #20
 8018d1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018d1c:	4618      	mov	r0, r3
 8018d1e:	f003 f849 	bl	801bdb4 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8018d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d24:	88db      	ldrh	r3, [r3, #6]
 8018d26:	b29b      	uxth	r3, r3
 8018d28:	f003 0320 	and.w	r3, r3, #32
 8018d2c:	2b00      	cmp	r3, #0
 8018d2e:	bf0c      	ite	eq
 8018d30:	2301      	moveq	r3, #1
 8018d32:	2300      	movne	r3, #0
 8018d34:	b2db      	uxtb	r3, r3
 8018d36:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8018d38:	69fb      	ldr	r3, [r7, #28]
 8018d3a:	2b00      	cmp	r3, #0
 8018d3c:	d00e      	beq.n	8018d5c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8018d3e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018d40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018d42:	4413      	add	r3, r2
 8018d44:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8018d46:	8b7a      	ldrh	r2, [r7, #26]
 8018d48:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018d4a:	429a      	cmp	r2, r3
 8018d4c:	f0c0 80a0 	bcc.w	8018e90 <ip4_reass+0x2ac>
 8018d50:	8b7b      	ldrh	r3, [r7, #26]
 8018d52:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8018d56:	4293      	cmp	r3, r2
 8018d58:	f200 809a 	bhi.w	8018e90 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8018d5c:	69fa      	ldr	r2, [r7, #28]
 8018d5e:	6879      	ldr	r1, [r7, #4]
 8018d60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018d62:	f7ff fdd5 	bl	8018910 <ip_reass_chain_frag_into_datagram_and_validate>
 8018d66:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8018d68:	697b      	ldr	r3, [r7, #20]
 8018d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018d6e:	f000 8091 	beq.w	8018e94 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8018d72:	4b5b      	ldr	r3, [pc, #364]	; (8018ee0 <ip4_reass+0x2fc>)
 8018d74:	881a      	ldrh	r2, [r3, #0]
 8018d76:	8c3b      	ldrh	r3, [r7, #32]
 8018d78:	4413      	add	r3, r2
 8018d7a:	b29a      	uxth	r2, r3
 8018d7c:	4b58      	ldr	r3, [pc, #352]	; (8018ee0 <ip4_reass+0x2fc>)
 8018d7e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8018d80:	69fb      	ldr	r3, [r7, #28]
 8018d82:	2b00      	cmp	r3, #0
 8018d84:	d00d      	beq.n	8018da2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8018d86:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018d88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018d8a:	4413      	add	r3, r2
 8018d8c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8018d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d90:	8a7a      	ldrh	r2, [r7, #18]
 8018d92:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8018d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d96:	7f9b      	ldrb	r3, [r3, #30]
 8018d98:	f043 0301 	orr.w	r3, r3, #1
 8018d9c:	b2da      	uxtb	r2, r3
 8018d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018da0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8018da2:	697b      	ldr	r3, [r7, #20]
 8018da4:	2b01      	cmp	r3, #1
 8018da6:	d171      	bne.n	8018e8c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8018da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018daa:	8b9b      	ldrh	r3, [r3, #28]
 8018dac:	3314      	adds	r3, #20
 8018dae:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8018db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018db2:	685b      	ldr	r3, [r3, #4]
 8018db4:	685b      	ldr	r3, [r3, #4]
 8018db6:	681b      	ldr	r3, [r3, #0]
 8018db8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8018dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018dbc:	685b      	ldr	r3, [r3, #4]
 8018dbe:	685b      	ldr	r3, [r3, #4]
 8018dc0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8018dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018dc4:	3308      	adds	r3, #8
 8018dc6:	2214      	movs	r2, #20
 8018dc8:	4619      	mov	r1, r3
 8018dca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018dcc:	f002 fff2 	bl	801bdb4 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8018dd0:	8a3b      	ldrh	r3, [r7, #16]
 8018dd2:	4618      	mov	r0, r3
 8018dd4:	f7f5 f9f4 	bl	800e1c0 <lwip_htons>
 8018dd8:	4603      	mov	r3, r0
 8018dda:	461a      	mov	r2, r3
 8018ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018dde:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8018de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018de2:	2200      	movs	r2, #0
 8018de4:	719a      	strb	r2, [r3, #6]
 8018de6:	2200      	movs	r2, #0
 8018de8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8018dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018dec:	2200      	movs	r2, #0
 8018dee:	729a      	strb	r2, [r3, #10]
 8018df0:	2200      	movs	r2, #0
 8018df2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8018df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018df6:	685b      	ldr	r3, [r3, #4]
 8018df8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8018dfa:	e00d      	b.n	8018e18 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8018dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018dfe:	685b      	ldr	r3, [r3, #4]
 8018e00:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8018e02:	2114      	movs	r1, #20
 8018e04:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8018e06:	f7f6 fd39 	bl	800f87c <pbuf_remove_header>
      pbuf_cat(p, r);
 8018e0a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018e0c:	6878      	ldr	r0, [r7, #4]
 8018e0e:	f7f6 febb 	bl	800fb88 <pbuf_cat>
      r = iprh->next_pbuf;
 8018e12:	68fb      	ldr	r3, [r7, #12]
 8018e14:	681b      	ldr	r3, [r3, #0]
 8018e16:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8018e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018e1a:	2b00      	cmp	r3, #0
 8018e1c:	d1ee      	bne.n	8018dfc <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8018e1e:	4b31      	ldr	r3, [pc, #196]	; (8018ee4 <ip4_reass+0x300>)
 8018e20:	681b      	ldr	r3, [r3, #0]
 8018e22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018e24:	429a      	cmp	r2, r3
 8018e26:	d102      	bne.n	8018e2e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8018e28:	2300      	movs	r3, #0
 8018e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018e2c:	e010      	b.n	8018e50 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018e2e:	4b2d      	ldr	r3, [pc, #180]	; (8018ee4 <ip4_reass+0x300>)
 8018e30:	681b      	ldr	r3, [r3, #0]
 8018e32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018e34:	e007      	b.n	8018e46 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8018e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e38:	681b      	ldr	r3, [r3, #0]
 8018e3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018e3c:	429a      	cmp	r2, r3
 8018e3e:	d006      	beq.n	8018e4e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e42:	681b      	ldr	r3, [r3, #0]
 8018e44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e48:	2b00      	cmp	r3, #0
 8018e4a:	d1f4      	bne.n	8018e36 <ip4_reass+0x252>
 8018e4c:	e000      	b.n	8018e50 <ip4_reass+0x26c>
          break;
 8018e4e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8018e50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018e52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018e54:	f7ff fd2e 	bl	80188b4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8018e58:	6878      	ldr	r0, [r7, #4]
 8018e5a:	f7f6 fe55 	bl	800fb08 <pbuf_clen>
 8018e5e:	4603      	mov	r3, r0
 8018e60:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8018e62:	4b1f      	ldr	r3, [pc, #124]	; (8018ee0 <ip4_reass+0x2fc>)
 8018e64:	881b      	ldrh	r3, [r3, #0]
 8018e66:	8c3a      	ldrh	r2, [r7, #32]
 8018e68:	429a      	cmp	r2, r3
 8018e6a:	d906      	bls.n	8018e7a <ip4_reass+0x296>
 8018e6c:	4b1e      	ldr	r3, [pc, #120]	; (8018ee8 <ip4_reass+0x304>)
 8018e6e:	f240 229b 	movw	r2, #667	; 0x29b
 8018e72:	491e      	ldr	r1, [pc, #120]	; (8018eec <ip4_reass+0x308>)
 8018e74:	481e      	ldr	r0, [pc, #120]	; (8018ef0 <ip4_reass+0x30c>)
 8018e76:	f003 fe3b 	bl	801caf0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8018e7a:	4b19      	ldr	r3, [pc, #100]	; (8018ee0 <ip4_reass+0x2fc>)
 8018e7c:	881a      	ldrh	r2, [r3, #0]
 8018e7e:	8c3b      	ldrh	r3, [r7, #32]
 8018e80:	1ad3      	subs	r3, r2, r3
 8018e82:	b29a      	uxth	r2, r3
 8018e84:	4b16      	ldr	r3, [pc, #88]	; (8018ee0 <ip4_reass+0x2fc>)
 8018e86:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8018e88:	687b      	ldr	r3, [r7, #4]
 8018e8a:	e03c      	b.n	8018f06 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8018e8c:	2300      	movs	r3, #0
 8018e8e:	e03a      	b.n	8018f06 <ip4_reass+0x322>
      goto nullreturn_ipr;
 8018e90:	bf00      	nop
 8018e92:	e000      	b.n	8018e96 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8018e94:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8018e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e98:	2b00      	cmp	r3, #0
 8018e9a:	d106      	bne.n	8018eaa <ip4_reass+0x2c6>
 8018e9c:	4b12      	ldr	r3, [pc, #72]	; (8018ee8 <ip4_reass+0x304>)
 8018e9e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8018ea2:	4914      	ldr	r1, [pc, #80]	; (8018ef4 <ip4_reass+0x310>)
 8018ea4:	4812      	ldr	r0, [pc, #72]	; (8018ef0 <ip4_reass+0x30c>)
 8018ea6:	f003 fe23 	bl	801caf0 <iprintf>
  if (ipr->p == NULL) {
 8018eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018eac:	685b      	ldr	r3, [r3, #4]
 8018eae:	2b00      	cmp	r3, #0
 8018eb0:	d124      	bne.n	8018efc <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8018eb2:	4b0c      	ldr	r3, [pc, #48]	; (8018ee4 <ip4_reass+0x300>)
 8018eb4:	681b      	ldr	r3, [r3, #0]
 8018eb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018eb8:	429a      	cmp	r2, r3
 8018eba:	d006      	beq.n	8018eca <ip4_reass+0x2e6>
 8018ebc:	4b0a      	ldr	r3, [pc, #40]	; (8018ee8 <ip4_reass+0x304>)
 8018ebe:	f240 22ab 	movw	r2, #683	; 0x2ab
 8018ec2:	490d      	ldr	r1, [pc, #52]	; (8018ef8 <ip4_reass+0x314>)
 8018ec4:	480a      	ldr	r0, [pc, #40]	; (8018ef0 <ip4_reass+0x30c>)
 8018ec6:	f003 fe13 	bl	801caf0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8018eca:	2100      	movs	r1, #0
 8018ecc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018ece:	f7ff fcf1 	bl	80188b4 <ip_reass_dequeue_datagram>
 8018ed2:	e014      	b.n	8018efe <ip4_reass+0x31a>
    goto nullreturn;
 8018ed4:	bf00      	nop
 8018ed6:	e012      	b.n	8018efe <ip4_reass+0x31a>
    goto nullreturn;
 8018ed8:	bf00      	nop
 8018eda:	e010      	b.n	8018efe <ip4_reass+0x31a>
      goto nullreturn;
 8018edc:	bf00      	nop
 8018ede:	e00e      	b.n	8018efe <ip4_reass+0x31a>
 8018ee0:	200015c8 	.word	0x200015c8
 8018ee4:	200015c4 	.word	0x200015c4
 8018ee8:	08022228 	.word	0x08022228
 8018eec:	08022398 	.word	0x08022398
 8018ef0:	08022270 	.word	0x08022270
 8018ef4:	080223b4 	.word	0x080223b4
 8018ef8:	080223c0 	.word	0x080223c0
  }

nullreturn:
 8018efc:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8018efe:	6878      	ldr	r0, [r7, #4]
 8018f00:	f7f6 fd74 	bl	800f9ec <pbuf_free>
  return NULL;
 8018f04:	2300      	movs	r3, #0
}
 8018f06:	4618      	mov	r0, r3
 8018f08:	3738      	adds	r7, #56	; 0x38
 8018f0a:	46bd      	mov	sp, r7
 8018f0c:	bd80      	pop	{r7, pc}
 8018f0e:	bf00      	nop

08018f10 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8018f10:	b580      	push	{r7, lr}
 8018f12:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8018f14:	2005      	movs	r0, #5
 8018f16:	f7f5 fe09 	bl	800eb2c <memp_malloc>
 8018f1a:	4603      	mov	r3, r0
}
 8018f1c:	4618      	mov	r0, r3
 8018f1e:	bd80      	pop	{r7, pc}

08018f20 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8018f20:	b580      	push	{r7, lr}
 8018f22:	b082      	sub	sp, #8
 8018f24:	af00      	add	r7, sp, #0
 8018f26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8018f28:	687b      	ldr	r3, [r7, #4]
 8018f2a:	2b00      	cmp	r3, #0
 8018f2c:	d106      	bne.n	8018f3c <ip_frag_free_pbuf_custom_ref+0x1c>
 8018f2e:	4b07      	ldr	r3, [pc, #28]	; (8018f4c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8018f30:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8018f34:	4906      	ldr	r1, [pc, #24]	; (8018f50 <ip_frag_free_pbuf_custom_ref+0x30>)
 8018f36:	4807      	ldr	r0, [pc, #28]	; (8018f54 <ip_frag_free_pbuf_custom_ref+0x34>)
 8018f38:	f003 fdda 	bl	801caf0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8018f3c:	6879      	ldr	r1, [r7, #4]
 8018f3e:	2005      	movs	r0, #5
 8018f40:	f7f5 fe46 	bl	800ebd0 <memp_free>
}
 8018f44:	bf00      	nop
 8018f46:	3708      	adds	r7, #8
 8018f48:	46bd      	mov	sp, r7
 8018f4a:	bd80      	pop	{r7, pc}
 8018f4c:	08022228 	.word	0x08022228
 8018f50:	080223e0 	.word	0x080223e0
 8018f54:	08022270 	.word	0x08022270

08018f58 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8018f58:	b580      	push	{r7, lr}
 8018f5a:	b084      	sub	sp, #16
 8018f5c:	af00      	add	r7, sp, #0
 8018f5e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8018f60:	687b      	ldr	r3, [r7, #4]
 8018f62:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8018f64:	68fb      	ldr	r3, [r7, #12]
 8018f66:	2b00      	cmp	r3, #0
 8018f68:	d106      	bne.n	8018f78 <ipfrag_free_pbuf_custom+0x20>
 8018f6a:	4b11      	ldr	r3, [pc, #68]	; (8018fb0 <ipfrag_free_pbuf_custom+0x58>)
 8018f6c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8018f70:	4910      	ldr	r1, [pc, #64]	; (8018fb4 <ipfrag_free_pbuf_custom+0x5c>)
 8018f72:	4811      	ldr	r0, [pc, #68]	; (8018fb8 <ipfrag_free_pbuf_custom+0x60>)
 8018f74:	f003 fdbc 	bl	801caf0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8018f78:	68fa      	ldr	r2, [r7, #12]
 8018f7a:	687b      	ldr	r3, [r7, #4]
 8018f7c:	429a      	cmp	r2, r3
 8018f7e:	d006      	beq.n	8018f8e <ipfrag_free_pbuf_custom+0x36>
 8018f80:	4b0b      	ldr	r3, [pc, #44]	; (8018fb0 <ipfrag_free_pbuf_custom+0x58>)
 8018f82:	f240 22cf 	movw	r2, #719	; 0x2cf
 8018f86:	490d      	ldr	r1, [pc, #52]	; (8018fbc <ipfrag_free_pbuf_custom+0x64>)
 8018f88:	480b      	ldr	r0, [pc, #44]	; (8018fb8 <ipfrag_free_pbuf_custom+0x60>)
 8018f8a:	f003 fdb1 	bl	801caf0 <iprintf>
  if (pcr->original != NULL) {
 8018f8e:	68fb      	ldr	r3, [r7, #12]
 8018f90:	695b      	ldr	r3, [r3, #20]
 8018f92:	2b00      	cmp	r3, #0
 8018f94:	d004      	beq.n	8018fa0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8018f96:	68fb      	ldr	r3, [r7, #12]
 8018f98:	695b      	ldr	r3, [r3, #20]
 8018f9a:	4618      	mov	r0, r3
 8018f9c:	f7f6 fd26 	bl	800f9ec <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8018fa0:	68f8      	ldr	r0, [r7, #12]
 8018fa2:	f7ff ffbd 	bl	8018f20 <ip_frag_free_pbuf_custom_ref>
}
 8018fa6:	bf00      	nop
 8018fa8:	3710      	adds	r7, #16
 8018faa:	46bd      	mov	sp, r7
 8018fac:	bd80      	pop	{r7, pc}
 8018fae:	bf00      	nop
 8018fb0:	08022228 	.word	0x08022228
 8018fb4:	080223ec 	.word	0x080223ec
 8018fb8:	08022270 	.word	0x08022270
 8018fbc:	080223f8 	.word	0x080223f8

08018fc0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8018fc0:	b580      	push	{r7, lr}
 8018fc2:	b094      	sub	sp, #80	; 0x50
 8018fc4:	af02      	add	r7, sp, #8
 8018fc6:	60f8      	str	r0, [r7, #12]
 8018fc8:	60b9      	str	r1, [r7, #8]
 8018fca:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8018fcc:	2300      	movs	r3, #0
 8018fce:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8018fd2:	68bb      	ldr	r3, [r7, #8]
 8018fd4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8018fd6:	3b14      	subs	r3, #20
 8018fd8:	2b00      	cmp	r3, #0
 8018fda:	da00      	bge.n	8018fde <ip4_frag+0x1e>
 8018fdc:	3307      	adds	r3, #7
 8018fde:	10db      	asrs	r3, r3, #3
 8018fe0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8018fe2:	2314      	movs	r3, #20
 8018fe4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8018fe6:	68fb      	ldr	r3, [r7, #12]
 8018fe8:	685b      	ldr	r3, [r3, #4]
 8018fea:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8018fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018fee:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8018ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ff2:	781b      	ldrb	r3, [r3, #0]
 8018ff4:	f003 030f 	and.w	r3, r3, #15
 8018ff8:	b2db      	uxtb	r3, r3
 8018ffa:	009b      	lsls	r3, r3, #2
 8018ffc:	b2db      	uxtb	r3, r3
 8018ffe:	2b14      	cmp	r3, #20
 8019000:	d002      	beq.n	8019008 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8019002:	f06f 0305 	mvn.w	r3, #5
 8019006:	e110      	b.n	801922a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8019008:	68fb      	ldr	r3, [r7, #12]
 801900a:	895b      	ldrh	r3, [r3, #10]
 801900c:	2b13      	cmp	r3, #19
 801900e:	d809      	bhi.n	8019024 <ip4_frag+0x64>
 8019010:	4b88      	ldr	r3, [pc, #544]	; (8019234 <ip4_frag+0x274>)
 8019012:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8019016:	4988      	ldr	r1, [pc, #544]	; (8019238 <ip4_frag+0x278>)
 8019018:	4888      	ldr	r0, [pc, #544]	; (801923c <ip4_frag+0x27c>)
 801901a:	f003 fd69 	bl	801caf0 <iprintf>
 801901e:	f06f 0305 	mvn.w	r3, #5
 8019022:	e102      	b.n	801922a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8019024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019026:	88db      	ldrh	r3, [r3, #6]
 8019028:	b29b      	uxth	r3, r3
 801902a:	4618      	mov	r0, r3
 801902c:	f7f5 f8c8 	bl	800e1c0 <lwip_htons>
 8019030:	4603      	mov	r3, r0
 8019032:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8019034:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019036:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801903a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801903e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019040:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8019044:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8019046:	68fb      	ldr	r3, [r7, #12]
 8019048:	891b      	ldrh	r3, [r3, #8]
 801904a:	3b14      	subs	r3, #20
 801904c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8019050:	e0e1      	b.n	8019216 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8019052:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019054:	00db      	lsls	r3, r3, #3
 8019056:	b29b      	uxth	r3, r3
 8019058:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801905c:	4293      	cmp	r3, r2
 801905e:	bf28      	it	cs
 8019060:	4613      	movcs	r3, r2
 8019062:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8019064:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019068:	2114      	movs	r1, #20
 801906a:	200e      	movs	r0, #14
 801906c:	f7f6 f9a8 	bl	800f3c0 <pbuf_alloc>
 8019070:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8019072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019074:	2b00      	cmp	r3, #0
 8019076:	f000 80d5 	beq.w	8019224 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801907a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801907c:	895b      	ldrh	r3, [r3, #10]
 801907e:	2b13      	cmp	r3, #19
 8019080:	d806      	bhi.n	8019090 <ip4_frag+0xd0>
 8019082:	4b6c      	ldr	r3, [pc, #432]	; (8019234 <ip4_frag+0x274>)
 8019084:	f44f 7249 	mov.w	r2, #804	; 0x324
 8019088:	496d      	ldr	r1, [pc, #436]	; (8019240 <ip4_frag+0x280>)
 801908a:	486c      	ldr	r0, [pc, #432]	; (801923c <ip4_frag+0x27c>)
 801908c:	f003 fd30 	bl	801caf0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8019090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019092:	685b      	ldr	r3, [r3, #4]
 8019094:	2214      	movs	r2, #20
 8019096:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8019098:	4618      	mov	r0, r3
 801909a:	f002 fe8b 	bl	801bdb4 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801909e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190a0:	685b      	ldr	r3, [r3, #4]
 80190a2:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80190a4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80190a6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80190aa:	e064      	b.n	8019176 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80190ac:	68fb      	ldr	r3, [r7, #12]
 80190ae:	895a      	ldrh	r2, [r3, #10]
 80190b0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80190b2:	1ad3      	subs	r3, r2, r3
 80190b4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80190b6:	68fb      	ldr	r3, [r7, #12]
 80190b8:	895b      	ldrh	r3, [r3, #10]
 80190ba:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80190bc:	429a      	cmp	r2, r3
 80190be:	d906      	bls.n	80190ce <ip4_frag+0x10e>
 80190c0:	4b5c      	ldr	r3, [pc, #368]	; (8019234 <ip4_frag+0x274>)
 80190c2:	f240 322d 	movw	r2, #813	; 0x32d
 80190c6:	495f      	ldr	r1, [pc, #380]	; (8019244 <ip4_frag+0x284>)
 80190c8:	485c      	ldr	r0, [pc, #368]	; (801923c <ip4_frag+0x27c>)
 80190ca:	f003 fd11 	bl	801caf0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80190ce:	8bfa      	ldrh	r2, [r7, #30]
 80190d0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80190d4:	4293      	cmp	r3, r2
 80190d6:	bf28      	it	cs
 80190d8:	4613      	movcs	r3, r2
 80190da:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80190de:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80190e2:	2b00      	cmp	r3, #0
 80190e4:	d105      	bne.n	80190f2 <ip4_frag+0x132>
        poff = 0;
 80190e6:	2300      	movs	r3, #0
 80190e8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80190ea:	68fb      	ldr	r3, [r7, #12]
 80190ec:	681b      	ldr	r3, [r3, #0]
 80190ee:	60fb      	str	r3, [r7, #12]
        continue;
 80190f0:	e041      	b.n	8019176 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80190f2:	f7ff ff0d 	bl	8018f10 <ip_frag_alloc_pbuf_custom_ref>
 80190f6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80190f8:	69bb      	ldr	r3, [r7, #24]
 80190fa:	2b00      	cmp	r3, #0
 80190fc:	d103      	bne.n	8019106 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80190fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019100:	f7f6 fc74 	bl	800f9ec <pbuf_free>
        goto memerr;
 8019104:	e08f      	b.n	8019226 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8019106:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8019108:	68fb      	ldr	r3, [r7, #12]
 801910a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801910c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801910e:	4413      	add	r3, r2
 8019110:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8019114:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8019118:	9201      	str	r2, [sp, #4]
 801911a:	9300      	str	r3, [sp, #0]
 801911c:	4603      	mov	r3, r0
 801911e:	2241      	movs	r2, #65	; 0x41
 8019120:	2000      	movs	r0, #0
 8019122:	f7f6 fa77 	bl	800f614 <pbuf_alloced_custom>
 8019126:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8019128:	697b      	ldr	r3, [r7, #20]
 801912a:	2b00      	cmp	r3, #0
 801912c:	d106      	bne.n	801913c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801912e:	69b8      	ldr	r0, [r7, #24]
 8019130:	f7ff fef6 	bl	8018f20 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8019134:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019136:	f7f6 fc59 	bl	800f9ec <pbuf_free>
        goto memerr;
 801913a:	e074      	b.n	8019226 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801913c:	68f8      	ldr	r0, [r7, #12]
 801913e:	f7f6 fcfb 	bl	800fb38 <pbuf_ref>
      pcr->original = p;
 8019142:	69bb      	ldr	r3, [r7, #24]
 8019144:	68fa      	ldr	r2, [r7, #12]
 8019146:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8019148:	69bb      	ldr	r3, [r7, #24]
 801914a:	4a3f      	ldr	r2, [pc, #252]	; (8019248 <ip4_frag+0x288>)
 801914c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801914e:	6979      	ldr	r1, [r7, #20]
 8019150:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019152:	f7f6 fd19 	bl	800fb88 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8019156:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801915a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801915e:	1ad3      	subs	r3, r2, r3
 8019160:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8019164:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019168:	2b00      	cmp	r3, #0
 801916a:	d004      	beq.n	8019176 <ip4_frag+0x1b6>
        poff = 0;
 801916c:	2300      	movs	r3, #0
 801916e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8019170:	68fb      	ldr	r3, [r7, #12]
 8019172:	681b      	ldr	r3, [r3, #0]
 8019174:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8019176:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801917a:	2b00      	cmp	r3, #0
 801917c:	d196      	bne.n	80190ac <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801917e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8019180:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8019184:	4413      	add	r3, r2
 8019186:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8019188:	68bb      	ldr	r3, [r7, #8]
 801918a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801918c:	f1a3 0213 	sub.w	r2, r3, #19
 8019190:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019194:	429a      	cmp	r2, r3
 8019196:	bfcc      	ite	gt
 8019198:	2301      	movgt	r3, #1
 801919a:	2300      	movle	r3, #0
 801919c:	b2db      	uxtb	r3, r3
 801919e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80191a0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80191a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80191a8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80191aa:	6a3b      	ldr	r3, [r7, #32]
 80191ac:	2b00      	cmp	r3, #0
 80191ae:	d002      	beq.n	80191b6 <ip4_frag+0x1f6>
 80191b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191b2:	2b00      	cmp	r3, #0
 80191b4:	d003      	beq.n	80191be <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80191b6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80191b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80191bc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80191be:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80191c0:	4618      	mov	r0, r3
 80191c2:	f7f4 fffd 	bl	800e1c0 <lwip_htons>
 80191c6:	4603      	mov	r3, r0
 80191c8:	461a      	mov	r2, r3
 80191ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80191cc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80191ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80191d0:	3314      	adds	r3, #20
 80191d2:	b29b      	uxth	r3, r3
 80191d4:	4618      	mov	r0, r3
 80191d6:	f7f4 fff3 	bl	800e1c0 <lwip_htons>
 80191da:	4603      	mov	r3, r0
 80191dc:	461a      	mov	r2, r3
 80191de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80191e0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80191e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80191e4:	2200      	movs	r2, #0
 80191e6:	729a      	strb	r2, [r3, #10]
 80191e8:	2200      	movs	r2, #0
 80191ea:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80191ec:	68bb      	ldr	r3, [r7, #8]
 80191ee:	695b      	ldr	r3, [r3, #20]
 80191f0:	687a      	ldr	r2, [r7, #4]
 80191f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80191f4:	68b8      	ldr	r0, [r7, #8]
 80191f6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80191f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80191fa:	f7f6 fbf7 	bl	800f9ec <pbuf_free>
    left = (u16_t)(left - fragsize);
 80191fe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019202:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019204:	1ad3      	subs	r3, r2, r3
 8019206:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801920a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801920e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019210:	4413      	add	r3, r2
 8019212:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8019216:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801921a:	2b00      	cmp	r3, #0
 801921c:	f47f af19 	bne.w	8019052 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8019220:	2300      	movs	r3, #0
 8019222:	e002      	b.n	801922a <ip4_frag+0x26a>
      goto memerr;
 8019224:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8019226:	f04f 33ff 	mov.w	r3, #4294967295
}
 801922a:	4618      	mov	r0, r3
 801922c:	3748      	adds	r7, #72	; 0x48
 801922e:	46bd      	mov	sp, r7
 8019230:	bd80      	pop	{r7, pc}
 8019232:	bf00      	nop
 8019234:	08022228 	.word	0x08022228
 8019238:	08022404 	.word	0x08022404
 801923c:	08022270 	.word	0x08022270
 8019240:	08022420 	.word	0x08022420
 8019244:	08022440 	.word	0x08022440
 8019248:	08018f59 	.word	0x08018f59

0801924c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801924c:	b580      	push	{r7, lr}
 801924e:	b086      	sub	sp, #24
 8019250:	af00      	add	r7, sp, #0
 8019252:	6078      	str	r0, [r7, #4]
 8019254:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8019256:	230e      	movs	r3, #14
 8019258:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801925a:	687b      	ldr	r3, [r7, #4]
 801925c:	895b      	ldrh	r3, [r3, #10]
 801925e:	2b0e      	cmp	r3, #14
 8019260:	d96e      	bls.n	8019340 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8019262:	687b      	ldr	r3, [r7, #4]
 8019264:	7bdb      	ldrb	r3, [r3, #15]
 8019266:	2b00      	cmp	r3, #0
 8019268:	d106      	bne.n	8019278 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801926a:	683b      	ldr	r3, [r7, #0]
 801926c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019270:	3301      	adds	r3, #1
 8019272:	b2da      	uxtb	r2, r3
 8019274:	687b      	ldr	r3, [r7, #4]
 8019276:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8019278:	687b      	ldr	r3, [r7, #4]
 801927a:	685b      	ldr	r3, [r3, #4]
 801927c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801927e:	693b      	ldr	r3, [r7, #16]
 8019280:	7b1a      	ldrb	r2, [r3, #12]
 8019282:	7b5b      	ldrb	r3, [r3, #13]
 8019284:	021b      	lsls	r3, r3, #8
 8019286:	4313      	orrs	r3, r2
 8019288:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801928a:	693b      	ldr	r3, [r7, #16]
 801928c:	781b      	ldrb	r3, [r3, #0]
 801928e:	f003 0301 	and.w	r3, r3, #1
 8019292:	2b00      	cmp	r3, #0
 8019294:	d023      	beq.n	80192de <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8019296:	693b      	ldr	r3, [r7, #16]
 8019298:	781b      	ldrb	r3, [r3, #0]
 801929a:	2b01      	cmp	r3, #1
 801929c:	d10f      	bne.n	80192be <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801929e:	693b      	ldr	r3, [r7, #16]
 80192a0:	785b      	ldrb	r3, [r3, #1]
 80192a2:	2b00      	cmp	r3, #0
 80192a4:	d11b      	bne.n	80192de <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80192a6:	693b      	ldr	r3, [r7, #16]
 80192a8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80192aa:	2b5e      	cmp	r3, #94	; 0x5e
 80192ac:	d117      	bne.n	80192de <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80192ae:	687b      	ldr	r3, [r7, #4]
 80192b0:	7b5b      	ldrb	r3, [r3, #13]
 80192b2:	f043 0310 	orr.w	r3, r3, #16
 80192b6:	b2da      	uxtb	r2, r3
 80192b8:	687b      	ldr	r3, [r7, #4]
 80192ba:	735a      	strb	r2, [r3, #13]
 80192bc:	e00f      	b.n	80192de <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80192be:	693b      	ldr	r3, [r7, #16]
 80192c0:	2206      	movs	r2, #6
 80192c2:	4928      	ldr	r1, [pc, #160]	; (8019364 <ethernet_input+0x118>)
 80192c4:	4618      	mov	r0, r3
 80192c6:	f002 fd67 	bl	801bd98 <memcmp>
 80192ca:	4603      	mov	r3, r0
 80192cc:	2b00      	cmp	r3, #0
 80192ce:	d106      	bne.n	80192de <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80192d0:	687b      	ldr	r3, [r7, #4]
 80192d2:	7b5b      	ldrb	r3, [r3, #13]
 80192d4:	f043 0308 	orr.w	r3, r3, #8
 80192d8:	b2da      	uxtb	r2, r3
 80192da:	687b      	ldr	r3, [r7, #4]
 80192dc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80192de:	89fb      	ldrh	r3, [r7, #14]
 80192e0:	2b08      	cmp	r3, #8
 80192e2:	d003      	beq.n	80192ec <ethernet_input+0xa0>
 80192e4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80192e8:	d014      	beq.n	8019314 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80192ea:	e032      	b.n	8019352 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80192ec:	683b      	ldr	r3, [r7, #0]
 80192ee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80192f2:	f003 0308 	and.w	r3, r3, #8
 80192f6:	2b00      	cmp	r3, #0
 80192f8:	d024      	beq.n	8019344 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80192fa:	8afb      	ldrh	r3, [r7, #22]
 80192fc:	4619      	mov	r1, r3
 80192fe:	6878      	ldr	r0, [r7, #4]
 8019300:	f7f6 fabc 	bl	800f87c <pbuf_remove_header>
 8019304:	4603      	mov	r3, r0
 8019306:	2b00      	cmp	r3, #0
 8019308:	d11e      	bne.n	8019348 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801930a:	6839      	ldr	r1, [r7, #0]
 801930c:	6878      	ldr	r0, [r7, #4]
 801930e:	f7fe fea5 	bl	801805c <ip4_input>
      break;
 8019312:	e013      	b.n	801933c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8019314:	683b      	ldr	r3, [r7, #0]
 8019316:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801931a:	f003 0308 	and.w	r3, r3, #8
 801931e:	2b00      	cmp	r3, #0
 8019320:	d014      	beq.n	801934c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8019322:	8afb      	ldrh	r3, [r7, #22]
 8019324:	4619      	mov	r1, r3
 8019326:	6878      	ldr	r0, [r7, #4]
 8019328:	f7f6 faa8 	bl	800f87c <pbuf_remove_header>
 801932c:	4603      	mov	r3, r0
 801932e:	2b00      	cmp	r3, #0
 8019330:	d10e      	bne.n	8019350 <ethernet_input+0x104>
        etharp_input(p, netif);
 8019332:	6839      	ldr	r1, [r7, #0]
 8019334:	6878      	ldr	r0, [r7, #4]
 8019336:	f7fe f845 	bl	80173c4 <etharp_input>
      break;
 801933a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801933c:	2300      	movs	r3, #0
 801933e:	e00c      	b.n	801935a <ethernet_input+0x10e>
    goto free_and_return;
 8019340:	bf00      	nop
 8019342:	e006      	b.n	8019352 <ethernet_input+0x106>
        goto free_and_return;
 8019344:	bf00      	nop
 8019346:	e004      	b.n	8019352 <ethernet_input+0x106>
        goto free_and_return;
 8019348:	bf00      	nop
 801934a:	e002      	b.n	8019352 <ethernet_input+0x106>
        goto free_and_return;
 801934c:	bf00      	nop
 801934e:	e000      	b.n	8019352 <ethernet_input+0x106>
        goto free_and_return;
 8019350:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8019352:	6878      	ldr	r0, [r7, #4]
 8019354:	f7f6 fb4a 	bl	800f9ec <pbuf_free>
  return ERR_OK;
 8019358:	2300      	movs	r3, #0
}
 801935a:	4618      	mov	r0, r3
 801935c:	3718      	adds	r7, #24
 801935e:	46bd      	mov	sp, r7
 8019360:	bd80      	pop	{r7, pc}
 8019362:	bf00      	nop
 8019364:	0802289c 	.word	0x0802289c

08019368 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8019368:	b580      	push	{r7, lr}
 801936a:	b086      	sub	sp, #24
 801936c:	af00      	add	r7, sp, #0
 801936e:	60f8      	str	r0, [r7, #12]
 8019370:	60b9      	str	r1, [r7, #8]
 8019372:	607a      	str	r2, [r7, #4]
 8019374:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8019376:	8c3b      	ldrh	r3, [r7, #32]
 8019378:	4618      	mov	r0, r3
 801937a:	f7f4 ff21 	bl	800e1c0 <lwip_htons>
 801937e:	4603      	mov	r3, r0
 8019380:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8019382:	210e      	movs	r1, #14
 8019384:	68b8      	ldr	r0, [r7, #8]
 8019386:	f7f6 fa69 	bl	800f85c <pbuf_add_header>
 801938a:	4603      	mov	r3, r0
 801938c:	2b00      	cmp	r3, #0
 801938e:	d125      	bne.n	80193dc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8019390:	68bb      	ldr	r3, [r7, #8]
 8019392:	685b      	ldr	r3, [r3, #4]
 8019394:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8019396:	693b      	ldr	r3, [r7, #16]
 8019398:	8afa      	ldrh	r2, [r7, #22]
 801939a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801939c:	693b      	ldr	r3, [r7, #16]
 801939e:	2206      	movs	r2, #6
 80193a0:	6839      	ldr	r1, [r7, #0]
 80193a2:	4618      	mov	r0, r3
 80193a4:	f002 fd06 	bl	801bdb4 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80193a8:	693b      	ldr	r3, [r7, #16]
 80193aa:	3306      	adds	r3, #6
 80193ac:	2206      	movs	r2, #6
 80193ae:	6879      	ldr	r1, [r7, #4]
 80193b0:	4618      	mov	r0, r3
 80193b2:	f002 fcff 	bl	801bdb4 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80193b6:	68fb      	ldr	r3, [r7, #12]
 80193b8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80193bc:	2b06      	cmp	r3, #6
 80193be:	d006      	beq.n	80193ce <ethernet_output+0x66>
 80193c0:	4b0a      	ldr	r3, [pc, #40]	; (80193ec <ethernet_output+0x84>)
 80193c2:	f44f 7299 	mov.w	r2, #306	; 0x132
 80193c6:	490a      	ldr	r1, [pc, #40]	; (80193f0 <ethernet_output+0x88>)
 80193c8:	480a      	ldr	r0, [pc, #40]	; (80193f4 <ethernet_output+0x8c>)
 80193ca:	f003 fb91 	bl	801caf0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80193ce:	68fb      	ldr	r3, [r7, #12]
 80193d0:	699b      	ldr	r3, [r3, #24]
 80193d2:	68b9      	ldr	r1, [r7, #8]
 80193d4:	68f8      	ldr	r0, [r7, #12]
 80193d6:	4798      	blx	r3
 80193d8:	4603      	mov	r3, r0
 80193da:	e002      	b.n	80193e2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80193dc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80193de:	f06f 0301 	mvn.w	r3, #1
}
 80193e2:	4618      	mov	r0, r3
 80193e4:	3718      	adds	r7, #24
 80193e6:	46bd      	mov	sp, r7
 80193e8:	bd80      	pop	{r7, pc}
 80193ea:	bf00      	nop
 80193ec:	08022450 	.word	0x08022450
 80193f0:	08022488 	.word	0x08022488
 80193f4:	080224bc 	.word	0x080224bc

080193f8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80193f8:	b580      	push	{r7, lr}
 80193fa:	b082      	sub	sp, #8
 80193fc:	af00      	add	r7, sp, #0
 80193fe:	6078      	str	r0, [r7, #4]
 8019400:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8019402:	683b      	ldr	r3, [r7, #0]
 8019404:	2200      	movs	r2, #0
 8019406:	2104      	movs	r1, #4
 8019408:	4618      	mov	r0, r3
 801940a:	f7ed fb27 	bl	8006a5c <osMessageQueueNew>
 801940e:	4602      	mov	r2, r0
 8019410:	687b      	ldr	r3, [r7, #4]
 8019412:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8019414:	687b      	ldr	r3, [r7, #4]
 8019416:	681b      	ldr	r3, [r3, #0]
 8019418:	2b00      	cmp	r3, #0
 801941a:	d102      	bne.n	8019422 <sys_mbox_new+0x2a>
    return ERR_MEM;
 801941c:	f04f 33ff 	mov.w	r3, #4294967295
 8019420:	e000      	b.n	8019424 <sys_mbox_new+0x2c>

  return ERR_OK;
 8019422:	2300      	movs	r3, #0
}
 8019424:	4618      	mov	r0, r3
 8019426:	3708      	adds	r7, #8
 8019428:	46bd      	mov	sp, r7
 801942a:	bd80      	pop	{r7, pc}

0801942c <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801942c:	b580      	push	{r7, lr}
 801942e:	b082      	sub	sp, #8
 8019430:	af00      	add	r7, sp, #0
 8019432:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 8019434:	687b      	ldr	r3, [r7, #4]
 8019436:	681b      	ldr	r3, [r3, #0]
 8019438:	4618      	mov	r0, r3
 801943a:	f7ed fc41 	bl	8006cc0 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 801943e:	687b      	ldr	r3, [r7, #4]
 8019440:	681b      	ldr	r3, [r3, #0]
 8019442:	4618      	mov	r0, r3
 8019444:	f7ed fc5c 	bl	8006d00 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8019448:	bf00      	nop
 801944a:	3708      	adds	r7, #8
 801944c:	46bd      	mov	sp, r7
 801944e:	bd80      	pop	{r7, pc}

08019450 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8019450:	b580      	push	{r7, lr}
 8019452:	b084      	sub	sp, #16
 8019454:	af00      	add	r7, sp, #0
 8019456:	6078      	str	r0, [r7, #4]
 8019458:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801945a:	687b      	ldr	r3, [r7, #4]
 801945c:	6818      	ldr	r0, [r3, #0]
 801945e:	4639      	mov	r1, r7
 8019460:	2300      	movs	r3, #0
 8019462:	2200      	movs	r2, #0
 8019464:	f7ed fb6e 	bl	8006b44 <osMessageQueuePut>
 8019468:	4603      	mov	r3, r0
 801946a:	2b00      	cmp	r3, #0
 801946c:	d102      	bne.n	8019474 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801946e:	2300      	movs	r3, #0
 8019470:	73fb      	strb	r3, [r7, #15]
 8019472:	e001      	b.n	8019478 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8019474:	23ff      	movs	r3, #255	; 0xff
 8019476:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8019478:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801947c:	4618      	mov	r0, r3
 801947e:	3710      	adds	r7, #16
 8019480:	46bd      	mov	sp, r7
 8019482:	bd80      	pop	{r7, pc}

08019484 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8019484:	b580      	push	{r7, lr}
 8019486:	b086      	sub	sp, #24
 8019488:	af00      	add	r7, sp, #0
 801948a:	60f8      	str	r0, [r7, #12]
 801948c:	60b9      	str	r1, [r7, #8]
 801948e:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8019490:	f7ec ffd0 	bl	8006434 <osKernelGetTickCount>
 8019494:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8019496:	687b      	ldr	r3, [r7, #4]
 8019498:	2b00      	cmp	r3, #0
 801949a:	d013      	beq.n	80194c4 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801949c:	68fb      	ldr	r3, [r7, #12]
 801949e:	6818      	ldr	r0, [r3, #0]
 80194a0:	687b      	ldr	r3, [r7, #4]
 80194a2:	2200      	movs	r2, #0
 80194a4:	68b9      	ldr	r1, [r7, #8]
 80194a6:	f7ed fbad 	bl	8006c04 <osMessageQueueGet>
 80194aa:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 80194ac:	693b      	ldr	r3, [r7, #16]
 80194ae:	2b00      	cmp	r3, #0
 80194b0:	d105      	bne.n	80194be <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 80194b2:	f7ec ffbf 	bl	8006434 <osKernelGetTickCount>
 80194b6:	4602      	mov	r2, r0
 80194b8:	697b      	ldr	r3, [r7, #20]
 80194ba:	1ad3      	subs	r3, r2, r3
 80194bc:	e00f      	b.n	80194de <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80194be:	f04f 33ff 	mov.w	r3, #4294967295
 80194c2:	e00c      	b.n	80194de <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 80194c4:	68fb      	ldr	r3, [r7, #12]
 80194c6:	6818      	ldr	r0, [r3, #0]
 80194c8:	f04f 33ff 	mov.w	r3, #4294967295
 80194cc:	2200      	movs	r2, #0
 80194ce:	68b9      	ldr	r1, [r7, #8]
 80194d0:	f7ed fb98 	bl	8006c04 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 80194d4:	f7ec ffae 	bl	8006434 <osKernelGetTickCount>
 80194d8:	4602      	mov	r2, r0
 80194da:	697b      	ldr	r3, [r7, #20]
 80194dc:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 80194de:	4618      	mov	r0, r3
 80194e0:	3718      	adds	r7, #24
 80194e2:	46bd      	mov	sp, r7
 80194e4:	bd80      	pop	{r7, pc}

080194e6 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 80194e6:	b580      	push	{r7, lr}
 80194e8:	b082      	sub	sp, #8
 80194ea:	af00      	add	r7, sp, #0
 80194ec:	6078      	str	r0, [r7, #4]
 80194ee:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 80194f0:	687b      	ldr	r3, [r7, #4]
 80194f2:	6818      	ldr	r0, [r3, #0]
 80194f4:	2300      	movs	r3, #0
 80194f6:	2200      	movs	r2, #0
 80194f8:	6839      	ldr	r1, [r7, #0]
 80194fa:	f7ed fb83 	bl	8006c04 <osMessageQueueGet>
 80194fe:	4603      	mov	r3, r0
 8019500:	2b00      	cmp	r3, #0
 8019502:	d101      	bne.n	8019508 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 8019504:	2300      	movs	r3, #0
 8019506:	e001      	b.n	801950c <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8019508:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801950c:	4618      	mov	r0, r3
 801950e:	3708      	adds	r7, #8
 8019510:	46bd      	mov	sp, r7
 8019512:	bd80      	pop	{r7, pc}

08019514 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8019514:	b480      	push	{r7}
 8019516:	b083      	sub	sp, #12
 8019518:	af00      	add	r7, sp, #0
 801951a:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801951c:	687b      	ldr	r3, [r7, #4]
 801951e:	681b      	ldr	r3, [r3, #0]
 8019520:	2b00      	cmp	r3, #0
 8019522:	d101      	bne.n	8019528 <sys_mbox_valid+0x14>
    return 0;
 8019524:	2300      	movs	r3, #0
 8019526:	e000      	b.n	801952a <sys_mbox_valid+0x16>
  else
    return 1;
 8019528:	2301      	movs	r3, #1
}
 801952a:	4618      	mov	r0, r3
 801952c:	370c      	adds	r7, #12
 801952e:	46bd      	mov	sp, r7
 8019530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019534:	4770      	bx	lr

08019536 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8019536:	b480      	push	{r7}
 8019538:	b083      	sub	sp, #12
 801953a:	af00      	add	r7, sp, #0
 801953c:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801953e:	687b      	ldr	r3, [r7, #4]
 8019540:	2200      	movs	r2, #0
 8019542:	601a      	str	r2, [r3, #0]
}
 8019544:	bf00      	nop
 8019546:	370c      	adds	r7, #12
 8019548:	46bd      	mov	sp, r7
 801954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801954e:	4770      	bx	lr

08019550 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8019550:	b580      	push	{r7, lr}
 8019552:	b082      	sub	sp, #8
 8019554:	af00      	add	r7, sp, #0
 8019556:	6078      	str	r0, [r7, #4]
 8019558:	460b      	mov	r3, r1
 801955a:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 801955c:	78fb      	ldrb	r3, [r7, #3]
 801955e:	2200      	movs	r2, #0
 8019560:	4619      	mov	r1, r3
 8019562:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8019566:	f7ed f936 	bl	80067d6 <osSemaphoreNew>
 801956a:	4602      	mov	r2, r0
 801956c:	687b      	ldr	r3, [r7, #4]
 801956e:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 8019570:	687b      	ldr	r3, [r7, #4]
 8019572:	681b      	ldr	r3, [r3, #0]
 8019574:	2b00      	cmp	r3, #0
 8019576:	d102      	bne.n	801957e <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8019578:	f04f 33ff 	mov.w	r3, #4294967295
 801957c:	e009      	b.n	8019592 <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 801957e:	78fb      	ldrb	r3, [r7, #3]
 8019580:	2b00      	cmp	r3, #0
 8019582:	d105      	bne.n	8019590 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 8019584:	687b      	ldr	r3, [r7, #4]
 8019586:	681b      	ldr	r3, [r3, #0]
 8019588:	2100      	movs	r1, #0
 801958a:	4618      	mov	r0, r3
 801958c:	f7ed f9ac 	bl	80068e8 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8019590:	2300      	movs	r3, #0
}
 8019592:	4618      	mov	r0, r3
 8019594:	3708      	adds	r7, #8
 8019596:	46bd      	mov	sp, r7
 8019598:	bd80      	pop	{r7, pc}

0801959a <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801959a:	b580      	push	{r7, lr}
 801959c:	b084      	sub	sp, #16
 801959e:	af00      	add	r7, sp, #0
 80195a0:	6078      	str	r0, [r7, #4]
 80195a2:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 80195a4:	f7ec ff46 	bl	8006434 <osKernelGetTickCount>
 80195a8:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 80195aa:	683b      	ldr	r3, [r7, #0]
 80195ac:	2b00      	cmp	r3, #0
 80195ae:	d011      	beq.n	80195d4 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 80195b0:	687b      	ldr	r3, [r7, #4]
 80195b2:	681b      	ldr	r3, [r3, #0]
 80195b4:	6839      	ldr	r1, [r7, #0]
 80195b6:	4618      	mov	r0, r3
 80195b8:	f7ed f996 	bl	80068e8 <osSemaphoreAcquire>
 80195bc:	4603      	mov	r3, r0
 80195be:	2b00      	cmp	r3, #0
 80195c0:	d105      	bne.n	80195ce <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 80195c2:	f7ec ff37 	bl	8006434 <osKernelGetTickCount>
 80195c6:	4602      	mov	r2, r0
 80195c8:	68fb      	ldr	r3, [r7, #12]
 80195ca:	1ad3      	subs	r3, r2, r3
 80195cc:	e012      	b.n	80195f4 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 80195ce:	f04f 33ff 	mov.w	r3, #4294967295
 80195d2:	e00f      	b.n	80195f4 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 80195d4:	bf00      	nop
 80195d6:	687b      	ldr	r3, [r7, #4]
 80195d8:	681b      	ldr	r3, [r3, #0]
 80195da:	f04f 31ff 	mov.w	r1, #4294967295
 80195de:	4618      	mov	r0, r3
 80195e0:	f7ed f982 	bl	80068e8 <osSemaphoreAcquire>
 80195e4:	4603      	mov	r3, r0
 80195e6:	2b00      	cmp	r3, #0
 80195e8:	d1f5      	bne.n	80195d6 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 80195ea:	f7ec ff23 	bl	8006434 <osKernelGetTickCount>
 80195ee:	4602      	mov	r2, r0
 80195f0:	68fb      	ldr	r3, [r7, #12]
 80195f2:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 80195f4:	4618      	mov	r0, r3
 80195f6:	3710      	adds	r7, #16
 80195f8:	46bd      	mov	sp, r7
 80195fa:	bd80      	pop	{r7, pc}

080195fc <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 80195fc:	b580      	push	{r7, lr}
 80195fe:	b082      	sub	sp, #8
 8019600:	af00      	add	r7, sp, #0
 8019602:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8019604:	687b      	ldr	r3, [r7, #4]
 8019606:	681b      	ldr	r3, [r3, #0]
 8019608:	4618      	mov	r0, r3
 801960a:	f7ed f9bf 	bl	800698c <osSemaphoreRelease>
}
 801960e:	bf00      	nop
 8019610:	3708      	adds	r7, #8
 8019612:	46bd      	mov	sp, r7
 8019614:	bd80      	pop	{r7, pc}

08019616 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8019616:	b580      	push	{r7, lr}
 8019618:	b082      	sub	sp, #8
 801961a:	af00      	add	r7, sp, #0
 801961c:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801961e:	687b      	ldr	r3, [r7, #4]
 8019620:	681b      	ldr	r3, [r3, #0]
 8019622:	4618      	mov	r0, r3
 8019624:	f7ed f9f6 	bl	8006a14 <osSemaphoreDelete>
}
 8019628:	bf00      	nop
 801962a:	3708      	adds	r7, #8
 801962c:	46bd      	mov	sp, r7
 801962e:	bd80      	pop	{r7, pc}

08019630 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8019630:	b480      	push	{r7}
 8019632:	b083      	sub	sp, #12
 8019634:	af00      	add	r7, sp, #0
 8019636:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8019638:	687b      	ldr	r3, [r7, #4]
 801963a:	681b      	ldr	r3, [r3, #0]
 801963c:	2b00      	cmp	r3, #0
 801963e:	d101      	bne.n	8019644 <sys_sem_valid+0x14>
    return 0;
 8019640:	2300      	movs	r3, #0
 8019642:	e000      	b.n	8019646 <sys_sem_valid+0x16>
  else
    return 1;
 8019644:	2301      	movs	r3, #1
}
 8019646:	4618      	mov	r0, r3
 8019648:	370c      	adds	r7, #12
 801964a:	46bd      	mov	sp, r7
 801964c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019650:	4770      	bx	lr

08019652 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8019652:	b480      	push	{r7}
 8019654:	b083      	sub	sp, #12
 8019656:	af00      	add	r7, sp, #0
 8019658:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801965a:	687b      	ldr	r3, [r7, #4]
 801965c:	2200      	movs	r2, #0
 801965e:	601a      	str	r2, [r3, #0]
}
 8019660:	bf00      	nop
 8019662:	370c      	adds	r7, #12
 8019664:	46bd      	mov	sp, r7
 8019666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801966a:	4770      	bx	lr

0801966c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801966c:	b580      	push	{r7, lr}
 801966e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8019670:	2000      	movs	r0, #0
 8019672:	f7ec ffa2 	bl	80065ba <osMutexNew>
 8019676:	4603      	mov	r3, r0
 8019678:	4a01      	ldr	r2, [pc, #4]	; (8019680 <sys_init+0x14>)
 801967a:	6013      	str	r3, [r2, #0]
#endif
}
 801967c:	bf00      	nop
 801967e:	bd80      	pop	{r7, pc}
 8019680:	20008338 	.word	0x20008338

08019684 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8019684:	b580      	push	{r7, lr}
 8019686:	b082      	sub	sp, #8
 8019688:	af00      	add	r7, sp, #0
 801968a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801968c:	2000      	movs	r0, #0
 801968e:	f7ec ff94 	bl	80065ba <osMutexNew>
 8019692:	4602      	mov	r2, r0
 8019694:	687b      	ldr	r3, [r7, #4]
 8019696:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8019698:	687b      	ldr	r3, [r7, #4]
 801969a:	681b      	ldr	r3, [r3, #0]
 801969c:	2b00      	cmp	r3, #0
 801969e:	d102      	bne.n	80196a6 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80196a0:	f04f 33ff 	mov.w	r3, #4294967295
 80196a4:	e000      	b.n	80196a8 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80196a6:	2300      	movs	r3, #0
}
 80196a8:	4618      	mov	r0, r3
 80196aa:	3708      	adds	r7, #8
 80196ac:	46bd      	mov	sp, r7
 80196ae:	bd80      	pop	{r7, pc}

080196b0 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80196b0:	b580      	push	{r7, lr}
 80196b2:	b082      	sub	sp, #8
 80196b4:	af00      	add	r7, sp, #0
 80196b6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 80196b8:	687b      	ldr	r3, [r7, #4]
 80196ba:	681b      	ldr	r3, [r3, #0]
 80196bc:	f04f 31ff 	mov.w	r1, #4294967295
 80196c0:	4618      	mov	r0, r3
 80196c2:	f7ed f800 	bl	80066c6 <osMutexAcquire>
#endif
}
 80196c6:	bf00      	nop
 80196c8:	3708      	adds	r7, #8
 80196ca:	46bd      	mov	sp, r7
 80196cc:	bd80      	pop	{r7, pc}

080196ce <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80196ce:	b580      	push	{r7, lr}
 80196d0:	b082      	sub	sp, #8
 80196d2:	af00      	add	r7, sp, #0
 80196d4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80196d6:	687b      	ldr	r3, [r7, #4]
 80196d8:	681b      	ldr	r3, [r3, #0]
 80196da:	4618      	mov	r0, r3
 80196dc:	f7ed f83e 	bl	800675c <osMutexRelease>
}
 80196e0:	bf00      	nop
 80196e2:	3708      	adds	r7, #8
 80196e4:	46bd      	mov	sp, r7
 80196e6:	bd80      	pop	{r7, pc}

080196e8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80196e8:	b580      	push	{r7, lr}
 80196ea:	b08e      	sub	sp, #56	; 0x38
 80196ec:	af00      	add	r7, sp, #0
 80196ee:	60f8      	str	r0, [r7, #12]
 80196f0:	60b9      	str	r1, [r7, #8]
 80196f2:	607a      	str	r2, [r7, #4]
 80196f4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 80196f6:	f107 0314 	add.w	r3, r7, #20
 80196fa:	2224      	movs	r2, #36	; 0x24
 80196fc:	2100      	movs	r1, #0
 80196fe:	4618      	mov	r0, r3
 8019700:	f002 fb80 	bl	801be04 <memset>
 8019704:	68fb      	ldr	r3, [r7, #12]
 8019706:	617b      	str	r3, [r7, #20]
 8019708:	683b      	ldr	r3, [r7, #0]
 801970a:	62bb      	str	r3, [r7, #40]	; 0x28
 801970c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801970e:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8019710:	f107 0314 	add.w	r3, r7, #20
 8019714:	461a      	mov	r2, r3
 8019716:	6879      	ldr	r1, [r7, #4]
 8019718:	68b8      	ldr	r0, [r7, #8]
 801971a:	f7ec fea0 	bl	800645e <osThreadNew>
 801971e:	4603      	mov	r3, r0
#endif
}
 8019720:	4618      	mov	r0, r3
 8019722:	3738      	adds	r7, #56	; 0x38
 8019724:	46bd      	mov	sp, r7
 8019726:	bd80      	pop	{r7, pc}

08019728 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8019728:	b580      	push	{r7, lr}
 801972a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801972c:	4b04      	ldr	r3, [pc, #16]	; (8019740 <sys_arch_protect+0x18>)
 801972e:	681b      	ldr	r3, [r3, #0]
 8019730:	f04f 31ff 	mov.w	r1, #4294967295
 8019734:	4618      	mov	r0, r3
 8019736:	f7ec ffc6 	bl	80066c6 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801973a:	2301      	movs	r3, #1
}
 801973c:	4618      	mov	r0, r3
 801973e:	bd80      	pop	{r7, pc}
 8019740:	20008338 	.word	0x20008338

08019744 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8019744:	b580      	push	{r7, lr}
 8019746:	b082      	sub	sp, #8
 8019748:	af00      	add	r7, sp, #0
 801974a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801974c:	4b04      	ldr	r3, [pc, #16]	; (8019760 <sys_arch_unprotect+0x1c>)
 801974e:	681b      	ldr	r3, [r3, #0]
 8019750:	4618      	mov	r0, r3
 8019752:	f7ed f803 	bl	800675c <osMutexRelease>
}
 8019756:	bf00      	nop
 8019758:	3708      	adds	r7, #8
 801975a:	46bd      	mov	sp, r7
 801975c:	bd80      	pop	{r7, pc}
 801975e:	bf00      	nop
 8019760:	20008338 	.word	0x20008338

08019764 <afe_app_init>:
AFE ltc2335_1 = {.busy = &adc_busy1,.cnv = &adc_cnv1,.p_driver = &spi1,.pd = &adc_rs1,.softSpan = _111};
AFE ltc2335_2 = {.busy = &adc_busy2,.cnv = &adc_cnv2,.p_driver = &spi2,.pd = &adc_rs2,.softSpan = _111};



void afe_app_init(){
 8019764:	b580      	push	{r7, lr}
 8019766:	af00      	add	r7, sp, #0
	afe_init(&ltc2335_1);
 8019768:	4803      	ldr	r0, [pc, #12]	; (8019778 <afe_app_init+0x14>)
 801976a:	f001 f94b 	bl	801aa04 <afe_init>
	afe_init(&ltc2335_2);
 801976e:	4803      	ldr	r0, [pc, #12]	; (801977c <afe_app_init+0x18>)
 8019770:	f001 f948 	bl	801aa04 <afe_init>
}
 8019774:	bf00      	nop
 8019776:	bd80      	pop	{r7, pc}
 8019778:	1000001c 	.word	0x1000001c
 801977c:	10000080 	.word	0x10000080

08019780 <app_init>:
QueueHandle_t ev_data2_queue;
static void ev_read_sensor_task(void *arg);
static void ev_tcp_server_data_task(void* arg);
static void do_send_data(const int sock);

void app_init(void) {
 8019780:	b580      	push	{r7, lr}
 8019782:	b082      	sub	sp, #8
 8019784:	af02      	add	r7, sp, #8
	cJSON_InitHooks(NULL);
 8019786:	2000      	movs	r0, #0
 8019788:	f002 f960 	bl	801ba4c <cJSON_InitHooks>
	setting_app();
 801978c:	f000 fcb6 	bl	801a0fc <setting_app>
	ota_app_init();
 8019790:	f000 f9f6 	bl	8019b80 <ota_app_init>
	xTaskCreate(ev_tcp_server_data_task, "tcp server_dt", 1024*2, NULL,
 8019794:	4b06      	ldr	r3, [pc, #24]	; (80197b0 <app_init+0x30>)
 8019796:	9301      	str	r3, [sp, #4]
 8019798:	2337      	movs	r3, #55	; 0x37
 801979a:	9300      	str	r3, [sp, #0]
 801979c:	2300      	movs	r3, #0
 801979e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80197a2:	4904      	ldr	r1, [pc, #16]	; (80197b4 <app_init+0x34>)
 80197a4:	4804      	ldr	r0, [pc, #16]	; (80197b8 <app_init+0x38>)
 80197a6:	f7ee fd14 	bl	80081d2 <xTaskCreate>
			configMAX_PRIORITIES - 1, &ev_tcp_server_data_handle);
}
 80197aa:	bf00      	nop
 80197ac:	46bd      	mov	sp, r7
 80197ae:	bd80      	pop	{r7, pc}
 80197b0:	20008340 	.word	0x20008340
 80197b4:	080224e4 	.word	0x080224e4
 80197b8:	080199d5 	.word	0x080199d5

080197bc <do_send_data>:

char json_buff[16384];

#define MAX_POINT 20

static void do_send_data(const int sock){
 80197bc:	b590      	push	{r4, r7, lr}
 80197be:	b09f      	sub	sp, #124	; 0x7c
 80197c0:	af02      	add	r7, sp, #8
 80197c2:	6078      	str	r0, [r7, #4]
	float buff[MAX_POINT];
	uint16_t length = 0;
 80197c4:	2300      	movs	r3, #0
 80197c6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	float data_sensor;
	int byte_write = 0;
 80197ca:	2300      	movs	r3, #0
 80197cc:	66bb      	str	r3, [r7, #104]	; 0x68
//	sprintf(buff,"Hello guy\r\n");
//	length = strlen(buff);
	ev_data1_queue = xQueueCreate(100,sizeof(float));
 80197ce:	2200      	movs	r2, #0
 80197d0:	2104      	movs	r1, #4
 80197d2:	2064      	movs	r0, #100	; 0x64
 80197d4:	f7ed fc80 	bl	80070d8 <xQueueGenericCreate>
 80197d8:	4603      	mov	r3, r0
 80197da:	4a4f      	ldr	r2, [pc, #316]	; (8019918 <do_send_data+0x15c>)
 80197dc:	6013      	str	r3, [r2, #0]
	xTaskCreate(ev_read_sensor_task, "read sensor", 1024*2, NULL,
 80197de:	4b4f      	ldr	r3, [pc, #316]	; (801991c <do_send_data+0x160>)
 80197e0:	9301      	str	r3, [sp, #4]
 80197e2:	2338      	movs	r3, #56	; 0x38
 80197e4:	9300      	str	r3, [sp, #0]
 80197e6:	2300      	movs	r3, #0
 80197e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80197ec:	494c      	ldr	r1, [pc, #304]	; (8019920 <do_send_data+0x164>)
 80197ee:	484d      	ldr	r0, [pc, #308]	; (8019924 <do_send_data+0x168>)
 80197f0:	f7ee fcef 	bl	80081d2 <xTaskCreate>
			configMAX_PRIORITIES, &ev_read_sensor_handle);
	while(1){
		// Read Data
		if(xQueueReceive(ev_data1_queue,&data_sensor, (TickType_t) 1) == pdPASS){
 80197f4:	4b48      	ldr	r3, [pc, #288]	; (8019918 <do_send_data+0x15c>)
 80197f6:	681b      	ldr	r3, [r3, #0]
 80197f8:	f107 010c 	add.w	r1, r7, #12
 80197fc:	2201      	movs	r2, #1
 80197fe:	4618      	mov	r0, r3
 8019800:	f7ee f80e 	bl	8007820 <xQueueReceive>
 8019804:	4603      	mov	r3, r0
 8019806:	2b01      	cmp	r3, #1
 8019808:	d10d      	bne.n	8019826 <do_send_data+0x6a>
			buff[length] = data_sensor;
 801980a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801980e:	68fa      	ldr	r2, [r7, #12]
 8019810:	009b      	lsls	r3, r3, #2
 8019812:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8019816:	440b      	add	r3, r1
 8019818:	3b60      	subs	r3, #96	; 0x60
 801981a:	601a      	str	r2, [r3, #0]
			length += 1;
 801981c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8019820:	3301      	adds	r3, #1
 8019822:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		}
		// Send Data
		if(length == MAX_POINT){
 8019826:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801982a:	2b14      	cmp	r3, #20
 801982c:	d160      	bne.n	80198f0 <do_send_data+0x134>
			memset(json_buff,0,1024);
 801982e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8019832:	2100      	movs	r1, #0
 8019834:	483c      	ldr	r0, [pc, #240]	; (8019928 <do_send_data+0x16c>)
 8019836:	f002 fae5 	bl	801be04 <memset>
			size_t len = 0;
 801983a:	2300      	movs	r3, #0
 801983c:	667b      	str	r3, [r7, #100]	; 0x64
			sprintf(json_buff,":,%f,",buff[0]);
 801983e:	693b      	ldr	r3, [r7, #16]
 8019840:	4618      	mov	r0, r3
 8019842:	f7e6 fe81 	bl	8000548 <__aeabi_f2d>
 8019846:	4602      	mov	r2, r0
 8019848:	460b      	mov	r3, r1
 801984a:	4938      	ldr	r1, [pc, #224]	; (801992c <do_send_data+0x170>)
 801984c:	4836      	ldr	r0, [pc, #216]	; (8019928 <do_send_data+0x16c>)
 801984e:	f003 fa29 	bl	801cca4 <siprintf>
			len = strlen(json_buff);
 8019852:	4835      	ldr	r0, [pc, #212]	; (8019928 <do_send_data+0x16c>)
 8019854:	f7e6 fcbc 	bl	80001d0 <strlen>
 8019858:	6678      	str	r0, [r7, #100]	; 0x64
			for(uint16_t i = 1;i<length-1;i++){
 801985a:	2301      	movs	r3, #1
 801985c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8019860:	e01c      	b.n	801989c <do_send_data+0xe0>
				sprintf(json_buff+len,"%f,",buff[i]);
 8019862:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019864:	4a30      	ldr	r2, [pc, #192]	; (8019928 <do_send_data+0x16c>)
 8019866:	189c      	adds	r4, r3, r2
 8019868:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 801986c:	009b      	lsls	r3, r3, #2
 801986e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8019872:	4413      	add	r3, r2
 8019874:	3b60      	subs	r3, #96	; 0x60
 8019876:	681b      	ldr	r3, [r3, #0]
 8019878:	4618      	mov	r0, r3
 801987a:	f7e6 fe65 	bl	8000548 <__aeabi_f2d>
 801987e:	4602      	mov	r2, r0
 8019880:	460b      	mov	r3, r1
 8019882:	492b      	ldr	r1, [pc, #172]	; (8019930 <do_send_data+0x174>)
 8019884:	4620      	mov	r0, r4
 8019886:	f003 fa0d 	bl	801cca4 <siprintf>
				len = strlen(json_buff);
 801988a:	4827      	ldr	r0, [pc, #156]	; (8019928 <do_send_data+0x16c>)
 801988c:	f7e6 fca0 	bl	80001d0 <strlen>
 8019890:	6678      	str	r0, [r7, #100]	; 0x64
			for(uint16_t i = 1;i<length-1;i++){
 8019892:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8019896:	3301      	adds	r3, #1
 8019898:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 801989c:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 80198a0:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80198a4:	3b01      	subs	r3, #1
 80198a6:	429a      	cmp	r2, r3
 80198a8:	dbdb      	blt.n	8019862 <do_send_data+0xa6>
			}
			sprintf(json_buff+len,"%f,\r\n",buff[length-1]);
 80198aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80198ac:	4a1e      	ldr	r2, [pc, #120]	; (8019928 <do_send_data+0x16c>)
 80198ae:	189c      	adds	r4, r3, r2
 80198b0:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80198b4:	3b01      	subs	r3, #1
 80198b6:	009b      	lsls	r3, r3, #2
 80198b8:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80198bc:	4413      	add	r3, r2
 80198be:	3b60      	subs	r3, #96	; 0x60
 80198c0:	681b      	ldr	r3, [r3, #0]
 80198c2:	4618      	mov	r0, r3
 80198c4:	f7e6 fe40 	bl	8000548 <__aeabi_f2d>
 80198c8:	4602      	mov	r2, r0
 80198ca:	460b      	mov	r3, r1
 80198cc:	4919      	ldr	r1, [pc, #100]	; (8019934 <do_send_data+0x178>)
 80198ce:	4620      	mov	r0, r4
 80198d0:	f003 f9e8 	bl	801cca4 <siprintf>
			len = strlen(json_buff);
 80198d4:	4814      	ldr	r0, [pc, #80]	; (8019928 <do_send_data+0x16c>)
 80198d6:	f7e6 fc7b 	bl	80001d0 <strlen>
 80198da:	6678      	str	r0, [r7, #100]	; 0x64
			byte_write = send(sock,(uint8_t*)json_buff,len,0);
 80198dc:	2300      	movs	r3, #0
 80198de:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80198e0:	4911      	ldr	r1, [pc, #68]	; (8019928 <do_send_data+0x16c>)
 80198e2:	6878      	ldr	r0, [r7, #4]
 80198e4:	f7f3 fdaa 	bl	800d43c <lwip_send>
 80198e8:	66b8      	str	r0, [r7, #104]	; 0x68
			// Reset buff
			length = 0;
 80198ea:	2300      	movs	r3, #0
 80198ec:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		}
		// Check connect
		if(byte_write == -1){
 80198f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80198f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80198f6:	d000      	beq.n	80198fa <do_send_data+0x13e>
		if(xQueueReceive(ev_data1_queue,&data_sensor, (TickType_t) 1) == pdPASS){
 80198f8:	e77c      	b.n	80197f4 <do_send_data+0x38>
			break;
 80198fa:	bf00      	nop
		}
	}
	vTaskDelete(ev_read_sensor_handle);
 80198fc:	4b07      	ldr	r3, [pc, #28]	; (801991c <do_send_data+0x160>)
 80198fe:	681b      	ldr	r3, [r3, #0]
 8019900:	4618      	mov	r0, r3
 8019902:	f7ee fdc1 	bl	8008488 <vTaskDelete>
	vQueueDelete(ev_data1_queue);
 8019906:	4b04      	ldr	r3, [pc, #16]	; (8019918 <do_send_data+0x15c>)
 8019908:	681b      	ldr	r3, [r3, #0]
 801990a:	4618      	mov	r0, r3
 801990c:	f7ee fa30 	bl	8007d70 <vQueueDelete>
//	byte_write = send(sock,(uint8_t*)buff,length,0);
}
 8019910:	bf00      	nop
 8019912:	3774      	adds	r7, #116	; 0x74
 8019914:	46bd      	mov	sp, r7
 8019916:	bd90      	pop	{r4, r7, pc}
 8019918:	2000833c 	.word	0x2000833c
 801991c:	2000c348 	.word	0x2000c348
 8019920:	080224f4 	.word	0x080224f4
 8019924:	08019939 	.word	0x08019939
 8019928:	20008348 	.word	0x20008348
 801992c:	08022500 	.word	0x08022500
 8019930:	08022508 	.word	0x08022508
 8019934:	0802250c 	.word	0x0802250c

08019938 <ev_read_sensor_task>:

#define NUM_MAX_SEND_QUEUE_FALSE 10
uint32_t tick_us = 0;
static void ev_read_sensor_task(void *arg) {
 8019938:	b580      	push	{r7, lr}
 801993a:	b086      	sub	sp, #24
 801993c:	af00      	add	r7, sp, #0
 801993e:	6078      	str	r0, [r7, #4]
	  afe_app_init();
 8019940:	f7ff ff10 	bl	8019764 <afe_app_init>
	  HAL_TIM_Base_Start(&htim2);
 8019944:	481d      	ldr	r0, [pc, #116]	; (80199bc <ev_read_sensor_task+0x84>)
 8019946:	f7eb fadf 	bl	8004f08 <HAL_TIM_Base_Start>
	  uint8_t channel = 0;
 801994a:	2300      	movs	r3, #0
 801994c:	75fb      	strb	r3, [r7, #23]
	  while(1){
		tick_us = __HAL_TIM_GET_COUNTER(&htim2);
 801994e:	4b1b      	ldr	r3, [pc, #108]	; (80199bc <ev_read_sensor_task+0x84>)
 8019950:	681b      	ldr	r3, [r3, #0]
 8019952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019954:	4a1a      	ldr	r2, [pc, #104]	; (80199c0 <ev_read_sensor_task+0x88>)
 8019956:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COUNTER(&htim2,0);
 8019958:	4b18      	ldr	r3, [pc, #96]	; (80199bc <ev_read_sensor_task+0x84>)
 801995a:	681b      	ldr	r3, [r3, #0]
 801995c:	2200      	movs	r2, #0
 801995e:	625a      	str	r2, [r3, #36]	; 0x24
		uint8_t data[4] = { 0 };
 8019960:	2300      	movs	r3, #0
 8019962:	613b      	str	r3, [r7, #16]
		uint8_t config = 0;
 8019964:	2300      	movs	r3, #0
 8019966:	73fb      	strb	r3, [r7, #15]
		afe_create_config_word(channel, _110, &config);
 8019968:	f107 020f 	add.w	r2, r7, #15
 801996c:	7dfb      	ldrb	r3, [r7, #23]
 801996e:	2106      	movs	r1, #6
 8019970:	4618      	mov	r0, r3
 8019972:	f001 f8ca 	bl	801ab0a <afe_create_config_word>
		afe_read(&ltc2335_1, config, data);
 8019976:	7bfb      	ldrb	r3, [r7, #15]
 8019978:	f107 0210 	add.w	r2, r7, #16
 801997c:	4619      	mov	r1, r3
 801997e:	4811      	ldr	r0, [pc, #68]	; (80199c4 <ev_read_sensor_task+0x8c>)
 8019980:	f001 f89c 	bl	801aabc <afe_read>
		afe_convert(&ltc2335_1, data);
 8019984:	f107 0310 	add.w	r3, r7, #16
 8019988:	4619      	mov	r1, r3
 801998a:	480e      	ldr	r0, [pc, #56]	; (80199c4 <ev_read_sensor_task+0x8c>)
 801998c:	f001 f8da 	bl	801ab44 <afe_convert>
		afe_read(&ltc2335_2, config, data);
 8019990:	7bfb      	ldrb	r3, [r7, #15]
 8019992:	f107 0210 	add.w	r2, r7, #16
 8019996:	4619      	mov	r1, r3
 8019998:	480b      	ldr	r0, [pc, #44]	; (80199c8 <ev_read_sensor_task+0x90>)
 801999a:	f001 f88f 	bl	801aabc <afe_read>
		afe_convert(&ltc2335_2, data);
 801999e:	f107 0310 	add.w	r3, r7, #16
 80199a2:	4619      	mov	r1, r3
 80199a4:	4808      	ldr	r0, [pc, #32]	; (80199c8 <ev_read_sensor_task+0x90>)
 80199a6:	f001 f8cd 	bl	801ab44 <afe_convert>
		xQueueSend(ev_data1_queue, &ltc2335_1.dataf_channel[0], 1);
 80199aa:	4b08      	ldr	r3, [pc, #32]	; (80199cc <ev_read_sensor_task+0x94>)
 80199ac:	6818      	ldr	r0, [r3, #0]
 80199ae:	2300      	movs	r3, #0
 80199b0:	2201      	movs	r2, #1
 80199b2:	4907      	ldr	r1, [pc, #28]	; (80199d0 <ev_read_sensor_task+0x98>)
 80199b4:	f7ed fd0e 	bl	80073d4 <xQueueGenericSend>
	  while(1){
 80199b8:	e7c9      	b.n	801994e <ev_read_sensor_task+0x16>
 80199ba:	bf00      	nop
 80199bc:	200018ec 	.word	0x200018ec
 80199c0:	200015cc 	.word	0x200015cc
 80199c4:	1000001c 	.word	0x1000001c
 80199c8:	10000080 	.word	0x10000080
 80199cc:	2000833c 	.word	0x2000833c
 80199d0:	1000004c 	.word	0x1000004c

080199d4 <ev_tcp_server_data_task>:
	  }
}


static void ev_tcp_server_data_task(void* arg){
 80199d4:	b580      	push	{r7, lr}
 80199d6:	b0b8      	sub	sp, #224	; 0xe0
 80199d8:	af02      	add	r7, sp, #8
 80199da:	6078      	str	r0, [r7, #4]
    char addr_str[128];
    int addr_family = AF_INET;
 80199dc:	2302      	movs	r3, #2
 80199de:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    int ip_protocol = 0;
 80199e2:	2300      	movs	r3, #0
 80199e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    int keepAlive = 1;
 80199e8:	2301      	movs	r3, #1
 80199ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    int keepIdle = KEEPALIVE_IDLE;
 80199ec:	2305      	movs	r3, #5
 80199ee:	63bb      	str	r3, [r7, #56]	; 0x38
    int keepInterval = KEEPALIVE_INTERVAL;
 80199f0:	2305      	movs	r3, #5
 80199f2:	637b      	str	r3, [r7, #52]	; 0x34
    int keepCount = KEEPALIVE_COUNT;
 80199f4:	2301      	movs	r3, #1
 80199f6:	633b      	str	r3, [r7, #48]	; 0x30
    struct sockaddr_storage dest_addr;

    if (addr_family == AF_INET) {
 80199f8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80199fc:	2b02      	cmp	r3, #2
 80199fe:	d11a      	bne.n	8019a36 <ev_tcp_server_data_task+0x62>
        struct sockaddr_in *dest_addr_ip4 = (struct sockaddr_in *)&dest_addr;
 8019a00:	f107 0320 	add.w	r3, r7, #32
 8019a04:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        dest_addr_ip4->sin_addr.s_addr = htonl(INADDR_ANY);
 8019a08:	2000      	movs	r0, #0
 8019a0a:	f7f4 fbee 	bl	800e1ea <lwip_htonl>
 8019a0e:	4602      	mov	r2, r0
 8019a10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8019a14:	605a      	str	r2, [r3, #4]
        dest_addr_ip4->sin_family = AF_INET;
 8019a16:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8019a1a:	2202      	movs	r2, #2
 8019a1c:	705a      	strb	r2, [r3, #1]
        dest_addr_ip4->sin_port = htons(PORT_DATA);
 8019a1e:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8019a22:	f7f4 fbcd 	bl	800e1c0 <lwip_htons>
 8019a26:	4603      	mov	r3, r0
 8019a28:	461a      	mov	r2, r3
 8019a2a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8019a2e:	805a      	strh	r2, [r3, #2]
        ip_protocol = IPPROTO_IP;
 8019a30:	2300      	movs	r3, #0
 8019a32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }

    int listen_sock = socket(addr_family, SOCK_STREAM, ip_protocol);
 8019a36:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8019a3a:	2101      	movs	r1, #1
 8019a3c:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8019a40:	f7f3 fe0c 	bl	800d65c <lwip_socket>
 8019a44:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if (listen_sock < 0) {
 8019a48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8019a4c:	2b00      	cmp	r3, #0
 8019a4e:	da03      	bge.n	8019a58 <ev_tcp_server_data_task+0x84>
        //printf( "Unable to create socket: errno %d", errno);
        vTaskDelete(NULL);
 8019a50:	2000      	movs	r0, #0
 8019a52:	f7ee fd19 	bl	8008488 <vTaskDelete>
 8019a56:	e083      	b.n	8019b60 <ev_tcp_server_data_task+0x18c>
        return;
    }

    int opt = 1;
 8019a58:	2301      	movs	r3, #1
 8019a5a:	61fb      	str	r3, [r7, #28]
    setsockopt(listen_sock, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt));
 8019a5c:	f107 031c 	add.w	r3, r7, #28
 8019a60:	2204      	movs	r2, #4
 8019a62:	9200      	str	r2, [sp, #0]
 8019a64:	2204      	movs	r2, #4
 8019a66:	f640 71ff 	movw	r1, #4095	; 0xfff
 8019a6a:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8019a6e:	f7f4 f803 	bl	800da78 <lwip_setsockopt>

    int err = bind(listen_sock, (struct sockaddr *)&dest_addr, sizeof(dest_addr));
 8019a72:	f107 0320 	add.w	r3, r7, #32
 8019a76:	2210      	movs	r2, #16
 8019a78:	4619      	mov	r1, r3
 8019a7a:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8019a7e:	f7f3 f899 	bl	800cbb4 <lwip_bind>
 8019a82:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
    if (err != 0) {
 8019a86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8019a8a:	2b00      	cmp	r3, #0
 8019a8c:	d15c      	bne.n	8019b48 <ev_tcp_server_data_task+0x174>
        //printf( "IPPROTO: %d", addr_family);
        goto CLEAN_UP;
    }
    //printf( "Socket bound, port %d", PORT_SETTING);

    err = listen(listen_sock, 1);
 8019a8e:	2101      	movs	r1, #1
 8019a90:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8019a94:	f7f3 f952 	bl	800cd3c <lwip_listen>
 8019a98:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
    if (err != 0) {
 8019a9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8019aa0:	2b00      	cmp	r3, #0
 8019aa2:	d153      	bne.n	8019b4c <ev_tcp_server_data_task+0x178>
        goto CLEAN_UP;
    }
	for (;;) {
        //printf( "Socket listening");
        struct sockaddr_storage source_addr; // Large enough for both IPv4 or IPv6
        socklen_t addr_len = sizeof(source_addr);
 8019aa4:	2310      	movs	r3, #16
 8019aa6:	60bb      	str	r3, [r7, #8]
        int sock = accept(listen_sock, (struct sockaddr *)&source_addr, &addr_len);
 8019aa8:	f107 0208 	add.w	r2, r7, #8
 8019aac:	f107 030c 	add.w	r3, r7, #12
 8019ab0:	4619      	mov	r1, r3
 8019ab2:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8019ab6:	f7f2 ff5f 	bl	800c978 <lwip_accept>
 8019aba:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
        if (sock < 0) {
 8019abe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8019ac2:	2b00      	cmp	r3, #0
 8019ac4:	db44      	blt.n	8019b50 <ev_tcp_server_data_task+0x17c>
            //printf( "Unable to accept connection: errno %d", errno);
            break;
        }
        // Set tcp keepalive option
        setsockopt(sock, SOL_SOCKET, SO_KEEPALIVE, &keepAlive, sizeof(int));
 8019ac6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019aca:	2204      	movs	r2, #4
 8019acc:	9200      	str	r2, [sp, #0]
 8019ace:	2208      	movs	r2, #8
 8019ad0:	f640 71ff 	movw	r1, #4095	; 0xfff
 8019ad4:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8019ad8:	f7f3 ffce 	bl	800da78 <lwip_setsockopt>
        setsockopt(sock, IPPROTO_TCP, TCP_KEEPIDLE, &keepIdle, sizeof(int));
 8019adc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8019ae0:	2204      	movs	r2, #4
 8019ae2:	9200      	str	r2, [sp, #0]
 8019ae4:	2203      	movs	r2, #3
 8019ae6:	2106      	movs	r1, #6
 8019ae8:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8019aec:	f7f3 ffc4 	bl	800da78 <lwip_setsockopt>
        setsockopt(sock, IPPROTO_TCP, TCP_KEEPINTVL, &keepInterval, sizeof(int));
 8019af0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8019af4:	2204      	movs	r2, #4
 8019af6:	9200      	str	r2, [sp, #0]
 8019af8:	2204      	movs	r2, #4
 8019afa:	2106      	movs	r1, #6
 8019afc:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8019b00:	f7f3 ffba 	bl	800da78 <lwip_setsockopt>
        setsockopt(sock, IPPROTO_TCP, TCP_KEEPCNT, &keepCount, sizeof(int));
 8019b04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019b08:	2204      	movs	r2, #4
 8019b0a:	9200      	str	r2, [sp, #0]
 8019b0c:	2205      	movs	r2, #5
 8019b0e:	2106      	movs	r1, #6
 8019b10:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8019b14:	f7f3 ffb0 	bl	800da78 <lwip_setsockopt>
        // Convert ip address to string
        if (source_addr.ss_family == PF_INET) {
 8019b18:	7b7b      	ldrb	r3, [r7, #13]
 8019b1a:	2b02      	cmp	r3, #2
 8019b1c:	d108      	bne.n	8019b30 <ev_tcp_server_data_task+0x15c>
            inet_ntoa_r(((struct sockaddr_in *)&source_addr)->sin_addr, addr_str, sizeof(addr_str) - 1);
 8019b1e:	f107 030c 	add.w	r3, r7, #12
 8019b22:	3304      	adds	r3, #4
 8019b24:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8019b28:	227f      	movs	r2, #127	; 0x7f
 8019b2a:	4618      	mov	r0, r3
 8019b2c:	f7fe fcd4 	bl	80184d8 <ip4addr_ntoa_r>
        }
        //printf( "Socket accepted ip address: %s", addr_str);
        do_send_data(sock);
 8019b30:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8019b34:	f7ff fe42 	bl	80197bc <do_send_data>
        close(sock);
 8019b38:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8019b3c:	f7f3 f8a8 	bl	800cc90 <lwip_close>
		vTaskDelay(1);
 8019b40:	2001      	movs	r0, #1
 8019b42:	f7ee fd13 	bl	800856c <vTaskDelay>
	for (;;) {
 8019b46:	e7ad      	b.n	8019aa4 <ev_tcp_server_data_task+0xd0>
        goto CLEAN_UP;
 8019b48:	bf00      	nop
 8019b4a:	e002      	b.n	8019b52 <ev_tcp_server_data_task+0x17e>
        goto CLEAN_UP;
 8019b4c:	bf00      	nop
 8019b4e:	e000      	b.n	8019b52 <ev_tcp_server_data_task+0x17e>
            break;
 8019b50:	bf00      	nop
	}
CLEAN_UP:
    close(listen_sock);
 8019b52:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8019b56:	f7f3 f89b 	bl	800cc90 <lwip_close>
    vTaskDelete(NULL);
 8019b5a:	2000      	movs	r0, #0
 8019b5c:	f7ee fc94 	bl	8008488 <vTaskDelete>
}
 8019b60:	37d8      	adds	r7, #216	; 0xd8
 8019b62:	46bd      	mov	sp, r7
 8019b64:	bd80      	pop	{r7, pc}

08019b66 <app_read_sensor_task>:


void app_read_sensor_task(void *arg){
 8019b66:	b480      	push	{r7}
 8019b68:	b085      	sub	sp, #20
 8019b6a:	af00      	add	r7, sp, #0
 8019b6c:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = (TIM_HandleTypeDef*)arg;
 8019b6e:	687b      	ldr	r3, [r7, #4]
 8019b70:	60fb      	str	r3, [r7, #12]
	if(htim->Instance == htim2.Instance){

	}

}
 8019b72:	bf00      	nop
 8019b74:	3714      	adds	r7, #20
 8019b76:	46bd      	mov	sp, r7
 8019b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b7c:	4770      	bx	lr
	...

08019b80 <ota_app_init>:

xTaskHandle ota_handle = NULL;

static void ota_process(void *arg);
static void write_flag(uint8_t flag);
void ota_app_init(void){
 8019b80:	b580      	push	{r7, lr}
 8019b82:	b082      	sub	sp, #8
 8019b84:	af02      	add	r7, sp, #8
	xTaskCreate(ota_process,"ota_app",1024,NULL,configMAX_PRIORITIES-2,&ota_handle);
 8019b86:	4b0c      	ldr	r3, [pc, #48]	; (8019bb8 <ota_app_init+0x38>)
 8019b88:	9301      	str	r3, [sp, #4]
 8019b8a:	2336      	movs	r3, #54	; 0x36
 8019b8c:	9300      	str	r3, [sp, #0]
 8019b8e:	2300      	movs	r3, #0
 8019b90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8019b94:	4909      	ldr	r1, [pc, #36]	; (8019bbc <ota_app_init+0x3c>)
 8019b96:	480a      	ldr	r0, [pc, #40]	; (8019bc0 <ota_app_init+0x40>)
 8019b98:	f7ee fb1b 	bl	80081d2 <xTaskCreate>
	assert(ota_handle != NULL);
 8019b9c:	4b06      	ldr	r3, [pc, #24]	; (8019bb8 <ota_app_init+0x38>)
 8019b9e:	681b      	ldr	r3, [r3, #0]
 8019ba0:	2b00      	cmp	r3, #0
 8019ba2:	d105      	bne.n	8019bb0 <ota_app_init+0x30>
 8019ba4:	4b07      	ldr	r3, [pc, #28]	; (8019bc4 <ota_app_init+0x44>)
 8019ba6:	4a08      	ldr	r2, [pc, #32]	; (8019bc8 <ota_app_init+0x48>)
 8019ba8:	2124      	movs	r1, #36	; 0x24
 8019baa:	4808      	ldr	r0, [pc, #32]	; (8019bcc <ota_app_init+0x4c>)
 8019bac:	f001 ff92 	bl	801bad4 <__assert_func>
}
 8019bb0:	bf00      	nop
 8019bb2:	46bd      	mov	sp, r7
 8019bb4:	bd80      	pop	{r7, pc}
 8019bb6:	bf00      	nop
 8019bb8:	200015d0 	.word	0x200015d0
 8019bbc:	08022514 	.word	0x08022514
 8019bc0:	08019bd1 	.word	0x08019bd1
 8019bc4:	0802251c 	.word	0x0802251c
 8019bc8:	080228ac 	.word	0x080228ac
 8019bcc:	08022530 	.word	0x08022530

08019bd0 <ota_process>:

static void do_retransmit(const int sock);

static void ota_process(void *arg){
 8019bd0:	b580      	push	{r7, lr}
 8019bd2:	b0b8      	sub	sp, #224	; 0xe0
 8019bd4:	af02      	add	r7, sp, #8
 8019bd6:	6078      	str	r0, [r7, #4]
	char addr_str[128];
    int addr_family = (int)AF_INET;
 8019bd8:	2302      	movs	r3, #2
 8019bda:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    int ip_protocol = 0;
 8019bde:	2300      	movs	r3, #0
 8019be0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    int keepAlive = 1;
 8019be4:	2301      	movs	r3, #1
 8019be6:	63fb      	str	r3, [r7, #60]	; 0x3c
    int keepIdle = KEEPALIVE_IDLE;
 8019be8:	2305      	movs	r3, #5
 8019bea:	63bb      	str	r3, [r7, #56]	; 0x38
    int keepInterval = KEEPALIVE_INTERVAL;
 8019bec:	2305      	movs	r3, #5
 8019bee:	637b      	str	r3, [r7, #52]	; 0x34
    int keepCount = KEEPALIVE_COUNT;
 8019bf0:	2301      	movs	r3, #1
 8019bf2:	633b      	str	r3, [r7, #48]	; 0x30
    struct sockaddr_storage dest_addr;

    if (addr_family == AF_INET) {
 8019bf4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8019bf8:	2b02      	cmp	r3, #2
 8019bfa:	d11a      	bne.n	8019c32 <ota_process+0x62>
        struct sockaddr_in *dest_addr_ip4 = (struct sockaddr_in *)&dest_addr;
 8019bfc:	f107 0320 	add.w	r3, r7, #32
 8019c00:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        dest_addr_ip4->sin_addr.s_addr = htonl(INADDR_ANY);
 8019c04:	2000      	movs	r0, #0
 8019c06:	f7f4 faf0 	bl	800e1ea <lwip_htonl>
 8019c0a:	4602      	mov	r2, r0
 8019c0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8019c10:	605a      	str	r2, [r3, #4]
        dest_addr_ip4->sin_family = AF_INET;
 8019c12:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8019c16:	2202      	movs	r2, #2
 8019c18:	705a      	strb	r2, [r3, #1]
        dest_addr_ip4->sin_port = htons(PORT_OTA);
 8019c1a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8019c1e:	f7f4 facf 	bl	800e1c0 <lwip_htons>
 8019c22:	4603      	mov	r3, r0
 8019c24:	461a      	mov	r2, r3
 8019c26:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8019c2a:	805a      	strh	r2, [r3, #2]
        ip_protocol = IPPROTO_IP;
 8019c2c:	2300      	movs	r3, #0
 8019c2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }

    int listen_sock = socket(addr_family, SOCK_STREAM, ip_protocol);
 8019c32:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8019c36:	2101      	movs	r1, #1
 8019c38:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8019c3c:	f7f3 fd0e 	bl	800d65c <lwip_socket>
 8019c40:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if (listen_sock < 0) {
 8019c44:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8019c48:	2b00      	cmp	r3, #0
 8019c4a:	da03      	bge.n	8019c54 <ota_process+0x84>
        //printf( "Unable to create socket: errno %d", errno);
        vTaskDelete(NULL);
 8019c4c:	2000      	movs	r0, #0
 8019c4e:	f7ee fc1b 	bl	8008488 <vTaskDelete>
 8019c52:	e083      	b.n	8019d5c <ota_process+0x18c>
        return;
    }

    int opt = 1;
 8019c54:	2301      	movs	r3, #1
 8019c56:	61fb      	str	r3, [r7, #28]
    setsockopt(listen_sock, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt));
 8019c58:	f107 031c 	add.w	r3, r7, #28
 8019c5c:	2204      	movs	r2, #4
 8019c5e:	9200      	str	r2, [sp, #0]
 8019c60:	2204      	movs	r2, #4
 8019c62:	f640 71ff 	movw	r1, #4095	; 0xfff
 8019c66:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8019c6a:	f7f3 ff05 	bl	800da78 <lwip_setsockopt>

    int err = bind(listen_sock, (struct sockaddr *)&dest_addr, sizeof(dest_addr));
 8019c6e:	f107 0320 	add.w	r3, r7, #32
 8019c72:	2210      	movs	r2, #16
 8019c74:	4619      	mov	r1, r3
 8019c76:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8019c7a:	f7f2 ff9b 	bl	800cbb4 <lwip_bind>
 8019c7e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
    if (err != 0) {
 8019c82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8019c86:	2b00      	cmp	r3, #0
 8019c88:	d15c      	bne.n	8019d44 <ota_process+0x174>
        //printf( "IPPROTO: %d", addr_family);
        goto CLEAN_UP;
    }
    //printf( "Socket bound, port %d", PORT_SETTING);

    err = listen(listen_sock, 1);
 8019c8a:	2101      	movs	r1, #1
 8019c8c:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8019c90:	f7f3 f854 	bl	800cd3c <lwip_listen>
 8019c94:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
    if (err != 0) {
 8019c98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8019c9c:	2b00      	cmp	r3, #0
 8019c9e:	d153      	bne.n	8019d48 <ota_process+0x178>
        goto CLEAN_UP;
    }
	while(1){
        //printf( "Socket listening");
        struct sockaddr_storage source_addr; // Large enough for both IPv4 or IPv6
        socklen_t addr_len = sizeof(source_addr);
 8019ca0:	2310      	movs	r3, #16
 8019ca2:	60bb      	str	r3, [r7, #8]
        int sock = accept(listen_sock, (struct sockaddr *)&source_addr, &addr_len);
 8019ca4:	f107 0208 	add.w	r2, r7, #8
 8019ca8:	f107 030c 	add.w	r3, r7, #12
 8019cac:	4619      	mov	r1, r3
 8019cae:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8019cb2:	f7f2 fe61 	bl	800c978 <lwip_accept>
 8019cb6:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
        if (sock < 0) {
 8019cba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8019cbe:	2b00      	cmp	r3, #0
 8019cc0:	db44      	blt.n	8019d4c <ota_process+0x17c>
            //printf( "Unable to accept connection: errno %d", errno);
            break;
        }
        // Set tcp keepalive option
        setsockopt(sock, SOL_SOCKET, SO_KEEPALIVE, &keepAlive, sizeof(int));
 8019cc2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019cc6:	2204      	movs	r2, #4
 8019cc8:	9200      	str	r2, [sp, #0]
 8019cca:	2208      	movs	r2, #8
 8019ccc:	f640 71ff 	movw	r1, #4095	; 0xfff
 8019cd0:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8019cd4:	f7f3 fed0 	bl	800da78 <lwip_setsockopt>
        setsockopt(sock, IPPROTO_TCP, TCP_KEEPIDLE, &keepIdle, sizeof(int));
 8019cd8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8019cdc:	2204      	movs	r2, #4
 8019cde:	9200      	str	r2, [sp, #0]
 8019ce0:	2203      	movs	r2, #3
 8019ce2:	2106      	movs	r1, #6
 8019ce4:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8019ce8:	f7f3 fec6 	bl	800da78 <lwip_setsockopt>
        setsockopt(sock, IPPROTO_TCP, TCP_KEEPINTVL, &keepInterval, sizeof(int));
 8019cec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8019cf0:	2204      	movs	r2, #4
 8019cf2:	9200      	str	r2, [sp, #0]
 8019cf4:	2204      	movs	r2, #4
 8019cf6:	2106      	movs	r1, #6
 8019cf8:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8019cfc:	f7f3 febc 	bl	800da78 <lwip_setsockopt>
        setsockopt(sock, IPPROTO_TCP, TCP_KEEPCNT, &keepCount, sizeof(int));
 8019d00:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019d04:	2204      	movs	r2, #4
 8019d06:	9200      	str	r2, [sp, #0]
 8019d08:	2205      	movs	r2, #5
 8019d0a:	2106      	movs	r1, #6
 8019d0c:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8019d10:	f7f3 feb2 	bl	800da78 <lwip_setsockopt>
        // Convert ip address to string
        if (source_addr.ss_family == PF_INET) {
 8019d14:	7b7b      	ldrb	r3, [r7, #13]
 8019d16:	2b02      	cmp	r3, #2
 8019d18:	d108      	bne.n	8019d2c <ota_process+0x15c>
            inet_ntoa_r(((struct sockaddr_in *)&source_addr)->sin_addr, addr_str, sizeof(addr_str) - 1);
 8019d1a:	f107 030c 	add.w	r3, r7, #12
 8019d1e:	3304      	adds	r3, #4
 8019d20:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8019d24:	227f      	movs	r2, #127	; 0x7f
 8019d26:	4618      	mov	r0, r3
 8019d28:	f7fe fbd6 	bl	80184d8 <ip4addr_ntoa_r>
        }
        //printf( "Socket accepted ip address: %s", addr_str);
        do_retransmit(sock);
 8019d2c:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8019d30:	f000 f818 	bl	8019d64 <do_retransmit>
        close(sock);
 8019d34:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8019d38:	f7f2 ffaa 	bl	800cc90 <lwip_close>
		vTaskDelay(1);
 8019d3c:	2001      	movs	r0, #1
 8019d3e:	f7ee fc15 	bl	800856c <vTaskDelay>
	while(1){
 8019d42:	e7ad      	b.n	8019ca0 <ota_process+0xd0>
        goto CLEAN_UP;
 8019d44:	bf00      	nop
 8019d46:	e002      	b.n	8019d4e <ota_process+0x17e>
        goto CLEAN_UP;
 8019d48:	bf00      	nop
 8019d4a:	e000      	b.n	8019d4e <ota_process+0x17e>
            break;
 8019d4c:	bf00      	nop
	}
CLEAN_UP:
	close(listen_sock);
 8019d4e:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8019d52:	f7f2 ff9d 	bl	800cc90 <lwip_close>
	vTaskDelete(NULL);
 8019d56:	2000      	movs	r0, #0
 8019d58:	f7ee fb96 	bl	8008488 <vTaskDelete>
}
 8019d5c:	37d8      	adds	r7, #216	; 0xd8
 8019d5e:	46bd      	mov	sp, r7
 8019d60:	bd80      	pop	{r7, pc}
	...

08019d64 <do_retransmit>:
uint8_t ota_buff[4096];

static void do_retransmit(const int sock){
 8019d64:	b580      	push	{r7, lr}
 8019d66:	b0a6      	sub	sp, #152	; 0x98
 8019d68:	af00      	add	r7, sp, #0
 8019d6a:	6078      	str	r0, [r7, #4]
	int len = 0;
 8019d6c:	2300      	movs	r3, #0
 8019d6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	char rx_buffer[128];

	do {
		len = recv(sock, rx_buffer, sizeof(rx_buffer) - 1, 0);
 8019d72:	f107 0108 	add.w	r1, r7, #8
 8019d76:	2300      	movs	r3, #0
 8019d78:	227f      	movs	r2, #127	; 0x7f
 8019d7a:	6878      	ldr	r0, [r7, #4]
 8019d7c:	f7f3 fb48 	bl	800d410 <lwip_recv>
 8019d80:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
		if (len > 0) {
 8019d84:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019d88:	2b00      	cmp	r3, #0
 8019d8a:	f340 80ac 	ble.w	8019ee6 <do_retransmit+0x182>
			switch (rx_buffer[0]) {
 8019d8e:	7a3b      	ldrb	r3, [r7, #8]
 8019d90:	2b03      	cmp	r3, #3
 8019d92:	f000 8099 	beq.w	8019ec8 <do_retransmit+0x164>
 8019d96:	2b03      	cmp	r3, #3
 8019d98:	f300 80a7 	bgt.w	8019eea <do_retransmit+0x186>
 8019d9c:	2b01      	cmp	r3, #1
 8019d9e:	d002      	beq.n	8019da6 <do_retransmit+0x42>
 8019da0:	2b02      	cmp	r3, #2
 8019da2:	d036      	beq.n	8019e12 <do_retransmit+0xae>
				write_flag(0x01);
				rx_buffer[0] = ACK;
				len = send(sock,rx_buffer,1,0);
				break;
			default:
				break;
 8019da4:	e0a1      	b.n	8019eea <do_retransmit+0x186>
				rx_buffer[0] = ACK;
 8019da6:	23fa      	movs	r3, #250	; 0xfa
 8019da8:	723b      	strb	r3, [r7, #8]
				len = send(sock,rx_buffer,1,0);
 8019daa:	f107 0108 	add.w	r1, r7, #8
 8019dae:	2300      	movs	r3, #0
 8019db0:	2201      	movs	r2, #1
 8019db2:	6878      	ldr	r0, [r7, #4]
 8019db4:	f7f3 fb42 	bl	800d43c <lwip_send>
 8019db8:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
				if(len < 0) break;
 8019dbc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019dc0:	2b00      	cmp	r3, #0
 8019dc2:	f2c0 8094 	blt.w	8019eee <do_retransmit+0x18a>
				len = recv(sock, rx_buffer, sizeof(rx_buffer) - 1, 0);
 8019dc6:	f107 0108 	add.w	r1, r7, #8
 8019dca:	2300      	movs	r3, #0
 8019dcc:	227f      	movs	r2, #127	; 0x7f
 8019dce:	6878      	ldr	r0, [r7, #4]
 8019dd0:	f7f3 fb1e 	bl	800d410 <lwip_recv>
 8019dd4:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
				if(len < 0) break;
 8019dd8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019ddc:	2b00      	cmp	r3, #0
 8019dde:	f2c0 8088 	blt.w	8019ef2 <do_retransmit+0x18e>
				if(rx_buffer[0] == OTA_ERASE){
 8019de2:	7a3b      	ldrb	r3, [r7, #8]
 8019de4:	2b01      	cmp	r3, #1
 8019de6:	f040 8086 	bne.w	8019ef6 <do_retransmit+0x192>
					flash_open();
 8019dea:	f000 fbf3 	bl	801a5d4 <flash_open>
					flash_erase(STORE_SECTOR,2);
 8019dee:	2102      	movs	r1, #2
 8019df0:	200a      	movs	r0, #10
 8019df2:	f000 fbfb 	bl	801a5ec <flash_erase>
					flash_close();
 8019df6:	f000 fbf3 	bl	801a5e0 <flash_close>
					rx_buffer[0] = DONE;
 8019dfa:	23fb      	movs	r3, #251	; 0xfb
 8019dfc:	723b      	strb	r3, [r7, #8]
					len = send(sock,rx_buffer,1,0);
 8019dfe:	f107 0108 	add.w	r1, r7, #8
 8019e02:	2300      	movs	r3, #0
 8019e04:	2201      	movs	r2, #1
 8019e06:	6878      	ldr	r0, [r7, #4]
 8019e08:	f7f3 fb18 	bl	800d43c <lwip_send>
 8019e0c:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
				break;
 8019e10:	e071      	b.n	8019ef6 <do_retransmit+0x192>
				flash_open();
 8019e12:	f000 fbdf 	bl	801a5d4 <flash_open>
				rx_buffer[0] = ACK;
 8019e16:	23fa      	movs	r3, #250	; 0xfa
 8019e18:	723b      	strb	r3, [r7, #8]
				len = send(sock,rx_buffer,1,0);
 8019e1a:	f107 0108 	add.w	r1, r7, #8
 8019e1e:	2300      	movs	r3, #0
 8019e20:	2201      	movs	r2, #1
 8019e22:	6878      	ldr	r0, [r7, #4]
 8019e24:	f7f3 fb0a 	bl	800d43c <lwip_send>
 8019e28:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
				len = recv(sock, rx_buffer, sizeof(rx_buffer) - 1, 0);
 8019e2c:	f107 0108 	add.w	r1, r7, #8
 8019e30:	2300      	movs	r3, #0
 8019e32:	227f      	movs	r2, #127	; 0x7f
 8019e34:	6878      	ldr	r0, [r7, #4]
 8019e36:	f7f3 faeb 	bl	800d410 <lwip_recv>
 8019e3a:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
				uint32_t file_size = ((uint32_t)rx_buffer[0]<<24) | ((uint32_t) rx_buffer[1] << 16) | ((uint32_t) rx_buffer[2] <<8) | ((uint32_t ) rx_buffer[3]);
 8019e3e:	7a3b      	ldrb	r3, [r7, #8]
 8019e40:	061a      	lsls	r2, r3, #24
 8019e42:	7a7b      	ldrb	r3, [r7, #9]
 8019e44:	041b      	lsls	r3, r3, #16
 8019e46:	431a      	orrs	r2, r3
 8019e48:	7abb      	ldrb	r3, [r7, #10]
 8019e4a:	021b      	lsls	r3, r3, #8
 8019e4c:	4313      	orrs	r3, r2
 8019e4e:	7afa      	ldrb	r2, [r7, #11]
 8019e50:	4313      	orrs	r3, r2
 8019e52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				uint32_t addr = STORE_ADDR;
 8019e56:	4b2d      	ldr	r3, [pc, #180]	; (8019f0c <do_retransmit+0x1a8>)
 8019e58:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
				uint32_t size = 0;
 8019e5c:	2300      	movs	r3, #0
 8019e5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
					len = recv(sock,ota_buff,4096,0);
 8019e62:	2300      	movs	r3, #0
 8019e64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8019e68:	4929      	ldr	r1, [pc, #164]	; (8019f10 <do_retransmit+0x1ac>)
 8019e6a:	6878      	ldr	r0, [r7, #4]
 8019e6c:	f7f3 fad0 	bl	800d410 <lwip_recv>
 8019e70:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
					flash_write(addr,ota_buff,len);
 8019e74:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019e78:	461a      	mov	r2, r3
 8019e7a:	4925      	ldr	r1, [pc, #148]	; (8019f10 <do_retransmit+0x1ac>)
 8019e7c:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8019e80:	f000 fbd3 	bl	801a62a <flash_write>
					addr = addr + len;
 8019e84:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019e88:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8019e8c:	4413      	add	r3, r2
 8019e8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
					size = size + len;
 8019e92:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019e96:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8019e9a:	4413      	add	r3, r2
 8019e9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
					rx_buffer[0] = ACK;
 8019ea0:	23fa      	movs	r3, #250	; 0xfa
 8019ea2:	723b      	strb	r3, [r7, #8]
					len = send(sock,rx_buffer,1,0);
 8019ea4:	f107 0108 	add.w	r1, r7, #8
 8019ea8:	2300      	movs	r3, #0
 8019eaa:	2201      	movs	r2, #1
 8019eac:	6878      	ldr	r0, [r7, #4]
 8019eae:	f7f3 fac5 	bl	800d43c <lwip_send>
 8019eb2:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
				}while(size  < file_size);
 8019eb6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8019eba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8019ebe:	429a      	cmp	r2, r3
 8019ec0:	d3cf      	bcc.n	8019e62 <do_retransmit+0xfe>
				flash_close();
 8019ec2:	f000 fb8d 	bl	801a5e0 <flash_close>
				break;
 8019ec6:	e017      	b.n	8019ef8 <do_retransmit+0x194>
				write_flag(0x01);
 8019ec8:	2001      	movs	r0, #1
 8019eca:	f000 f823 	bl	8019f14 <write_flag>
				rx_buffer[0] = ACK;
 8019ece:	23fa      	movs	r3, #250	; 0xfa
 8019ed0:	723b      	strb	r3, [r7, #8]
				len = send(sock,rx_buffer,1,0);
 8019ed2:	f107 0108 	add.w	r1, r7, #8
 8019ed6:	2300      	movs	r3, #0
 8019ed8:	2201      	movs	r2, #1
 8019eda:	6878      	ldr	r0, [r7, #4]
 8019edc:	f7f3 faae 	bl	800d43c <lwip_send>
 8019ee0:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
				break;
 8019ee4:	e008      	b.n	8019ef8 <do_retransmit+0x194>
			}
		}
 8019ee6:	bf00      	nop
 8019ee8:	e006      	b.n	8019ef8 <do_retransmit+0x194>
				break;
 8019eea:	bf00      	nop
 8019eec:	e004      	b.n	8019ef8 <do_retransmit+0x194>
				if(len < 0) break;
 8019eee:	bf00      	nop
 8019ef0:	e002      	b.n	8019ef8 <do_retransmit+0x194>
				if(len < 0) break;
 8019ef2:	bf00      	nop
 8019ef4:	e000      	b.n	8019ef8 <do_retransmit+0x194>
				break;
 8019ef6:	bf00      	nop
	} while (len > 0);
 8019ef8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019efc:	2b00      	cmp	r3, #0
 8019efe:	f73f af38 	bgt.w	8019d72 <do_retransmit+0xe>
}
 8019f02:	bf00      	nop
 8019f04:	bf00      	nop
 8019f06:	3798      	adds	r7, #152	; 0x98
 8019f08:	46bd      	mov	sp, r7
 8019f0a:	bd80      	pop	{r7, pc}
 8019f0c:	080c0000 	.word	0x080c0000
 8019f10:	2000c350 	.word	0x2000c350

08019f14 <write_flag>:
static void write_flag(uint8_t flag){
 8019f14:	b580      	push	{r7, lr}
 8019f16:	b082      	sub	sp, #8
 8019f18:	af00      	add	r7, sp, #0
 8019f1a:	4603      	mov	r3, r0
 8019f1c:	71fb      	strb	r3, [r7, #7]
	flash_open();
 8019f1e:	f000 fb59 	bl	801a5d4 <flash_open>
	flash_erase(FLAG_SECTOR,1);
 8019f22:	2101      	movs	r1, #1
 8019f24:	2002      	movs	r0, #2
 8019f26:	f000 fb61 	bl	801a5ec <flash_erase>
	flash_write(FLAG_ADDR,(uint8_t*)&flag,1);
 8019f2a:	1dfb      	adds	r3, r7, #7
 8019f2c:	2201      	movs	r2, #1
 8019f2e:	4619      	mov	r1, r3
 8019f30:	4804      	ldr	r0, [pc, #16]	; (8019f44 <write_flag+0x30>)
 8019f32:	f000 fb7a 	bl	801a62a <flash_write>
	flash_close();
 8019f36:	f000 fb53 	bl	801a5e0 <flash_close>
}
 8019f3a:	bf00      	nop
 8019f3c:	3708      	adds	r7, #8
 8019f3e:	46bd      	mov	sp, r7
 8019f40:	bd80      	pop	{r7, pc}
 8019f42:	bf00      	nop
 8019f44:	08008000 	.word	0x08008000

08019f48 <__io_putchar>:

/********************** Exported Function Definitions *************************/

QueueHandle_t shell_queue_send;

uint8_t __io_putchar(uint8_t ch){
 8019f48:	b580      	push	{r7, lr}
 8019f4a:	b082      	sub	sp, #8
 8019f4c:	af00      	add	r7, sp, #0
 8019f4e:	4603      	mov	r3, r0
 8019f50:	71fb      	strb	r3, [r7, #7]
	xQueueSend(shell_queue_send,&ch,(TickType_t)100);
 8019f52:	4b06      	ldr	r3, [pc, #24]	; (8019f6c <__io_putchar+0x24>)
 8019f54:	6818      	ldr	r0, [r3, #0]
 8019f56:	1df9      	adds	r1, r7, #7
 8019f58:	2300      	movs	r3, #0
 8019f5a:	2264      	movs	r2, #100	; 0x64
 8019f5c:	f7ed fa3a 	bl	80073d4 <xQueueGenericSend>
	return ch;
 8019f60:	79fb      	ldrb	r3, [r7, #7]
}
 8019f62:	4618      	mov	r0, r3
 8019f64:	3708      	adds	r7, #8
 8019f66:	46bd      	mov	sp, r7
 8019f68:	bd80      	pop	{r7, pc}
 8019f6a:	bf00      	nop
 8019f6c:	2000d46c 	.word	0x2000d46c

08019f70 <shell_printf>:
#define default_buff_size 1024
int shell_printf(const char *format, ...){
 8019f70:	b40f      	push	{r0, r1, r2, r3}
 8019f72:	b580      	push	{r7, lr}
 8019f74:	b084      	sub	sp, #16
 8019f76:	af00      	add	r7, sp, #0
	va_list args;
	char *buff = (char*) malloc(default_buff_size);
 8019f78:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8019f7c:	f001 fefc 	bl	801bd78 <malloc>
 8019f80:	4603      	mov	r3, r0
 8019f82:	60bb      	str	r3, [r7, #8]
	memset(buff, 0, default_buff_size);
 8019f84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8019f88:	2100      	movs	r1, #0
 8019f8a:	68b8      	ldr	r0, [r7, #8]
 8019f8c:	f001 ff3a 	bl	801be04 <memset>
	va_start(args, format);
 8019f90:	f107 031c 	add.w	r3, r7, #28
 8019f94:	603b      	str	r3, [r7, #0]
	vsprintf(buff, format, args);
 8019f96:	683a      	ldr	r2, [r7, #0]
 8019f98:	69b9      	ldr	r1, [r7, #24]
 8019f9a:	68b8      	ldr	r0, [r7, #8]
 8019f9c:	f002 ff8a 	bl	801ceb4 <vsiprintf>

	int len = strlen(buff);
 8019fa0:	68b8      	ldr	r0, [r7, #8]
 8019fa2:	f7e6 f915 	bl	80001d0 <strlen>
 8019fa6:	4603      	mov	r3, r0
 8019fa8:	607b      	str	r3, [r7, #4]

	for(uint16_t i = 0;i<len;i++)
 8019faa:	2300      	movs	r3, #0
 8019fac:	81fb      	strh	r3, [r7, #14]
 8019fae:	e009      	b.n	8019fc4 <shell_printf+0x54>
		__io_putchar(buff[i]);
 8019fb0:	89fb      	ldrh	r3, [r7, #14]
 8019fb2:	68ba      	ldr	r2, [r7, #8]
 8019fb4:	4413      	add	r3, r2
 8019fb6:	781b      	ldrb	r3, [r3, #0]
 8019fb8:	4618      	mov	r0, r3
 8019fba:	f7ff ffc5 	bl	8019f48 <__io_putchar>
	for(uint16_t i = 0;i<len;i++)
 8019fbe:	89fb      	ldrh	r3, [r7, #14]
 8019fc0:	3301      	adds	r3, #1
 8019fc2:	81fb      	strh	r3, [r7, #14]
 8019fc4:	89fb      	ldrh	r3, [r7, #14]
 8019fc6:	687a      	ldr	r2, [r7, #4]
 8019fc8:	429a      	cmp	r2, r3
 8019fca:	dcf1      	bgt.n	8019fb0 <shell_printf+0x40>
	free(buff);
 8019fcc:	68b8      	ldr	r0, [r7, #8]
 8019fce:	f001 fedb 	bl	801bd88 <free>
	return len;
 8019fd2:	687b      	ldr	r3, [r7, #4]
}
 8019fd4:	4618      	mov	r0, r3
 8019fd6:	3710      	adds	r7, #16
 8019fd8:	46bd      	mov	sp, r7
 8019fda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8019fde:	b004      	add	sp, #16
 8019fe0:	4770      	bx	lr

08019fe2 <user_put_char>:
int user_put_char(uint8_t *buf, uint32_t len) {
 8019fe2:	b580      	push	{r7, lr}
 8019fe4:	b082      	sub	sp, #8
 8019fe6:	af00      	add	r7, sp, #0
 8019fe8:	6078      	str	r0, [r7, #4]
 8019fea:	6039      	str	r1, [r7, #0]
	return __io_putchar(*buf);
 8019fec:	687b      	ldr	r3, [r7, #4]
 8019fee:	781b      	ldrb	r3, [r3, #0]
 8019ff0:	4618      	mov	r0, r3
 8019ff2:	f7ff ffa9 	bl	8019f48 <__io_putchar>
 8019ff6:	4603      	mov	r3, r0
}
 8019ff8:	4618      	mov	r0, r3
 8019ffa:	3708      	adds	r7, #8
 8019ffc:	46bd      	mov	sp, r7
 8019ffe:	bd80      	pop	{r7, pc}

0801a000 <user_get_char>:

int user_get_char(uint8_t *buf, uint32_t len) {
 801a000:	b580      	push	{r7, lr}
 801a002:	b084      	sub	sp, #16
 801a004:	af00      	add	r7, sp, #0
 801a006:	6078      	str	r0, [r7, #4]
 801a008:	6039      	str	r1, [r7, #0]
	uint8_t ch = __io_getchar();
 801a00a:	f000 fef5 	bl	801adf8 <__io_getchar>
 801a00e:	4603      	mov	r3, r0
 801a010:	73fb      	strb	r3, [r7, #15]
	*buf = ch;
 801a012:	687b      	ldr	r3, [r7, #4]
 801a014:	7bfa      	ldrb	r2, [r7, #15]
 801a016:	701a      	strb	r2, [r3, #0]
	return ch;
 801a018:	7bfb      	ldrb	r3, [r7, #15]
}
 801a01a:	4618      	mov	r0, r3
 801a01c:	3710      	adds	r7, #16
 801a01e:	46bd      	mov	sp, r7
 801a020:	bd80      	pop	{r7, pc}
	...

0801a024 <cli_app_start>:

void cli_app_start(void) {
 801a024:	b580      	push	{r7, lr}
 801a026:	b084      	sub	sp, #16
 801a028:	af02      	add	r7, sp, #8
	retarget_init();
 801a02a:	f000 feb1 	bl	801ad90 <retarget_init>
	shell_queue_send = xQueueCreate(1024,sizeof(uint8_t));
 801a02e:	2200      	movs	r2, #0
 801a030:	2101      	movs	r1, #1
 801a032:	f44f 6080 	mov.w	r0, #1024	; 0x400
 801a036:	f7ed f84f 	bl	80070d8 <xQueueGenericCreate>
 801a03a:	4603      	mov	r3, r0
 801a03c:	4a11      	ldr	r2, [pc, #68]	; (801a084 <cli_app_start+0x60>)
 801a03e:	6013      	str	r3, [r2, #0]
	if(shell_queue_send == NULL) return;
 801a040:	4b10      	ldr	r3, [pc, #64]	; (801a084 <cli_app_start+0x60>)
 801a042:	681b      	ldr	r3, [r3, #0]
 801a044:	2b00      	cmp	r3, #0
 801a046:	d018      	beq.n	801a07a <cli_app_start+0x56>

	SHELL_Init(&user_context, user_put_char, user_get_char, shell_printf, ">");
 801a048:	4b0f      	ldr	r3, [pc, #60]	; (801a088 <cli_app_start+0x64>)
 801a04a:	9300      	str	r3, [sp, #0]
 801a04c:	4b0f      	ldr	r3, [pc, #60]	; (801a08c <cli_app_start+0x68>)
 801a04e:	4a10      	ldr	r2, [pc, #64]	; (801a090 <cli_app_start+0x6c>)
 801a050:	4910      	ldr	r1, [pc, #64]	; (801a094 <cli_app_start+0x70>)
 801a052:	4811      	ldr	r0, [pc, #68]	; (801a098 <cli_app_start+0x74>)
 801a054:	f000 ff2a 	bl	801aeac <SHELL_Init>

	/* Register CLI commands */
	for (int i = 0;
 801a058:	2300      	movs	r3, #0
 801a05a:	607b      	str	r3, [r7, #4]
 801a05c:	e009      	b.n	801a072 <cli_app_start+0x4e>
			i < sizeof(cli_command_table) / sizeof(shell_command_context_t);
			i++) {
		SHELL_RegisterCommand(&cli_command_table[i]);
 801a05e:	687b      	ldr	r3, [r7, #4]
 801a060:	011b      	lsls	r3, r3, #4
 801a062:	4a0e      	ldr	r2, [pc, #56]	; (801a09c <cli_app_start+0x78>)
 801a064:	4413      	add	r3, r2
 801a066:	4618      	mov	r0, r3
 801a068:	f001 fcba 	bl	801b9e0 <SHELL_RegisterCommand>
			i++) {
 801a06c:	687b      	ldr	r3, [r7, #4]
 801a06e:	3301      	adds	r3, #1
 801a070:	607b      	str	r3, [r7, #4]
	for (int i = 0;
 801a072:	687b      	ldr	r3, [r7, #4]
 801a074:	2b00      	cmp	r3, #0
 801a076:	d0f2      	beq.n	801a05e <cli_app_start+0x3a>
 801a078:	e000      	b.n	801a07c <cli_app_start+0x58>
	if(shell_queue_send == NULL) return;
 801a07a:	bf00      	nop
	}
}
 801a07c:	3708      	adds	r7, #8
 801a07e:	46bd      	mov	sp, r7
 801a080:	bd80      	pop	{r7, pc}
 801a082:	bf00      	nop
 801a084:	2000d46c 	.word	0x2000d46c
 801a088:	08022570 	.word	0x08022570
 801a08c:	08019f71 	.word	0x08019f71
 801a090:	0801a001 	.word	0x0801a001
 801a094:	08019fe3 	.word	0x08019fe3
 801a098:	2000d350 	.word	0x2000d350
 801a09c:	080228bc 	.word	0x080228bc

0801a0a0 <cli_app_main_loop>:

void cli_app_main_loop(void *pvParameters) {
 801a0a0:	b580      	push	{r7, lr}
 801a0a2:	b082      	sub	sp, #8
 801a0a4:	af00      	add	r7, sp, #0
 801a0a6:	6078      	str	r0, [r7, #4]
	SHELL_Process(&user_context);
 801a0a8:	4803      	ldr	r0, [pc, #12]	; (801a0b8 <cli_app_main_loop+0x18>)
 801a0aa:	f000 ff51 	bl	801af50 <SHELL_Process>
}
 801a0ae:	bf00      	nop
 801a0b0:	3708      	adds	r7, #8
 801a0b2:	46bd      	mov	sp, r7
 801a0b4:	bd80      	pop	{r7, pc}
 801a0b6:	bf00      	nop
 801a0b8:	2000d350 	.word	0x2000d350

0801a0bc <cli_app_on_data_received>:

void cli_app_on_data_received(uint8_t ch) {
 801a0bc:	b580      	push	{r7, lr}
 801a0be:	b082      	sub	sp, #8
 801a0c0:	af00      	add	r7, sp, #0
 801a0c2:	4603      	mov	r3, r0
 801a0c4:	71fb      	strb	r3, [r7, #7]
	on_uart_data_received(ch);
 801a0c6:	79fb      	ldrb	r3, [r7, #7]
 801a0c8:	4618      	mov	r0, r3
 801a0ca:	f000 fea7 	bl	801ae1c <on_uart_data_received>
}
 801a0ce:	bf00      	nop
 801a0d0:	3708      	adds	r7, #8
 801a0d2:	46bd      	mov	sp, r7
 801a0d4:	bd80      	pop	{r7, pc}

0801a0d6 <cli_reset_system>:

/********************** Internal Function Definitions *************************/

/* Reset System */
static int32_t cli_reset_system(p_shell_context_t context, int32_t argc,
		char **argv) {
 801a0d6:	b480      	push	{r7}
 801a0d8:	b085      	sub	sp, #20
 801a0da:	af00      	add	r7, sp, #0
 801a0dc:	60f8      	str	r0, [r7, #12]
 801a0de:	60b9      	str	r1, [r7, #8]
 801a0e0:	607a      	str	r2, [r7, #4]
	if (argc < 1) {
 801a0e2:	68bb      	ldr	r3, [r7, #8]
 801a0e4:	2b00      	cmp	r3, #0
 801a0e6:	dc02      	bgt.n	801a0ee <cli_reset_system+0x18>
		//printf("Missing parameter\r\n");
		return -1;
 801a0e8:	f04f 33ff 	mov.w	r3, #4294967295
 801a0ec:	e000      	b.n	801a0f0 <cli_reset_system+0x1a>
	}
	//printf("sys reset\r\n");
	return 0;
 801a0ee:	2300      	movs	r3, #0
}
 801a0f0:	4618      	mov	r0, r3
 801a0f2:	3714      	adds	r7, #20
 801a0f4:	46bd      	mov	sp, r7
 801a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0fa:	4770      	bx	lr

0801a0fc <setting_app>:

static void ev_tcp_server_config_task(void *arg);
static void do_retransmit(const int sock);
static void transmit_data(void* arg);
static void send_tcp(const int sock,char* buff,uint16_t len);
void setting_app(){
 801a0fc:	b580      	push	{r7, lr}
 801a0fe:	b082      	sub	sp, #8
 801a100:	af02      	add	r7, sp, #8

	tranmiter_semphr = xSemaphoreCreateMutex();
 801a102:	2001      	movs	r0, #1
 801a104:	f7ed f85f 	bl	80071c6 <xQueueCreateMutex>
 801a108:	4603      	mov	r3, r0
 801a10a:	4a08      	ldr	r2, [pc, #32]	; (801a12c <setting_app+0x30>)
 801a10c:	6013      	str	r3, [r2, #0]

	xTaskCreate(ev_tcp_server_config_task, "tcp server_st", 1024, NULL,
 801a10e:	4b08      	ldr	r3, [pc, #32]	; (801a130 <setting_app+0x34>)
 801a110:	9301      	str	r3, [sp, #4]
 801a112:	2337      	movs	r3, #55	; 0x37
 801a114:	9300      	str	r3, [sp, #0]
 801a116:	2300      	movs	r3, #0
 801a118:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801a11c:	4905      	ldr	r1, [pc, #20]	; (801a134 <setting_app+0x38>)
 801a11e:	4806      	ldr	r0, [pc, #24]	; (801a138 <setting_app+0x3c>)
 801a120:	f7ee f857 	bl	80081d2 <xTaskCreate>
			configMAX_PRIORITIES - 1, &ev_tcp_server_setting_handle);
}
 801a124:	bf00      	nop
 801a126:	46bd      	mov	sp, r7
 801a128:	bd80      	pop	{r7, pc}
 801a12a:	bf00      	nop
 801a12c:	2000d470 	.word	0x2000d470
 801a130:	2000d474 	.word	0x2000d474
 801a134:	08022574 	.word	0x08022574
 801a138:	0801a235 	.word	0x0801a235

0801a13c <do_retransmit>:

static void do_retransmit(const int sock)
{
 801a13c:	b580      	push	{r7, lr}
 801a13e:	b0a8      	sub	sp, #160	; 0xa0
 801a140:	af02      	add	r7, sp, #8
 801a142:	6078      	str	r0, [r7, #4]

    int len;
    char rx_buffer[128];
    int p_sock = sock;
 801a144:	687b      	ldr	r3, [r7, #4]
 801a146:	60bb      	str	r3, [r7, #8]
    xTaskCreate(transmit_data,"transmit", 1024,(void*)&p_sock,configMAX_PRIORITIES, &tranmiter_handle);
 801a148:	f107 0308 	add.w	r3, r7, #8
 801a14c:	4a32      	ldr	r2, [pc, #200]	; (801a218 <do_retransmit+0xdc>)
 801a14e:	9201      	str	r2, [sp, #4]
 801a150:	2238      	movs	r2, #56	; 0x38
 801a152:	9200      	str	r2, [sp, #0]
 801a154:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801a158:	4930      	ldr	r1, [pc, #192]	; (801a21c <do_retransmit+0xe0>)
 801a15a:	4831      	ldr	r0, [pc, #196]	; (801a220 <do_retransmit+0xe4>)
 801a15c:	f7ee f839 	bl	80081d2 <xTaskCreate>

    shell_context_struct *context = &user_context;
 801a160:	4b30      	ldr	r3, [pc, #192]	; (801a224 <do_retransmit+0xe8>)
 801a162:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

    context->exit = false;
 801a166:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801a16a:	2200      	movs	r2, #0
 801a16c:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
    context->printf_data_func("\r\nSHELL (build: %s)\r\n", __DATE__);
 801a170:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801a174:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a176:	492c      	ldr	r1, [pc, #176]	; (801a228 <do_retransmit+0xec>)
 801a178:	482c      	ldr	r0, [pc, #176]	; (801a22c <do_retransmit+0xf0>)
 801a17a:	4798      	blx	r3
    context->printf_data_func("Copyright (c) 2022 Technology\r\n");
 801a17c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801a180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a182:	482b      	ldr	r0, [pc, #172]	; (801a230 <do_retransmit+0xf4>)
 801a184:	4798      	blx	r3
    context->printf_data_func(context->prompt);
 801a186:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801a18a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a18c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801a190:	6812      	ldr	r2, [r2, #0]
 801a192:	4610      	mov	r0, r2
 801a194:	4798      	blx	r3

    do {
        len = recv(sock, rx_buffer, sizeof(rx_buffer) - 1, 0);
 801a196:	f107 010c 	add.w	r1, r7, #12
 801a19a:	2300      	movs	r3, #0
 801a19c:	227f      	movs	r2, #127	; 0x7f
 801a19e:	6878      	ldr	r0, [r7, #4]
 801a1a0:	f7f3 f936 	bl	800d410 <lwip_recv>
 801a1a4:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
        if (len < 0) {
 801a1a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a1ac:	2b00      	cmp	r3, #0
 801a1ae:	db26      	blt.n	801a1fe <do_retransmit+0xc2>
            //printf( "Error occurred during receiving: errno %d", errno);
        } else if (len == 0) {
 801a1b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a1b4:	2b00      	cmp	r3, #0
 801a1b6:	d022      	beq.n	801a1fe <do_retransmit+0xc2>
            //printf( "Connection closed");
        } else {
            rx_buffer[len] = 0; // Null-terminate whatever is received and treat it like a string
 801a1b8:	f107 020c 	add.w	r2, r7, #12
 801a1bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a1c0:	4413      	add	r3, r2
 801a1c2:	2200      	movs	r2, #0
 801a1c4:	701a      	strb	r2, [r3, #0]
            //printf( "Received %d bytes: %s", len, rx_buffer);
            // send() can return less bytes than supplied length.
            // Walk-around for robust implementation.
//            send_tcp(sock, rx_buffer, len);
            for(uint16_t i =0;i<len;i++){
 801a1c6:	2300      	movs	r3, #0
 801a1c8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 801a1cc:	e011      	b.n	801a1f2 <do_retransmit+0xb6>
            	cli_app_on_data_received(rx_buffer[i]);
 801a1ce:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 801a1d2:	f107 0298 	add.w	r2, r7, #152	; 0x98
 801a1d6:	4413      	add	r3, r2
 801a1d8:	f813 3c8c 	ldrb.w	r3, [r3, #-140]
 801a1dc:	4618      	mov	r0, r3
 801a1de:	f7ff ff6d 	bl	801a0bc <cli_app_on_data_received>
            	cli_app_main_loop(NULL);
 801a1e2:	2000      	movs	r0, #0
 801a1e4:	f7ff ff5c 	bl	801a0a0 <cli_app_main_loop>
            for(uint16_t i =0;i<len;i++){
 801a1e8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 801a1ec:	3301      	adds	r3, #1
 801a1ee:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 801a1f2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 801a1f6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801a1fa:	429a      	cmp	r2, r3
 801a1fc:	dce7      	bgt.n	801a1ce <do_retransmit+0x92>
            }
        }
    } while (len > 0);
 801a1fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a202:	2b00      	cmp	r3, #0
 801a204:	dcc7      	bgt.n	801a196 <do_retransmit+0x5a>
    vTaskDelete(tranmiter_handle);
 801a206:	4b04      	ldr	r3, [pc, #16]	; (801a218 <do_retransmit+0xdc>)
 801a208:	681b      	ldr	r3, [r3, #0]
 801a20a:	4618      	mov	r0, r3
 801a20c:	f7ee f93c 	bl	8008488 <vTaskDelete>
}
 801a210:	bf00      	nop
 801a212:	3798      	adds	r7, #152	; 0x98
 801a214:	46bd      	mov	sp, r7
 801a216:	bd80      	pop	{r7, pc}
 801a218:	2000d478 	.word	0x2000d478
 801a21c:	08022584 	.word	0x08022584
 801a220:	0801a3cd 	.word	0x0801a3cd
 801a224:	2000d350 	.word	0x2000d350
 801a228:	08022590 	.word	0x08022590
 801a22c:	0802259c 	.word	0x0802259c
 801a230:	080225b4 	.word	0x080225b4

0801a234 <ev_tcp_server_config_task>:

static void ev_tcp_server_config_task(void *arg) {
 801a234:	b580      	push	{r7, lr}
 801a236:	b0b8      	sub	sp, #224	; 0xe0
 801a238:	af02      	add	r7, sp, #8
 801a23a:	6078      	str	r0, [r7, #4]

	cli_app_start();
 801a23c:	f7ff fef2 	bl	801a024 <cli_app_start>
    char addr_str[128];
    int addr_family = (int)AF_INET;
 801a240:	2302      	movs	r3, #2
 801a242:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    int ip_protocol = 0;
 801a246:	2300      	movs	r3, #0
 801a248:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    int keepAlive = 1;
 801a24c:	2301      	movs	r3, #1
 801a24e:	63fb      	str	r3, [r7, #60]	; 0x3c
    int keepIdle = KEEPALIVE_IDLE;
 801a250:	2305      	movs	r3, #5
 801a252:	63bb      	str	r3, [r7, #56]	; 0x38
    int keepInterval = KEEPALIVE_INTERVAL;
 801a254:	2305      	movs	r3, #5
 801a256:	637b      	str	r3, [r7, #52]	; 0x34
    int keepCount = KEEPALIVE_COUNT;
 801a258:	2301      	movs	r3, #1
 801a25a:	633b      	str	r3, [r7, #48]	; 0x30
    struct sockaddr_storage dest_addr;

    if (addr_family == AF_INET) {
 801a25c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801a260:	2b02      	cmp	r3, #2
 801a262:	d11a      	bne.n	801a29a <ev_tcp_server_config_task+0x66>
        struct sockaddr_in *dest_addr_ip4 = (struct sockaddr_in *)&dest_addr;
 801a264:	f107 0320 	add.w	r3, r7, #32
 801a268:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        dest_addr_ip4->sin_addr.s_addr = htonl(INADDR_ANY);
 801a26c:	2000      	movs	r0, #0
 801a26e:	f7f3 ffbc 	bl	800e1ea <lwip_htonl>
 801a272:	4602      	mov	r2, r0
 801a274:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801a278:	605a      	str	r2, [r3, #4]
        dest_addr_ip4->sin_family = AF_INET;
 801a27a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801a27e:	2202      	movs	r2, #2
 801a280:	705a      	strb	r2, [r3, #1]
        dest_addr_ip4->sin_port = htons(PORT_SETTING);
 801a282:	f240 40d2 	movw	r0, #1234	; 0x4d2
 801a286:	f7f3 ff9b 	bl	800e1c0 <lwip_htons>
 801a28a:	4603      	mov	r3, r0
 801a28c:	461a      	mov	r2, r3
 801a28e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801a292:	805a      	strh	r2, [r3, #2]
        ip_protocol = IPPROTO_IP;
 801a294:	2300      	movs	r3, #0
 801a296:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }

    int listen_sock = socket(addr_family, SOCK_STREAM, ip_protocol);
 801a29a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 801a29e:	2101      	movs	r1, #1
 801a2a0:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 801a2a4:	f7f3 f9da 	bl	800d65c <lwip_socket>
 801a2a8:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if (listen_sock < 0) {
 801a2ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801a2b0:	2b00      	cmp	r3, #0
 801a2b2:	da03      	bge.n	801a2bc <ev_tcp_server_config_task+0x88>
        //printf( "Unable to create socket: errno %d", errno);
        vTaskDelete(NULL);
 801a2b4:	2000      	movs	r0, #0
 801a2b6:	f7ee f8e7 	bl	8008488 <vTaskDelete>
 801a2ba:	e083      	b.n	801a3c4 <ev_tcp_server_config_task+0x190>
        return;
    }

    int opt = 1;
 801a2bc:	2301      	movs	r3, #1
 801a2be:	61fb      	str	r3, [r7, #28]
    setsockopt(listen_sock, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt));
 801a2c0:	f107 031c 	add.w	r3, r7, #28
 801a2c4:	2204      	movs	r2, #4
 801a2c6:	9200      	str	r2, [sp, #0]
 801a2c8:	2204      	movs	r2, #4
 801a2ca:	f640 71ff 	movw	r1, #4095	; 0xfff
 801a2ce:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 801a2d2:	f7f3 fbd1 	bl	800da78 <lwip_setsockopt>

    int err = bind(listen_sock, (struct sockaddr *)&dest_addr, sizeof(dest_addr));
 801a2d6:	f107 0320 	add.w	r3, r7, #32
 801a2da:	2210      	movs	r2, #16
 801a2dc:	4619      	mov	r1, r3
 801a2de:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 801a2e2:	f7f2 fc67 	bl	800cbb4 <lwip_bind>
 801a2e6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
    if (err != 0) {
 801a2ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801a2ee:	2b00      	cmp	r3, #0
 801a2f0:	d15c      	bne.n	801a3ac <ev_tcp_server_config_task+0x178>
        //printf( "IPPROTO: %d", addr_family);
        goto CLEAN_UP;
    }
    //printf( "Socket bound, port %d", PORT_SETTING);

    err = listen(listen_sock, 1);
 801a2f2:	2101      	movs	r1, #1
 801a2f4:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 801a2f8:	f7f2 fd20 	bl	800cd3c <lwip_listen>
 801a2fc:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
    if (err != 0) {
 801a300:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801a304:	2b00      	cmp	r3, #0
 801a306:	d153      	bne.n	801a3b0 <ev_tcp_server_config_task+0x17c>
        goto CLEAN_UP;
    }
	for (;;) {
        //printf( "Socket listening");
        struct sockaddr_storage source_addr; // Large enough for both IPv4 or IPv6
        socklen_t addr_len = sizeof(source_addr);
 801a308:	2310      	movs	r3, #16
 801a30a:	60bb      	str	r3, [r7, #8]
        int sock = accept(listen_sock, (struct sockaddr *)&source_addr, &addr_len);
 801a30c:	f107 0208 	add.w	r2, r7, #8
 801a310:	f107 030c 	add.w	r3, r7, #12
 801a314:	4619      	mov	r1, r3
 801a316:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 801a31a:	f7f2 fb2d 	bl	800c978 <lwip_accept>
 801a31e:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
        if (sock < 0) {
 801a322:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801a326:	2b00      	cmp	r3, #0
 801a328:	db44      	blt.n	801a3b4 <ev_tcp_server_config_task+0x180>
            //printf( "Unable to accept connection: errno %d", errno);
            break;
        }
        // Set tcp keepalive option
        setsockopt(sock, SOL_SOCKET, SO_KEEPALIVE, &keepAlive, sizeof(int));
 801a32a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801a32e:	2204      	movs	r2, #4
 801a330:	9200      	str	r2, [sp, #0]
 801a332:	2208      	movs	r2, #8
 801a334:	f640 71ff 	movw	r1, #4095	; 0xfff
 801a338:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 801a33c:	f7f3 fb9c 	bl	800da78 <lwip_setsockopt>
        setsockopt(sock, IPPROTO_TCP, TCP_KEEPIDLE, &keepIdle, sizeof(int));
 801a340:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801a344:	2204      	movs	r2, #4
 801a346:	9200      	str	r2, [sp, #0]
 801a348:	2203      	movs	r2, #3
 801a34a:	2106      	movs	r1, #6
 801a34c:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 801a350:	f7f3 fb92 	bl	800da78 <lwip_setsockopt>
        setsockopt(sock, IPPROTO_TCP, TCP_KEEPINTVL, &keepInterval, sizeof(int));
 801a354:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801a358:	2204      	movs	r2, #4
 801a35a:	9200      	str	r2, [sp, #0]
 801a35c:	2204      	movs	r2, #4
 801a35e:	2106      	movs	r1, #6
 801a360:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 801a364:	f7f3 fb88 	bl	800da78 <lwip_setsockopt>
        setsockopt(sock, IPPROTO_TCP, TCP_KEEPCNT, &keepCount, sizeof(int));
 801a368:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a36c:	2204      	movs	r2, #4
 801a36e:	9200      	str	r2, [sp, #0]
 801a370:	2205      	movs	r2, #5
 801a372:	2106      	movs	r1, #6
 801a374:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 801a378:	f7f3 fb7e 	bl	800da78 <lwip_setsockopt>
        // Convert ip address to string
        if (source_addr.ss_family == PF_INET) {
 801a37c:	7b7b      	ldrb	r3, [r7, #13]
 801a37e:	2b02      	cmp	r3, #2
 801a380:	d108      	bne.n	801a394 <ev_tcp_server_config_task+0x160>
            inet_ntoa_r(((struct sockaddr_in *)&source_addr)->sin_addr, addr_str, sizeof(addr_str) - 1);
 801a382:	f107 030c 	add.w	r3, r7, #12
 801a386:	3304      	adds	r3, #4
 801a388:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801a38c:	227f      	movs	r2, #127	; 0x7f
 801a38e:	4618      	mov	r0, r3
 801a390:	f7fe f8a2 	bl	80184d8 <ip4addr_ntoa_r>
        }
        //printf( "Socket accepted ip address: %s", addr_str);
        do_retransmit(sock);
 801a394:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 801a398:	f7ff fed0 	bl	801a13c <do_retransmit>
        close(sock);
 801a39c:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 801a3a0:	f7f2 fc76 	bl	800cc90 <lwip_close>
		vTaskDelay(1);
 801a3a4:	2001      	movs	r0, #1
 801a3a6:	f7ee f8e1 	bl	800856c <vTaskDelay>
	for (;;) {
 801a3aa:	e7ad      	b.n	801a308 <ev_tcp_server_config_task+0xd4>
        goto CLEAN_UP;
 801a3ac:	bf00      	nop
 801a3ae:	e002      	b.n	801a3b6 <ev_tcp_server_config_task+0x182>
        goto CLEAN_UP;
 801a3b0:	bf00      	nop
 801a3b2:	e000      	b.n	801a3b6 <ev_tcp_server_config_task+0x182>
            break;
 801a3b4:	bf00      	nop
	}
CLEAN_UP:
    close(listen_sock);
 801a3b6:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 801a3ba:	f7f2 fc69 	bl	800cc90 <lwip_close>
    vTaskDelete(NULL);
 801a3be:	2000      	movs	r0, #0
 801a3c0:	f7ee f862 	bl	8008488 <vTaskDelete>
}
 801a3c4:	37d8      	adds	r7, #216	; 0xd8
 801a3c6:	46bd      	mov	sp, r7
 801a3c8:	bd80      	pop	{r7, pc}
	...

0801a3cc <transmit_data>:
static void transmit_data(void* arg){
 801a3cc:	b580      	push	{r7, lr}
 801a3ce:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 801a3d2:	af00      	add	r7, sp, #0
 801a3d4:	1d3b      	adds	r3, r7, #4
 801a3d6:	6018      	str	r0, [r3, #0]

	int* sock = (int*)arg;
 801a3d8:	1d3b      	adds	r3, r7, #4
 801a3da:	681b      	ldr	r3, [r3, #0]
 801a3dc:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
	uint8_t buff[1024];
	uint16_t len = 0;
 801a3e0:	2300      	movs	r3, #0
 801a3e2:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
	for(;;){
		if(xQueueReceive(shell_queue_send,buff+len,(TickType_t)100) == pdPASS){
 801a3e6:	4b13      	ldr	r3, [pc, #76]	; (801a434 <transmit_data+0x68>)
 801a3e8:	6818      	ldr	r0, [r3, #0]
 801a3ea:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 801a3ee:	f107 0208 	add.w	r2, r7, #8
 801a3f2:	4413      	add	r3, r2
 801a3f4:	2264      	movs	r2, #100	; 0x64
 801a3f6:	4619      	mov	r1, r3
 801a3f8:	f7ed fa12 	bl	8007820 <xQueueReceive>
 801a3fc:	4603      	mov	r3, r0
 801a3fe:	2b01      	cmp	r3, #1
 801a400:	d105      	bne.n	801a40e <transmit_data+0x42>
			len++;
 801a402:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 801a406:	3301      	adds	r3, #1
 801a408:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
 801a40c:	e7eb      	b.n	801a3e6 <transmit_data+0x1a>
		}
		else{
			if(len>0){
 801a40e:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 801a412:	2b00      	cmp	r3, #0
 801a414:	d0e7      	beq.n	801a3e6 <transmit_data+0x1a>
				send_tcp(*sock,(char*)buff,len);
 801a416:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 801a41a:	681b      	ldr	r3, [r3, #0]
 801a41c:	f8b7 240e 	ldrh.w	r2, [r7, #1038]	; 0x40e
 801a420:	f107 0108 	add.w	r1, r7, #8
 801a424:	4618      	mov	r0, r3
 801a426:	f000 f807 	bl	801a438 <send_tcp>
				len = 0;
 801a42a:	2300      	movs	r3, #0
 801a42c:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
		if(xQueueReceive(shell_queue_send,buff+len,(TickType_t)100) == pdPASS){
 801a430:	e7d9      	b.n	801a3e6 <transmit_data+0x1a>
 801a432:	bf00      	nop
 801a434:	2000d46c 	.word	0x2000d46c

0801a438 <send_tcp>:
			}
		}
	}
}
static void send_tcp(const int sock,char* buff,uint16_t len){
 801a438:	b580      	push	{r7, lr}
 801a43a:	b084      	sub	sp, #16
 801a43c:	af00      	add	r7, sp, #0
 801a43e:	60f8      	str	r0, [r7, #12]
 801a440:	60b9      	str	r1, [r7, #8]
 801a442:	4613      	mov	r3, r2
 801a444:	80fb      	strh	r3, [r7, #6]
    xSemaphoreTake(tranmiter_semphr,portMAX_DELAY);
 801a446:	4b0c      	ldr	r3, [pc, #48]	; (801a478 <send_tcp+0x40>)
 801a448:	681b      	ldr	r3, [r3, #0]
 801a44a:	f04f 31ff 	mov.w	r1, #4294967295
 801a44e:	4618      	mov	r0, r3
 801a450:	f7ed fac6 	bl	80079e0 <xQueueSemaphoreTake>
    send(sock, buff,len, 0);
 801a454:	88fa      	ldrh	r2, [r7, #6]
 801a456:	2300      	movs	r3, #0
 801a458:	68b9      	ldr	r1, [r7, #8]
 801a45a:	68f8      	ldr	r0, [r7, #12]
 801a45c:	f7f2 ffee 	bl	800d43c <lwip_send>
    xSemaphoreGive(tranmiter_semphr);
 801a460:	4b05      	ldr	r3, [pc, #20]	; (801a478 <send_tcp+0x40>)
 801a462:	6818      	ldr	r0, [r3, #0]
 801a464:	2300      	movs	r3, #0
 801a466:	2200      	movs	r2, #0
 801a468:	2100      	movs	r1, #0
 801a46a:	f7ec ffb3 	bl	80073d4 <xQueueGenericSend>
}
 801a46e:	bf00      	nop
 801a470:	3710      	adds	r7, #16
 801a472:	46bd      	mov	sp, r7
 801a474:	bd80      	pop	{r7, pc}
 801a476:	bf00      	nop
 801a478:	2000d470 	.word	0x2000d470

0801a47c <board_init>:
BSP_GPIO mux_a[4];
BSP_GPIO mux_b[4];

extern SPI_HandleTypeDef hspi1;

void board_init(){
 801a47c:	b580      	push	{r7, lr}
 801a47e:	b082      	sub	sp, #8
 801a480:	af00      	add	r7, sp, #0
	gpio_init(&spi1_cs);
 801a482:	4839      	ldr	r0, [pc, #228]	; (801a568 <board_init+0xec>)
 801a484:	f000 f8f3 	bl	801a66e <gpio_init>
	gpio_init(&spi2_cs);
 801a488:	4838      	ldr	r0, [pc, #224]	; (801a56c <board_init+0xf0>)
 801a48a:	f000 f8f0 	bl	801a66e <gpio_init>
	gpio_init(&adc_rs1);
 801a48e:	4838      	ldr	r0, [pc, #224]	; (801a570 <board_init+0xf4>)
 801a490:	f000 f8ed 	bl	801a66e <gpio_init>
	gpio_init(&adc_busy1);
 801a494:	4837      	ldr	r0, [pc, #220]	; (801a574 <board_init+0xf8>)
 801a496:	f000 f8ea 	bl	801a66e <gpio_init>
	gpio_init(&adc_cnv1);
 801a49a:	4837      	ldr	r0, [pc, #220]	; (801a578 <board_init+0xfc>)
 801a49c:	f000 f8e7 	bl	801a66e <gpio_init>
	gpio_init(&adc_rs2);
 801a4a0:	4836      	ldr	r0, [pc, #216]	; (801a57c <board_init+0x100>)
 801a4a2:	f000 f8e4 	bl	801a66e <gpio_init>
	gpio_init(&adc_busy2);
 801a4a6:	4836      	ldr	r0, [pc, #216]	; (801a580 <board_init+0x104>)
 801a4a8:	f000 f8e1 	bl	801a66e <gpio_init>
	gpio_init(&adc_cnv2);
 801a4ac:	4835      	ldr	r0, [pc, #212]	; (801a584 <board_init+0x108>)
 801a4ae:	f000 f8de 	bl	801a66e <gpio_init>
	spi_init(&spi1, &hspi1,&spi1_cs);
 801a4b2:	4a2d      	ldr	r2, [pc, #180]	; (801a568 <board_init+0xec>)
 801a4b4:	4934      	ldr	r1, [pc, #208]	; (801a588 <board_init+0x10c>)
 801a4b6:	4835      	ldr	r0, [pc, #212]	; (801a58c <board_init+0x110>)
 801a4b8:	f000 f90a 	bl	801a6d0 <spi_init>
	spi_init(&spi2, &hspi1,&spi2_cs);
 801a4bc:	4a2b      	ldr	r2, [pc, #172]	; (801a56c <board_init+0xf0>)
 801a4be:	4932      	ldr	r1, [pc, #200]	; (801a588 <board_init+0x10c>)
 801a4c0:	4833      	ldr	r0, [pc, #204]	; (801a590 <board_init+0x114>)
 801a4c2:	f000 f905 	bl	801a6d0 <spi_init>

	mux_a[0].p_driver = MUX_A1_GPIO_Port;
 801a4c6:	4b33      	ldr	r3, [pc, #204]	; (801a594 <board_init+0x118>)
 801a4c8:	4a33      	ldr	r2, [pc, #204]	; (801a598 <board_init+0x11c>)
 801a4ca:	601a      	str	r2, [r3, #0]
	mux_a[0].pin = MUX_A1_Pin;
 801a4cc:	4b31      	ldr	r3, [pc, #196]	; (801a594 <board_init+0x118>)
 801a4ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801a4d2:	809a      	strh	r2, [r3, #4]

	mux_a[1].p_driver = MUX_A2_GPIO_Port;
 801a4d4:	4b2f      	ldr	r3, [pc, #188]	; (801a594 <board_init+0x118>)
 801a4d6:	4a30      	ldr	r2, [pc, #192]	; (801a598 <board_init+0x11c>)
 801a4d8:	609a      	str	r2, [r3, #8]
	mux_a[1].pin = MUX_A2_Pin;
 801a4da:	4b2e      	ldr	r3, [pc, #184]	; (801a594 <board_init+0x118>)
 801a4dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801a4e0:	819a      	strh	r2, [r3, #12]

	mux_a[2].p_driver = MUX_A3_GPIO_Port;
 801a4e2:	4b2c      	ldr	r3, [pc, #176]	; (801a594 <board_init+0x118>)
 801a4e4:	4a2d      	ldr	r2, [pc, #180]	; (801a59c <board_init+0x120>)
 801a4e6:	611a      	str	r2, [r3, #16]
	mux_a[2].pin = MUX_A3_Pin;
 801a4e8:	4b2a      	ldr	r3, [pc, #168]	; (801a594 <board_init+0x118>)
 801a4ea:	2202      	movs	r2, #2
 801a4ec:	829a      	strh	r2, [r3, #20]

	mux_a[3].p_driver = MUX_A4_GPIO_Port;
 801a4ee:	4b29      	ldr	r3, [pc, #164]	; (801a594 <board_init+0x118>)
 801a4f0:	4a2b      	ldr	r2, [pc, #172]	; (801a5a0 <board_init+0x124>)
 801a4f2:	619a      	str	r2, [r3, #24]
	mux_a[3].pin = MUX_A4_Pin;
 801a4f4:	4b27      	ldr	r3, [pc, #156]	; (801a594 <board_init+0x118>)
 801a4f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 801a4fa:	839a      	strh	r2, [r3, #28]

	mux_b[0].p_driver = MUX_B1_GPIO_Port;
 801a4fc:	4b29      	ldr	r3, [pc, #164]	; (801a5a4 <board_init+0x128>)
 801a4fe:	4a26      	ldr	r2, [pc, #152]	; (801a598 <board_init+0x11c>)
 801a500:	601a      	str	r2, [r3, #0]
	mux_b[0].pin = MUX_B1_Pin;
 801a502:	4b28      	ldr	r3, [pc, #160]	; (801a5a4 <board_init+0x128>)
 801a504:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 801a508:	809a      	strh	r2, [r3, #4]

	mux_b[1].p_driver = MUX_B2_GPIO_Port;
 801a50a:	4b26      	ldr	r3, [pc, #152]	; (801a5a4 <board_init+0x128>)
 801a50c:	4a23      	ldr	r2, [pc, #140]	; (801a59c <board_init+0x120>)
 801a50e:	609a      	str	r2, [r3, #8]
	mux_b[1].pin = MUX_B2_Pin;
 801a510:	4b24      	ldr	r3, [pc, #144]	; (801a5a4 <board_init+0x128>)
 801a512:	2201      	movs	r2, #1
 801a514:	819a      	strh	r2, [r3, #12]

	mux_b[2].p_driver = MUX_B3_GPIO_Port;
 801a516:	4b23      	ldr	r3, [pc, #140]	; (801a5a4 <board_init+0x128>)
 801a518:	4a21      	ldr	r2, [pc, #132]	; (801a5a0 <board_init+0x124>)
 801a51a:	611a      	str	r2, [r3, #16]
	mux_b[2].pin = MUX_B3_Pin;
 801a51c:	4b21      	ldr	r3, [pc, #132]	; (801a5a4 <board_init+0x128>)
 801a51e:	2280      	movs	r2, #128	; 0x80
 801a520:	829a      	strh	r2, [r3, #20]

	mux_b[3].p_driver = MUX_B4_GPIO_Port;
 801a522:	4b20      	ldr	r3, [pc, #128]	; (801a5a4 <board_init+0x128>)
 801a524:	4a1e      	ldr	r2, [pc, #120]	; (801a5a0 <board_init+0x124>)
 801a526:	619a      	str	r2, [r3, #24]
	mux_b[3].pin = MUX_B4_Pin;
 801a528:	4b1e      	ldr	r3, [pc, #120]	; (801a5a4 <board_init+0x128>)
 801a52a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a52e:	839a      	strh	r2, [r3, #28]

	for(uint16_t i = 0;i<4;i++){
 801a530:	2300      	movs	r3, #0
 801a532:	80fb      	strh	r3, [r7, #6]
 801a534:	e010      	b.n	801a558 <board_init+0xdc>
		gpio_init(&mux_a[i]);
 801a536:	88fb      	ldrh	r3, [r7, #6]
 801a538:	00db      	lsls	r3, r3, #3
 801a53a:	4a16      	ldr	r2, [pc, #88]	; (801a594 <board_init+0x118>)
 801a53c:	4413      	add	r3, r2
 801a53e:	4618      	mov	r0, r3
 801a540:	f000 f895 	bl	801a66e <gpio_init>
		gpio_init(&mux_b[i]);
 801a544:	88fb      	ldrh	r3, [r7, #6]
 801a546:	00db      	lsls	r3, r3, #3
 801a548:	4a16      	ldr	r2, [pc, #88]	; (801a5a4 <board_init+0x128>)
 801a54a:	4413      	add	r3, r2
 801a54c:	4618      	mov	r0, r3
 801a54e:	f000 f88e 	bl	801a66e <gpio_init>
	for(uint16_t i = 0;i<4;i++){
 801a552:	88fb      	ldrh	r3, [r7, #6]
 801a554:	3301      	adds	r3, #1
 801a556:	80fb      	strh	r3, [r7, #6]
 801a558:	88fb      	ldrh	r3, [r7, #6]
 801a55a:	2b03      	cmp	r3, #3
 801a55c:	d9eb      	bls.n	801a536 <board_init+0xba>
	}
}
 801a55e:	bf00      	nop
 801a560:	bf00      	nop
 801a562:	3708      	adds	r7, #8
 801a564:	46bd      	mov	sp, r7
 801a566:	bd80      	pop	{r7, pc}
 801a568:	100000e4 	.word	0x100000e4
 801a56c:	100000ec 	.word	0x100000ec
 801a570:	100000f4 	.word	0x100000f4
 801a574:	100000fc 	.word	0x100000fc
 801a578:	10000104 	.word	0x10000104
 801a57c:	1000010c 	.word	0x1000010c
 801a580:	10000114 	.word	0x10000114
 801a584:	1000011c 	.word	0x1000011c
 801a588:	20001894 	.word	0x20001894
 801a58c:	2000d4c4 	.word	0x2000d4c4
 801a590:	2000d49c 	.word	0x2000d49c
 801a594:	2000d47c 	.word	0x2000d47c
 801a598:	40021400 	.word	0x40021400
 801a59c:	40021800 	.word	0x40021800
 801a5a0:	40021000 	.word	0x40021000
 801a5a4:	2000d4a4 	.word	0x2000d4a4

0801a5a8 <bsp_delay_ms>:
void board_deinit(){

}
void bsp_delay_ms(unsigned long ms){
 801a5a8:	b580      	push	{r7, lr}
 801a5aa:	b082      	sub	sp, #8
 801a5ac:	af00      	add	r7, sp, #0
 801a5ae:	6078      	str	r0, [r7, #4]
#if RTOS
	vTaskDelay(pdMS_TO_TICKS(ms));
 801a5b0:	687b      	ldr	r3, [r7, #4]
 801a5b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801a5b6:	fb02 f303 	mul.w	r3, r2, r3
 801a5ba:	4a05      	ldr	r2, [pc, #20]	; (801a5d0 <bsp_delay_ms+0x28>)
 801a5bc:	fba2 2303 	umull	r2, r3, r2, r3
 801a5c0:	099b      	lsrs	r3, r3, #6
 801a5c2:	4618      	mov	r0, r3
 801a5c4:	f7ed ffd2 	bl	800856c <vTaskDelay>
#else
	__HAL_TIM_SET_COUNTER(&htim1,0);
	while(__HAL_TIM_GET_COUNTER(&htim1) < ms*1000);
#endif
}
 801a5c8:	bf00      	nop
 801a5ca:	3708      	adds	r7, #8
 801a5cc:	46bd      	mov	sp, r7
 801a5ce:	bd80      	pop	{r7, pc}
 801a5d0:	10624dd3 	.word	0x10624dd3

0801a5d4 <flash_open>:
 */

#include "flash.h"
#include <string.h>

void flash_open() {
 801a5d4:	b580      	push	{r7, lr}
 801a5d6:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 801a5d8:	f7e9 f86c 	bl	80036b4 <HAL_FLASH_Unlock>
}
 801a5dc:	bf00      	nop
 801a5de:	bd80      	pop	{r7, pc}

0801a5e0 <flash_close>:
void flash_close() {
 801a5e0:	b580      	push	{r7, lr}
 801a5e2:	af00      	add	r7, sp, #0
	HAL_FLASH_Lock();
 801a5e4:	f7e9 f888 	bl	80036f8 <HAL_FLASH_Lock>
}
 801a5e8:	bf00      	nop
 801a5ea:	bd80      	pop	{r7, pc}

0801a5ec <flash_erase>:
int flash_erase(uint32_t sector_addr, uint32_t num_sector) {
 801a5ec:	b580      	push	{r7, lr}
 801a5ee:	b088      	sub	sp, #32
 801a5f0:	af00      	add	r7, sp, #0
 801a5f2:	6078      	str	r0, [r7, #4]
 801a5f4:	6039      	str	r1, [r7, #0]
	FLASH_EraseInitTypeDef erase_typedef;
	uint32_t erase_error;
	erase_typedef.TypeErase = FLASH_TYPEERASE_SECTORS;
 801a5f6:	2300      	movs	r3, #0
 801a5f8:	60fb      	str	r3, [r7, #12]
	erase_typedef.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 801a5fa:	2302      	movs	r3, #2
 801a5fc:	61fb      	str	r3, [r7, #28]
	erase_typedef.Sector = sector_addr;
 801a5fe:	687b      	ldr	r3, [r7, #4]
 801a600:	617b      	str	r3, [r7, #20]
	erase_typedef.NbSectors = num_sector;
 801a602:	683b      	ldr	r3, [r7, #0]
 801a604:	61bb      	str	r3, [r7, #24]
	if (HAL_FLASHEx_Erase(&erase_typedef, &erase_error) != HAL_OK) {
 801a606:	f107 0208 	add.w	r2, r7, #8
 801a60a:	f107 030c 	add.w	r3, r7, #12
 801a60e:	4611      	mov	r1, r2
 801a610:	4618      	mov	r0, r3
 801a612:	f7e9 f9b1 	bl	8003978 <HAL_FLASHEx_Erase>
 801a616:	4603      	mov	r3, r0
 801a618:	2b00      	cmp	r3, #0
 801a61a:	d001      	beq.n	801a620 <flash_erase+0x34>
		return (int) erase_error;
 801a61c:	68bb      	ldr	r3, [r7, #8]
 801a61e:	e000      	b.n	801a622 <flash_erase+0x36>
	}
	return 0;
 801a620:	2300      	movs	r3, #0
}
 801a622:	4618      	mov	r0, r3
 801a624:	3720      	adds	r7, #32
 801a626:	46bd      	mov	sp, r7
 801a628:	bd80      	pop	{r7, pc}

0801a62a <flash_write>:
int flash_write(uint32_t addr, uint8_t *data, uint32_t len) {
 801a62a:	b580      	push	{r7, lr}
 801a62c:	b086      	sub	sp, #24
 801a62e:	af00      	add	r7, sp, #0
 801a630:	60f8      	str	r0, [r7, #12]
 801a632:	60b9      	str	r1, [r7, #8]
 801a634:	607a      	str	r2, [r7, #4]
	for (uint32_t i = 0; i < len; i++) {
 801a636:	2300      	movs	r3, #0
 801a638:	617b      	str	r3, [r7, #20]
 801a63a:	e00f      	b.n	801a65c <flash_write+0x32>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, addr + i, data[i]);
 801a63c:	68fa      	ldr	r2, [r7, #12]
 801a63e:	697b      	ldr	r3, [r7, #20]
 801a640:	18d1      	adds	r1, r2, r3
 801a642:	68ba      	ldr	r2, [r7, #8]
 801a644:	697b      	ldr	r3, [r7, #20]
 801a646:	4413      	add	r3, r2
 801a648:	781b      	ldrb	r3, [r3, #0]
 801a64a:	b2da      	uxtb	r2, r3
 801a64c:	f04f 0300 	mov.w	r3, #0
 801a650:	2000      	movs	r0, #0
 801a652:	f7e8 ffdb 	bl	800360c <HAL_FLASH_Program>
	for (uint32_t i = 0; i < len; i++) {
 801a656:	697b      	ldr	r3, [r7, #20]
 801a658:	3301      	adds	r3, #1
 801a65a:	617b      	str	r3, [r7, #20]
 801a65c:	697a      	ldr	r2, [r7, #20]
 801a65e:	687b      	ldr	r3, [r7, #4]
 801a660:	429a      	cmp	r2, r3
 801a662:	d3eb      	bcc.n	801a63c <flash_write+0x12>
	}
	return 0;
 801a664:	2300      	movs	r3, #0
}
 801a666:	4618      	mov	r0, r3
 801a668:	3718      	adds	r7, #24
 801a66a:	46bd      	mov	sp, r7
 801a66c:	bd80      	pop	{r7, pc}

0801a66e <gpio_init>:


#include "gpio.h"


int gpio_init(BSP_GPIO *p_gpio){
 801a66e:	b480      	push	{r7}
 801a670:	b083      	sub	sp, #12
 801a672:	af00      	add	r7, sp, #0
 801a674:	6078      	str	r0, [r7, #4]
	return 0;
 801a676:	2300      	movs	r3, #0
}
 801a678:	4618      	mov	r0, r3
 801a67a:	370c      	adds	r7, #12
 801a67c:	46bd      	mov	sp, r7
 801a67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a682:	4770      	bx	lr

0801a684 <gpio_write_pin>:
int gpio_write_pin(BSP_GPIO *p_gpio,BSP_GPIO_STATE state){
 801a684:	b580      	push	{r7, lr}
 801a686:	b082      	sub	sp, #8
 801a688:	af00      	add	r7, sp, #0
 801a68a:	6078      	str	r0, [r7, #4]
 801a68c:	460b      	mov	r3, r1
 801a68e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(p_gpio->p_driver,p_gpio->pin,(GPIO_PinState)state);
 801a690:	687b      	ldr	r3, [r7, #4]
 801a692:	6818      	ldr	r0, [r3, #0]
 801a694:	687b      	ldr	r3, [r7, #4]
 801a696:	889b      	ldrh	r3, [r3, #4]
 801a698:	78fa      	ldrb	r2, [r7, #3]
 801a69a:	4619      	mov	r1, r3
 801a69c:	f7e9 fc42 	bl	8003f24 <HAL_GPIO_WritePin>
	return 0;
 801a6a0:	2300      	movs	r3, #0
}
 801a6a2:	4618      	mov	r0, r3
 801a6a4:	3708      	adds	r7, #8
 801a6a6:	46bd      	mov	sp, r7
 801a6a8:	bd80      	pop	{r7, pc}

0801a6aa <gpio_read_pin>:
BSP_GPIO_STATE gpio_read_pin(BSP_GPIO *p_gpio){
 801a6aa:	b580      	push	{r7, lr}
 801a6ac:	b084      	sub	sp, #16
 801a6ae:	af00      	add	r7, sp, #0
 801a6b0:	6078      	str	r0, [r7, #4]
	BSP_GPIO_STATE state = (BSP_GPIO_STATE)HAL_GPIO_ReadPin(p_gpio->p_driver,p_gpio->pin);
 801a6b2:	687b      	ldr	r3, [r7, #4]
 801a6b4:	681a      	ldr	r2, [r3, #0]
 801a6b6:	687b      	ldr	r3, [r7, #4]
 801a6b8:	889b      	ldrh	r3, [r3, #4]
 801a6ba:	4619      	mov	r1, r3
 801a6bc:	4610      	mov	r0, r2
 801a6be:	f7e9 fc19 	bl	8003ef4 <HAL_GPIO_ReadPin>
 801a6c2:	4603      	mov	r3, r0
 801a6c4:	73fb      	strb	r3, [r7, #15]
	return state;
 801a6c6:	7bfb      	ldrb	r3, [r7, #15]
}
 801a6c8:	4618      	mov	r0, r3
 801a6ca:	3710      	adds	r7, #16
 801a6cc:	46bd      	mov	sp, r7
 801a6ce:	bd80      	pop	{r7, pc}

0801a6d0 <spi_init>:
 */
#include "spi.h"



void spi_init(BSP_SPI *spi, SPI_HandleTypeDef *driver,BSP_GPIO *cs_pin){
 801a6d0:	b480      	push	{r7}
 801a6d2:	b085      	sub	sp, #20
 801a6d4:	af00      	add	r7, sp, #0
 801a6d6:	60f8      	str	r0, [r7, #12]
 801a6d8:	60b9      	str	r1, [r7, #8]
 801a6da:	607a      	str	r2, [r7, #4]
	spi->p_driver = driver;
 801a6dc:	68fb      	ldr	r3, [r7, #12]
 801a6de:	68ba      	ldr	r2, [r7, #8]
 801a6e0:	601a      	str	r2, [r3, #0]
	spi->p_cs = cs_pin;
 801a6e2:	68fb      	ldr	r3, [r7, #12]
 801a6e4:	687a      	ldr	r2, [r7, #4]
 801a6e6:	605a      	str	r2, [r3, #4]
}
 801a6e8:	bf00      	nop
 801a6ea:	3714      	adds	r7, #20
 801a6ec:	46bd      	mov	sp, r7
 801a6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6f2:	4770      	bx	lr

0801a6f4 <spi_write_read>:
void spi_write(BSP_SPI *spi,uint8_t *data,uint16_t len){
	spi_cs_select(spi);
	HAL_SPI_Transmit(spi->p_driver,data, len,1000);
	spi_cs_deselect(spi);
}
uint16_t spi_write_read(BSP_SPI *spi,uint8_t *source,uint8_t *dest,uint16_t len){
 801a6f4:	b580      	push	{r7, lr}
 801a6f6:	b088      	sub	sp, #32
 801a6f8:	af02      	add	r7, sp, #8
 801a6fa:	60f8      	str	r0, [r7, #12]
 801a6fc:	60b9      	str	r1, [r7, #8]
 801a6fe:	607a      	str	r2, [r7, #4]
 801a700:	807b      	strh	r3, [r7, #2]
	spi_cs_select(spi);
 801a702:	68f8      	ldr	r0, [r7, #12]
 801a704:	f000 f814 	bl	801a730 <spi_cs_select>
	uint16_t status = HAL_SPI_TransmitReceive(spi->p_driver,source,dest,len,1000);
 801a708:	68fb      	ldr	r3, [r7, #12]
 801a70a:	6818      	ldr	r0, [r3, #0]
 801a70c:	887b      	ldrh	r3, [r7, #2]
 801a70e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801a712:	9200      	str	r2, [sp, #0]
 801a714:	687a      	ldr	r2, [r7, #4]
 801a716:	68b9      	ldr	r1, [r7, #8]
 801a718:	f7ea f939 	bl	800498e <HAL_SPI_TransmitReceive>
 801a71c:	4603      	mov	r3, r0
 801a71e:	82fb      	strh	r3, [r7, #22]
	spi_cs_deselect(spi);
 801a720:	68f8      	ldr	r0, [r7, #12]
 801a722:	f000 f813 	bl	801a74c <spi_cs_deselect>
	return status;
 801a726:	8afb      	ldrh	r3, [r7, #22]
}
 801a728:	4618      	mov	r0, r3
 801a72a:	3718      	adds	r7, #24
 801a72c:	46bd      	mov	sp, r7
 801a72e:	bd80      	pop	{r7, pc}

0801a730 <spi_cs_select>:

void spi_cs_select(BSP_SPI *spi){
 801a730:	b580      	push	{r7, lr}
 801a732:	b082      	sub	sp, #8
 801a734:	af00      	add	r7, sp, #0
 801a736:	6078      	str	r0, [r7, #4]
	gpio_write_pin(spi->p_cs,BSP_GPIO_LOW);
 801a738:	687b      	ldr	r3, [r7, #4]
 801a73a:	685b      	ldr	r3, [r3, #4]
 801a73c:	2100      	movs	r1, #0
 801a73e:	4618      	mov	r0, r3
 801a740:	f7ff ffa0 	bl	801a684 <gpio_write_pin>
}
 801a744:	bf00      	nop
 801a746:	3708      	adds	r7, #8
 801a748:	46bd      	mov	sp, r7
 801a74a:	bd80      	pop	{r7, pc}

0801a74c <spi_cs_deselect>:
void spi_cs_deselect(BSP_SPI *spi){
 801a74c:	b580      	push	{r7, lr}
 801a74e:	b082      	sub	sp, #8
 801a750:	af00      	add	r7, sp, #0
 801a752:	6078      	str	r0, [r7, #4]
	gpio_write_pin(spi->p_cs,BSP_GPIO_HIGH);
 801a754:	687b      	ldr	r3, [r7, #4]
 801a756:	685b      	ldr	r3, [r3, #4]
 801a758:	2101      	movs	r1, #1
 801a75a:	4618      	mov	r0, r3
 801a75c:	f7ff ff92 	bl	801a684 <gpio_write_pin>
}
 801a760:	bf00      	nop
 801a762:	3708      	adds	r7, #8
 801a764:	46bd      	mov	sp, r7
 801a766:	bd80      	pop	{r7, pc}

0801a768 <afe_sign_extend_17>:

#define SOFTSPAN_MASK 0b111 // 0x07
#define CHANNEL_MASK 0b111000 // 0x38
#define DATA_MASK 0b111111111111111111000000 // 0xFFFF00

static int afe_sign_extend_17(uint32_t data){
 801a768:	b480      	push	{r7}
 801a76a:	b087      	sub	sp, #28
 801a76c:	af00      	add	r7, sp, #0
 801a76e:	6078      	str	r0, [r7, #4]
	  uint8_t sign;
	  uint32_t mask = 0x20000;
 801a770:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801a774:	613b      	str	r3, [r7, #16]
	  int32_t data_signed = data;
 801a776:	687b      	ldr	r3, [r7, #4]
 801a778:	617b      	str	r3, [r7, #20]
	  sign = (data & mask) >> 17;
 801a77a:	687a      	ldr	r2, [r7, #4]
 801a77c:	693b      	ldr	r3, [r7, #16]
 801a77e:	4013      	ands	r3, r2
 801a780:	0c5b      	lsrs	r3, r3, #17
 801a782:	73fb      	strb	r3, [r7, #15]
	  if (sign)
 801a784:	7bfb      	ldrb	r3, [r7, #15]
 801a786:	2b00      	cmp	r3, #0
 801a788:	d005      	beq.n	801a796 <afe_sign_extend_17+0x2e>
	    data_signed = data_signed | 0xFFFC0000;
 801a78a:	697b      	ldr	r3, [r7, #20]
 801a78c:	ea6f 3383 	mvn.w	r3, r3, lsl #14
 801a790:	ea6f 3393 	mvn.w	r3, r3, lsr #14
 801a794:	617b      	str	r3, [r7, #20]
	  return data_signed;
 801a796:	697b      	ldr	r3, [r7, #20]
}
 801a798:	4618      	mov	r0, r3
 801a79a:	371c      	adds	r7, #28
 801a79c:	46bd      	mov	sp, r7
 801a79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7a2:	4770      	bx	lr
 801a7a4:	0000      	movs	r0, r0
	...

0801a7a8 <afe_caculator_vol>:
float afe_caculator_vol(uint32_t data,AFE_SoftSpan_Code_t softspan){
 801a7a8:	b580      	push	{r7, lr}
 801a7aa:	b084      	sub	sp, #16
 801a7ac:	af00      	add	r7, sp, #0
 801a7ae:	6078      	str	r0, [r7, #4]
 801a7b0:	460b      	mov	r3, r1
 801a7b2:	70fb      	strb	r3, [r7, #3]
	  float voltage;
	  int32_t data_signed;
	  switch (softspan)
 801a7b4:	78fb      	ldrb	r3, [r7, #3]
 801a7b6:	2b07      	cmp	r3, #7
 801a7b8:	f200 810c 	bhi.w	801a9d4 <afe_caculator_vol+0x22c>
 801a7bc:	a201      	add	r2, pc, #4	; (adr r2, 801a7c4 <afe_caculator_vol+0x1c>)
 801a7be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a7c2:	bf00      	nop
 801a7c4:	0801a7e5 	.word	0x0801a7e5
 801a7c8:	0801a7ed 	.word	0x0801a7ed
 801a7cc:	0801a82d 	.word	0x0801a82d
 801a7d0:	0801a877 	.word	0x0801a877
 801a7d4:	0801a8c1 	.word	0x0801a8c1
 801a7d8:	0801a901 	.word	0x0801a901
 801a7dc:	0801a941 	.word	0x0801a941
 801a7e0:	0801a98b 	.word	0x0801a98b
	  {
	    case 0:
	      voltage = 0;
 801a7e4:	f04f 0300 	mov.w	r3, #0
 801a7e8:	60fb      	str	r3, [r7, #12]
	      break;   // Disable Channel
 801a7ea:	e0f3      	b.n	801a9d4 <afe_caculator_vol+0x22c>
	    case 1:
	      voltage = (float)data * (1.25 * VREF / 1.000) / POW2_18;
 801a7ec:	687b      	ldr	r3, [r7, #4]
 801a7ee:	ee07 3a90 	vmov	s15, r3
 801a7f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801a7f6:	ee17 0a90 	vmov	r0, s15
 801a7fa:	f7e5 fea5 	bl	8000548 <__aeabi_f2d>
 801a7fe:	a37a      	add	r3, pc, #488	; (adr r3, 801a9e8 <afe_caculator_vol+0x240>)
 801a800:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a804:	f7e5 fef8 	bl	80005f8 <__aeabi_dmul>
 801a808:	4602      	mov	r2, r0
 801a80a:	460b      	mov	r3, r1
 801a80c:	4610      	mov	r0, r2
 801a80e:	4619      	mov	r1, r3
 801a810:	f04f 0200 	mov.w	r2, #0
 801a814:	4b78      	ldr	r3, [pc, #480]	; (801a9f8 <afe_caculator_vol+0x250>)
 801a816:	f7e6 f819 	bl	800084c <__aeabi_ddiv>
 801a81a:	4602      	mov	r2, r0
 801a81c:	460b      	mov	r3, r1
 801a81e:	4610      	mov	r0, r2
 801a820:	4619      	mov	r1, r3
 801a822:	f7e6 f9c1 	bl	8000ba8 <__aeabi_d2f>
 801a826:	4603      	mov	r3, r0
 801a828:	60fb      	str	r3, [r7, #12]
	      break;
 801a82a:	e0d3      	b.n	801a9d4 <afe_caculator_vol+0x22c>
	    case 2:
	      data_signed = afe_sign_extend_17(data);
 801a82c:	6878      	ldr	r0, [r7, #4]
 801a82e:	f7ff ff9b 	bl	801a768 <afe_sign_extend_17>
 801a832:	60b8      	str	r0, [r7, #8]
	      voltage = (float)data_signed * (1.25 * VREF / 1.024) / POW2_17;
 801a834:	68bb      	ldr	r3, [r7, #8]
 801a836:	ee07 3a90 	vmov	s15, r3
 801a83a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a83e:	ee17 0a90 	vmov	r0, s15
 801a842:	f7e5 fe81 	bl	8000548 <__aeabi_f2d>
 801a846:	f04f 0200 	mov.w	r2, #0
 801a84a:	4b6c      	ldr	r3, [pc, #432]	; (801a9fc <afe_caculator_vol+0x254>)
 801a84c:	f7e5 fed4 	bl	80005f8 <__aeabi_dmul>
 801a850:	4602      	mov	r2, r0
 801a852:	460b      	mov	r3, r1
 801a854:	4610      	mov	r0, r2
 801a856:	4619      	mov	r1, r3
 801a858:	f04f 0200 	mov.w	r2, #0
 801a85c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 801a860:	f7e5 fff4 	bl	800084c <__aeabi_ddiv>
 801a864:	4602      	mov	r2, r0
 801a866:	460b      	mov	r3, r1
 801a868:	4610      	mov	r0, r2
 801a86a:	4619      	mov	r1, r3
 801a86c:	f7e6 f99c 	bl	8000ba8 <__aeabi_d2f>
 801a870:	4603      	mov	r3, r0
 801a872:	60fb      	str	r3, [r7, #12]
	      break;
 801a874:	e0ae      	b.n	801a9d4 <afe_caculator_vol+0x22c>
	    case 3:
	      data_signed = afe_sign_extend_17(data);
 801a876:	6878      	ldr	r0, [r7, #4]
 801a878:	f7ff ff76 	bl	801a768 <afe_sign_extend_17>
 801a87c:	60b8      	str	r0, [r7, #8]
	      voltage = (float)data_signed * (1.25 * VREF / 1.000) / POW2_17;
 801a87e:	68bb      	ldr	r3, [r7, #8]
 801a880:	ee07 3a90 	vmov	s15, r3
 801a884:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a888:	ee17 0a90 	vmov	r0, s15
 801a88c:	f7e5 fe5c 	bl	8000548 <__aeabi_f2d>
 801a890:	a355      	add	r3, pc, #340	; (adr r3, 801a9e8 <afe_caculator_vol+0x240>)
 801a892:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a896:	f7e5 feaf 	bl	80005f8 <__aeabi_dmul>
 801a89a:	4602      	mov	r2, r0
 801a89c:	460b      	mov	r3, r1
 801a89e:	4610      	mov	r0, r2
 801a8a0:	4619      	mov	r1, r3
 801a8a2:	f04f 0200 	mov.w	r2, #0
 801a8a6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 801a8aa:	f7e5 ffcf 	bl	800084c <__aeabi_ddiv>
 801a8ae:	4602      	mov	r2, r0
 801a8b0:	460b      	mov	r3, r1
 801a8b2:	4610      	mov	r0, r2
 801a8b4:	4619      	mov	r1, r3
 801a8b6:	f7e6 f977 	bl	8000ba8 <__aeabi_d2f>
 801a8ba:	4603      	mov	r3, r0
 801a8bc:	60fb      	str	r3, [r7, #12]
	      break;
 801a8be:	e089      	b.n	801a9d4 <afe_caculator_vol+0x22c>
	    case 4:
	      voltage = (float)data * (2.50 * VREF / 1.024) / POW2_18;
 801a8c0:	687b      	ldr	r3, [r7, #4]
 801a8c2:	ee07 3a90 	vmov	s15, r3
 801a8c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801a8ca:	ee17 0a90 	vmov	r0, s15
 801a8ce:	f7e5 fe3b 	bl	8000548 <__aeabi_f2d>
 801a8d2:	f04f 0200 	mov.w	r2, #0
 801a8d6:	4b4a      	ldr	r3, [pc, #296]	; (801aa00 <afe_caculator_vol+0x258>)
 801a8d8:	f7e5 fe8e 	bl	80005f8 <__aeabi_dmul>
 801a8dc:	4602      	mov	r2, r0
 801a8de:	460b      	mov	r3, r1
 801a8e0:	4610      	mov	r0, r2
 801a8e2:	4619      	mov	r1, r3
 801a8e4:	f04f 0200 	mov.w	r2, #0
 801a8e8:	4b43      	ldr	r3, [pc, #268]	; (801a9f8 <afe_caculator_vol+0x250>)
 801a8ea:	f7e5 ffaf 	bl	800084c <__aeabi_ddiv>
 801a8ee:	4602      	mov	r2, r0
 801a8f0:	460b      	mov	r3, r1
 801a8f2:	4610      	mov	r0, r2
 801a8f4:	4619      	mov	r1, r3
 801a8f6:	f7e6 f957 	bl	8000ba8 <__aeabi_d2f>
 801a8fa:	4603      	mov	r3, r0
 801a8fc:	60fb      	str	r3, [r7, #12]
	      break;
 801a8fe:	e069      	b.n	801a9d4 <afe_caculator_vol+0x22c>
	    case 5:
	      voltage = (float)data * (2.50 * VREF / 1.000) / POW2_18;
 801a900:	687b      	ldr	r3, [r7, #4]
 801a902:	ee07 3a90 	vmov	s15, r3
 801a906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801a90a:	ee17 0a90 	vmov	r0, s15
 801a90e:	f7e5 fe1b 	bl	8000548 <__aeabi_f2d>
 801a912:	a337      	add	r3, pc, #220	; (adr r3, 801a9f0 <afe_caculator_vol+0x248>)
 801a914:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a918:	f7e5 fe6e 	bl	80005f8 <__aeabi_dmul>
 801a91c:	4602      	mov	r2, r0
 801a91e:	460b      	mov	r3, r1
 801a920:	4610      	mov	r0, r2
 801a922:	4619      	mov	r1, r3
 801a924:	f04f 0200 	mov.w	r2, #0
 801a928:	4b33      	ldr	r3, [pc, #204]	; (801a9f8 <afe_caculator_vol+0x250>)
 801a92a:	f7e5 ff8f 	bl	800084c <__aeabi_ddiv>
 801a92e:	4602      	mov	r2, r0
 801a930:	460b      	mov	r3, r1
 801a932:	4610      	mov	r0, r2
 801a934:	4619      	mov	r1, r3
 801a936:	f7e6 f937 	bl	8000ba8 <__aeabi_d2f>
 801a93a:	4603      	mov	r3, r0
 801a93c:	60fb      	str	r3, [r7, #12]
	      break;
 801a93e:	e049      	b.n	801a9d4 <afe_caculator_vol+0x22c>
	    case 6:
	      data_signed = afe_sign_extend_17(data);
 801a940:	6878      	ldr	r0, [r7, #4]
 801a942:	f7ff ff11 	bl	801a768 <afe_sign_extend_17>
 801a946:	60b8      	str	r0, [r7, #8]
	      voltage = (float)data_signed * (2.50 * VREF / 1.024) / POW2_17;
 801a948:	68bb      	ldr	r3, [r7, #8]
 801a94a:	ee07 3a90 	vmov	s15, r3
 801a94e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a952:	ee17 0a90 	vmov	r0, s15
 801a956:	f7e5 fdf7 	bl	8000548 <__aeabi_f2d>
 801a95a:	f04f 0200 	mov.w	r2, #0
 801a95e:	4b28      	ldr	r3, [pc, #160]	; (801aa00 <afe_caculator_vol+0x258>)
 801a960:	f7e5 fe4a 	bl	80005f8 <__aeabi_dmul>
 801a964:	4602      	mov	r2, r0
 801a966:	460b      	mov	r3, r1
 801a968:	4610      	mov	r0, r2
 801a96a:	4619      	mov	r1, r3
 801a96c:	f04f 0200 	mov.w	r2, #0
 801a970:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 801a974:	f7e5 ff6a 	bl	800084c <__aeabi_ddiv>
 801a978:	4602      	mov	r2, r0
 801a97a:	460b      	mov	r3, r1
 801a97c:	4610      	mov	r0, r2
 801a97e:	4619      	mov	r1, r3
 801a980:	f7e6 f912 	bl	8000ba8 <__aeabi_d2f>
 801a984:	4603      	mov	r3, r0
 801a986:	60fb      	str	r3, [r7, #12]
	      break;
 801a988:	e024      	b.n	801a9d4 <afe_caculator_vol+0x22c>
	    case 7:
	      data_signed = afe_sign_extend_17(data);
 801a98a:	6878      	ldr	r0, [r7, #4]
 801a98c:	f7ff feec 	bl	801a768 <afe_sign_extend_17>
 801a990:	60b8      	str	r0, [r7, #8]
	      voltage = (float)data_signed * (2.50 * VREF ) / POW2_17;
 801a992:	68bb      	ldr	r3, [r7, #8]
 801a994:	ee07 3a90 	vmov	s15, r3
 801a998:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a99c:	ee17 0a90 	vmov	r0, s15
 801a9a0:	f7e5 fdd2 	bl	8000548 <__aeabi_f2d>
 801a9a4:	a312      	add	r3, pc, #72	; (adr r3, 801a9f0 <afe_caculator_vol+0x248>)
 801a9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9aa:	f7e5 fe25 	bl	80005f8 <__aeabi_dmul>
 801a9ae:	4602      	mov	r2, r0
 801a9b0:	460b      	mov	r3, r1
 801a9b2:	4610      	mov	r0, r2
 801a9b4:	4619      	mov	r1, r3
 801a9b6:	f04f 0200 	mov.w	r2, #0
 801a9ba:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 801a9be:	f7e5 ff45 	bl	800084c <__aeabi_ddiv>
 801a9c2:	4602      	mov	r2, r0
 801a9c4:	460b      	mov	r3, r1
 801a9c6:	4610      	mov	r0, r2
 801a9c8:	4619      	mov	r1, r3
 801a9ca:	f7e6 f8ed 	bl	8000ba8 <__aeabi_d2f>
 801a9ce:	4603      	mov	r3, r0
 801a9d0:	60fb      	str	r3, [r7, #12]
	      break;
 801a9d2:	bf00      	nop
	  }
	  return voltage;
 801a9d4:	68fb      	ldr	r3, [r7, #12]
 801a9d6:	ee07 3a90 	vmov	s15, r3
}
 801a9da:	eeb0 0a67 	vmov.f32	s0, s15
 801a9de:	3710      	adds	r7, #16
 801a9e0:	46bd      	mov	sp, r7
 801a9e2:	bd80      	pop	{r7, pc}
 801a9e4:	f3af 8000 	nop.w
 801a9e8:	47ae147b 	.word	0x47ae147b
 801a9ec:	40147ae1 	.word	0x40147ae1
 801a9f0:	47ae147b 	.word	0x47ae147b
 801a9f4:	40247ae1 	.word	0x40247ae1
 801a9f8:	41100000 	.word	0x41100000
 801a9fc:	40140000 	.word	0x40140000
 801aa00:	40240000 	.word	0x40240000

0801aa04 <afe_init>:
int afe_init(AFE *afe){
 801aa04:	b580      	push	{r7, lr}
 801aa06:	b084      	sub	sp, #16
 801aa08:	af00      	add	r7, sp, #0
 801aa0a:	6078      	str	r0, [r7, #4]

	for(uint16_t i = 0;i<8;i++){
 801aa0c:	2300      	movs	r3, #0
 801aa0e:	81fb      	strh	r3, [r7, #14]
 801aa10:	e00e      	b.n	801aa30 <afe_init+0x2c>
		afe_create_config_word(i, afe->softSpan, &afe->config_word[i]);
 801aa12:	89fb      	ldrh	r3, [r7, #14]
 801aa14:	b2d8      	uxtb	r0, r3
 801aa16:	687b      	ldr	r3, [r7, #4]
 801aa18:	f893 1060 	ldrb.w	r1, [r3, #96]	; 0x60
 801aa1c:	89fb      	ldrh	r3, [r7, #14]
 801aa1e:	3358      	adds	r3, #88	; 0x58
 801aa20:	687a      	ldr	r2, [r7, #4]
 801aa22:	4413      	add	r3, r2
 801aa24:	461a      	mov	r2, r3
 801aa26:	f000 f870 	bl	801ab0a <afe_create_config_word>
	for(uint16_t i = 0;i<8;i++){
 801aa2a:	89fb      	ldrh	r3, [r7, #14]
 801aa2c:	3301      	adds	r3, #1
 801aa2e:	81fb      	strh	r3, [r7, #14]
 801aa30:	89fb      	ldrh	r3, [r7, #14]
 801aa32:	2b07      	cmp	r3, #7
 801aa34:	d9ed      	bls.n	801aa12 <afe_init+0xe>
	}
	afe_reset(afe);
 801aa36:	6878      	ldr	r0, [r7, #4]
 801aa38:	f000 f81a 	bl	801aa70 <afe_reset>
	return 0;
 801aa3c:	2300      	movs	r3, #0
}
 801aa3e:	4618      	mov	r0, r3
 801aa40:	3710      	adds	r7, #16
 801aa42:	46bd      	mov	sp, r7
 801aa44:	bd80      	pop	{r7, pc}

0801aa46 <afe_start_convert>:
int afe_start_convert(AFE *afe){
 801aa46:	b580      	push	{r7, lr}
 801aa48:	b082      	sub	sp, #8
 801aa4a:	af00      	add	r7, sp, #0
 801aa4c:	6078      	str	r0, [r7, #4]
	gpio_write_pin(afe->cnv,BSP_GPIO_HIGH);
 801aa4e:	687b      	ldr	r3, [r7, #4]
 801aa50:	689b      	ldr	r3, [r3, #8]
 801aa52:	2101      	movs	r1, #1
 801aa54:	4618      	mov	r0, r3
 801aa56:	f7ff fe15 	bl	801a684 <gpio_write_pin>
//	bsp_delay_us(1);
	gpio_write_pin(afe->cnv,BSP_GPIO_LOW);
 801aa5a:	687b      	ldr	r3, [r7, #4]
 801aa5c:	689b      	ldr	r3, [r3, #8]
 801aa5e:	2100      	movs	r1, #0
 801aa60:	4618      	mov	r0, r3
 801aa62:	f7ff fe0f 	bl	801a684 <gpio_write_pin>
	return 0;
 801aa66:	2300      	movs	r3, #0
}
 801aa68:	4618      	mov	r0, r3
 801aa6a:	3708      	adds	r7, #8
 801aa6c:	46bd      	mov	sp, r7
 801aa6e:	bd80      	pop	{r7, pc}

0801aa70 <afe_reset>:
int afe_reset(AFE *afe){
 801aa70:	b580      	push	{r7, lr}
 801aa72:	b082      	sub	sp, #8
 801aa74:	af00      	add	r7, sp, #0
 801aa76:	6078      	str	r0, [r7, #4]
	gpio_write_pin(afe->pd,BSP_GPIO_HIGH);
 801aa78:	687b      	ldr	r3, [r7, #4]
 801aa7a:	685b      	ldr	r3, [r3, #4]
 801aa7c:	2101      	movs	r1, #1
 801aa7e:	4618      	mov	r0, r3
 801aa80:	f7ff fe00 	bl	801a684 <gpio_write_pin>
	bsp_delay_ms(50);
 801aa84:	2032      	movs	r0, #50	; 0x32
 801aa86:	f7ff fd8f 	bl	801a5a8 <bsp_delay_ms>
	gpio_write_pin(afe->pd,BSP_GPIO_LOW);
 801aa8a:	687b      	ldr	r3, [r7, #4]
 801aa8c:	685b      	ldr	r3, [r3, #4]
 801aa8e:	2100      	movs	r1, #0
 801aa90:	4618      	mov	r0, r3
 801aa92:	f7ff fdf7 	bl	801a684 <gpio_write_pin>
	return 0;
 801aa96:	2300      	movs	r3, #0
}
 801aa98:	4618      	mov	r0, r3
 801aa9a:	3708      	adds	r7, #8
 801aa9c:	46bd      	mov	sp, r7
 801aa9e:	bd80      	pop	{r7, pc}

0801aaa0 <afe_busy>:
int afe_power_down(AFE *afe){
	gpio_write_pin(afe->pd,BSP_GPIO_HIGH);
	return 0;
}
int afe_busy(AFE *afe){
 801aaa0:	b580      	push	{r7, lr}
 801aaa2:	b082      	sub	sp, #8
 801aaa4:	af00      	add	r7, sp, #0
 801aaa6:	6078      	str	r0, [r7, #4]
	return gpio_read_pin(afe->busy);
 801aaa8:	687b      	ldr	r3, [r7, #4]
 801aaaa:	68db      	ldr	r3, [r3, #12]
 801aaac:	4618      	mov	r0, r3
 801aaae:	f7ff fdfc 	bl	801a6aa <gpio_read_pin>
 801aab2:	4603      	mov	r3, r0
}
 801aab4:	4618      	mov	r0, r3
 801aab6:	3708      	adds	r7, #8
 801aab8:	46bd      	mov	sp, r7
 801aaba:	bd80      	pop	{r7, pc}

0801aabc <afe_read>:
int afe_read(AFE *afe,uint8_t config_word,uint8_t data_array[4]){
 801aabc:	b580      	push	{r7, lr}
 801aabe:	b086      	sub	sp, #24
 801aac0:	af00      	add	r7, sp, #0
 801aac2:	60f8      	str	r0, [r7, #12]
 801aac4:	460b      	mov	r3, r1
 801aac6:	607a      	str	r2, [r7, #4]
 801aac8:	72fb      	strb	r3, [r7, #11]
	  uint8_t tx_array[4];
	  memset(tx_array,0,4);
 801aaca:	f107 0314 	add.w	r3, r7, #20
 801aace:	2204      	movs	r2, #4
 801aad0:	2100      	movs	r1, #0
 801aad2:	4618      	mov	r0, r3
 801aad4:	f001 f996 	bl	801be04 <memset>
	  tx_array[3] = (uint8_t)(config_word);
 801aad8:	7afb      	ldrb	r3, [r7, #11]
 801aada:	75fb      	strb	r3, [r7, #23]
	  afe_start_convert(afe);
 801aadc:	68f8      	ldr	r0, [r7, #12]
 801aade:	f7ff ffb2 	bl	801aa46 <afe_start_convert>
	  while(afe_busy(afe));
 801aae2:	bf00      	nop
 801aae4:	68f8      	ldr	r0, [r7, #12]
 801aae6:	f7ff ffdb 	bl	801aaa0 <afe_busy>
 801aaea:	4603      	mov	r3, r0
 801aaec:	2b00      	cmp	r3, #0
 801aaee:	d1f9      	bne.n	801aae4 <afe_read+0x28>
	  return spi_write_read(afe->p_driver,tx_array, data_array, 4);
 801aaf0:	68fb      	ldr	r3, [r7, #12]
 801aaf2:	6818      	ldr	r0, [r3, #0]
 801aaf4:	f107 0114 	add.w	r1, r7, #20
 801aaf8:	2304      	movs	r3, #4
 801aafa:	687a      	ldr	r2, [r7, #4]
 801aafc:	f7ff fdfa 	bl	801a6f4 <spi_write_read>
 801ab00:	4603      	mov	r3, r0
}
 801ab02:	4618      	mov	r0, r3
 801ab04:	3718      	adds	r7, #24
 801ab06:	46bd      	mov	sp, r7
 801ab08:	bd80      	pop	{r7, pc}

0801ab0a <afe_create_config_word>:
		  return 0;
	  }
	  return -1;
}

uint8_t afe_create_config_word(uint8_t channel,AFE_SoftSpan_Code_t softspan,uint8_t *configword){
 801ab0a:	b480      	push	{r7}
 801ab0c:	b085      	sub	sp, #20
 801ab0e:	af00      	add	r7, sp, #0
 801ab10:	4603      	mov	r3, r0
 801ab12:	603a      	str	r2, [r7, #0]
 801ab14:	71fb      	strb	r3, [r7, #7]
 801ab16:	460b      	mov	r3, r1
 801ab18:	71bb      	strb	r3, [r7, #6]
	*configword = 1<<7  | 0<<6 | channel << 3 | softspan;// ((uint32_t)(config_number & 0x07) << (channel * 3));
 801ab1a:	79fb      	ldrb	r3, [r7, #7]
 801ab1c:	00db      	lsls	r3, r3, #3
 801ab1e:	b2da      	uxtb	r2, r3
 801ab20:	79bb      	ldrb	r3, [r7, #6]
 801ab22:	4313      	orrs	r3, r2
 801ab24:	b2db      	uxtb	r3, r3
 801ab26:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801ab2a:	b2da      	uxtb	r2, r3
 801ab2c:	683b      	ldr	r3, [r7, #0]
 801ab2e:	701a      	strb	r2, [r3, #0]
	uint8_t res = *configword;
 801ab30:	683b      	ldr	r3, [r7, #0]
 801ab32:	781b      	ldrb	r3, [r3, #0]
 801ab34:	73fb      	strb	r3, [r7, #15]
	return res;
 801ab36:	7bfb      	ldrb	r3, [r7, #15]
}
 801ab38:	4618      	mov	r0, r3
 801ab3a:	3714      	adds	r7, #20
 801ab3c:	46bd      	mov	sp, r7
 801ab3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab42:	4770      	bx	lr

0801ab44 <afe_convert>:
int afe_convert(AFE *afe,uint8_t data[4]){
 801ab44:	b590      	push	{r4, r7, lr}
 801ab46:	b085      	sub	sp, #20
 801ab48:	af00      	add	r7, sp, #0
 801ab4a:	6078      	str	r0, [r7, #4]
 801ab4c:	6039      	str	r1, [r7, #0]
	  uint32_t data32 = (uint32_t)data[0] << 16 | (uint32_t)data[1] << 8 | data[2];
 801ab4e:	683b      	ldr	r3, [r7, #0]
 801ab50:	781b      	ldrb	r3, [r3, #0]
 801ab52:	041a      	lsls	r2, r3, #16
 801ab54:	683b      	ldr	r3, [r7, #0]
 801ab56:	3301      	adds	r3, #1
 801ab58:	781b      	ldrb	r3, [r3, #0]
 801ab5a:	021b      	lsls	r3, r3, #8
 801ab5c:	4313      	orrs	r3, r2
 801ab5e:	683a      	ldr	r2, [r7, #0]
 801ab60:	3202      	adds	r2, #2
 801ab62:	7812      	ldrb	r2, [r2, #0]
 801ab64:	4313      	orrs	r3, r2
 801ab66:	60fb      	str	r3, [r7, #12]
	  afe->data_type.softSpan = data32 & SOFTSPAN_MASK;
 801ab68:	68fb      	ldr	r3, [r7, #12]
 801ab6a:	b2db      	uxtb	r3, r3
 801ab6c:	f003 0307 	and.w	r3, r3, #7
 801ab70:	b2da      	uxtb	r2, r3
 801ab72:	687b      	ldr	r3, [r7, #4]
 801ab74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	  afe->data_type.channel = (data32 & CHANNEL_MASK) >> 3;
 801ab78:	68fb      	ldr	r3, [r7, #12]
 801ab7a:	08db      	lsrs	r3, r3, #3
 801ab7c:	b2db      	uxtb	r3, r3
 801ab7e:	f003 0307 	and.w	r3, r3, #7
 801ab82:	b2da      	uxtb	r2, r3
 801ab84:	687b      	ldr	r3, [r7, #4]
 801ab86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	  afe->data_type.value = (data32 & DATA_MASK) >> 6;
 801ab8a:	68fb      	ldr	r3, [r7, #12]
 801ab8c:	099b      	lsrs	r3, r3, #6
 801ab8e:	f3c3 0211 	ubfx	r2, r3, #0, #18
 801ab92:	687b      	ldr	r3, [r7, #4]
 801ab94:	655a      	str	r2, [r3, #84]	; 0x54
	  afe->data_channel[afe->data_type.channel] = afe->data_type.value;
 801ab96:	687b      	ldr	r3, [r7, #4]
 801ab98:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801ab9c:	461a      	mov	r2, r3
 801ab9e:	687b      	ldr	r3, [r7, #4]
 801aba0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801aba2:	687b      	ldr	r3, [r7, #4]
 801aba4:	3204      	adds	r2, #4
 801aba6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  afe->dataf_channel[afe->data_type.channel] = 	  afe_caculator_vol(afe->data_type.value, _111);
 801abaa:	687b      	ldr	r3, [r7, #4]
 801abac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801abae:	687b      	ldr	r3, [r7, #4]
 801abb0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801abb4:	461c      	mov	r4, r3
 801abb6:	2107      	movs	r1, #7
 801abb8:	4610      	mov	r0, r2
 801abba:	f7ff fdf5 	bl	801a7a8 <afe_caculator_vol>
 801abbe:	eef0 7a40 	vmov.f32	s15, s0
 801abc2:	687a      	ldr	r2, [r7, #4]
 801abc4:	f104 030c 	add.w	r3, r4, #12
 801abc8:	009b      	lsls	r3, r3, #2
 801abca:	4413      	add	r3, r2
 801abcc:	edc3 7a00 	vstr	s15, [r3]
	  return 0;
 801abd0:	2300      	movs	r3, #0
}
 801abd2:	4618      	mov	r0, r3
 801abd4:	3714      	adds	r7, #20
 801abd6:	46bd      	mov	sp, r7
 801abd8:	bd90      	pop	{r4, r7, pc}

0801abda <fifo_create>:
/************************** Variable Definitions ******************************/

/********************* Exported Function Definitions **************************/

uint8_t fifo_create(fifo_t* p_fifo, void * buf, uint16_t count, size_t size)
{
 801abda:	b480      	push	{r7}
 801abdc:	b085      	sub	sp, #20
 801abde:	af00      	add	r7, sp, #0
 801abe0:	60f8      	str	r0, [r7, #12]
 801abe2:	60b9      	str	r1, [r7, #8]
 801abe4:	603b      	str	r3, [r7, #0]
 801abe6:	4613      	mov	r3, r2
 801abe8:	80fb      	strh	r3, [r7, #6]
    // Sanity check for memory and element sizes
    if (buf != NULL && p_fifo != NULL && count != 0) {
 801abea:	68bb      	ldr	r3, [r7, #8]
 801abec:	2b00      	cmp	r3, #0
 801abee:	d01c      	beq.n	801ac2a <fifo_create+0x50>
 801abf0:	68fb      	ldr	r3, [r7, #12]
 801abf2:	2b00      	cmp	r3, #0
 801abf4:	d019      	beq.n	801ac2a <fifo_create+0x50>
 801abf6:	88fb      	ldrh	r3, [r7, #6]
 801abf8:	2b00      	cmp	r3, #0
 801abfa:	d016      	beq.n	801ac2a <fifo_create+0x50>
        p_fifo->itemspace = buf;
 801abfc:	68fb      	ldr	r3, [r7, #12]
 801abfe:	68ba      	ldr	r2, [r7, #8]
 801ac00:	601a      	str	r2, [r3, #0]
        p_fifo->itemsize = size;
 801ac02:	68fb      	ldr	r3, [r7, #12]
 801ac04:	683a      	ldr	r2, [r7, #0]
 801ac06:	605a      	str	r2, [r3, #4]
        p_fifo->allocatedbytes = count * size;
 801ac08:	88fb      	ldrh	r3, [r7, #6]
 801ac0a:	683a      	ldr	r2, [r7, #0]
 801ac0c:	fb02 f203 	mul.w	r2, r2, r3
 801ac10:	68fb      	ldr	r3, [r7, #12]
 801ac12:	609a      	str	r2, [r3, #8]
        p_fifo->readoffset = 0;
 801ac14:	68fb      	ldr	r3, [r7, #12]
 801ac16:	2200      	movs	r2, #0
 801ac18:	819a      	strh	r2, [r3, #12]
        p_fifo->writeoffset = 0;
 801ac1a:	68fb      	ldr	r3, [r7, #12]
 801ac1c:	2200      	movs	r2, #0
 801ac1e:	81da      	strh	r2, [r3, #14]
        p_fifo->storedbytes = 0;
 801ac20:	68fb      	ldr	r3, [r7, #12]
 801ac22:	2200      	movs	r2, #0
 801ac24:	611a      	str	r2, [r3, #16]
        return 1;
 801ac26:	2301      	movs	r3, #1
 801ac28:	e000      	b.n	801ac2c <fifo_create+0x52>
    }
    return 0;
 801ac2a:	2300      	movs	r3, #0
}
 801ac2c:	4618      	mov	r0, r3
 801ac2e:	3714      	adds	r7, #20
 801ac30:	46bd      	mov	sp, r7
 801ac32:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac36:	4770      	bx	lr

0801ac38 <fifo_add>:

uint8_t fifo_add(fifo_t* p_fifo, const void * item)
{
 801ac38:	b580      	push	{r7, lr}
 801ac3a:	b082      	sub	sp, #8
 801ac3c:	af00      	add	r7, sp, #0
 801ac3e:	6078      	str	r0, [r7, #4]
 801ac40:	6039      	str	r1, [r7, #0]
    if (!fifo_is_full(p_fifo)) {
 801ac42:	6878      	ldr	r0, [r7, #4]
 801ac44:	f000 f832 	bl	801acac <fifo_is_full>
 801ac48:	4603      	mov	r3, r0
 801ac4a:	2b00      	cmp	r3, #0
 801ac4c:	d10c      	bne.n	801ac68 <fifo_add+0x30>
        fifo_copy_to(p_fifo, item);
 801ac4e:	6839      	ldr	r1, [r7, #0]
 801ac50:	6878      	ldr	r0, [r7, #4]
 801ac52:	f000 f876 	bl	801ad42 <fifo_copy_to>
        p_fifo->storedbytes += p_fifo->itemsize;
 801ac56:	687b      	ldr	r3, [r7, #4]
 801ac58:	691a      	ldr	r2, [r3, #16]
 801ac5a:	687b      	ldr	r3, [r7, #4]
 801ac5c:	685b      	ldr	r3, [r3, #4]
 801ac5e:	441a      	add	r2, r3
 801ac60:	687b      	ldr	r3, [r7, #4]
 801ac62:	611a      	str	r2, [r3, #16]
        return 1;
 801ac64:	2301      	movs	r3, #1
 801ac66:	e000      	b.n	801ac6a <fifo_add+0x32>
    } else {
        return 0;
 801ac68:	2300      	movs	r3, #0
    }
}
 801ac6a:	4618      	mov	r0, r3
 801ac6c:	3708      	adds	r7, #8
 801ac6e:	46bd      	mov	sp, r7
 801ac70:	bd80      	pop	{r7, pc}

0801ac72 <fifo_get>:

uint8_t fifo_get(fifo_t* p_fifo, void * item)
{
 801ac72:	b580      	push	{r7, lr}
 801ac74:	b082      	sub	sp, #8
 801ac76:	af00      	add	r7, sp, #0
 801ac78:	6078      	str	r0, [r7, #4]
 801ac7a:	6039      	str	r1, [r7, #0]
    if (!fifo_is_empty(p_fifo)) {
 801ac7c:	6878      	ldr	r0, [r7, #4]
 801ac7e:	f000 f828 	bl	801acd2 <fifo_is_empty>
 801ac82:	4603      	mov	r3, r0
 801ac84:	2b00      	cmp	r3, #0
 801ac86:	d10c      	bne.n	801aca2 <fifo_get+0x30>
        fifo_copy_from(p_fifo, item);
 801ac88:	6839      	ldr	r1, [r7, #0]
 801ac8a:	6878      	ldr	r0, [r7, #4]
 801ac8c:	f000 f832 	bl	801acf4 <fifo_copy_from>
        p_fifo->storedbytes -= p_fifo->itemsize;
 801ac90:	687b      	ldr	r3, [r7, #4]
 801ac92:	691a      	ldr	r2, [r3, #16]
 801ac94:	687b      	ldr	r3, [r7, #4]
 801ac96:	685b      	ldr	r3, [r3, #4]
 801ac98:	1ad2      	subs	r2, r2, r3
 801ac9a:	687b      	ldr	r3, [r7, #4]
 801ac9c:	611a      	str	r2, [r3, #16]
        return 1;
 801ac9e:	2301      	movs	r3, #1
 801aca0:	e000      	b.n	801aca4 <fifo_get+0x32>
    } else {
        return 0;
 801aca2:	2300      	movs	r3, #0
    }
}
 801aca4:	4618      	mov	r0, r3
 801aca6:	3708      	adds	r7, #8
 801aca8:	46bd      	mov	sp, r7
 801acaa:	bd80      	pop	{r7, pc}

0801acac <fifo_is_full>:
    }

}

uint8_t fifo_is_full(fifo_t* p_fifo)
{
 801acac:	b480      	push	{r7}
 801acae:	b083      	sub	sp, #12
 801acb0:	af00      	add	r7, sp, #0
 801acb2:	6078      	str	r0, [r7, #4]
    if (p_fifo->storedbytes >= p_fifo->allocatedbytes)
 801acb4:	687b      	ldr	r3, [r7, #4]
 801acb6:	691a      	ldr	r2, [r3, #16]
 801acb8:	687b      	ldr	r3, [r7, #4]
 801acba:	689b      	ldr	r3, [r3, #8]
 801acbc:	429a      	cmp	r2, r3
 801acbe:	d301      	bcc.n	801acc4 <fifo_is_full+0x18>
        return 1;
 801acc0:	2301      	movs	r3, #1
 801acc2:	e000      	b.n	801acc6 <fifo_is_full+0x1a>
    else
        return 0;
 801acc4:	2300      	movs	r3, #0
}
 801acc6:	4618      	mov	r0, r3
 801acc8:	370c      	adds	r7, #12
 801acca:	46bd      	mov	sp, r7
 801accc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acd0:	4770      	bx	lr

0801acd2 <fifo_is_empty>:

uint8_t fifo_is_empty(fifo_t* p_fifo)
{
 801acd2:	b480      	push	{r7}
 801acd4:	b083      	sub	sp, #12
 801acd6:	af00      	add	r7, sp, #0
 801acd8:	6078      	str	r0, [r7, #4]
    if (p_fifo->storedbytes == 0)
 801acda:	687b      	ldr	r3, [r7, #4]
 801acdc:	691b      	ldr	r3, [r3, #16]
 801acde:	2b00      	cmp	r3, #0
 801ace0:	d101      	bne.n	801ace6 <fifo_is_empty+0x14>
        return 1;
 801ace2:	2301      	movs	r3, #1
 801ace4:	e000      	b.n	801ace8 <fifo_is_empty+0x16>
    else
        return 0;
 801ace6:	2300      	movs	r3, #0
}
 801ace8:	4618      	mov	r0, r3
 801acea:	370c      	adds	r7, #12
 801acec:	46bd      	mov	sp, r7
 801acee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acf2:	4770      	bx	lr

0801acf4 <fifo_copy_from>:
    return 0;
}

/********************* Internal Function Definitions *************************/
static void fifo_copy_from(fifo_t* p_fifo, void * item)
{
 801acf4:	b580      	push	{r7, lr}
 801acf6:	b082      	sub	sp, #8
 801acf8:	af00      	add	r7, sp, #0
 801acfa:	6078      	str	r0, [r7, #4]
 801acfc:	6039      	str	r1, [r7, #0]
    memcpy(item, (uint8_t*)p_fifo->itemspace + p_fifo->readoffset, p_fifo->itemsize);
 801acfe:	687b      	ldr	r3, [r7, #4]
 801ad00:	681b      	ldr	r3, [r3, #0]
 801ad02:	687a      	ldr	r2, [r7, #4]
 801ad04:	8992      	ldrh	r2, [r2, #12]
 801ad06:	1899      	adds	r1, r3, r2
 801ad08:	687b      	ldr	r3, [r7, #4]
 801ad0a:	685b      	ldr	r3, [r3, #4]
 801ad0c:	461a      	mov	r2, r3
 801ad0e:	6838      	ldr	r0, [r7, #0]
 801ad10:	f001 f850 	bl	801bdb4 <memcpy>
    p_fifo->readoffset += p_fifo->itemsize;
 801ad14:	687b      	ldr	r3, [r7, #4]
 801ad16:	899a      	ldrh	r2, [r3, #12]
 801ad18:	687b      	ldr	r3, [r7, #4]
 801ad1a:	685b      	ldr	r3, [r3, #4]
 801ad1c:	b29b      	uxth	r3, r3
 801ad1e:	4413      	add	r3, r2
 801ad20:	b29a      	uxth	r2, r3
 801ad22:	687b      	ldr	r3, [r7, #4]
 801ad24:	819a      	strh	r2, [r3, #12]
    if (p_fifo->readoffset >= p_fifo->allocatedbytes) {
 801ad26:	687b      	ldr	r3, [r7, #4]
 801ad28:	899b      	ldrh	r3, [r3, #12]
 801ad2a:	461a      	mov	r2, r3
 801ad2c:	687b      	ldr	r3, [r7, #4]
 801ad2e:	689b      	ldr	r3, [r3, #8]
 801ad30:	429a      	cmp	r2, r3
 801ad32:	d302      	bcc.n	801ad3a <fifo_copy_from+0x46>
        p_fifo->readoffset = 0;
 801ad34:	687b      	ldr	r3, [r7, #4]
 801ad36:	2200      	movs	r2, #0
 801ad38:	819a      	strh	r2, [r3, #12]
    }
}
 801ad3a:	bf00      	nop
 801ad3c:	3708      	adds	r7, #8
 801ad3e:	46bd      	mov	sp, r7
 801ad40:	bd80      	pop	{r7, pc}

0801ad42 <fifo_copy_to>:

static void fifo_copy_to(fifo_t* p_fifo, const void *item)
{
 801ad42:	b580      	push	{r7, lr}
 801ad44:	b082      	sub	sp, #8
 801ad46:	af00      	add	r7, sp, #0
 801ad48:	6078      	str	r0, [r7, #4]
 801ad4a:	6039      	str	r1, [r7, #0]
    memcpy((uint8_t*)p_fifo->itemspace + p_fifo->writeoffset, item, p_fifo->itemsize);
 801ad4c:	687b      	ldr	r3, [r7, #4]
 801ad4e:	681b      	ldr	r3, [r3, #0]
 801ad50:	687a      	ldr	r2, [r7, #4]
 801ad52:	89d2      	ldrh	r2, [r2, #14]
 801ad54:	1898      	adds	r0, r3, r2
 801ad56:	687b      	ldr	r3, [r7, #4]
 801ad58:	685b      	ldr	r3, [r3, #4]
 801ad5a:	461a      	mov	r2, r3
 801ad5c:	6839      	ldr	r1, [r7, #0]
 801ad5e:	f001 f829 	bl	801bdb4 <memcpy>
    p_fifo->writeoffset += p_fifo->itemsize;
 801ad62:	687b      	ldr	r3, [r7, #4]
 801ad64:	89da      	ldrh	r2, [r3, #14]
 801ad66:	687b      	ldr	r3, [r7, #4]
 801ad68:	685b      	ldr	r3, [r3, #4]
 801ad6a:	b29b      	uxth	r3, r3
 801ad6c:	4413      	add	r3, r2
 801ad6e:	b29a      	uxth	r2, r3
 801ad70:	687b      	ldr	r3, [r7, #4]
 801ad72:	81da      	strh	r2, [r3, #14]
    if (p_fifo->writeoffset >= p_fifo->allocatedbytes) {
 801ad74:	687b      	ldr	r3, [r7, #4]
 801ad76:	89db      	ldrh	r3, [r3, #14]
 801ad78:	461a      	mov	r2, r3
 801ad7a:	687b      	ldr	r3, [r7, #4]
 801ad7c:	689b      	ldr	r3, [r3, #8]
 801ad7e:	429a      	cmp	r2, r3
 801ad80:	d302      	bcc.n	801ad88 <fifo_copy_to+0x46>
        p_fifo->writeoffset = 0;
 801ad82:	687b      	ldr	r3, [r7, #4]
 801ad84:	2200      	movs	r2, #0
 801ad86:	81da      	strh	r2, [r3, #14]
    }
}
 801ad88:	bf00      	nop
 801ad8a:	3708      	adds	r7, #8
 801ad8c:	46bd      	mov	sp, r7
 801ad8e:	bd80      	pop	{r7, pc}

0801ad90 <retarget_init>:
/**
 * @brief      Initialize FIFO
 *
 * @return     { description_of_the_return_value }
 */
int retarget_init(void) {
 801ad90:	b580      	push	{r7, lr}
 801ad92:	af00      	add	r7, sp, #0
  fifo_create( &shell_fifo,
 801ad94:	2301      	movs	r3, #1
 801ad96:	2280      	movs	r2, #128	; 0x80
 801ad98:	4903      	ldr	r1, [pc, #12]	; (801ada8 <retarget_init+0x18>)
 801ad9a:	4804      	ldr	r0, [pc, #16]	; (801adac <retarget_init+0x1c>)
 801ad9c:	f7ff ff1d 	bl	801abda <fifo_create>
               shell_rx_buffer,
               sizeof(shell_rx_buffer)/sizeof(uint8_t),
               sizeof(uint8_t)
             );

  return 0;
 801ada0:	2300      	movs	r3, #0
}
 801ada2:	4618      	mov	r0, r3
 801ada4:	bd80      	pop	{r7, pc}
 801ada6:	bf00      	nop
 801ada8:	200015d4 	.word	0x200015d4
 801adac:	2000d59c 	.word	0x2000d59c

0801adb0 <serial_get_char>:


int serial_get_char(uint8_t *c) {
 801adb0:	b580      	push	{r7, lr}
 801adb2:	b084      	sub	sp, #16
 801adb4:	af00      	add	r7, sp, #0
 801adb6:	6078      	str	r0, [r7, #4]
  uint8_t item = 0;
 801adb8:	2300      	movs	r3, #0
 801adba:	73fb      	strb	r3, [r7, #15]

  if (fifo_is_empty(&shell_fifo) == 1) {
 801adbc:	480d      	ldr	r0, [pc, #52]	; (801adf4 <serial_get_char+0x44>)
 801adbe:	f7ff ff88 	bl	801acd2 <fifo_is_empty>
 801adc2:	4603      	mov	r3, r0
 801adc4:	2b01      	cmp	r3, #1
 801adc6:	d101      	bne.n	801adcc <serial_get_char+0x1c>
    return 0;
 801adc8:	2300      	movs	r3, #0
 801adca:	e00e      	b.n	801adea <serial_get_char+0x3a>
  }

  if(fifo_get(&shell_fifo, &item) == 1) {
 801adcc:	f107 030f 	add.w	r3, r7, #15
 801add0:	4619      	mov	r1, r3
 801add2:	4808      	ldr	r0, [pc, #32]	; (801adf4 <serial_get_char+0x44>)
 801add4:	f7ff ff4d 	bl	801ac72 <fifo_get>
 801add8:	4603      	mov	r3, r0
 801adda:	2b01      	cmp	r3, #1
 801addc:	d104      	bne.n	801ade8 <serial_get_char+0x38>
    *c = item;
 801adde:	7bfa      	ldrb	r2, [r7, #15]
 801ade0:	687b      	ldr	r3, [r7, #4]
 801ade2:	701a      	strb	r2, [r3, #0]
    return 1;
 801ade4:	2301      	movs	r3, #1
 801ade6:	e000      	b.n	801adea <serial_get_char+0x3a>
  }

  return 0;
 801ade8:	2300      	movs	r3, #0
}
 801adea:	4618      	mov	r0, r3
 801adec:	3710      	adds	r7, #16
 801adee:	46bd      	mov	sp, r7
 801adf0:	bd80      	pop	{r7, pc}
 801adf2:	bf00      	nop
 801adf4:	2000d59c 	.word	0x2000d59c

0801adf8 <__io_getchar>:
#endif
	return ch;
}

uint8_t __io_getchar(void)
{
 801adf8:	b580      	push	{r7, lr}
 801adfa:	b082      	sub	sp, #8
 801adfc:	af00      	add	r7, sp, #0
	uint8_t ch;
  int ret = serial_get_char((uint8_t*)&ch);
 801adfe:	1cfb      	adds	r3, r7, #3
 801ae00:	4618      	mov	r0, r3
 801ae02:	f7ff ffd5 	bl	801adb0 <serial_get_char>
 801ae06:	6078      	str	r0, [r7, #4]

  return (ret == 1) ? ch : 0;
 801ae08:	687b      	ldr	r3, [r7, #4]
 801ae0a:	2b01      	cmp	r3, #1
 801ae0c:	d101      	bne.n	801ae12 <__io_getchar+0x1a>
 801ae0e:	78fb      	ldrb	r3, [r7, #3]
 801ae10:	e000      	b.n	801ae14 <__io_getchar+0x1c>
 801ae12:	2300      	movs	r3, #0
}
 801ae14:	4618      	mov	r0, r3
 801ae16:	3708      	adds	r7, #8
 801ae18:	46bd      	mov	sp, r7
 801ae1a:	bd80      	pop	{r7, pc}

0801ae1c <on_uart_data_received>:

void on_uart_data_received(uint8_t ch) {
 801ae1c:	b580      	push	{r7, lr}
 801ae1e:	b082      	sub	sp, #8
 801ae20:	af00      	add	r7, sp, #0
 801ae22:	4603      	mov	r3, r0
 801ae24:	71fb      	strb	r3, [r7, #7]
  if(!fifo_add(&shell_fifo, (const void *)&ch)) {
 801ae26:	1dfb      	adds	r3, r7, #7
 801ae28:	4619      	mov	r1, r3
 801ae2a:	4803      	ldr	r0, [pc, #12]	; (801ae38 <on_uart_data_received+0x1c>)
 801ae2c:	f7ff ff04 	bl	801ac38 <fifo_add>
    //printf("err");
  }
}
 801ae30:	bf00      	nop
 801ae32:	3708      	adds	r7, #8
 801ae34:	46bd      	mov	sp, r7
 801ae36:	bd80      	pop	{r7, pc}
 801ae38:	2000d59c 	.word	0x2000d59c

0801ae3c <_read>:
    return ch;
}
#elif defined(__GNUC__)

int _read(int file, char *ptr, int len)
{
 801ae3c:	b590      	push	{r4, r7, lr}
 801ae3e:	b087      	sub	sp, #28
 801ae40:	af00      	add	r7, sp, #0
 801ae42:	60f8      	str	r0, [r7, #12]
 801ae44:	60b9      	str	r1, [r7, #8]
 801ae46:	607a      	str	r2, [r7, #4]
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++) {
 801ae48:	2300      	movs	r3, #0
 801ae4a:	617b      	str	r3, [r7, #20]
 801ae4c:	e009      	b.n	801ae62 <_read+0x26>
    *ptr++ = __io_getchar();
 801ae4e:	68bc      	ldr	r4, [r7, #8]
 801ae50:	1c63      	adds	r3, r4, #1
 801ae52:	60bb      	str	r3, [r7, #8]
 801ae54:	f7ff ffd0 	bl	801adf8 <__io_getchar>
 801ae58:	4603      	mov	r3, r0
 801ae5a:	7023      	strb	r3, [r4, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++) {
 801ae5c:	697b      	ldr	r3, [r7, #20]
 801ae5e:	3301      	adds	r3, #1
 801ae60:	617b      	str	r3, [r7, #20]
 801ae62:	697a      	ldr	r2, [r7, #20]
 801ae64:	687b      	ldr	r3, [r7, #4]
 801ae66:	429a      	cmp	r2, r3
 801ae68:	dbf1      	blt.n	801ae4e <_read+0x12>
  }

  return len;
 801ae6a:	687b      	ldr	r3, [r7, #4]
}
 801ae6c:	4618      	mov	r0, r3
 801ae6e:	371c      	adds	r7, #28
 801ae70:	46bd      	mov	sp, r7
 801ae72:	bd90      	pop	{r4, r7, pc}

0801ae74 <_write>:

int _write(int file, char *ptr, int len)
{
 801ae74:	b580      	push	{r7, lr}
 801ae76:	b086      	sub	sp, #24
 801ae78:	af00      	add	r7, sp, #0
 801ae7a:	60f8      	str	r0, [r7, #12]
 801ae7c:	60b9      	str	r1, [r7, #8]
 801ae7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801ae80:	2300      	movs	r3, #0
 801ae82:	617b      	str	r3, [r7, #20]
 801ae84:	e009      	b.n	801ae9a <_write+0x26>
	{
		__io_putchar(*ptr++);
 801ae86:	68bb      	ldr	r3, [r7, #8]
 801ae88:	1c5a      	adds	r2, r3, #1
 801ae8a:	60ba      	str	r2, [r7, #8]
 801ae8c:	781b      	ldrb	r3, [r3, #0]
 801ae8e:	4618      	mov	r0, r3
 801ae90:	f7ff f85a 	bl	8019f48 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801ae94:	697b      	ldr	r3, [r7, #20]
 801ae96:	3301      	adds	r3, #1
 801ae98:	617b      	str	r3, [r7, #20]
 801ae9a:	697a      	ldr	r2, [r7, #20]
 801ae9c:	687b      	ldr	r3, [r7, #4]
 801ae9e:	429a      	cmp	r2, r3
 801aea0:	dbf1      	blt.n	801ae86 <_write+0x12>
	}
  return len;
 801aea2:	687b      	ldr	r3, [r7, #4]
}
 801aea4:	4618      	mov	r0, r3
 801aea6:	3718      	adds	r7, #24
 801aea8:	46bd      	mov	sp, r7
 801aeaa:	bd80      	pop	{r7, pc}

0801aeac <SHELL_Init>:
static char g_paramBuffer[SHELL_BUFFER_SIZE];

/********************** Exported Function Definitions *************************/
void SHELL_Init(
    p_shell_context_t context, send_data_cb_t send_cb, recv_data_cb_t recv_cb, printf_data_t shell_printf, char *prompt)
{
 801aeac:	b580      	push	{r7, lr}
 801aeae:	b084      	sub	sp, #16
 801aeb0:	af00      	add	r7, sp, #0
 801aeb2:	60f8      	str	r0, [r7, #12]
 801aeb4:	60b9      	str	r1, [r7, #8]
 801aeb6:	607a      	str	r2, [r7, #4]
 801aeb8:	603b      	str	r3, [r7, #0]
    assert(send_cb != NULL);
 801aeba:	68bb      	ldr	r3, [r7, #8]
 801aebc:	2b00      	cmp	r3, #0
 801aebe:	d105      	bne.n	801aecc <SHELL_Init+0x20>
 801aec0:	4b1c      	ldr	r3, [pc, #112]	; (801af34 <SHELL_Init+0x88>)
 801aec2:	4a1d      	ldr	r2, [pc, #116]	; (801af38 <SHELL_Init+0x8c>)
 801aec4:	214d      	movs	r1, #77	; 0x4d
 801aec6:	481d      	ldr	r0, [pc, #116]	; (801af3c <SHELL_Init+0x90>)
 801aec8:	f000 fe04 	bl	801bad4 <__assert_func>
    assert(recv_cb != NULL);
 801aecc:	687b      	ldr	r3, [r7, #4]
 801aece:	2b00      	cmp	r3, #0
 801aed0:	d105      	bne.n	801aede <SHELL_Init+0x32>
 801aed2:	4b1b      	ldr	r3, [pc, #108]	; (801af40 <SHELL_Init+0x94>)
 801aed4:	4a18      	ldr	r2, [pc, #96]	; (801af38 <SHELL_Init+0x8c>)
 801aed6:	214e      	movs	r1, #78	; 0x4e
 801aed8:	4818      	ldr	r0, [pc, #96]	; (801af3c <SHELL_Init+0x90>)
 801aeda:	f000 fdfb 	bl	801bad4 <__assert_func>
    assert(prompt != NULL);
 801aede:	69bb      	ldr	r3, [r7, #24]
 801aee0:	2b00      	cmp	r3, #0
 801aee2:	d105      	bne.n	801aef0 <SHELL_Init+0x44>
 801aee4:	4b17      	ldr	r3, [pc, #92]	; (801af44 <SHELL_Init+0x98>)
 801aee6:	4a14      	ldr	r2, [pc, #80]	; (801af38 <SHELL_Init+0x8c>)
 801aee8:	214f      	movs	r1, #79	; 0x4f
 801aeea:	4814      	ldr	r0, [pc, #80]	; (801af3c <SHELL_Init+0x90>)
 801aeec:	f000 fdf2 	bl	801bad4 <__assert_func>
    assert(shell_printf != NULL);
 801aef0:	683b      	ldr	r3, [r7, #0]
 801aef2:	2b00      	cmp	r3, #0
 801aef4:	d105      	bne.n	801af02 <SHELL_Init+0x56>
 801aef6:	4b14      	ldr	r3, [pc, #80]	; (801af48 <SHELL_Init+0x9c>)
 801aef8:	4a0f      	ldr	r2, [pc, #60]	; (801af38 <SHELL_Init+0x8c>)
 801aefa:	2150      	movs	r1, #80	; 0x50
 801aefc:	480f      	ldr	r0, [pc, #60]	; (801af3c <SHELL_Init+0x90>)
 801aefe:	f000 fde9 	bl	801bad4 <__assert_func>

    /* Memset for context */
    memset(context, 0, sizeof(shell_context_struct));
 801af02:	f44f 728e 	mov.w	r2, #284	; 0x11c
 801af06:	2100      	movs	r1, #0
 801af08:	68f8      	ldr	r0, [r7, #12]
 801af0a:	f000 ff7b 	bl	801be04 <memset>
    context->send_data_func = send_cb;
 801af0e:	68fb      	ldr	r3, [r7, #12]
 801af10:	68ba      	ldr	r2, [r7, #8]
 801af12:	649a      	str	r2, [r3, #72]	; 0x48
    context->recv_data_func = recv_cb;
 801af14:	68fb      	ldr	r3, [r7, #12]
 801af16:	687a      	ldr	r2, [r7, #4]
 801af18:	64da      	str	r2, [r3, #76]	; 0x4c
    context->printf_data_func = shell_printf;
 801af1a:	68fb      	ldr	r3, [r7, #12]
 801af1c:	683a      	ldr	r2, [r7, #0]
 801af1e:	651a      	str	r2, [r3, #80]	; 0x50
    context->prompt = prompt;
 801af20:	68fb      	ldr	r3, [r7, #12]
 801af22:	69ba      	ldr	r2, [r7, #24]
 801af24:	601a      	str	r2, [r3, #0]

    SHELL_RegisterCommand(&xHelpCommand);
 801af26:	4809      	ldr	r0, [pc, #36]	; (801af4c <SHELL_Init+0xa0>)
 801af28:	f000 fd5a 	bl	801b9e0 <SHELL_RegisterCommand>
    // SHELL_RegisterCommand(&xExitCommand);
}
 801af2c:	bf00      	nop
 801af2e:	3710      	adds	r7, #16
 801af30:	46bd      	mov	sp, r7
 801af32:	bd80      	pop	{r7, pc}
 801af34:	08022608 	.word	0x08022608
 801af38:	080228dc 	.word	0x080228dc
 801af3c:	08022618 	.word	0x08022618
 801af40:	0802263c 	.word	0x0802263c
 801af44:	0802264c 	.word	0x0802264c
 801af48:	0802265c 	.word	0x0802265c
 801af4c:	080228cc 	.word	0x080228cc

0801af50 <SHELL_Process>:


void SHELL_Process(p_shell_context_t context)
{
 801af50:	b580      	push	{r7, lr}
 801af52:	b084      	sub	sp, #16
 801af54:	af00      	add	r7, sp, #0
 801af56:	6078      	str	r0, [r7, #4]

//   static uint32_t tick = 0;
   static uint8_t first_run  = 1;


    if (!context) {
 801af58:	687b      	ldr	r3, [r7, #4]
 801af5a:	2b00      	cmp	r3, #0
 801af5c:	f000 81ff 	beq.w	801b35e <SHELL_Process+0x40e>
        return;
    }

    if(first_run == 1) {
 801af60:	4baa      	ldr	r3, [pc, #680]	; (801b20c <SHELL_Process+0x2bc>)
 801af62:	781b      	ldrb	r3, [r3, #0]
 801af64:	2b01      	cmp	r3, #1
 801af66:	d102      	bne.n	801af6e <SHELL_Process+0x1e>

        first_run = 0;
 801af68:	4ba8      	ldr	r3, [pc, #672]	; (801b20c <SHELL_Process+0x2bc>)
 801af6a:	2200      	movs	r2, #0
 801af6c:	701a      	strb	r2, [r3, #0]
    }


     vTaskDelay( 20 / portTICK_PERIOD_MS );  /* sleep a while */
 801af6e:	2014      	movs	r0, #20
 801af70:	f7ed fafc 	bl	800856c <vTaskDelay>
//        return;
//    }

//    tick = xTaskGetTickCount();

    if (context->exit) {
 801af74:	687b      	ldr	r3, [r7, #4]
 801af76:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801af7a:	2b00      	cmp	r3, #0
 801af7c:	f040 81f1 	bne.w	801b362 <SHELL_Process+0x412>
        return;
    }
    ch = GetChar(context);
 801af80:	6878      	ldr	r0, [r7, #4]
 801af82:	f000 fd53 	bl	801ba2c <GetChar>
 801af86:	4603      	mov	r3, r0
 801af88:	72fb      	strb	r3, [r7, #11]
    if(ch == 0) {
 801af8a:	7afb      	ldrb	r3, [r7, #11]
 801af8c:	2b00      	cmp	r3, #0
 801af8e:	f000 81ea 	beq.w	801b366 <SHELL_Process+0x416>
      return;
    }
    /* Special key */
    if (ch == KEY_ESC) {
 801af92:	7afb      	ldrb	r3, [r7, #11]
 801af94:	2b1b      	cmp	r3, #27
 801af96:	d103      	bne.n	801afa0 <SHELL_Process+0x50>
        context->stat = kSHELL_Special;
 801af98:	687b      	ldr	r3, [r7, #4]
 801af9a:	2201      	movs	r2, #1
 801af9c:	711a      	strb	r2, [r3, #4]
        return;
 801af9e:	e1e5      	b.n	801b36c <SHELL_Process+0x41c>
    } else if (context->stat == kSHELL_Special) {
 801afa0:	687b      	ldr	r3, [r7, #4]
 801afa2:	791b      	ldrb	r3, [r3, #4]
 801afa4:	2b01      	cmp	r3, #1
 801afa6:	d10a      	bne.n	801afbe <SHELL_Process+0x6e>
        /* Function key */
        if (ch == '[') {
 801afa8:	7afb      	ldrb	r3, [r7, #11]
 801afaa:	2b5b      	cmp	r3, #91	; 0x5b
 801afac:	d103      	bne.n	801afb6 <SHELL_Process+0x66>
            context->stat = kSHELL_Function;
 801afae:	687b      	ldr	r3, [r7, #4]
 801afb0:	2202      	movs	r2, #2
 801afb2:	711a      	strb	r2, [r3, #4]
            return;
 801afb4:	e1da      	b.n	801b36c <SHELL_Process+0x41c>
        }
        context->stat = kSHELL_Normal;
 801afb6:	687b      	ldr	r3, [r7, #4]
 801afb8:	2200      	movs	r2, #0
 801afba:	711a      	strb	r2, [r3, #4]
 801afbc:	e130      	b.n	801b220 <SHELL_Process+0x2d0>
    } else if (context->stat == kSHELL_Function) {
 801afbe:	687b      	ldr	r3, [r7, #4]
 801afc0:	791b      	ldrb	r3, [r3, #4]
 801afc2:	2b02      	cmp	r3, #2
 801afc4:	d17c      	bne.n	801b0c0 <SHELL_Process+0x170>
        context->stat = kSHELL_Normal;
 801afc6:	687b      	ldr	r3, [r7, #4]
 801afc8:	2200      	movs	r2, #0
 801afca:	711a      	strb	r2, [r3, #4]

        switch ((uint8_t)ch) {
 801afcc:	7afb      	ldrb	r3, [r7, #11]
 801afce:	3b41      	subs	r3, #65	; 0x41
 801afd0:	2b03      	cmp	r3, #3
 801afd2:	d86b      	bhi.n	801b0ac <SHELL_Process+0x15c>
 801afd4:	a201      	add	r2, pc, #4	; (adr r2, 801afdc <SHELL_Process+0x8c>)
 801afd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801afda:	bf00      	nop
 801afdc:	0801afed 	.word	0x0801afed
 801afe0:	0801b023 	.word	0x0801b023
 801afe4:	0801b073 	.word	0x0801b073
 801afe8:	0801b04f 	.word	0x0801b04f
            /* History operation here */
            case 'A': /* Up key */
                GetHistoryCommand(context, context->hist_current);
 801afec:	687b      	ldr	r3, [r7, #4]
 801afee:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801aff2:	b2db      	uxtb	r3, r3
 801aff4:	4619      	mov	r1, r3
 801aff6:	6878      	ldr	r0, [r7, #4]
 801aff8:	f000 fb26 	bl	801b648 <GetHistoryCommand>
                if (context->hist_current < (context->hist_count - 1)) {
 801affc:	687b      	ldr	r3, [r7, #4]
 801affe:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801b002:	461a      	mov	r2, r3
 801b004:	687b      	ldr	r3, [r7, #4]
 801b006:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801b00a:	3b01      	subs	r3, #1
 801b00c:	429a      	cmp	r2, r3
 801b00e:	da4f      	bge.n	801b0b0 <SHELL_Process+0x160>
                    context->hist_current++;
 801b010:	687b      	ldr	r3, [r7, #4]
 801b012:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801b016:	3301      	adds	r3, #1
 801b018:	b29a      	uxth	r2, r3
 801b01a:	687b      	ldr	r3, [r7, #4]
 801b01c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
                }
                break;
 801b020:	e046      	b.n	801b0b0 <SHELL_Process+0x160>
            case 'B': /* Down key */
                GetHistoryCommand(context, context->hist_current);
 801b022:	687b      	ldr	r3, [r7, #4]
 801b024:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801b028:	b2db      	uxtb	r3, r3
 801b02a:	4619      	mov	r1, r3
 801b02c:	6878      	ldr	r0, [r7, #4]
 801b02e:	f000 fb0b 	bl	801b648 <GetHistoryCommand>
                if (context->hist_current > 0) {
 801b032:	687b      	ldr	r3, [r7, #4]
 801b034:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801b038:	2b00      	cmp	r3, #0
 801b03a:	d03b      	beq.n	801b0b4 <SHELL_Process+0x164>
                    context->hist_current--;
 801b03c:	687b      	ldr	r3, [r7, #4]
 801b03e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801b042:	3b01      	subs	r3, #1
 801b044:	b29a      	uxth	r2, r3
 801b046:	687b      	ldr	r3, [r7, #4]
 801b048:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
                }
                break;
 801b04c:	e032      	b.n	801b0b4 <SHELL_Process+0x164>
            case 'D': /* Left key */
                if (context->c_pos) {
 801b04e:	687b      	ldr	r3, [r7, #4]
 801b050:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801b054:	2b00      	cmp	r3, #0
 801b056:	d02f      	beq.n	801b0b8 <SHELL_Process+0x168>
                    context->printf_data_func("\b");
 801b058:	687b      	ldr	r3, [r7, #4]
 801b05a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b05c:	486c      	ldr	r0, [pc, #432]	; (801b210 <SHELL_Process+0x2c0>)
 801b05e:	4798      	blx	r3
                    context->c_pos--;
 801b060:	687b      	ldr	r3, [r7, #4]
 801b062:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801b066:	3b01      	subs	r3, #1
 801b068:	b2da      	uxtb	r2, r3
 801b06a:	687b      	ldr	r3, [r7, #4]
 801b06c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                }
                break;
 801b070:	e022      	b.n	801b0b8 <SHELL_Process+0x168>
            case 'C': /* Right key */
                if (context->c_pos < context->l_pos) {
 801b072:	687b      	ldr	r3, [r7, #4]
 801b074:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 801b078:	687b      	ldr	r3, [r7, #4]
 801b07a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801b07e:	429a      	cmp	r2, r3
 801b080:	d21c      	bcs.n	801b0bc <SHELL_Process+0x16c>
                    context->printf_data_func("%c", context->line[context->c_pos]);
 801b082:	687b      	ldr	r3, [r7, #4]
 801b084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b086:	687a      	ldr	r2, [r7, #4]
 801b088:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
 801b08c:	4611      	mov	r1, r2
 801b08e:	687a      	ldr	r2, [r7, #4]
 801b090:	440a      	add	r2, r1
 801b092:	7952      	ldrb	r2, [r2, #5]
 801b094:	4611      	mov	r1, r2
 801b096:	485f      	ldr	r0, [pc, #380]	; (801b214 <SHELL_Process+0x2c4>)
 801b098:	4798      	blx	r3
                    context->c_pos++;
 801b09a:	687b      	ldr	r3, [r7, #4]
 801b09c:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801b0a0:	3301      	adds	r3, #1
 801b0a2:	b2da      	uxtb	r2, r3
 801b0a4:	687b      	ldr	r3, [r7, #4]
 801b0a6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                }
                break;
 801b0aa:	e007      	b.n	801b0bc <SHELL_Process+0x16c>
            default:
                break;
 801b0ac:	bf00      	nop
 801b0ae:	e15d      	b.n	801b36c <SHELL_Process+0x41c>
                break;
 801b0b0:	bf00      	nop
 801b0b2:	e15b      	b.n	801b36c <SHELL_Process+0x41c>
                break;
 801b0b4:	bf00      	nop
 801b0b6:	e159      	b.n	801b36c <SHELL_Process+0x41c>
                break;
 801b0b8:	bf00      	nop
 801b0ba:	e157      	b.n	801b36c <SHELL_Process+0x41c>
                break;
 801b0bc:	bf00      	nop
        }
        return;
 801b0be:	e155      	b.n	801b36c <SHELL_Process+0x41c>
    }
    /* Handle tab key */
    else if (ch == '\t') {
 801b0c0:	7afb      	ldrb	r3, [r7, #11]
 801b0c2:	2b09      	cmp	r3, #9
 801b0c4:	d124      	bne.n	801b110 <SHELL_Process+0x1c0>
#if SHELL_AUTO_COMPLETE
        /* Move the cursor to the beginning of line */
        for (i = 0; i < context->c_pos; i++) {
 801b0c6:	2300      	movs	r3, #0
 801b0c8:	60fb      	str	r3, [r7, #12]
 801b0ca:	e006      	b.n	801b0da <SHELL_Process+0x18a>
            context->printf_data_func("\b");
 801b0cc:	687b      	ldr	r3, [r7, #4]
 801b0ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b0d0:	484f      	ldr	r0, [pc, #316]	; (801b210 <SHELL_Process+0x2c0>)
 801b0d2:	4798      	blx	r3
        for (i = 0; i < context->c_pos; i++) {
 801b0d4:	68fb      	ldr	r3, [r7, #12]
 801b0d6:	3301      	adds	r3, #1
 801b0d8:	60fb      	str	r3, [r7, #12]
 801b0da:	687b      	ldr	r3, [r7, #4]
 801b0dc:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801b0e0:	461a      	mov	r2, r3
 801b0e2:	68fb      	ldr	r3, [r7, #12]
 801b0e4:	4293      	cmp	r3, r2
 801b0e6:	dbf1      	blt.n	801b0cc <SHELL_Process+0x17c>
        }
        /* Do auto complete */
        AutoComplete(context);
 801b0e8:	6878      	ldr	r0, [r7, #4]
 801b0ea:	f000 fb0f 	bl	801b70c <AutoComplete>
        /* Move position to end */
        context->c_pos = context->l_pos = StrLen(context->line);
 801b0ee:	687b      	ldr	r3, [r7, #4]
 801b0f0:	3305      	adds	r3, #5
 801b0f2:	4618      	mov	r0, r3
 801b0f4:	f000 fbb7 	bl	801b866 <StrLen>
 801b0f8:	4603      	mov	r3, r0
 801b0fa:	b2da      	uxtb	r2, r3
 801b0fc:	687b      	ldr	r3, [r7, #4]
 801b0fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801b102:	687b      	ldr	r3, [r7, #4]
 801b104:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 801b108:	687b      	ldr	r3, [r7, #4]
 801b10a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
#endif
        return;
 801b10e:	e12d      	b.n	801b36c <SHELL_Process+0x41c>
    }
#if SHELL_SEARCH_IN_HIST
    /* Search command in history */
    else if ((ch == '`') && (context->l_pos == 0) && (context->line[0] == 0x00)) {
 801b110:	7afb      	ldrb	r3, [r7, #11]
 801b112:	2b60      	cmp	r3, #96	; 0x60
 801b114:	d108      	bne.n	801b128 <SHELL_Process+0x1d8>
 801b116:	687b      	ldr	r3, [r7, #4]
 801b118:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801b11c:	2b00      	cmp	r3, #0
 801b11e:	d103      	bne.n	801b128 <SHELL_Process+0x1d8>
 801b120:	687b      	ldr	r3, [r7, #4]
 801b122:	795b      	ldrb	r3, [r3, #5]
 801b124:	2b00      	cmp	r3, #0
 801b126:	d07b      	beq.n	801b220 <SHELL_Process+0x2d0>
    }
#endif
    /* Handle backspace key */
    else if ((ch == KET_DEL) || (ch == '\b')) {
 801b128:	7afb      	ldrb	r3, [r7, #11]
 801b12a:	2b7f      	cmp	r3, #127	; 0x7f
 801b12c:	d002      	beq.n	801b134 <SHELL_Process+0x1e4>
 801b12e:	7afb      	ldrb	r3, [r7, #11]
 801b130:	2b08      	cmp	r3, #8
 801b132:	d175      	bne.n	801b220 <SHELL_Process+0x2d0>
        /* There must be at last one char */
        if (context->c_pos == 0) {
 801b134:	687b      	ldr	r3, [r7, #4]
 801b136:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801b13a:	2b00      	cmp	r3, #0
 801b13c:	f000 8115 	beq.w	801b36a <SHELL_Process+0x41a>
            return;
        }

        context->l_pos--;
 801b140:	687b      	ldr	r3, [r7, #4]
 801b142:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801b146:	3b01      	subs	r3, #1
 801b148:	b2da      	uxtb	r2, r3
 801b14a:	687b      	ldr	r3, [r7, #4]
 801b14c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        context->c_pos--;
 801b150:	687b      	ldr	r3, [r7, #4]
 801b152:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801b156:	3b01      	subs	r3, #1
 801b158:	b2da      	uxtb	r2, r3
 801b15a:	687b      	ldr	r3, [r7, #4]
 801b15c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

        if (context->l_pos > context->c_pos) {
 801b160:	687b      	ldr	r3, [r7, #4]
 801b162:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 801b166:	687b      	ldr	r3, [r7, #4]
 801b168:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801b16c:	429a      	cmp	r2, r3
 801b16e:	d940      	bls.n	801b1f2 <SHELL_Process+0x2a2>
            memmove(&context->line[context->c_pos], &context->line[context->c_pos + 1],
 801b170:	687b      	ldr	r3, [r7, #4]
 801b172:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801b176:	461a      	mov	r2, r3
 801b178:	687b      	ldr	r3, [r7, #4]
 801b17a:	4413      	add	r3, r2
 801b17c:	1d58      	adds	r0, r3, #5
 801b17e:	687b      	ldr	r3, [r7, #4]
 801b180:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801b184:	3301      	adds	r3, #1
 801b186:	687a      	ldr	r2, [r7, #4]
 801b188:	4413      	add	r3, r2
 801b18a:	1d59      	adds	r1, r3, #5
                    context->l_pos - context->c_pos);
 801b18c:	687b      	ldr	r3, [r7, #4]
 801b18e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801b192:	461a      	mov	r2, r3
 801b194:	687b      	ldr	r3, [r7, #4]
 801b196:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801b19a:	1ad3      	subs	r3, r2, r3
            memmove(&context->line[context->c_pos], &context->line[context->c_pos + 1],
 801b19c:	461a      	mov	r2, r3
 801b19e:	f000 fe17 	bl	801bdd0 <memmove>
            context->line[context->l_pos] = 0;
 801b1a2:	687b      	ldr	r3, [r7, #4]
 801b1a4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801b1a8:	461a      	mov	r2, r3
 801b1aa:	687b      	ldr	r3, [r7, #4]
 801b1ac:	4413      	add	r3, r2
 801b1ae:	2200      	movs	r2, #0
 801b1b0:	715a      	strb	r2, [r3, #5]
            context->printf_data_func("\b%s  \b", &context->line[context->c_pos]);
 801b1b2:	687b      	ldr	r3, [r7, #4]
 801b1b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b1b6:	687a      	ldr	r2, [r7, #4]
 801b1b8:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
 801b1bc:	4611      	mov	r1, r2
 801b1be:	687a      	ldr	r2, [r7, #4]
 801b1c0:	440a      	add	r2, r1
 801b1c2:	3205      	adds	r2, #5
 801b1c4:	4611      	mov	r1, r2
 801b1c6:	4814      	ldr	r0, [pc, #80]	; (801b218 <SHELL_Process+0x2c8>)
 801b1c8:	4798      	blx	r3

            /* Reset position */
            for (i = context->c_pos; i <= context->l_pos; i++) {
 801b1ca:	687b      	ldr	r3, [r7, #4]
 801b1cc:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801b1d0:	60fb      	str	r3, [r7, #12]
 801b1d2:	e006      	b.n	801b1e2 <SHELL_Process+0x292>
                context->printf_data_func("\b");
 801b1d4:	687b      	ldr	r3, [r7, #4]
 801b1d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b1d8:	480d      	ldr	r0, [pc, #52]	; (801b210 <SHELL_Process+0x2c0>)
 801b1da:	4798      	blx	r3
            for (i = context->c_pos; i <= context->l_pos; i++) {
 801b1dc:	68fb      	ldr	r3, [r7, #12]
 801b1de:	3301      	adds	r3, #1
 801b1e0:	60fb      	str	r3, [r7, #12]
 801b1e2:	687b      	ldr	r3, [r7, #4]
 801b1e4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801b1e8:	461a      	mov	r2, r3
 801b1ea:	68fb      	ldr	r3, [r7, #12]
 801b1ec:	4293      	cmp	r3, r2
 801b1ee:	ddf1      	ble.n	801b1d4 <SHELL_Process+0x284>
        }  else  {
            /* Normal backspace operation */
            context->printf_data_func("\b \b");
            context->line[context->l_pos] = 0;
        }
        return;
 801b1f0:	e0bc      	b.n	801b36c <SHELL_Process+0x41c>
            context->printf_data_func("\b \b");
 801b1f2:	687b      	ldr	r3, [r7, #4]
 801b1f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b1f6:	4809      	ldr	r0, [pc, #36]	; (801b21c <SHELL_Process+0x2cc>)
 801b1f8:	4798      	blx	r3
            context->line[context->l_pos] = 0;
 801b1fa:	687b      	ldr	r3, [r7, #4]
 801b1fc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801b200:	461a      	mov	r2, r3
 801b202:	687b      	ldr	r3, [r7, #4]
 801b204:	4413      	add	r3, r2
 801b206:	2200      	movs	r2, #0
 801b208:	715a      	strb	r2, [r3, #5]
        return;
 801b20a:	e0af      	b.n	801b36c <SHELL_Process+0x41c>
 801b20c:	10000124 	.word	0x10000124
 801b210:	08022674 	.word	0x08022674
 801b214:	08022678 	.word	0x08022678
 801b218:	0802267c 	.word	0x0802267c
 801b21c:	08022684 	.word	0x08022684
    } else {
    }

    /* Input too long */
    if (context->l_pos >= (SHELL_BUFFER_SIZE - 1)) {
 801b220:	687b      	ldr	r3, [r7, #4]
 801b222:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801b226:	2b3e      	cmp	r3, #62	; 0x3e
 801b228:	d903      	bls.n	801b232 <SHELL_Process+0x2e2>
        context->l_pos = 0;
 801b22a:	687b      	ldr	r3, [r7, #4]
 801b22c:	2200      	movs	r2, #0
 801b22e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    }

    /* Handle end of line, break */
    if ((ch == '\r') || (ch == '\n')) {
 801b232:	7afb      	ldrb	r3, [r7, #11]
 801b234:	2b0d      	cmp	r3, #13
 801b236:	d002      	beq.n	801b23e <SHELL_Process+0x2ee>
 801b238:	7afb      	ldrb	r3, [r7, #11]
 801b23a:	2b0a      	cmp	r3, #10
 801b23c:	d125      	bne.n	801b28a <SHELL_Process+0x33a>
        context->printf_data_func("\r\n");
 801b23e:	687b      	ldr	r3, [r7, #4]
 801b240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b242:	484c      	ldr	r0, [pc, #304]	; (801b374 <SHELL_Process+0x424>)
 801b244:	4798      	blx	r3
        ProcessCommand(context, context->line);
 801b246:	687b      	ldr	r3, [r7, #4]
 801b248:	3305      	adds	r3, #5
 801b24a:	4619      	mov	r1, r3
 801b24c:	6878      	ldr	r0, [r7, #4]
 801b24e:	f000 f8bd 	bl	801b3cc <ProcessCommand>
        /* Reset all params */
        context->c_pos = context->l_pos = 0;
 801b252:	687b      	ldr	r3, [r7, #4]
 801b254:	2200      	movs	r2, #0
 801b256:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801b25a:	687b      	ldr	r3, [r7, #4]
 801b25c:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 801b260:	687b      	ldr	r3, [r7, #4]
 801b262:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
        context->hist_current = 0;
 801b266:	687b      	ldr	r3, [r7, #4]
 801b268:	2200      	movs	r2, #0
 801b26a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
        context->printf_data_func(context->prompt);
 801b26e:	687b      	ldr	r3, [r7, #4]
 801b270:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b272:	687a      	ldr	r2, [r7, #4]
 801b274:	6812      	ldr	r2, [r2, #0]
 801b276:	4610      	mov	r0, r2
 801b278:	4798      	blx	r3
        memset(context->line, 0, sizeof(context->line));
 801b27a:	687b      	ldr	r3, [r7, #4]
 801b27c:	3305      	adds	r3, #5
 801b27e:	2240      	movs	r2, #64	; 0x40
 801b280:	2100      	movs	r1, #0
 801b282:	4618      	mov	r0, r3
 801b284:	f000 fdbe 	bl	801be04 <memset>
        return;
 801b288:	e070      	b.n	801b36c <SHELL_Process+0x41c>
    }

    /* Normal character */
    if (context->c_pos < context->l_pos) {
 801b28a:	687b      	ldr	r3, [r7, #4]
 801b28c:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 801b290:	687b      	ldr	r3, [r7, #4]
 801b292:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801b296:	429a      	cmp	r2, r3
 801b298:	d240      	bcs.n	801b31c <SHELL_Process+0x3cc>
        memmove(&context->line[context->c_pos + 1], &context->line[context->c_pos],
 801b29a:	687b      	ldr	r3, [r7, #4]
 801b29c:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801b2a0:	3301      	adds	r3, #1
 801b2a2:	687a      	ldr	r2, [r7, #4]
 801b2a4:	4413      	add	r3, r2
 801b2a6:	1d58      	adds	r0, r3, #5
 801b2a8:	687b      	ldr	r3, [r7, #4]
 801b2aa:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801b2ae:	461a      	mov	r2, r3
 801b2b0:	687b      	ldr	r3, [r7, #4]
 801b2b2:	4413      	add	r3, r2
 801b2b4:	1d59      	adds	r1, r3, #5
                context->l_pos - context->c_pos);
 801b2b6:	687b      	ldr	r3, [r7, #4]
 801b2b8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801b2bc:	461a      	mov	r2, r3
 801b2be:	687b      	ldr	r3, [r7, #4]
 801b2c0:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801b2c4:	1ad3      	subs	r3, r2, r3
        memmove(&context->line[context->c_pos + 1], &context->line[context->c_pos],
 801b2c6:	461a      	mov	r2, r3
 801b2c8:	f000 fd82 	bl	801bdd0 <memmove>
        context->line[context->c_pos] = ch;
 801b2cc:	687b      	ldr	r3, [r7, #4]
 801b2ce:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801b2d2:	461a      	mov	r2, r3
 801b2d4:	687b      	ldr	r3, [r7, #4]
 801b2d6:	4413      	add	r3, r2
 801b2d8:	7afa      	ldrb	r2, [r7, #11]
 801b2da:	715a      	strb	r2, [r3, #5]
        context->printf_data_func("%s", &context->line[context->c_pos]);
 801b2dc:	687b      	ldr	r3, [r7, #4]
 801b2de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b2e0:	687a      	ldr	r2, [r7, #4]
 801b2e2:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
 801b2e6:	4611      	mov	r1, r2
 801b2e8:	687a      	ldr	r2, [r7, #4]
 801b2ea:	440a      	add	r2, r1
 801b2ec:	3205      	adds	r2, #5
 801b2ee:	4611      	mov	r1, r2
 801b2f0:	4821      	ldr	r0, [pc, #132]	; (801b378 <SHELL_Process+0x428>)
 801b2f2:	4798      	blx	r3
        /* Move the cursor to new position */
        for (i = context->c_pos; i < context->l_pos; i++)
 801b2f4:	687b      	ldr	r3, [r7, #4]
 801b2f6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801b2fa:	60fb      	str	r3, [r7, #12]
 801b2fc:	e006      	b.n	801b30c <SHELL_Process+0x3bc>
        {
            context->printf_data_func("\b");
 801b2fe:	687b      	ldr	r3, [r7, #4]
 801b300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b302:	481e      	ldr	r0, [pc, #120]	; (801b37c <SHELL_Process+0x42c>)
 801b304:	4798      	blx	r3
        for (i = context->c_pos; i < context->l_pos; i++)
 801b306:	68fb      	ldr	r3, [r7, #12]
 801b308:	3301      	adds	r3, #1
 801b30a:	60fb      	str	r3, [r7, #12]
 801b30c:	687b      	ldr	r3, [r7, #4]
 801b30e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801b312:	461a      	mov	r2, r3
 801b314:	68fb      	ldr	r3, [r7, #12]
 801b316:	4293      	cmp	r3, r2
 801b318:	dbf1      	blt.n	801b2fe <SHELL_Process+0x3ae>
 801b31a:	e00d      	b.n	801b338 <SHELL_Process+0x3e8>
        }
    } else {
        context->line[context->l_pos] = ch;
 801b31c:	687b      	ldr	r3, [r7, #4]
 801b31e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801b322:	461a      	mov	r2, r3
 801b324:	687b      	ldr	r3, [r7, #4]
 801b326:	4413      	add	r3, r2
 801b328:	7afa      	ldrb	r2, [r7, #11]
 801b32a:	715a      	strb	r2, [r3, #5]
        context->printf_data_func("%c", ch);
 801b32c:	687b      	ldr	r3, [r7, #4]
 801b32e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b330:	7afa      	ldrb	r2, [r7, #11]
 801b332:	4611      	mov	r1, r2
 801b334:	4812      	ldr	r0, [pc, #72]	; (801b380 <SHELL_Process+0x430>)
 801b336:	4798      	blx	r3
    }

    ch = 0;
 801b338:	2300      	movs	r3, #0
 801b33a:	72fb      	strb	r3, [r7, #11]
    context->l_pos++;
 801b33c:	687b      	ldr	r3, [r7, #4]
 801b33e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801b342:	3301      	adds	r3, #1
 801b344:	b2da      	uxtb	r2, r3
 801b346:	687b      	ldr	r3, [r7, #4]
 801b348:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    context->c_pos++;
 801b34c:	687b      	ldr	r3, [r7, #4]
 801b34e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801b352:	3301      	adds	r3, #1
 801b354:	b2da      	uxtb	r2, r3
 801b356:	687b      	ldr	r3, [r7, #4]
 801b358:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 801b35c:	e006      	b.n	801b36c <SHELL_Process+0x41c>
        return;
 801b35e:	bf00      	nop
 801b360:	e004      	b.n	801b36c <SHELL_Process+0x41c>
        return;
 801b362:	bf00      	nop
 801b364:	e002      	b.n	801b36c <SHELL_Process+0x41c>
      return;
 801b366:	bf00      	nop
 801b368:	e000      	b.n	801b36c <SHELL_Process+0x41c>
            return;
 801b36a:	bf00      	nop
}
 801b36c:	3710      	adds	r7, #16
 801b36e:	46bd      	mov	sp, r7
 801b370:	bd80      	pop	{r7, pc}
 801b372:	bf00      	nop
 801b374:	08022688 	.word	0x08022688
 801b378:	0802268c 	.word	0x0802268c
 801b37c:	08022674 	.word	0x08022674
 801b380:	08022678 	.word	0x08022678

0801b384 <HelpCommand>:

/********************** Internal Function Definitions *************************/
static int32_t HelpCommand(p_shell_context_t context, int32_t argc, char **argv)
{
 801b384:	b580      	push	{r7, lr}
 801b386:	b086      	sub	sp, #24
 801b388:	af00      	add	r7, sp, #0
 801b38a:	60f8      	str	r0, [r7, #12]
 801b38c:	60b9      	str	r1, [r7, #8]
 801b38e:	607a      	str	r2, [r7, #4]
    uint8_t i = 0;
 801b390:	2300      	movs	r3, #0
 801b392:	75fb      	strb	r3, [r7, #23]

    for (i = 0; i < g_RegisteredCommands.numberOfCommandInList; i++) {
 801b394:	2300      	movs	r3, #0
 801b396:	75fb      	strb	r3, [r7, #23]
 801b398:	e00b      	b.n	801b3b2 <HelpCommand+0x2e>
        context->printf_data_func(g_RegisteredCommands.CommandList[i]->pcHelpString);
 801b39a:	68fb      	ldr	r3, [r7, #12]
 801b39c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b39e:	7dfa      	ldrb	r2, [r7, #23]
 801b3a0:	4909      	ldr	r1, [pc, #36]	; (801b3c8 <HelpCommand+0x44>)
 801b3a2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801b3a6:	6852      	ldr	r2, [r2, #4]
 801b3a8:	4610      	mov	r0, r2
 801b3aa:	4798      	blx	r3
    for (i = 0; i < g_RegisteredCommands.numberOfCommandInList; i++) {
 801b3ac:	7dfb      	ldrb	r3, [r7, #23]
 801b3ae:	3301      	adds	r3, #1
 801b3b0:	75fb      	strb	r3, [r7, #23]
 801b3b2:	4b05      	ldr	r3, [pc, #20]	; (801b3c8 <HelpCommand+0x44>)
 801b3b4:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 801b3b8:	7dfa      	ldrb	r2, [r7, #23]
 801b3ba:	429a      	cmp	r2, r3
 801b3bc:	d3ed      	bcc.n	801b39a <HelpCommand+0x16>
    }
    return 0;
 801b3be:	2300      	movs	r3, #0
}
 801b3c0:	4618      	mov	r0, r3
 801b3c2:	3718      	adds	r7, #24
 801b3c4:	46bd      	mov	sp, r7
 801b3c6:	bd80      	pop	{r7, pc}
 801b3c8:	20001654 	.word	0x20001654

0801b3cc <ProcessCommand>:
//    context->exit = true;
//    return 0;
//}

static void ProcessCommand(p_shell_context_t context, const char *cmd)
{
 801b3cc:	b5b0      	push	{r4, r5, r7, lr}
 801b3ce:	b0c6      	sub	sp, #280	; 0x118
 801b3d0:	af00      	add	r7, sp, #0
 801b3d2:	1d3b      	adds	r3, r7, #4
 801b3d4:	6018      	str	r0, [r3, #0]
 801b3d6:	463b      	mov	r3, r7
 801b3d8:	6019      	str	r1, [r3, #0]
    static const shell_command_context_t *tmpCommand = NULL;
    static const char *tmpCommandString;
    int32_t argc;
    char *argv[SHELL_BUFFER_SIZE];
    uint8_t flag = 1;
 801b3da:	2301      	movs	r3, #1
 801b3dc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    uint8_t tmpCommandLen;
    uint8_t tmpLen;
    uint8_t i = 0;
 801b3e0:	2300      	movs	r3, #0
 801b3e2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

    tmpLen = StrLen(cmd);
 801b3e6:	463b      	mov	r3, r7
 801b3e8:	6818      	ldr	r0, [r3, #0]
 801b3ea:	f000 fa3c 	bl	801b866 <StrLen>
 801b3ee:	4603      	mov	r3, r0
 801b3f0:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
    argc = ParseLine(cmd, tmpLen, argv);
 801b3f4:	f897 1115 	ldrb.w	r1, [r7, #277]	; 0x115
 801b3f8:	f107 020c 	add.w	r2, r7, #12
 801b3fc:	463b      	mov	r3, r7
 801b3fe:	6818      	ldr	r0, [r3, #0]
 801b400:	f000 fa70 	bl	801b8e4 <ParseLine>
 801b404:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    if ((tmpCommand == NULL) && (argc > 0)) {
 801b408:	4b8b      	ldr	r3, [pc, #556]	; (801b638 <ProcessCommand+0x26c>)
 801b40a:	681b      	ldr	r3, [r3, #0]
 801b40c:	2b00      	cmp	r3, #0
 801b40e:	d168      	bne.n	801b4e2 <ProcessCommand+0x116>
 801b410:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b414:	2b00      	cmp	r3, #0
 801b416:	dd64      	ble.n	801b4e2 <ProcessCommand+0x116>
        for (i = 0; i < g_RegisteredCommands.numberOfCommandInList; i++) {
 801b418:	2300      	movs	r3, #0
 801b41a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 801b41e:	e057      	b.n	801b4d0 <ProcessCommand+0x104>
            tmpCommand = g_RegisteredCommands.CommandList[i];
 801b420:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 801b424:	4a85      	ldr	r2, [pc, #532]	; (801b63c <ProcessCommand+0x270>)
 801b426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b42a:	4a83      	ldr	r2, [pc, #524]	; (801b638 <ProcessCommand+0x26c>)
 801b42c:	6013      	str	r3, [r2, #0]
            tmpCommandString = tmpCommand->pcCommand;
 801b42e:	4b82      	ldr	r3, [pc, #520]	; (801b638 <ProcessCommand+0x26c>)
 801b430:	681b      	ldr	r3, [r3, #0]
 801b432:	681b      	ldr	r3, [r3, #0]
 801b434:	4a82      	ldr	r2, [pc, #520]	; (801b640 <ProcessCommand+0x274>)
 801b436:	6013      	str	r3, [r2, #0]
            tmpCommandLen = StrLen(tmpCommandString);
 801b438:	4b81      	ldr	r3, [pc, #516]	; (801b640 <ProcessCommand+0x274>)
 801b43a:	681b      	ldr	r3, [r3, #0]
 801b43c:	4618      	mov	r0, r3
 801b43e:	f000 fa12 	bl	801b866 <StrLen>
 801b442:	4603      	mov	r3, r0
 801b444:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
            /* Compare with space or end of string */
            if ((cmd[tmpCommandLen] == ' ') || (cmd[tmpCommandLen] == 0x00)) {
 801b448:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 801b44c:	463a      	mov	r2, r7
 801b44e:	6812      	ldr	r2, [r2, #0]
 801b450:	4413      	add	r3, r2
 801b452:	781b      	ldrb	r3, [r3, #0]
 801b454:	2b20      	cmp	r3, #32
 801b456:	d007      	beq.n	801b468 <ProcessCommand+0x9c>
 801b458:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 801b45c:	463a      	mov	r2, r7
 801b45e:	6812      	ldr	r2, [r2, #0]
 801b460:	4413      	add	r3, r2
 801b462:	781b      	ldrb	r3, [r3, #0]
 801b464:	2b00      	cmp	r3, #0
 801b466:	d12e      	bne.n	801b4c6 <ProcessCommand+0xfa>
                if (StrCompare(tmpCommandString, argv[0], tmpCommandLen) == 0) {
 801b468:	4b75      	ldr	r3, [pc, #468]	; (801b640 <ProcessCommand+0x274>)
 801b46a:	6818      	ldr	r0, [r3, #0]
 801b46c:	f107 030c 	add.w	r3, r7, #12
 801b470:	681b      	ldr	r3, [r3, #0]
 801b472:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 801b476:	4619      	mov	r1, r3
 801b478:	f000 fa0d 	bl	801b896 <StrCompare>
 801b47c:	4603      	mov	r3, r0
 801b47e:	2b00      	cmp	r3, #0
 801b480:	d121      	bne.n	801b4c6 <ProcessCommand+0xfa>
                    if ((tmpCommand->cExpectedNumberOfParameters == 0) && (argc == 1)) {
 801b482:	4b6d      	ldr	r3, [pc, #436]	; (801b638 <ProcessCommand+0x26c>)
 801b484:	681b      	ldr	r3, [r3, #0]
 801b486:	7b1b      	ldrb	r3, [r3, #12]
 801b488:	2b00      	cmp	r3, #0
 801b48a:	d107      	bne.n	801b49c <ProcessCommand+0xd0>
 801b48c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b490:	2b01      	cmp	r3, #1
 801b492:	d103      	bne.n	801b49c <ProcessCommand+0xd0>
                        flag = 0;
 801b494:	2300      	movs	r3, #0
 801b496:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
                            flag = 0;
                        }
                    } else {
                        flag = 1;
                    }
                    break;
 801b49a:	e021      	b.n	801b4e0 <ProcessCommand+0x114>
                    } else if (tmpCommand->cExpectedNumberOfParameters > 0) {
 801b49c:	4b66      	ldr	r3, [pc, #408]	; (801b638 <ProcessCommand+0x26c>)
 801b49e:	681b      	ldr	r3, [r3, #0]
 801b4a0:	7b1b      	ldrb	r3, [r3, #12]
 801b4a2:	2b00      	cmp	r3, #0
 801b4a4:	d00b      	beq.n	801b4be <ProcessCommand+0xf2>
                        if ((argc - 1) == tmpCommand->cExpectedNumberOfParameters) {
 801b4a6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b4aa:	3b01      	subs	r3, #1
 801b4ac:	4a62      	ldr	r2, [pc, #392]	; (801b638 <ProcessCommand+0x26c>)
 801b4ae:	6812      	ldr	r2, [r2, #0]
 801b4b0:	7b12      	ldrb	r2, [r2, #12]
 801b4b2:	4293      	cmp	r3, r2
 801b4b4:	d114      	bne.n	801b4e0 <ProcessCommand+0x114>
                            flag = 0;
 801b4b6:	2300      	movs	r3, #0
 801b4b8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
                    break;
 801b4bc:	e010      	b.n	801b4e0 <ProcessCommand+0x114>
                        flag = 1;
 801b4be:	2301      	movs	r3, #1
 801b4c0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
                    break;
 801b4c4:	e00c      	b.n	801b4e0 <ProcessCommand+0x114>
        for (i = 0; i < g_RegisteredCommands.numberOfCommandInList; i++) {
 801b4c6:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 801b4ca:	3301      	adds	r3, #1
 801b4cc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 801b4d0:	4b5a      	ldr	r3, [pc, #360]	; (801b63c <ProcessCommand+0x270>)
 801b4d2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 801b4d6:	f897 2116 	ldrb.w	r2, [r7, #278]	; 0x116
 801b4da:	429a      	cmp	r2, r3
 801b4dc:	d3a0      	bcc.n	801b420 <ProcessCommand+0x54>
 801b4de:	e000      	b.n	801b4e2 <ProcessCommand+0x116>
                    break;
 801b4e0:	bf00      	nop
                }
            }
        }
    }

    if ((tmpCommand != NULL) && (flag == 1U)) {
 801b4e2:	4b55      	ldr	r3, [pc, #340]	; (801b638 <ProcessCommand+0x26c>)
 801b4e4:	681b      	ldr	r3, [r3, #0]
 801b4e6:	2b00      	cmp	r3, #0
 801b4e8:	d00c      	beq.n	801b504 <ProcessCommand+0x138>
 801b4ea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801b4ee:	2b01      	cmp	r3, #1
 801b4f0:	d108      	bne.n	801b504 <ProcessCommand+0x138>
        context->printf_data_func(
 801b4f2:	1d3b      	adds	r3, r7, #4
 801b4f4:	681b      	ldr	r3, [r3, #0]
 801b4f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b4f8:	4852      	ldr	r0, [pc, #328]	; (801b644 <ProcessCommand+0x278>)
 801b4fa:	4798      	blx	r3
            "\r\nIncorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n");
        tmpCommand = NULL;
 801b4fc:	4b4e      	ldr	r3, [pc, #312]	; (801b638 <ProcessCommand+0x26c>)
 801b4fe:	2200      	movs	r2, #0
 801b500:	601a      	str	r2, [r3, #0]
    } else {
        // context->printf_data_func(
        //     "\r\nCommand not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n");
        tmpCommand = NULL;
    }
}
 801b502:	e093      	b.n	801b62c <ProcessCommand+0x260>
    } else if (tmpCommand != NULL) {
 801b504:	4b4c      	ldr	r3, [pc, #304]	; (801b638 <ProcessCommand+0x26c>)
 801b506:	681b      	ldr	r3, [r3, #0]
 801b508:	2b00      	cmp	r3, #0
 801b50a:	f000 808c 	beq.w	801b626 <ProcessCommand+0x25a>
        tmpLen = StrLen(cmd);
 801b50e:	463b      	mov	r3, r7
 801b510:	6818      	ldr	r0, [r3, #0]
 801b512:	f000 f9a8 	bl	801b866 <StrLen>
 801b516:	4603      	mov	r3, r0
 801b518:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
        if (tmpLen != StrCompare(cmd, context->hist_buf[0], StrLen(cmd))) {
 801b51c:	f897 4115 	ldrb.w	r4, [r7, #277]	; 0x115
 801b520:	1d3b      	adds	r3, r7, #4
 801b522:	681b      	ldr	r3, [r3, #0]
 801b524:	f103 0558 	add.w	r5, r3, #88	; 0x58
 801b528:	463b      	mov	r3, r7
 801b52a:	6818      	ldr	r0, [r3, #0]
 801b52c:	f000 f99b 	bl	801b866 <StrLen>
 801b530:	4602      	mov	r2, r0
 801b532:	463b      	mov	r3, r7
 801b534:	4629      	mov	r1, r5
 801b536:	6818      	ldr	r0, [r3, #0]
 801b538:	f000 f9ad 	bl	801b896 <StrCompare>
 801b53c:	4603      	mov	r3, r0
 801b53e:	429c      	cmp	r4, r3
 801b540:	d063      	beq.n	801b60a <ProcessCommand+0x23e>
            for (i = SHELL_HIST_MAX - 1; i > 0; i--) {
 801b542:	2302      	movs	r3, #2
 801b544:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 801b548:	e032      	b.n	801b5b0 <ProcessCommand+0x1e4>
                memset(context->hist_buf[i], '\0', SHELL_BUFFER_SIZE);
 801b54a:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 801b54e:	1d3a      	adds	r2, r7, #4
 801b550:	019b      	lsls	r3, r3, #6
 801b552:	3358      	adds	r3, #88	; 0x58
 801b554:	6812      	ldr	r2, [r2, #0]
 801b556:	4413      	add	r3, r2
 801b558:	2240      	movs	r2, #64	; 0x40
 801b55a:	2100      	movs	r1, #0
 801b55c:	4618      	mov	r0, r3
 801b55e:	f000 fc51 	bl	801be04 <memset>
                tmpLen = StrLen(context->hist_buf[i - 1]);
 801b562:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 801b566:	3b01      	subs	r3, #1
 801b568:	1d3a      	adds	r2, r7, #4
 801b56a:	019b      	lsls	r3, r3, #6
 801b56c:	3358      	adds	r3, #88	; 0x58
 801b56e:	6812      	ldr	r2, [r2, #0]
 801b570:	4413      	add	r3, r2
 801b572:	4618      	mov	r0, r3
 801b574:	f000 f977 	bl	801b866 <StrLen>
 801b578:	4603      	mov	r3, r0
 801b57a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
                StrCopy(context->hist_buf[i], context->hist_buf[i - 1], tmpLen);
 801b57e:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 801b582:	1d3a      	adds	r2, r7, #4
 801b584:	019b      	lsls	r3, r3, #6
 801b586:	3358      	adds	r3, #88	; 0x58
 801b588:	6812      	ldr	r2, [r2, #0]
 801b58a:	18d0      	adds	r0, r2, r3
 801b58c:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 801b590:	3b01      	subs	r3, #1
 801b592:	1d3a      	adds	r2, r7, #4
 801b594:	019b      	lsls	r3, r3, #6
 801b596:	3358      	adds	r3, #88	; 0x58
 801b598:	6812      	ldr	r2, [r2, #0]
 801b59a:	4413      	add	r3, r2
 801b59c:	f897 2115 	ldrb.w	r2, [r7, #277]	; 0x115
 801b5a0:	4619      	mov	r1, r3
 801b5a2:	f000 f93d 	bl	801b820 <StrCopy>
            for (i = SHELL_HIST_MAX - 1; i > 0; i--) {
 801b5a6:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 801b5aa:	3b01      	subs	r3, #1
 801b5ac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 801b5b0:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 801b5b4:	2b00      	cmp	r3, #0
 801b5b6:	d1c8      	bne.n	801b54a <ProcessCommand+0x17e>
            memset(context->hist_buf[0], '\0', SHELL_BUFFER_SIZE);
 801b5b8:	1d3b      	adds	r3, r7, #4
 801b5ba:	681b      	ldr	r3, [r3, #0]
 801b5bc:	3358      	adds	r3, #88	; 0x58
 801b5be:	2240      	movs	r2, #64	; 0x40
 801b5c0:	2100      	movs	r1, #0
 801b5c2:	4618      	mov	r0, r3
 801b5c4:	f000 fc1e 	bl	801be04 <memset>
            tmpLen = StrLen(cmd);
 801b5c8:	463b      	mov	r3, r7
 801b5ca:	6818      	ldr	r0, [r3, #0]
 801b5cc:	f000 f94b 	bl	801b866 <StrLen>
 801b5d0:	4603      	mov	r3, r0
 801b5d2:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
            StrCopy(context->hist_buf[0], cmd, tmpLen);
 801b5d6:	1d3b      	adds	r3, r7, #4
 801b5d8:	681b      	ldr	r3, [r3, #0]
 801b5da:	f103 0058 	add.w	r0, r3, #88	; 0x58
 801b5de:	f897 2115 	ldrb.w	r2, [r7, #277]	; 0x115
 801b5e2:	463b      	mov	r3, r7
 801b5e4:	6819      	ldr	r1, [r3, #0]
 801b5e6:	f000 f91b 	bl	801b820 <StrCopy>
            if (context->hist_count < SHELL_HIST_MAX) {
 801b5ea:	1d3b      	adds	r3, r7, #4
 801b5ec:	681b      	ldr	r3, [r3, #0]
 801b5ee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801b5f2:	2b02      	cmp	r3, #2
 801b5f4:	d809      	bhi.n	801b60a <ProcessCommand+0x23e>
                context->hist_count++;
 801b5f6:	1d3b      	adds	r3, r7, #4
 801b5f8:	681b      	ldr	r3, [r3, #0]
 801b5fa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801b5fe:	3301      	adds	r3, #1
 801b600:	b29a      	uxth	r2, r3
 801b602:	1d3b      	adds	r3, r7, #4
 801b604:	681b      	ldr	r3, [r3, #0]
 801b606:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
        tmpCommand->pFuncCallBack(context, argc, argv);
 801b60a:	4b0b      	ldr	r3, [pc, #44]	; (801b638 <ProcessCommand+0x26c>)
 801b60c:	681b      	ldr	r3, [r3, #0]
 801b60e:	689b      	ldr	r3, [r3, #8]
 801b610:	f107 020c 	add.w	r2, r7, #12
 801b614:	1d38      	adds	r0, r7, #4
 801b616:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 801b61a:	6800      	ldr	r0, [r0, #0]
 801b61c:	4798      	blx	r3
        tmpCommand = NULL;
 801b61e:	4b06      	ldr	r3, [pc, #24]	; (801b638 <ProcessCommand+0x26c>)
 801b620:	2200      	movs	r2, #0
 801b622:	601a      	str	r2, [r3, #0]
}
 801b624:	e002      	b.n	801b62c <ProcessCommand+0x260>
        tmpCommand = NULL;
 801b626:	4b04      	ldr	r3, [pc, #16]	; (801b638 <ProcessCommand+0x26c>)
 801b628:	2200      	movs	r2, #0
 801b62a:	601a      	str	r2, [r3, #0]
}
 801b62c:	bf00      	nop
 801b62e:	f507 778c 	add.w	r7, r7, #280	; 0x118
 801b632:	46bd      	mov	sp, r7
 801b634:	bdb0      	pop	{r4, r5, r7, pc}
 801b636:	bf00      	nop
 801b638:	20001738 	.word	0x20001738
 801b63c:	20001654 	.word	0x20001654
 801b640:	2000173c 	.word	0x2000173c
 801b644:	08022690 	.word	0x08022690

0801b648 <GetHistoryCommand>:

static void GetHistoryCommand(p_shell_context_t context, uint8_t hist_pos)
{
 801b648:	b580      	push	{r7, lr}
 801b64a:	b084      	sub	sp, #16
 801b64c:	af00      	add	r7, sp, #0
 801b64e:	6078      	str	r0, [r7, #4]
 801b650:	460b      	mov	r3, r1
 801b652:	70fb      	strb	r3, [r7, #3]
    uint8_t i;
    uint32_t tmp;

    if (context->hist_buf[0][0] == '\0') {
 801b654:	687b      	ldr	r3, [r7, #4]
 801b656:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801b65a:	2b00      	cmp	r3, #0
 801b65c:	d104      	bne.n	801b668 <GetHistoryCommand+0x20>
        context->hist_current = 0;
 801b65e:	687b      	ldr	r3, [r7, #4]
 801b660:	2200      	movs	r2, #0
 801b662:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
        return;
 801b666:	e04c      	b.n	801b702 <GetHistoryCommand+0xba>
    }

    if (hist_pos > SHELL_HIST_MAX) {
 801b668:	78fb      	ldrb	r3, [r7, #3]
 801b66a:	2b03      	cmp	r3, #3
 801b66c:	d901      	bls.n	801b672 <GetHistoryCommand+0x2a>
        hist_pos = SHELL_HIST_MAX - 1;
 801b66e:	2302      	movs	r3, #2
 801b670:	70fb      	strb	r3, [r7, #3]
    }
    tmp = StrLen(context->line);
 801b672:	687b      	ldr	r3, [r7, #4]
 801b674:	3305      	adds	r3, #5
 801b676:	4618      	mov	r0, r3
 801b678:	f000 f8f5 	bl	801b866 <StrLen>
 801b67c:	4603      	mov	r3, r0
 801b67e:	60bb      	str	r3, [r7, #8]
    /* Clear current if have */
    if (tmp > 0) {
 801b680:	68bb      	ldr	r3, [r7, #8]
 801b682:	2b00      	cmp	r3, #0
 801b684:	d014      	beq.n	801b6b0 <GetHistoryCommand+0x68>
        memset(context->line, '\0', tmp);
 801b686:	687b      	ldr	r3, [r7, #4]
 801b688:	3305      	adds	r3, #5
 801b68a:	68ba      	ldr	r2, [r7, #8]
 801b68c:	2100      	movs	r1, #0
 801b68e:	4618      	mov	r0, r3
 801b690:	f000 fbb8 	bl	801be04 <memset>
        for (i = 0; i < tmp; i++) {
 801b694:	2300      	movs	r3, #0
 801b696:	73fb      	strb	r3, [r7, #15]
 801b698:	e006      	b.n	801b6a8 <GetHistoryCommand+0x60>
            context->printf_data_func("\b \b");
 801b69a:	687b      	ldr	r3, [r7, #4]
 801b69c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b69e:	481a      	ldr	r0, [pc, #104]	; (801b708 <GetHistoryCommand+0xc0>)
 801b6a0:	4798      	blx	r3
        for (i = 0; i < tmp; i++) {
 801b6a2:	7bfb      	ldrb	r3, [r7, #15]
 801b6a4:	3301      	adds	r3, #1
 801b6a6:	73fb      	strb	r3, [r7, #15]
 801b6a8:	7bfb      	ldrb	r3, [r7, #15]
 801b6aa:	68ba      	ldr	r2, [r7, #8]
 801b6ac:	429a      	cmp	r2, r3
 801b6ae:	d8f4      	bhi.n	801b69a <GetHistoryCommand+0x52>
        }
    }

    context->l_pos = StrLen(context->hist_buf[hist_pos]);
 801b6b0:	78fb      	ldrb	r3, [r7, #3]
 801b6b2:	019b      	lsls	r3, r3, #6
 801b6b4:	3358      	adds	r3, #88	; 0x58
 801b6b6:	687a      	ldr	r2, [r7, #4]
 801b6b8:	4413      	add	r3, r2
 801b6ba:	4618      	mov	r0, r3
 801b6bc:	f000 f8d3 	bl	801b866 <StrLen>
 801b6c0:	4603      	mov	r3, r0
 801b6c2:	b2da      	uxtb	r2, r3
 801b6c4:	687b      	ldr	r3, [r7, #4]
 801b6c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    context->c_pos = context->l_pos;
 801b6ca:	687b      	ldr	r3, [r7, #4]
 801b6cc:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 801b6d0:	687b      	ldr	r3, [r7, #4]
 801b6d2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    StrCopy(context->line, context->hist_buf[hist_pos], context->l_pos);
 801b6d6:	687b      	ldr	r3, [r7, #4]
 801b6d8:	1d58      	adds	r0, r3, #5
 801b6da:	78fb      	ldrb	r3, [r7, #3]
 801b6dc:	019b      	lsls	r3, r3, #6
 801b6de:	3358      	adds	r3, #88	; 0x58
 801b6e0:	687a      	ldr	r2, [r7, #4]
 801b6e2:	18d1      	adds	r1, r2, r3
 801b6e4:	687b      	ldr	r3, [r7, #4]
 801b6e6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801b6ea:	461a      	mov	r2, r3
 801b6ec:	f000 f898 	bl	801b820 <StrCopy>
    context->printf_data_func(context->hist_buf[hist_pos]);
 801b6f0:	687b      	ldr	r3, [r7, #4]
 801b6f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b6f4:	78fa      	ldrb	r2, [r7, #3]
 801b6f6:	0192      	lsls	r2, r2, #6
 801b6f8:	3258      	adds	r2, #88	; 0x58
 801b6fa:	6879      	ldr	r1, [r7, #4]
 801b6fc:	440a      	add	r2, r1
 801b6fe:	4610      	mov	r0, r2
 801b700:	4798      	blx	r3
}
 801b702:	3710      	adds	r7, #16
 801b704:	46bd      	mov	sp, r7
 801b706:	bd80      	pop	{r7, pc}
 801b708:	08022684 	.word	0x08022684

0801b70c <AutoComplete>:

static void AutoComplete(p_shell_context_t context)
{
 801b70c:	b590      	push	{r4, r7, lr}
 801b70e:	b089      	sub	sp, #36	; 0x24
 801b710:	af00      	add	r7, sp, #0
 801b712:	6078      	str	r0, [r7, #4]
    int32_t len;
    int32_t minLen;
    uint8_t i = 0;
 801b714:	2300      	movs	r3, #0
 801b716:	75fb      	strb	r3, [r7, #23]
    const shell_command_context_t *tmpCommand = NULL;
 801b718:	2300      	movs	r3, #0
 801b71a:	60fb      	str	r3, [r7, #12]
    const char *namePtr;
    const char *cmdName;

    minLen = 0;
 801b71c:	2300      	movs	r3, #0
 801b71e:	61bb      	str	r3, [r7, #24]
    namePtr = NULL;
 801b720:	2300      	movs	r3, #0
 801b722:	613b      	str	r3, [r7, #16]

    if (!StrLen(context->line)) {
 801b724:	687b      	ldr	r3, [r7, #4]
 801b726:	3305      	adds	r3, #5
 801b728:	4618      	mov	r0, r3
 801b72a:	f000 f89c 	bl	801b866 <StrLen>
 801b72e:	4603      	mov	r3, r0
 801b730:	2b00      	cmp	r3, #0
 801b732:	d069      	beq.n	801b808 <AutoComplete+0xfc>
        return;
    }
    context->printf_data_func("\r\n");
 801b734:	687b      	ldr	r3, [r7, #4]
 801b736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b738:	4835      	ldr	r0, [pc, #212]	; (801b810 <AutoComplete+0x104>)
 801b73a:	4798      	blx	r3
    /* Empty tab, list all commands */
    if (context->line[0] == '\0') {
 801b73c:	687b      	ldr	r3, [r7, #4]
 801b73e:	795b      	ldrb	r3, [r3, #5]
 801b740:	2b00      	cmp	r3, #0
 801b742:	d105      	bne.n	801b750 <AutoComplete+0x44>
        HelpCommand(context, 0, NULL);
 801b744:	2200      	movs	r2, #0
 801b746:	2100      	movs	r1, #0
 801b748:	6878      	ldr	r0, [r7, #4]
 801b74a:	f7ff fe1b 	bl	801b384 <HelpCommand>
        return;
 801b74e:	e05c      	b.n	801b80a <AutoComplete+0xfe>
    }
    /* Do auto complete */
    for (i = 0; i < g_RegisteredCommands.numberOfCommandInList; i++) {
 801b750:	2300      	movs	r3, #0
 801b752:	75fb      	strb	r3, [r7, #23]
 801b754:	e03f      	b.n	801b7d6 <AutoComplete+0xca>
        tmpCommand = g_RegisteredCommands.CommandList[i];
 801b756:	7dfb      	ldrb	r3, [r7, #23]
 801b758:	4a2e      	ldr	r2, [pc, #184]	; (801b814 <AutoComplete+0x108>)
 801b75a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b75e:	60fb      	str	r3, [r7, #12]
        cmdName = tmpCommand->pcCommand;
 801b760:	68fb      	ldr	r3, [r7, #12]
 801b762:	681b      	ldr	r3, [r3, #0]
 801b764:	60bb      	str	r3, [r7, #8]
        if (StrCompare(context->line, cmdName, StrLen(context->line)) == 0) {
 801b766:	687b      	ldr	r3, [r7, #4]
 801b768:	1d5c      	adds	r4, r3, #5
 801b76a:	687b      	ldr	r3, [r7, #4]
 801b76c:	3305      	adds	r3, #5
 801b76e:	4618      	mov	r0, r3
 801b770:	f000 f879 	bl	801b866 <StrLen>
 801b774:	4603      	mov	r3, r0
 801b776:	461a      	mov	r2, r3
 801b778:	68b9      	ldr	r1, [r7, #8]
 801b77a:	4620      	mov	r0, r4
 801b77c:	f000 f88b 	bl	801b896 <StrCompare>
 801b780:	4603      	mov	r3, r0
 801b782:	2b00      	cmp	r3, #0
 801b784:	d124      	bne.n	801b7d0 <AutoComplete+0xc4>
            if (minLen == 0) {
 801b786:	69bb      	ldr	r3, [r7, #24]
 801b788:	2b00      	cmp	r3, #0
 801b78a:	d10b      	bne.n	801b7a4 <AutoComplete+0x98>
                namePtr = cmdName;
 801b78c:	68bb      	ldr	r3, [r7, #8]
 801b78e:	613b      	str	r3, [r7, #16]
                minLen = StrLen(namePtr);
 801b790:	6938      	ldr	r0, [r7, #16]
 801b792:	f000 f868 	bl	801b866 <StrLen>
 801b796:	61b8      	str	r0, [r7, #24]
                /* Show possible matches */
                context->printf_data_func("%s\r\n", cmdName);
 801b798:	687b      	ldr	r3, [r7, #4]
 801b79a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b79c:	68b9      	ldr	r1, [r7, #8]
 801b79e:	481e      	ldr	r0, [pc, #120]	; (801b818 <AutoComplete+0x10c>)
 801b7a0:	4798      	blx	r3
                continue;
 801b7a2:	e015      	b.n	801b7d0 <AutoComplete+0xc4>
            }
            len = StrCompare(namePtr, cmdName, StrLen(namePtr));
 801b7a4:	6938      	ldr	r0, [r7, #16]
 801b7a6:	f000 f85e 	bl	801b866 <StrLen>
 801b7aa:	4603      	mov	r3, r0
 801b7ac:	461a      	mov	r2, r3
 801b7ae:	68b9      	ldr	r1, [r7, #8]
 801b7b0:	6938      	ldr	r0, [r7, #16]
 801b7b2:	f000 f870 	bl	801b896 <StrCompare>
 801b7b6:	61f8      	str	r0, [r7, #28]
            if (len < 0) {
 801b7b8:	69fb      	ldr	r3, [r7, #28]
 801b7ba:	2b00      	cmp	r3, #0
 801b7bc:	da02      	bge.n	801b7c4 <AutoComplete+0xb8>
                len = len * (-1);
 801b7be:	69fb      	ldr	r3, [r7, #28]
 801b7c0:	425b      	negs	r3, r3
 801b7c2:	61fb      	str	r3, [r7, #28]
            }
            if (len < minLen) {
 801b7c4:	69fa      	ldr	r2, [r7, #28]
 801b7c6:	69bb      	ldr	r3, [r7, #24]
 801b7c8:	429a      	cmp	r2, r3
 801b7ca:	da01      	bge.n	801b7d0 <AutoComplete+0xc4>
                minLen = len;
 801b7cc:	69fb      	ldr	r3, [r7, #28]
 801b7ce:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < g_RegisteredCommands.numberOfCommandInList; i++) {
 801b7d0:	7dfb      	ldrb	r3, [r7, #23]
 801b7d2:	3301      	adds	r3, #1
 801b7d4:	75fb      	strb	r3, [r7, #23]
 801b7d6:	4b0f      	ldr	r3, [pc, #60]	; (801b814 <AutoComplete+0x108>)
 801b7d8:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 801b7dc:	7dfa      	ldrb	r2, [r7, #23]
 801b7de:	429a      	cmp	r2, r3
 801b7e0:	d3b9      	bcc.n	801b756 <AutoComplete+0x4a>
            }
        }
    }
    /* Auto complete string */
    if (namePtr) {
 801b7e2:	693b      	ldr	r3, [r7, #16]
 801b7e4:	2b00      	cmp	r3, #0
 801b7e6:	d006      	beq.n	801b7f6 <AutoComplete+0xea>
        StrCopy(context->line, namePtr, minLen);
 801b7e8:	687b      	ldr	r3, [r7, #4]
 801b7ea:	3305      	adds	r3, #5
 801b7ec:	69ba      	ldr	r2, [r7, #24]
 801b7ee:	6939      	ldr	r1, [r7, #16]
 801b7f0:	4618      	mov	r0, r3
 801b7f2:	f000 f815 	bl	801b820 <StrCopy>
    }
    context->printf_data_func("%s%s", context->prompt, context->line);
 801b7f6:	687b      	ldr	r3, [r7, #4]
 801b7f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b7fa:	687a      	ldr	r2, [r7, #4]
 801b7fc:	6811      	ldr	r1, [r2, #0]
 801b7fe:	687a      	ldr	r2, [r7, #4]
 801b800:	3205      	adds	r2, #5
 801b802:	4806      	ldr	r0, [pc, #24]	; (801b81c <AutoComplete+0x110>)
 801b804:	4798      	blx	r3
    return;
 801b806:	e000      	b.n	801b80a <AutoComplete+0xfe>
        return;
 801b808:	bf00      	nop
}
 801b80a:	3724      	adds	r7, #36	; 0x24
 801b80c:	46bd      	mov	sp, r7
 801b80e:	bd90      	pop	{r4, r7, pc}
 801b810:	08022688 	.word	0x08022688
 801b814:	20001654 	.word	0x20001654
 801b818:	080226ec 	.word	0x080226ec
 801b81c:	080226f4 	.word	0x080226f4

0801b820 <StrCopy>:

static char *StrCopy(char *dest, const char *src, int32_t count)
{
 801b820:	b480      	push	{r7}
 801b822:	b087      	sub	sp, #28
 801b824:	af00      	add	r7, sp, #0
 801b826:	60f8      	str	r0, [r7, #12]
 801b828:	60b9      	str	r1, [r7, #8]
 801b82a:	607a      	str	r2, [r7, #4]
    char *ret = dest;
 801b82c:	68fb      	ldr	r3, [r7, #12]
 801b82e:	613b      	str	r3, [r7, #16]
    int32_t i = 0;
 801b830:	2300      	movs	r3, #0
 801b832:	617b      	str	r3, [r7, #20]

    for (i = 0; i < count; i++) {
 801b834:	2300      	movs	r3, #0
 801b836:	617b      	str	r3, [r7, #20]
 801b838:	e00a      	b.n	801b850 <StrCopy+0x30>
        dest[i] = src[i];
 801b83a:	697b      	ldr	r3, [r7, #20]
 801b83c:	68ba      	ldr	r2, [r7, #8]
 801b83e:	441a      	add	r2, r3
 801b840:	697b      	ldr	r3, [r7, #20]
 801b842:	68f9      	ldr	r1, [r7, #12]
 801b844:	440b      	add	r3, r1
 801b846:	7812      	ldrb	r2, [r2, #0]
 801b848:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < count; i++) {
 801b84a:	697b      	ldr	r3, [r7, #20]
 801b84c:	3301      	adds	r3, #1
 801b84e:	617b      	str	r3, [r7, #20]
 801b850:	697a      	ldr	r2, [r7, #20]
 801b852:	687b      	ldr	r3, [r7, #4]
 801b854:	429a      	cmp	r2, r3
 801b856:	dbf0      	blt.n	801b83a <StrCopy+0x1a>
    }

    return ret;
 801b858:	693b      	ldr	r3, [r7, #16]
}
 801b85a:	4618      	mov	r0, r3
 801b85c:	371c      	adds	r7, #28
 801b85e:	46bd      	mov	sp, r7
 801b860:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b864:	4770      	bx	lr

0801b866 <StrLen>:

static int32_t StrLen(const char *str)
{
 801b866:	b480      	push	{r7}
 801b868:	b085      	sub	sp, #20
 801b86a:	af00      	add	r7, sp, #0
 801b86c:	6078      	str	r0, [r7, #4]
    int32_t i = 0;
 801b86e:	2300      	movs	r3, #0
 801b870:	60fb      	str	r3, [r7, #12]

    while (*str) {
 801b872:	e005      	b.n	801b880 <StrLen+0x1a>
        str++;
 801b874:	687b      	ldr	r3, [r7, #4]
 801b876:	3301      	adds	r3, #1
 801b878:	607b      	str	r3, [r7, #4]
        i++;
 801b87a:	68fb      	ldr	r3, [r7, #12]
 801b87c:	3301      	adds	r3, #1
 801b87e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 801b880:	687b      	ldr	r3, [r7, #4]
 801b882:	781b      	ldrb	r3, [r3, #0]
 801b884:	2b00      	cmp	r3, #0
 801b886:	d1f5      	bne.n	801b874 <StrLen+0xe>
    }
    return i;
 801b888:	68fb      	ldr	r3, [r7, #12]
}
 801b88a:	4618      	mov	r0, r3
 801b88c:	3714      	adds	r7, #20
 801b88e:	46bd      	mov	sp, r7
 801b890:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b894:	4770      	bx	lr

0801b896 <StrCompare>:

static int32_t StrCompare(const char *str1, const char *str2, int32_t count)
{
 801b896:	b480      	push	{r7}
 801b898:	b085      	sub	sp, #20
 801b89a:	af00      	add	r7, sp, #0
 801b89c:	60f8      	str	r0, [r7, #12]
 801b89e:	60b9      	str	r1, [r7, #8]
 801b8a0:	607a      	str	r2, [r7, #4]
    while (count--) {
 801b8a2:	e012      	b.n	801b8ca <StrCompare+0x34>
        if (*str1++ != *str2++) {
 801b8a4:	68fb      	ldr	r3, [r7, #12]
 801b8a6:	1c5a      	adds	r2, r3, #1
 801b8a8:	60fa      	str	r2, [r7, #12]
 801b8aa:	781a      	ldrb	r2, [r3, #0]
 801b8ac:	68bb      	ldr	r3, [r7, #8]
 801b8ae:	1c59      	adds	r1, r3, #1
 801b8b0:	60b9      	str	r1, [r7, #8]
 801b8b2:	781b      	ldrb	r3, [r3, #0]
 801b8b4:	429a      	cmp	r2, r3
 801b8b6:	d008      	beq.n	801b8ca <StrCompare+0x34>
            return *(unsigned char *)(str1 - 1) - *(unsigned char *)(str2 - 1);
 801b8b8:	68fb      	ldr	r3, [r7, #12]
 801b8ba:	3b01      	subs	r3, #1
 801b8bc:	781b      	ldrb	r3, [r3, #0]
 801b8be:	461a      	mov	r2, r3
 801b8c0:	68bb      	ldr	r3, [r7, #8]
 801b8c2:	3b01      	subs	r3, #1
 801b8c4:	781b      	ldrb	r3, [r3, #0]
 801b8c6:	1ad3      	subs	r3, r2, r3
 801b8c8:	e005      	b.n	801b8d6 <StrCompare+0x40>
    while (count--) {
 801b8ca:	687b      	ldr	r3, [r7, #4]
 801b8cc:	1e5a      	subs	r2, r3, #1
 801b8ce:	607a      	str	r2, [r7, #4]
 801b8d0:	2b00      	cmp	r3, #0
 801b8d2:	d1e7      	bne.n	801b8a4 <StrCompare+0xe>
        }
    }
    return 0;
 801b8d4:	2300      	movs	r3, #0
}
 801b8d6:	4618      	mov	r0, r3
 801b8d8:	3714      	adds	r7, #20
 801b8da:	46bd      	mov	sp, r7
 801b8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8e0:	4770      	bx	lr
	...

0801b8e4 <ParseLine>:

static int32_t ParseLine(const char *cmd, uint32_t len, char *argv[SHELL_MAX_ARGS])
{
 801b8e4:	b580      	push	{r7, lr}
 801b8e6:	b088      	sub	sp, #32
 801b8e8:	af00      	add	r7, sp, #0
 801b8ea:	60f8      	str	r0, [r7, #12]
 801b8ec:	60b9      	str	r1, [r7, #8]
 801b8ee:	607a      	str	r2, [r7, #4]
    uint32_t argc;
    char *p;
    uint32_t position;

    /* Init params */
    memset(g_paramBuffer, '\0', len + 1);
 801b8f0:	68bb      	ldr	r3, [r7, #8]
 801b8f2:	3301      	adds	r3, #1
 801b8f4:	461a      	mov	r2, r3
 801b8f6:	2100      	movs	r1, #0
 801b8f8:	4838      	ldr	r0, [pc, #224]	; (801b9dc <ParseLine+0xf8>)
 801b8fa:	f000 fa83 	bl	801be04 <memset>
    StrCopy(g_paramBuffer, cmd, len);
 801b8fe:	68bb      	ldr	r3, [r7, #8]
 801b900:	461a      	mov	r2, r3
 801b902:	68f9      	ldr	r1, [r7, #12]
 801b904:	4835      	ldr	r0, [pc, #212]	; (801b9dc <ParseLine+0xf8>)
 801b906:	f7ff ff8b 	bl	801b820 <StrCopy>

    p = g_paramBuffer;
 801b90a:	4b34      	ldr	r3, [pc, #208]	; (801b9dc <ParseLine+0xf8>)
 801b90c:	61bb      	str	r3, [r7, #24]
    position = 0;
 801b90e:	2300      	movs	r3, #0
 801b910:	617b      	str	r3, [r7, #20]
    argc = 0;
 801b912:	2300      	movs	r3, #0
 801b914:	61fb      	str	r3, [r7, #28]

    while (position < len) {
 801b916:	e058      	b.n	801b9ca <ParseLine+0xe6>
        /* Skip all blanks */
        while (((char)(*p) == ' ') && (position < len)) {
            *p = '\0';
 801b918:	69bb      	ldr	r3, [r7, #24]
 801b91a:	2200      	movs	r2, #0
 801b91c:	701a      	strb	r2, [r3, #0]
            p++;
 801b91e:	69bb      	ldr	r3, [r7, #24]
 801b920:	3301      	adds	r3, #1
 801b922:	61bb      	str	r3, [r7, #24]
            position++;
 801b924:	697b      	ldr	r3, [r7, #20]
 801b926:	3301      	adds	r3, #1
 801b928:	617b      	str	r3, [r7, #20]
        while (((char)(*p) == ' ') && (position < len)) {
 801b92a:	69bb      	ldr	r3, [r7, #24]
 801b92c:	781b      	ldrb	r3, [r3, #0]
 801b92e:	2b20      	cmp	r3, #32
 801b930:	d103      	bne.n	801b93a <ParseLine+0x56>
 801b932:	697a      	ldr	r2, [r7, #20]
 801b934:	68bb      	ldr	r3, [r7, #8]
 801b936:	429a      	cmp	r2, r3
 801b938:	d3ee      	bcc.n	801b918 <ParseLine+0x34>
        }
        /* Process begin of a string */
        if (*p == '"') {
 801b93a:	69bb      	ldr	r3, [r7, #24]
 801b93c:	781b      	ldrb	r3, [r3, #0]
 801b93e:	2b22      	cmp	r3, #34	; 0x22
 801b940:	d127      	bne.n	801b992 <ParseLine+0xae>
            p++;
 801b942:	69bb      	ldr	r3, [r7, #24]
 801b944:	3301      	adds	r3, #1
 801b946:	61bb      	str	r3, [r7, #24]
            position++;
 801b948:	697b      	ldr	r3, [r7, #20]
 801b94a:	3301      	adds	r3, #1
 801b94c:	617b      	str	r3, [r7, #20]
            argv[argc] = p;
 801b94e:	69fb      	ldr	r3, [r7, #28]
 801b950:	009b      	lsls	r3, r3, #2
 801b952:	687a      	ldr	r2, [r7, #4]
 801b954:	4413      	add	r3, r2
 801b956:	69ba      	ldr	r2, [r7, #24]
 801b958:	601a      	str	r2, [r3, #0]
            argc++;
 801b95a:	69fb      	ldr	r3, [r7, #28]
 801b95c:	3301      	adds	r3, #1
 801b95e:	61fb      	str	r3, [r7, #28]
            /* Skip this string */
            while ((*p != '"') && (position < len)) {
 801b960:	e005      	b.n	801b96e <ParseLine+0x8a>
                p++;
 801b962:	69bb      	ldr	r3, [r7, #24]
 801b964:	3301      	adds	r3, #1
 801b966:	61bb      	str	r3, [r7, #24]
                position++;
 801b968:	697b      	ldr	r3, [r7, #20]
 801b96a:	3301      	adds	r3, #1
 801b96c:	617b      	str	r3, [r7, #20]
            while ((*p != '"') && (position < len)) {
 801b96e:	69bb      	ldr	r3, [r7, #24]
 801b970:	781b      	ldrb	r3, [r3, #0]
 801b972:	2b22      	cmp	r3, #34	; 0x22
 801b974:	d003      	beq.n	801b97e <ParseLine+0x9a>
 801b976:	697a      	ldr	r2, [r7, #20]
 801b978:	68bb      	ldr	r3, [r7, #8]
 801b97a:	429a      	cmp	r2, r3
 801b97c:	d3f1      	bcc.n	801b962 <ParseLine+0x7e>
            }
            /* Skip '"' */
            *p = '\0';
 801b97e:	69bb      	ldr	r3, [r7, #24]
 801b980:	2200      	movs	r2, #0
 801b982:	701a      	strb	r2, [r3, #0]
            p++;
 801b984:	69bb      	ldr	r3, [r7, #24]
 801b986:	3301      	adds	r3, #1
 801b988:	61bb      	str	r3, [r7, #24]
            position++;
 801b98a:	697b      	ldr	r3, [r7, #20]
 801b98c:	3301      	adds	r3, #1
 801b98e:	617b      	str	r3, [r7, #20]
 801b990:	e01b      	b.n	801b9ca <ParseLine+0xe6>
        } else /* Normal char */ {
            argv[argc] = p;
 801b992:	69fb      	ldr	r3, [r7, #28]
 801b994:	009b      	lsls	r3, r3, #2
 801b996:	687a      	ldr	r2, [r7, #4]
 801b998:	4413      	add	r3, r2
 801b99a:	69ba      	ldr	r2, [r7, #24]
 801b99c:	601a      	str	r2, [r3, #0]
            argc++;
 801b99e:	69fb      	ldr	r3, [r7, #28]
 801b9a0:	3301      	adds	r3, #1
 801b9a2:	61fb      	str	r3, [r7, #28]
            while (((char)*p != ' ') && ((char)*p != '\t') && (position < len)) {
 801b9a4:	e005      	b.n	801b9b2 <ParseLine+0xce>
                p++;
 801b9a6:	69bb      	ldr	r3, [r7, #24]
 801b9a8:	3301      	adds	r3, #1
 801b9aa:	61bb      	str	r3, [r7, #24]
                position++;
 801b9ac:	697b      	ldr	r3, [r7, #20]
 801b9ae:	3301      	adds	r3, #1
 801b9b0:	617b      	str	r3, [r7, #20]
            while (((char)*p != ' ') && ((char)*p != '\t') && (position < len)) {
 801b9b2:	69bb      	ldr	r3, [r7, #24]
 801b9b4:	781b      	ldrb	r3, [r3, #0]
 801b9b6:	2b20      	cmp	r3, #32
 801b9b8:	d007      	beq.n	801b9ca <ParseLine+0xe6>
 801b9ba:	69bb      	ldr	r3, [r7, #24]
 801b9bc:	781b      	ldrb	r3, [r3, #0]
 801b9be:	2b09      	cmp	r3, #9
 801b9c0:	d003      	beq.n	801b9ca <ParseLine+0xe6>
 801b9c2:	697a      	ldr	r2, [r7, #20]
 801b9c4:	68bb      	ldr	r3, [r7, #8]
 801b9c6:	429a      	cmp	r2, r3
 801b9c8:	d3ed      	bcc.n	801b9a6 <ParseLine+0xc2>
    while (position < len) {
 801b9ca:	697a      	ldr	r2, [r7, #20]
 801b9cc:	68bb      	ldr	r3, [r7, #8]
 801b9ce:	429a      	cmp	r2, r3
 801b9d0:	d3ab      	bcc.n	801b92a <ParseLine+0x46>
            }
        }
    }
    return argc;
 801b9d2:	69fb      	ldr	r3, [r7, #28]
}
 801b9d4:	4618      	mov	r0, r3
 801b9d6:	3720      	adds	r7, #32
 801b9d8:	46bd      	mov	sp, r7
 801b9da:	bd80      	pop	{r7, pc}
 801b9dc:	200016f8 	.word	0x200016f8

0801b9e0 <SHELL_RegisterCommand>:

int32_t SHELL_RegisterCommand(const shell_command_context_t *command_context)
{
 801b9e0:	b480      	push	{r7}
 801b9e2:	b085      	sub	sp, #20
 801b9e4:	af00      	add	r7, sp, #0
 801b9e6:	6078      	str	r0, [r7, #4]
    int32_t result = 0;
 801b9e8:	2300      	movs	r3, #0
 801b9ea:	60fb      	str	r3, [r7, #12]

    /* If have room  in command list */
    if (g_RegisteredCommands.numberOfCommandInList < SHELL_MAX_CMD) {
 801b9ec:	4b0e      	ldr	r3, [pc, #56]	; (801ba28 <SHELL_RegisterCommand+0x48>)
 801b9ee:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 801b9f2:	2b27      	cmp	r3, #39	; 0x27
 801b9f4:	d80d      	bhi.n	801ba12 <SHELL_RegisterCommand+0x32>
        g_RegisteredCommands.CommandList[g_RegisteredCommands.numberOfCommandInList++] = command_context;
 801b9f6:	4b0c      	ldr	r3, [pc, #48]	; (801ba28 <SHELL_RegisterCommand+0x48>)
 801b9f8:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 801b9fc:	1c5a      	adds	r2, r3, #1
 801b9fe:	b2d1      	uxtb	r1, r2
 801ba00:	4a09      	ldr	r2, [pc, #36]	; (801ba28 <SHELL_RegisterCommand+0x48>)
 801ba02:	f882 10a0 	strb.w	r1, [r2, #160]	; 0xa0
 801ba06:	4619      	mov	r1, r3
 801ba08:	4a07      	ldr	r2, [pc, #28]	; (801ba28 <SHELL_RegisterCommand+0x48>)
 801ba0a:	687b      	ldr	r3, [r7, #4]
 801ba0c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801ba10:	e002      	b.n	801ba18 <SHELL_RegisterCommand+0x38>
    } else {
        result = -1;
 801ba12:	f04f 33ff 	mov.w	r3, #4294967295
 801ba16:	60fb      	str	r3, [r7, #12]
    }
    return result;
 801ba18:	68fb      	ldr	r3, [r7, #12]
}
 801ba1a:	4618      	mov	r0, r3
 801ba1c:	3714      	adds	r7, #20
 801ba1e:	46bd      	mov	sp, r7
 801ba20:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba24:	4770      	bx	lr
 801ba26:	bf00      	nop
 801ba28:	20001654 	.word	0x20001654

0801ba2c <GetChar>:

static uint8_t GetChar(p_shell_context_t context)
{
 801ba2c:	b580      	push	{r7, lr}
 801ba2e:	b084      	sub	sp, #16
 801ba30:	af00      	add	r7, sp, #0
 801ba32:	6078      	str	r0, [r7, #4]
    uint8_t ch;

#if SHELL_USE_FILE_STREAM
    ch = fgetc(context->STDIN);
#else
    context->recv_data_func(&ch, 1U);
 801ba34:	687b      	ldr	r3, [r7, #4]
 801ba36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ba38:	f107 020f 	add.w	r2, r7, #15
 801ba3c:	2101      	movs	r1, #1
 801ba3e:	4610      	mov	r0, r2
 801ba40:	4798      	blx	r3
#endif
    return ch;
 801ba42:	7bfb      	ldrb	r3, [r7, #15]
}
 801ba44:	4618      	mov	r0, r3
 801ba46:	3710      	adds	r7, #16
 801ba48:	46bd      	mov	sp, r7
 801ba4a:	bd80      	pop	{r7, pc}

0801ba4c <cJSON_InitHooks>:

    return copy;
}

CJSON_PUBLIC(void) cJSON_InitHooks(cJSON_Hooks* hooks)
{
 801ba4c:	b480      	push	{r7}
 801ba4e:	b083      	sub	sp, #12
 801ba50:	af00      	add	r7, sp, #0
 801ba52:	6078      	str	r0, [r7, #4]
    if (hooks == NULL)
 801ba54:	687b      	ldr	r3, [r7, #4]
 801ba56:	2b00      	cmp	r3, #0
 801ba58:	d109      	bne.n	801ba6e <cJSON_InitHooks+0x22>
    {
        /* Reset hooks */
        global_hooks.allocate = malloc;
 801ba5a:	4b1a      	ldr	r3, [pc, #104]	; (801bac4 <cJSON_InitHooks+0x78>)
 801ba5c:	4a1a      	ldr	r2, [pc, #104]	; (801bac8 <cJSON_InitHooks+0x7c>)
 801ba5e:	601a      	str	r2, [r3, #0]
        global_hooks.deallocate = free;
 801ba60:	4b18      	ldr	r3, [pc, #96]	; (801bac4 <cJSON_InitHooks+0x78>)
 801ba62:	4a1a      	ldr	r2, [pc, #104]	; (801bacc <cJSON_InitHooks+0x80>)
 801ba64:	605a      	str	r2, [r3, #4]
        global_hooks.reallocate = realloc;
 801ba66:	4b17      	ldr	r3, [pc, #92]	; (801bac4 <cJSON_InitHooks+0x78>)
 801ba68:	4a19      	ldr	r2, [pc, #100]	; (801bad0 <cJSON_InitHooks+0x84>)
 801ba6a:	609a      	str	r2, [r3, #8]
        return;
 801ba6c:	e025      	b.n	801baba <cJSON_InitHooks+0x6e>
    }

    global_hooks.allocate = malloc;
 801ba6e:	4b15      	ldr	r3, [pc, #84]	; (801bac4 <cJSON_InitHooks+0x78>)
 801ba70:	4a15      	ldr	r2, [pc, #84]	; (801bac8 <cJSON_InitHooks+0x7c>)
 801ba72:	601a      	str	r2, [r3, #0]
    if (hooks->malloc_fn != NULL)
 801ba74:	687b      	ldr	r3, [r7, #4]
 801ba76:	681b      	ldr	r3, [r3, #0]
 801ba78:	2b00      	cmp	r3, #0
 801ba7a:	d003      	beq.n	801ba84 <cJSON_InitHooks+0x38>
    {
        global_hooks.allocate = hooks->malloc_fn;
 801ba7c:	687b      	ldr	r3, [r7, #4]
 801ba7e:	681b      	ldr	r3, [r3, #0]
 801ba80:	4a10      	ldr	r2, [pc, #64]	; (801bac4 <cJSON_InitHooks+0x78>)
 801ba82:	6013      	str	r3, [r2, #0]
    }

    global_hooks.deallocate = free;
 801ba84:	4b0f      	ldr	r3, [pc, #60]	; (801bac4 <cJSON_InitHooks+0x78>)
 801ba86:	4a11      	ldr	r2, [pc, #68]	; (801bacc <cJSON_InitHooks+0x80>)
 801ba88:	605a      	str	r2, [r3, #4]
    if (hooks->free_fn != NULL)
 801ba8a:	687b      	ldr	r3, [r7, #4]
 801ba8c:	685b      	ldr	r3, [r3, #4]
 801ba8e:	2b00      	cmp	r3, #0
 801ba90:	d003      	beq.n	801ba9a <cJSON_InitHooks+0x4e>
    {
        global_hooks.deallocate = hooks->free_fn;
 801ba92:	687b      	ldr	r3, [r7, #4]
 801ba94:	685b      	ldr	r3, [r3, #4]
 801ba96:	4a0b      	ldr	r2, [pc, #44]	; (801bac4 <cJSON_InitHooks+0x78>)
 801ba98:	6053      	str	r3, [r2, #4]
    }

    /* use realloc only if both free and malloc are used */
    global_hooks.reallocate = NULL;
 801ba9a:	4b0a      	ldr	r3, [pc, #40]	; (801bac4 <cJSON_InitHooks+0x78>)
 801ba9c:	2200      	movs	r2, #0
 801ba9e:	609a      	str	r2, [r3, #8]
    if ((global_hooks.allocate == malloc) && (global_hooks.deallocate == free))
 801baa0:	4b08      	ldr	r3, [pc, #32]	; (801bac4 <cJSON_InitHooks+0x78>)
 801baa2:	681b      	ldr	r3, [r3, #0]
 801baa4:	4a08      	ldr	r2, [pc, #32]	; (801bac8 <cJSON_InitHooks+0x7c>)
 801baa6:	4293      	cmp	r3, r2
 801baa8:	d107      	bne.n	801baba <cJSON_InitHooks+0x6e>
 801baaa:	4b06      	ldr	r3, [pc, #24]	; (801bac4 <cJSON_InitHooks+0x78>)
 801baac:	685b      	ldr	r3, [r3, #4]
 801baae:	4a07      	ldr	r2, [pc, #28]	; (801bacc <cJSON_InitHooks+0x80>)
 801bab0:	4293      	cmp	r3, r2
 801bab2:	d102      	bne.n	801baba <cJSON_InitHooks+0x6e>
    {
        global_hooks.reallocate = realloc;
 801bab4:	4b03      	ldr	r3, [pc, #12]	; (801bac4 <cJSON_InitHooks+0x78>)
 801bab6:	4a06      	ldr	r2, [pc, #24]	; (801bad0 <cJSON_InitHooks+0x84>)
 801bab8:	609a      	str	r2, [r3, #8]
    }
}
 801baba:	370c      	adds	r7, #12
 801babc:	46bd      	mov	sp, r7
 801babe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bac2:	4770      	bx	lr
 801bac4:	10000128 	.word	0x10000128
 801bac8:	0801bd79 	.word	0x0801bd79
 801bacc:	0801bd89 	.word	0x0801bd89
 801bad0:	0801cba1 	.word	0x0801cba1

0801bad4 <__assert_func>:
 801bad4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801bad6:	4614      	mov	r4, r2
 801bad8:	461a      	mov	r2, r3
 801bada:	4b09      	ldr	r3, [pc, #36]	; (801bb00 <__assert_func+0x2c>)
 801badc:	681b      	ldr	r3, [r3, #0]
 801bade:	4605      	mov	r5, r0
 801bae0:	68d8      	ldr	r0, [r3, #12]
 801bae2:	b14c      	cbz	r4, 801baf8 <__assert_func+0x24>
 801bae4:	4b07      	ldr	r3, [pc, #28]	; (801bb04 <__assert_func+0x30>)
 801bae6:	9100      	str	r1, [sp, #0]
 801bae8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801baec:	4906      	ldr	r1, [pc, #24]	; (801bb08 <__assert_func+0x34>)
 801baee:	462b      	mov	r3, r5
 801baf0:	f000 f8e8 	bl	801bcc4 <fiprintf>
 801baf4:	f001 faba 	bl	801d06c <abort>
 801baf8:	4b04      	ldr	r3, [pc, #16]	; (801bb0c <__assert_func+0x38>)
 801bafa:	461c      	mov	r4, r3
 801bafc:	e7f3      	b.n	801bae6 <__assert_func+0x12>
 801bafe:	bf00      	nop
 801bb00:	10000134 	.word	0x10000134
 801bb04:	080228e7 	.word	0x080228e7
 801bb08:	080228f4 	.word	0x080228f4
 801bb0c:	08022922 	.word	0x08022922

0801bb10 <atoi>:
 801bb10:	220a      	movs	r2, #10
 801bb12:	2100      	movs	r1, #0
 801bb14:	f001 b9ae 	b.w	801ce74 <strtol>

0801bb18 <std>:
 801bb18:	2300      	movs	r3, #0
 801bb1a:	b510      	push	{r4, lr}
 801bb1c:	4604      	mov	r4, r0
 801bb1e:	e9c0 3300 	strd	r3, r3, [r0]
 801bb22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801bb26:	6083      	str	r3, [r0, #8]
 801bb28:	8181      	strh	r1, [r0, #12]
 801bb2a:	6643      	str	r3, [r0, #100]	; 0x64
 801bb2c:	81c2      	strh	r2, [r0, #14]
 801bb2e:	6183      	str	r3, [r0, #24]
 801bb30:	4619      	mov	r1, r3
 801bb32:	2208      	movs	r2, #8
 801bb34:	305c      	adds	r0, #92	; 0x5c
 801bb36:	f000 f965 	bl	801be04 <memset>
 801bb3a:	4b05      	ldr	r3, [pc, #20]	; (801bb50 <std+0x38>)
 801bb3c:	6263      	str	r3, [r4, #36]	; 0x24
 801bb3e:	4b05      	ldr	r3, [pc, #20]	; (801bb54 <std+0x3c>)
 801bb40:	62a3      	str	r3, [r4, #40]	; 0x28
 801bb42:	4b05      	ldr	r3, [pc, #20]	; (801bb58 <std+0x40>)
 801bb44:	62e3      	str	r3, [r4, #44]	; 0x2c
 801bb46:	4b05      	ldr	r3, [pc, #20]	; (801bb5c <std+0x44>)
 801bb48:	6224      	str	r4, [r4, #32]
 801bb4a:	6323      	str	r3, [r4, #48]	; 0x30
 801bb4c:	bd10      	pop	{r4, pc}
 801bb4e:	bf00      	nop
 801bb50:	0801cce5 	.word	0x0801cce5
 801bb54:	0801cd07 	.word	0x0801cd07
 801bb58:	0801cd3f 	.word	0x0801cd3f
 801bb5c:	0801cd63 	.word	0x0801cd63

0801bb60 <_cleanup_r>:
 801bb60:	4901      	ldr	r1, [pc, #4]	; (801bb68 <_cleanup_r+0x8>)
 801bb62:	f000 b8c1 	b.w	801bce8 <_fwalk_reent>
 801bb66:	bf00      	nop
 801bb68:	0801dea9 	.word	0x0801dea9

0801bb6c <__sfmoreglue>:
 801bb6c:	b570      	push	{r4, r5, r6, lr}
 801bb6e:	1e4a      	subs	r2, r1, #1
 801bb70:	2568      	movs	r5, #104	; 0x68
 801bb72:	4355      	muls	r5, r2
 801bb74:	460e      	mov	r6, r1
 801bb76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801bb7a:	f000 f99b 	bl	801beb4 <_malloc_r>
 801bb7e:	4604      	mov	r4, r0
 801bb80:	b140      	cbz	r0, 801bb94 <__sfmoreglue+0x28>
 801bb82:	2100      	movs	r1, #0
 801bb84:	e9c0 1600 	strd	r1, r6, [r0]
 801bb88:	300c      	adds	r0, #12
 801bb8a:	60a0      	str	r0, [r4, #8]
 801bb8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801bb90:	f000 f938 	bl	801be04 <memset>
 801bb94:	4620      	mov	r0, r4
 801bb96:	bd70      	pop	{r4, r5, r6, pc}

0801bb98 <__sfp_lock_acquire>:
 801bb98:	4801      	ldr	r0, [pc, #4]	; (801bba0 <__sfp_lock_acquire+0x8>)
 801bb9a:	f000 b8ea 	b.w	801bd72 <__retarget_lock_acquire_recursive>
 801bb9e:	bf00      	nop
 801bba0:	2000d5b8 	.word	0x2000d5b8

0801bba4 <__sfp_lock_release>:
 801bba4:	4801      	ldr	r0, [pc, #4]	; (801bbac <__sfp_lock_release+0x8>)
 801bba6:	f000 b8e5 	b.w	801bd74 <__retarget_lock_release_recursive>
 801bbaa:	bf00      	nop
 801bbac:	2000d5b8 	.word	0x2000d5b8

0801bbb0 <__sinit_lock_acquire>:
 801bbb0:	4801      	ldr	r0, [pc, #4]	; (801bbb8 <__sinit_lock_acquire+0x8>)
 801bbb2:	f000 b8de 	b.w	801bd72 <__retarget_lock_acquire_recursive>
 801bbb6:	bf00      	nop
 801bbb8:	2000d5b3 	.word	0x2000d5b3

0801bbbc <__sinit_lock_release>:
 801bbbc:	4801      	ldr	r0, [pc, #4]	; (801bbc4 <__sinit_lock_release+0x8>)
 801bbbe:	f000 b8d9 	b.w	801bd74 <__retarget_lock_release_recursive>
 801bbc2:	bf00      	nop
 801bbc4:	2000d5b3 	.word	0x2000d5b3

0801bbc8 <__sinit>:
 801bbc8:	b510      	push	{r4, lr}
 801bbca:	4604      	mov	r4, r0
 801bbcc:	f7ff fff0 	bl	801bbb0 <__sinit_lock_acquire>
 801bbd0:	69a3      	ldr	r3, [r4, #24]
 801bbd2:	b11b      	cbz	r3, 801bbdc <__sinit+0x14>
 801bbd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bbd8:	f7ff bff0 	b.w	801bbbc <__sinit_lock_release>
 801bbdc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801bbe0:	6523      	str	r3, [r4, #80]	; 0x50
 801bbe2:	4b13      	ldr	r3, [pc, #76]	; (801bc30 <__sinit+0x68>)
 801bbe4:	4a13      	ldr	r2, [pc, #76]	; (801bc34 <__sinit+0x6c>)
 801bbe6:	681b      	ldr	r3, [r3, #0]
 801bbe8:	62a2      	str	r2, [r4, #40]	; 0x28
 801bbea:	42a3      	cmp	r3, r4
 801bbec:	bf04      	itt	eq
 801bbee:	2301      	moveq	r3, #1
 801bbf0:	61a3      	streq	r3, [r4, #24]
 801bbf2:	4620      	mov	r0, r4
 801bbf4:	f000 f820 	bl	801bc38 <__sfp>
 801bbf8:	6060      	str	r0, [r4, #4]
 801bbfa:	4620      	mov	r0, r4
 801bbfc:	f000 f81c 	bl	801bc38 <__sfp>
 801bc00:	60a0      	str	r0, [r4, #8]
 801bc02:	4620      	mov	r0, r4
 801bc04:	f000 f818 	bl	801bc38 <__sfp>
 801bc08:	2200      	movs	r2, #0
 801bc0a:	60e0      	str	r0, [r4, #12]
 801bc0c:	2104      	movs	r1, #4
 801bc0e:	6860      	ldr	r0, [r4, #4]
 801bc10:	f7ff ff82 	bl	801bb18 <std>
 801bc14:	68a0      	ldr	r0, [r4, #8]
 801bc16:	2201      	movs	r2, #1
 801bc18:	2109      	movs	r1, #9
 801bc1a:	f7ff ff7d 	bl	801bb18 <std>
 801bc1e:	68e0      	ldr	r0, [r4, #12]
 801bc20:	2202      	movs	r2, #2
 801bc22:	2112      	movs	r1, #18
 801bc24:	f7ff ff78 	bl	801bb18 <std>
 801bc28:	2301      	movs	r3, #1
 801bc2a:	61a3      	str	r3, [r4, #24]
 801bc2c:	e7d2      	b.n	801bbd4 <__sinit+0xc>
 801bc2e:	bf00      	nop
 801bc30:	08022a84 	.word	0x08022a84
 801bc34:	0801bb61 	.word	0x0801bb61

0801bc38 <__sfp>:
 801bc38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bc3a:	4607      	mov	r7, r0
 801bc3c:	f7ff ffac 	bl	801bb98 <__sfp_lock_acquire>
 801bc40:	4b1e      	ldr	r3, [pc, #120]	; (801bcbc <__sfp+0x84>)
 801bc42:	681e      	ldr	r6, [r3, #0]
 801bc44:	69b3      	ldr	r3, [r6, #24]
 801bc46:	b913      	cbnz	r3, 801bc4e <__sfp+0x16>
 801bc48:	4630      	mov	r0, r6
 801bc4a:	f7ff ffbd 	bl	801bbc8 <__sinit>
 801bc4e:	3648      	adds	r6, #72	; 0x48
 801bc50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801bc54:	3b01      	subs	r3, #1
 801bc56:	d503      	bpl.n	801bc60 <__sfp+0x28>
 801bc58:	6833      	ldr	r3, [r6, #0]
 801bc5a:	b30b      	cbz	r3, 801bca0 <__sfp+0x68>
 801bc5c:	6836      	ldr	r6, [r6, #0]
 801bc5e:	e7f7      	b.n	801bc50 <__sfp+0x18>
 801bc60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801bc64:	b9d5      	cbnz	r5, 801bc9c <__sfp+0x64>
 801bc66:	4b16      	ldr	r3, [pc, #88]	; (801bcc0 <__sfp+0x88>)
 801bc68:	60e3      	str	r3, [r4, #12]
 801bc6a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801bc6e:	6665      	str	r5, [r4, #100]	; 0x64
 801bc70:	f000 f87e 	bl	801bd70 <__retarget_lock_init_recursive>
 801bc74:	f7ff ff96 	bl	801bba4 <__sfp_lock_release>
 801bc78:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801bc7c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801bc80:	6025      	str	r5, [r4, #0]
 801bc82:	61a5      	str	r5, [r4, #24]
 801bc84:	2208      	movs	r2, #8
 801bc86:	4629      	mov	r1, r5
 801bc88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801bc8c:	f000 f8ba 	bl	801be04 <memset>
 801bc90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801bc94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801bc98:	4620      	mov	r0, r4
 801bc9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bc9c:	3468      	adds	r4, #104	; 0x68
 801bc9e:	e7d9      	b.n	801bc54 <__sfp+0x1c>
 801bca0:	2104      	movs	r1, #4
 801bca2:	4638      	mov	r0, r7
 801bca4:	f7ff ff62 	bl	801bb6c <__sfmoreglue>
 801bca8:	4604      	mov	r4, r0
 801bcaa:	6030      	str	r0, [r6, #0]
 801bcac:	2800      	cmp	r0, #0
 801bcae:	d1d5      	bne.n	801bc5c <__sfp+0x24>
 801bcb0:	f7ff ff78 	bl	801bba4 <__sfp_lock_release>
 801bcb4:	230c      	movs	r3, #12
 801bcb6:	603b      	str	r3, [r7, #0]
 801bcb8:	e7ee      	b.n	801bc98 <__sfp+0x60>
 801bcba:	bf00      	nop
 801bcbc:	08022a84 	.word	0x08022a84
 801bcc0:	ffff0001 	.word	0xffff0001

0801bcc4 <fiprintf>:
 801bcc4:	b40e      	push	{r1, r2, r3}
 801bcc6:	b503      	push	{r0, r1, lr}
 801bcc8:	4601      	mov	r1, r0
 801bcca:	ab03      	add	r3, sp, #12
 801bccc:	4805      	ldr	r0, [pc, #20]	; (801bce4 <fiprintf+0x20>)
 801bcce:	f853 2b04 	ldr.w	r2, [r3], #4
 801bcd2:	6800      	ldr	r0, [r0, #0]
 801bcd4:	9301      	str	r3, [sp, #4]
 801bcd6:	f000 f971 	bl	801bfbc <_vfiprintf_r>
 801bcda:	b002      	add	sp, #8
 801bcdc:	f85d eb04 	ldr.w	lr, [sp], #4
 801bce0:	b003      	add	sp, #12
 801bce2:	4770      	bx	lr
 801bce4:	10000134 	.word	0x10000134

0801bce8 <_fwalk_reent>:
 801bce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bcec:	4606      	mov	r6, r0
 801bcee:	4688      	mov	r8, r1
 801bcf0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801bcf4:	2700      	movs	r7, #0
 801bcf6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801bcfa:	f1b9 0901 	subs.w	r9, r9, #1
 801bcfe:	d505      	bpl.n	801bd0c <_fwalk_reent+0x24>
 801bd00:	6824      	ldr	r4, [r4, #0]
 801bd02:	2c00      	cmp	r4, #0
 801bd04:	d1f7      	bne.n	801bcf6 <_fwalk_reent+0xe>
 801bd06:	4638      	mov	r0, r7
 801bd08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bd0c:	89ab      	ldrh	r3, [r5, #12]
 801bd0e:	2b01      	cmp	r3, #1
 801bd10:	d907      	bls.n	801bd22 <_fwalk_reent+0x3a>
 801bd12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801bd16:	3301      	adds	r3, #1
 801bd18:	d003      	beq.n	801bd22 <_fwalk_reent+0x3a>
 801bd1a:	4629      	mov	r1, r5
 801bd1c:	4630      	mov	r0, r6
 801bd1e:	47c0      	blx	r8
 801bd20:	4307      	orrs	r7, r0
 801bd22:	3568      	adds	r5, #104	; 0x68
 801bd24:	e7e9      	b.n	801bcfa <_fwalk_reent+0x12>
	...

0801bd28 <__libc_init_array>:
 801bd28:	b570      	push	{r4, r5, r6, lr}
 801bd2a:	4d0d      	ldr	r5, [pc, #52]	; (801bd60 <__libc_init_array+0x38>)
 801bd2c:	4c0d      	ldr	r4, [pc, #52]	; (801bd64 <__libc_init_array+0x3c>)
 801bd2e:	1b64      	subs	r4, r4, r5
 801bd30:	10a4      	asrs	r4, r4, #2
 801bd32:	2600      	movs	r6, #0
 801bd34:	42a6      	cmp	r6, r4
 801bd36:	d109      	bne.n	801bd4c <__libc_init_array+0x24>
 801bd38:	4d0b      	ldr	r5, [pc, #44]	; (801bd68 <__libc_init_array+0x40>)
 801bd3a:	4c0c      	ldr	r4, [pc, #48]	; (801bd6c <__libc_init_array+0x44>)
 801bd3c:	f002 ff24 	bl	801eb88 <_init>
 801bd40:	1b64      	subs	r4, r4, r5
 801bd42:	10a4      	asrs	r4, r4, #2
 801bd44:	2600      	movs	r6, #0
 801bd46:	42a6      	cmp	r6, r4
 801bd48:	d105      	bne.n	801bd56 <__libc_init_array+0x2e>
 801bd4a:	bd70      	pop	{r4, r5, r6, pc}
 801bd4c:	f855 3b04 	ldr.w	r3, [r5], #4
 801bd50:	4798      	blx	r3
 801bd52:	3601      	adds	r6, #1
 801bd54:	e7ee      	b.n	801bd34 <__libc_init_array+0xc>
 801bd56:	f855 3b04 	ldr.w	r3, [r5], #4
 801bd5a:	4798      	blx	r3
 801bd5c:	3601      	adds	r6, #1
 801bd5e:	e7f2      	b.n	801bd46 <__libc_init_array+0x1e>
 801bd60:	08022d34 	.word	0x08022d34
 801bd64:	08022d34 	.word	0x08022d34
 801bd68:	08022d34 	.word	0x08022d34
 801bd6c:	08022d38 	.word	0x08022d38

0801bd70 <__retarget_lock_init_recursive>:
 801bd70:	4770      	bx	lr

0801bd72 <__retarget_lock_acquire_recursive>:
 801bd72:	4770      	bx	lr

0801bd74 <__retarget_lock_release_recursive>:
 801bd74:	4770      	bx	lr
	...

0801bd78 <malloc>:
 801bd78:	4b02      	ldr	r3, [pc, #8]	; (801bd84 <malloc+0xc>)
 801bd7a:	4601      	mov	r1, r0
 801bd7c:	6818      	ldr	r0, [r3, #0]
 801bd7e:	f000 b899 	b.w	801beb4 <_malloc_r>
 801bd82:	bf00      	nop
 801bd84:	10000134 	.word	0x10000134

0801bd88 <free>:
 801bd88:	4b02      	ldr	r3, [pc, #8]	; (801bd94 <free+0xc>)
 801bd8a:	4601      	mov	r1, r0
 801bd8c:	6818      	ldr	r0, [r3, #0]
 801bd8e:	f000 b841 	b.w	801be14 <_free_r>
 801bd92:	bf00      	nop
 801bd94:	10000134 	.word	0x10000134

0801bd98 <memcmp>:
 801bd98:	b530      	push	{r4, r5, lr}
 801bd9a:	3901      	subs	r1, #1
 801bd9c:	2400      	movs	r4, #0
 801bd9e:	42a2      	cmp	r2, r4
 801bda0:	d101      	bne.n	801bda6 <memcmp+0xe>
 801bda2:	2000      	movs	r0, #0
 801bda4:	e005      	b.n	801bdb2 <memcmp+0x1a>
 801bda6:	5d03      	ldrb	r3, [r0, r4]
 801bda8:	3401      	adds	r4, #1
 801bdaa:	5d0d      	ldrb	r5, [r1, r4]
 801bdac:	42ab      	cmp	r3, r5
 801bdae:	d0f6      	beq.n	801bd9e <memcmp+0x6>
 801bdb0:	1b58      	subs	r0, r3, r5
 801bdb2:	bd30      	pop	{r4, r5, pc}

0801bdb4 <memcpy>:
 801bdb4:	440a      	add	r2, r1
 801bdb6:	4291      	cmp	r1, r2
 801bdb8:	f100 33ff 	add.w	r3, r0, #4294967295
 801bdbc:	d100      	bne.n	801bdc0 <memcpy+0xc>
 801bdbe:	4770      	bx	lr
 801bdc0:	b510      	push	{r4, lr}
 801bdc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801bdc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 801bdca:	4291      	cmp	r1, r2
 801bdcc:	d1f9      	bne.n	801bdc2 <memcpy+0xe>
 801bdce:	bd10      	pop	{r4, pc}

0801bdd0 <memmove>:
 801bdd0:	4288      	cmp	r0, r1
 801bdd2:	b510      	push	{r4, lr}
 801bdd4:	eb01 0402 	add.w	r4, r1, r2
 801bdd8:	d902      	bls.n	801bde0 <memmove+0x10>
 801bdda:	4284      	cmp	r4, r0
 801bddc:	4623      	mov	r3, r4
 801bdde:	d807      	bhi.n	801bdf0 <memmove+0x20>
 801bde0:	1e43      	subs	r3, r0, #1
 801bde2:	42a1      	cmp	r1, r4
 801bde4:	d008      	beq.n	801bdf8 <memmove+0x28>
 801bde6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801bdea:	f803 2f01 	strb.w	r2, [r3, #1]!
 801bdee:	e7f8      	b.n	801bde2 <memmove+0x12>
 801bdf0:	4402      	add	r2, r0
 801bdf2:	4601      	mov	r1, r0
 801bdf4:	428a      	cmp	r2, r1
 801bdf6:	d100      	bne.n	801bdfa <memmove+0x2a>
 801bdf8:	bd10      	pop	{r4, pc}
 801bdfa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801bdfe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801be02:	e7f7      	b.n	801bdf4 <memmove+0x24>

0801be04 <memset>:
 801be04:	4402      	add	r2, r0
 801be06:	4603      	mov	r3, r0
 801be08:	4293      	cmp	r3, r2
 801be0a:	d100      	bne.n	801be0e <memset+0xa>
 801be0c:	4770      	bx	lr
 801be0e:	f803 1b01 	strb.w	r1, [r3], #1
 801be12:	e7f9      	b.n	801be08 <memset+0x4>

0801be14 <_free_r>:
 801be14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801be16:	2900      	cmp	r1, #0
 801be18:	d048      	beq.n	801beac <_free_r+0x98>
 801be1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801be1e:	9001      	str	r0, [sp, #4]
 801be20:	2b00      	cmp	r3, #0
 801be22:	f1a1 0404 	sub.w	r4, r1, #4
 801be26:	bfb8      	it	lt
 801be28:	18e4      	addlt	r4, r4, r3
 801be2a:	f002 f905 	bl	801e038 <__malloc_lock>
 801be2e:	4a20      	ldr	r2, [pc, #128]	; (801beb0 <_free_r+0x9c>)
 801be30:	9801      	ldr	r0, [sp, #4]
 801be32:	6813      	ldr	r3, [r2, #0]
 801be34:	4615      	mov	r5, r2
 801be36:	b933      	cbnz	r3, 801be46 <_free_r+0x32>
 801be38:	6063      	str	r3, [r4, #4]
 801be3a:	6014      	str	r4, [r2, #0]
 801be3c:	b003      	add	sp, #12
 801be3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801be42:	f002 b8ff 	b.w	801e044 <__malloc_unlock>
 801be46:	42a3      	cmp	r3, r4
 801be48:	d90b      	bls.n	801be62 <_free_r+0x4e>
 801be4a:	6821      	ldr	r1, [r4, #0]
 801be4c:	1862      	adds	r2, r4, r1
 801be4e:	4293      	cmp	r3, r2
 801be50:	bf04      	itt	eq
 801be52:	681a      	ldreq	r2, [r3, #0]
 801be54:	685b      	ldreq	r3, [r3, #4]
 801be56:	6063      	str	r3, [r4, #4]
 801be58:	bf04      	itt	eq
 801be5a:	1852      	addeq	r2, r2, r1
 801be5c:	6022      	streq	r2, [r4, #0]
 801be5e:	602c      	str	r4, [r5, #0]
 801be60:	e7ec      	b.n	801be3c <_free_r+0x28>
 801be62:	461a      	mov	r2, r3
 801be64:	685b      	ldr	r3, [r3, #4]
 801be66:	b10b      	cbz	r3, 801be6c <_free_r+0x58>
 801be68:	42a3      	cmp	r3, r4
 801be6a:	d9fa      	bls.n	801be62 <_free_r+0x4e>
 801be6c:	6811      	ldr	r1, [r2, #0]
 801be6e:	1855      	adds	r5, r2, r1
 801be70:	42a5      	cmp	r5, r4
 801be72:	d10b      	bne.n	801be8c <_free_r+0x78>
 801be74:	6824      	ldr	r4, [r4, #0]
 801be76:	4421      	add	r1, r4
 801be78:	1854      	adds	r4, r2, r1
 801be7a:	42a3      	cmp	r3, r4
 801be7c:	6011      	str	r1, [r2, #0]
 801be7e:	d1dd      	bne.n	801be3c <_free_r+0x28>
 801be80:	681c      	ldr	r4, [r3, #0]
 801be82:	685b      	ldr	r3, [r3, #4]
 801be84:	6053      	str	r3, [r2, #4]
 801be86:	4421      	add	r1, r4
 801be88:	6011      	str	r1, [r2, #0]
 801be8a:	e7d7      	b.n	801be3c <_free_r+0x28>
 801be8c:	d902      	bls.n	801be94 <_free_r+0x80>
 801be8e:	230c      	movs	r3, #12
 801be90:	6003      	str	r3, [r0, #0]
 801be92:	e7d3      	b.n	801be3c <_free_r+0x28>
 801be94:	6825      	ldr	r5, [r4, #0]
 801be96:	1961      	adds	r1, r4, r5
 801be98:	428b      	cmp	r3, r1
 801be9a:	bf04      	itt	eq
 801be9c:	6819      	ldreq	r1, [r3, #0]
 801be9e:	685b      	ldreq	r3, [r3, #4]
 801bea0:	6063      	str	r3, [r4, #4]
 801bea2:	bf04      	itt	eq
 801bea4:	1949      	addeq	r1, r1, r5
 801bea6:	6021      	streq	r1, [r4, #0]
 801bea8:	6054      	str	r4, [r2, #4]
 801beaa:	e7c7      	b.n	801be3c <_free_r+0x28>
 801beac:	b003      	add	sp, #12
 801beae:	bd30      	pop	{r4, r5, pc}
 801beb0:	20001740 	.word	0x20001740

0801beb4 <_malloc_r>:
 801beb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801beb6:	1ccd      	adds	r5, r1, #3
 801beb8:	f025 0503 	bic.w	r5, r5, #3
 801bebc:	3508      	adds	r5, #8
 801bebe:	2d0c      	cmp	r5, #12
 801bec0:	bf38      	it	cc
 801bec2:	250c      	movcc	r5, #12
 801bec4:	2d00      	cmp	r5, #0
 801bec6:	4606      	mov	r6, r0
 801bec8:	db01      	blt.n	801bece <_malloc_r+0x1a>
 801beca:	42a9      	cmp	r1, r5
 801becc:	d903      	bls.n	801bed6 <_malloc_r+0x22>
 801bece:	230c      	movs	r3, #12
 801bed0:	6033      	str	r3, [r6, #0]
 801bed2:	2000      	movs	r0, #0
 801bed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bed6:	f002 f8af 	bl	801e038 <__malloc_lock>
 801beda:	4921      	ldr	r1, [pc, #132]	; (801bf60 <_malloc_r+0xac>)
 801bedc:	680a      	ldr	r2, [r1, #0]
 801bede:	4614      	mov	r4, r2
 801bee0:	b99c      	cbnz	r4, 801bf0a <_malloc_r+0x56>
 801bee2:	4f20      	ldr	r7, [pc, #128]	; (801bf64 <_malloc_r+0xb0>)
 801bee4:	683b      	ldr	r3, [r7, #0]
 801bee6:	b923      	cbnz	r3, 801bef2 <_malloc_r+0x3e>
 801bee8:	4621      	mov	r1, r4
 801beea:	4630      	mov	r0, r6
 801beec:	f000 feca 	bl	801cc84 <_sbrk_r>
 801bef0:	6038      	str	r0, [r7, #0]
 801bef2:	4629      	mov	r1, r5
 801bef4:	4630      	mov	r0, r6
 801bef6:	f000 fec5 	bl	801cc84 <_sbrk_r>
 801befa:	1c43      	adds	r3, r0, #1
 801befc:	d123      	bne.n	801bf46 <_malloc_r+0x92>
 801befe:	230c      	movs	r3, #12
 801bf00:	6033      	str	r3, [r6, #0]
 801bf02:	4630      	mov	r0, r6
 801bf04:	f002 f89e 	bl	801e044 <__malloc_unlock>
 801bf08:	e7e3      	b.n	801bed2 <_malloc_r+0x1e>
 801bf0a:	6823      	ldr	r3, [r4, #0]
 801bf0c:	1b5b      	subs	r3, r3, r5
 801bf0e:	d417      	bmi.n	801bf40 <_malloc_r+0x8c>
 801bf10:	2b0b      	cmp	r3, #11
 801bf12:	d903      	bls.n	801bf1c <_malloc_r+0x68>
 801bf14:	6023      	str	r3, [r4, #0]
 801bf16:	441c      	add	r4, r3
 801bf18:	6025      	str	r5, [r4, #0]
 801bf1a:	e004      	b.n	801bf26 <_malloc_r+0x72>
 801bf1c:	6863      	ldr	r3, [r4, #4]
 801bf1e:	42a2      	cmp	r2, r4
 801bf20:	bf0c      	ite	eq
 801bf22:	600b      	streq	r3, [r1, #0]
 801bf24:	6053      	strne	r3, [r2, #4]
 801bf26:	4630      	mov	r0, r6
 801bf28:	f002 f88c 	bl	801e044 <__malloc_unlock>
 801bf2c:	f104 000b 	add.w	r0, r4, #11
 801bf30:	1d23      	adds	r3, r4, #4
 801bf32:	f020 0007 	bic.w	r0, r0, #7
 801bf36:	1ac2      	subs	r2, r0, r3
 801bf38:	d0cc      	beq.n	801bed4 <_malloc_r+0x20>
 801bf3a:	1a1b      	subs	r3, r3, r0
 801bf3c:	50a3      	str	r3, [r4, r2]
 801bf3e:	e7c9      	b.n	801bed4 <_malloc_r+0x20>
 801bf40:	4622      	mov	r2, r4
 801bf42:	6864      	ldr	r4, [r4, #4]
 801bf44:	e7cc      	b.n	801bee0 <_malloc_r+0x2c>
 801bf46:	1cc4      	adds	r4, r0, #3
 801bf48:	f024 0403 	bic.w	r4, r4, #3
 801bf4c:	42a0      	cmp	r0, r4
 801bf4e:	d0e3      	beq.n	801bf18 <_malloc_r+0x64>
 801bf50:	1a21      	subs	r1, r4, r0
 801bf52:	4630      	mov	r0, r6
 801bf54:	f000 fe96 	bl	801cc84 <_sbrk_r>
 801bf58:	3001      	adds	r0, #1
 801bf5a:	d1dd      	bne.n	801bf18 <_malloc_r+0x64>
 801bf5c:	e7cf      	b.n	801befe <_malloc_r+0x4a>
 801bf5e:	bf00      	nop
 801bf60:	20001740 	.word	0x20001740
 801bf64:	20001744 	.word	0x20001744

0801bf68 <__sfputc_r>:
 801bf68:	6893      	ldr	r3, [r2, #8]
 801bf6a:	3b01      	subs	r3, #1
 801bf6c:	2b00      	cmp	r3, #0
 801bf6e:	b410      	push	{r4}
 801bf70:	6093      	str	r3, [r2, #8]
 801bf72:	da08      	bge.n	801bf86 <__sfputc_r+0x1e>
 801bf74:	6994      	ldr	r4, [r2, #24]
 801bf76:	42a3      	cmp	r3, r4
 801bf78:	db01      	blt.n	801bf7e <__sfputc_r+0x16>
 801bf7a:	290a      	cmp	r1, #10
 801bf7c:	d103      	bne.n	801bf86 <__sfputc_r+0x1e>
 801bf7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bf82:	f000 bfa1 	b.w	801cec8 <__swbuf_r>
 801bf86:	6813      	ldr	r3, [r2, #0]
 801bf88:	1c58      	adds	r0, r3, #1
 801bf8a:	6010      	str	r0, [r2, #0]
 801bf8c:	7019      	strb	r1, [r3, #0]
 801bf8e:	4608      	mov	r0, r1
 801bf90:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bf94:	4770      	bx	lr

0801bf96 <__sfputs_r>:
 801bf96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bf98:	4606      	mov	r6, r0
 801bf9a:	460f      	mov	r7, r1
 801bf9c:	4614      	mov	r4, r2
 801bf9e:	18d5      	adds	r5, r2, r3
 801bfa0:	42ac      	cmp	r4, r5
 801bfa2:	d101      	bne.n	801bfa8 <__sfputs_r+0x12>
 801bfa4:	2000      	movs	r0, #0
 801bfa6:	e007      	b.n	801bfb8 <__sfputs_r+0x22>
 801bfa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bfac:	463a      	mov	r2, r7
 801bfae:	4630      	mov	r0, r6
 801bfb0:	f7ff ffda 	bl	801bf68 <__sfputc_r>
 801bfb4:	1c43      	adds	r3, r0, #1
 801bfb6:	d1f3      	bne.n	801bfa0 <__sfputs_r+0xa>
 801bfb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801bfbc <_vfiprintf_r>:
 801bfbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bfc0:	460d      	mov	r5, r1
 801bfc2:	b09d      	sub	sp, #116	; 0x74
 801bfc4:	4614      	mov	r4, r2
 801bfc6:	4698      	mov	r8, r3
 801bfc8:	4606      	mov	r6, r0
 801bfca:	b118      	cbz	r0, 801bfd4 <_vfiprintf_r+0x18>
 801bfcc:	6983      	ldr	r3, [r0, #24]
 801bfce:	b90b      	cbnz	r3, 801bfd4 <_vfiprintf_r+0x18>
 801bfd0:	f7ff fdfa 	bl	801bbc8 <__sinit>
 801bfd4:	4b89      	ldr	r3, [pc, #548]	; (801c1fc <_vfiprintf_r+0x240>)
 801bfd6:	429d      	cmp	r5, r3
 801bfd8:	d11b      	bne.n	801c012 <_vfiprintf_r+0x56>
 801bfda:	6875      	ldr	r5, [r6, #4]
 801bfdc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bfde:	07d9      	lsls	r1, r3, #31
 801bfe0:	d405      	bmi.n	801bfee <_vfiprintf_r+0x32>
 801bfe2:	89ab      	ldrh	r3, [r5, #12]
 801bfe4:	059a      	lsls	r2, r3, #22
 801bfe6:	d402      	bmi.n	801bfee <_vfiprintf_r+0x32>
 801bfe8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bfea:	f7ff fec2 	bl	801bd72 <__retarget_lock_acquire_recursive>
 801bfee:	89ab      	ldrh	r3, [r5, #12]
 801bff0:	071b      	lsls	r3, r3, #28
 801bff2:	d501      	bpl.n	801bff8 <_vfiprintf_r+0x3c>
 801bff4:	692b      	ldr	r3, [r5, #16]
 801bff6:	b9eb      	cbnz	r3, 801c034 <_vfiprintf_r+0x78>
 801bff8:	4629      	mov	r1, r5
 801bffa:	4630      	mov	r0, r6
 801bffc:	f000 ffc8 	bl	801cf90 <__swsetup_r>
 801c000:	b1c0      	cbz	r0, 801c034 <_vfiprintf_r+0x78>
 801c002:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c004:	07dc      	lsls	r4, r3, #31
 801c006:	d50e      	bpl.n	801c026 <_vfiprintf_r+0x6a>
 801c008:	f04f 30ff 	mov.w	r0, #4294967295
 801c00c:	b01d      	add	sp, #116	; 0x74
 801c00e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c012:	4b7b      	ldr	r3, [pc, #492]	; (801c200 <_vfiprintf_r+0x244>)
 801c014:	429d      	cmp	r5, r3
 801c016:	d101      	bne.n	801c01c <_vfiprintf_r+0x60>
 801c018:	68b5      	ldr	r5, [r6, #8]
 801c01a:	e7df      	b.n	801bfdc <_vfiprintf_r+0x20>
 801c01c:	4b79      	ldr	r3, [pc, #484]	; (801c204 <_vfiprintf_r+0x248>)
 801c01e:	429d      	cmp	r5, r3
 801c020:	bf08      	it	eq
 801c022:	68f5      	ldreq	r5, [r6, #12]
 801c024:	e7da      	b.n	801bfdc <_vfiprintf_r+0x20>
 801c026:	89ab      	ldrh	r3, [r5, #12]
 801c028:	0598      	lsls	r0, r3, #22
 801c02a:	d4ed      	bmi.n	801c008 <_vfiprintf_r+0x4c>
 801c02c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c02e:	f7ff fea1 	bl	801bd74 <__retarget_lock_release_recursive>
 801c032:	e7e9      	b.n	801c008 <_vfiprintf_r+0x4c>
 801c034:	2300      	movs	r3, #0
 801c036:	9309      	str	r3, [sp, #36]	; 0x24
 801c038:	2320      	movs	r3, #32
 801c03a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c03e:	f8cd 800c 	str.w	r8, [sp, #12]
 801c042:	2330      	movs	r3, #48	; 0x30
 801c044:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801c208 <_vfiprintf_r+0x24c>
 801c048:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c04c:	f04f 0901 	mov.w	r9, #1
 801c050:	4623      	mov	r3, r4
 801c052:	469a      	mov	sl, r3
 801c054:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c058:	b10a      	cbz	r2, 801c05e <_vfiprintf_r+0xa2>
 801c05a:	2a25      	cmp	r2, #37	; 0x25
 801c05c:	d1f9      	bne.n	801c052 <_vfiprintf_r+0x96>
 801c05e:	ebba 0b04 	subs.w	fp, sl, r4
 801c062:	d00b      	beq.n	801c07c <_vfiprintf_r+0xc0>
 801c064:	465b      	mov	r3, fp
 801c066:	4622      	mov	r2, r4
 801c068:	4629      	mov	r1, r5
 801c06a:	4630      	mov	r0, r6
 801c06c:	f7ff ff93 	bl	801bf96 <__sfputs_r>
 801c070:	3001      	adds	r0, #1
 801c072:	f000 80aa 	beq.w	801c1ca <_vfiprintf_r+0x20e>
 801c076:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c078:	445a      	add	r2, fp
 801c07a:	9209      	str	r2, [sp, #36]	; 0x24
 801c07c:	f89a 3000 	ldrb.w	r3, [sl]
 801c080:	2b00      	cmp	r3, #0
 801c082:	f000 80a2 	beq.w	801c1ca <_vfiprintf_r+0x20e>
 801c086:	2300      	movs	r3, #0
 801c088:	f04f 32ff 	mov.w	r2, #4294967295
 801c08c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c090:	f10a 0a01 	add.w	sl, sl, #1
 801c094:	9304      	str	r3, [sp, #16]
 801c096:	9307      	str	r3, [sp, #28]
 801c098:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c09c:	931a      	str	r3, [sp, #104]	; 0x68
 801c09e:	4654      	mov	r4, sl
 801c0a0:	2205      	movs	r2, #5
 801c0a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c0a6:	4858      	ldr	r0, [pc, #352]	; (801c208 <_vfiprintf_r+0x24c>)
 801c0a8:	f7e4 f89a 	bl	80001e0 <memchr>
 801c0ac:	9a04      	ldr	r2, [sp, #16]
 801c0ae:	b9d8      	cbnz	r0, 801c0e8 <_vfiprintf_r+0x12c>
 801c0b0:	06d1      	lsls	r1, r2, #27
 801c0b2:	bf44      	itt	mi
 801c0b4:	2320      	movmi	r3, #32
 801c0b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c0ba:	0713      	lsls	r3, r2, #28
 801c0bc:	bf44      	itt	mi
 801c0be:	232b      	movmi	r3, #43	; 0x2b
 801c0c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c0c4:	f89a 3000 	ldrb.w	r3, [sl]
 801c0c8:	2b2a      	cmp	r3, #42	; 0x2a
 801c0ca:	d015      	beq.n	801c0f8 <_vfiprintf_r+0x13c>
 801c0cc:	9a07      	ldr	r2, [sp, #28]
 801c0ce:	4654      	mov	r4, sl
 801c0d0:	2000      	movs	r0, #0
 801c0d2:	f04f 0c0a 	mov.w	ip, #10
 801c0d6:	4621      	mov	r1, r4
 801c0d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c0dc:	3b30      	subs	r3, #48	; 0x30
 801c0de:	2b09      	cmp	r3, #9
 801c0e0:	d94e      	bls.n	801c180 <_vfiprintf_r+0x1c4>
 801c0e2:	b1b0      	cbz	r0, 801c112 <_vfiprintf_r+0x156>
 801c0e4:	9207      	str	r2, [sp, #28]
 801c0e6:	e014      	b.n	801c112 <_vfiprintf_r+0x156>
 801c0e8:	eba0 0308 	sub.w	r3, r0, r8
 801c0ec:	fa09 f303 	lsl.w	r3, r9, r3
 801c0f0:	4313      	orrs	r3, r2
 801c0f2:	9304      	str	r3, [sp, #16]
 801c0f4:	46a2      	mov	sl, r4
 801c0f6:	e7d2      	b.n	801c09e <_vfiprintf_r+0xe2>
 801c0f8:	9b03      	ldr	r3, [sp, #12]
 801c0fa:	1d19      	adds	r1, r3, #4
 801c0fc:	681b      	ldr	r3, [r3, #0]
 801c0fe:	9103      	str	r1, [sp, #12]
 801c100:	2b00      	cmp	r3, #0
 801c102:	bfbb      	ittet	lt
 801c104:	425b      	neglt	r3, r3
 801c106:	f042 0202 	orrlt.w	r2, r2, #2
 801c10a:	9307      	strge	r3, [sp, #28]
 801c10c:	9307      	strlt	r3, [sp, #28]
 801c10e:	bfb8      	it	lt
 801c110:	9204      	strlt	r2, [sp, #16]
 801c112:	7823      	ldrb	r3, [r4, #0]
 801c114:	2b2e      	cmp	r3, #46	; 0x2e
 801c116:	d10c      	bne.n	801c132 <_vfiprintf_r+0x176>
 801c118:	7863      	ldrb	r3, [r4, #1]
 801c11a:	2b2a      	cmp	r3, #42	; 0x2a
 801c11c:	d135      	bne.n	801c18a <_vfiprintf_r+0x1ce>
 801c11e:	9b03      	ldr	r3, [sp, #12]
 801c120:	1d1a      	adds	r2, r3, #4
 801c122:	681b      	ldr	r3, [r3, #0]
 801c124:	9203      	str	r2, [sp, #12]
 801c126:	2b00      	cmp	r3, #0
 801c128:	bfb8      	it	lt
 801c12a:	f04f 33ff 	movlt.w	r3, #4294967295
 801c12e:	3402      	adds	r4, #2
 801c130:	9305      	str	r3, [sp, #20]
 801c132:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801c218 <_vfiprintf_r+0x25c>
 801c136:	7821      	ldrb	r1, [r4, #0]
 801c138:	2203      	movs	r2, #3
 801c13a:	4650      	mov	r0, sl
 801c13c:	f7e4 f850 	bl	80001e0 <memchr>
 801c140:	b140      	cbz	r0, 801c154 <_vfiprintf_r+0x198>
 801c142:	2340      	movs	r3, #64	; 0x40
 801c144:	eba0 000a 	sub.w	r0, r0, sl
 801c148:	fa03 f000 	lsl.w	r0, r3, r0
 801c14c:	9b04      	ldr	r3, [sp, #16]
 801c14e:	4303      	orrs	r3, r0
 801c150:	3401      	adds	r4, #1
 801c152:	9304      	str	r3, [sp, #16]
 801c154:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c158:	482c      	ldr	r0, [pc, #176]	; (801c20c <_vfiprintf_r+0x250>)
 801c15a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c15e:	2206      	movs	r2, #6
 801c160:	f7e4 f83e 	bl	80001e0 <memchr>
 801c164:	2800      	cmp	r0, #0
 801c166:	d03f      	beq.n	801c1e8 <_vfiprintf_r+0x22c>
 801c168:	4b29      	ldr	r3, [pc, #164]	; (801c210 <_vfiprintf_r+0x254>)
 801c16a:	bb1b      	cbnz	r3, 801c1b4 <_vfiprintf_r+0x1f8>
 801c16c:	9b03      	ldr	r3, [sp, #12]
 801c16e:	3307      	adds	r3, #7
 801c170:	f023 0307 	bic.w	r3, r3, #7
 801c174:	3308      	adds	r3, #8
 801c176:	9303      	str	r3, [sp, #12]
 801c178:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c17a:	443b      	add	r3, r7
 801c17c:	9309      	str	r3, [sp, #36]	; 0x24
 801c17e:	e767      	b.n	801c050 <_vfiprintf_r+0x94>
 801c180:	fb0c 3202 	mla	r2, ip, r2, r3
 801c184:	460c      	mov	r4, r1
 801c186:	2001      	movs	r0, #1
 801c188:	e7a5      	b.n	801c0d6 <_vfiprintf_r+0x11a>
 801c18a:	2300      	movs	r3, #0
 801c18c:	3401      	adds	r4, #1
 801c18e:	9305      	str	r3, [sp, #20]
 801c190:	4619      	mov	r1, r3
 801c192:	f04f 0c0a 	mov.w	ip, #10
 801c196:	4620      	mov	r0, r4
 801c198:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c19c:	3a30      	subs	r2, #48	; 0x30
 801c19e:	2a09      	cmp	r2, #9
 801c1a0:	d903      	bls.n	801c1aa <_vfiprintf_r+0x1ee>
 801c1a2:	2b00      	cmp	r3, #0
 801c1a4:	d0c5      	beq.n	801c132 <_vfiprintf_r+0x176>
 801c1a6:	9105      	str	r1, [sp, #20]
 801c1a8:	e7c3      	b.n	801c132 <_vfiprintf_r+0x176>
 801c1aa:	fb0c 2101 	mla	r1, ip, r1, r2
 801c1ae:	4604      	mov	r4, r0
 801c1b0:	2301      	movs	r3, #1
 801c1b2:	e7f0      	b.n	801c196 <_vfiprintf_r+0x1da>
 801c1b4:	ab03      	add	r3, sp, #12
 801c1b6:	9300      	str	r3, [sp, #0]
 801c1b8:	462a      	mov	r2, r5
 801c1ba:	4b16      	ldr	r3, [pc, #88]	; (801c214 <_vfiprintf_r+0x258>)
 801c1bc:	a904      	add	r1, sp, #16
 801c1be:	4630      	mov	r0, r6
 801c1c0:	f000 f8cc 	bl	801c35c <_printf_float>
 801c1c4:	4607      	mov	r7, r0
 801c1c6:	1c78      	adds	r0, r7, #1
 801c1c8:	d1d6      	bne.n	801c178 <_vfiprintf_r+0x1bc>
 801c1ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c1cc:	07d9      	lsls	r1, r3, #31
 801c1ce:	d405      	bmi.n	801c1dc <_vfiprintf_r+0x220>
 801c1d0:	89ab      	ldrh	r3, [r5, #12]
 801c1d2:	059a      	lsls	r2, r3, #22
 801c1d4:	d402      	bmi.n	801c1dc <_vfiprintf_r+0x220>
 801c1d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c1d8:	f7ff fdcc 	bl	801bd74 <__retarget_lock_release_recursive>
 801c1dc:	89ab      	ldrh	r3, [r5, #12]
 801c1de:	065b      	lsls	r3, r3, #25
 801c1e0:	f53f af12 	bmi.w	801c008 <_vfiprintf_r+0x4c>
 801c1e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c1e6:	e711      	b.n	801c00c <_vfiprintf_r+0x50>
 801c1e8:	ab03      	add	r3, sp, #12
 801c1ea:	9300      	str	r3, [sp, #0]
 801c1ec:	462a      	mov	r2, r5
 801c1ee:	4b09      	ldr	r3, [pc, #36]	; (801c214 <_vfiprintf_r+0x258>)
 801c1f0:	a904      	add	r1, sp, #16
 801c1f2:	4630      	mov	r0, r6
 801c1f4:	f000 fb56 	bl	801c8a4 <_printf_i>
 801c1f8:	e7e4      	b.n	801c1c4 <_vfiprintf_r+0x208>
 801c1fa:	bf00      	nop
 801c1fc:	08022a44 	.word	0x08022a44
 801c200:	08022a64 	.word	0x08022a64
 801c204:	08022a24 	.word	0x08022a24
 801c208:	08022a88 	.word	0x08022a88
 801c20c:	08022a92 	.word	0x08022a92
 801c210:	0801c35d 	.word	0x0801c35d
 801c214:	0801bf97 	.word	0x0801bf97
 801c218:	08022a8e 	.word	0x08022a8e

0801c21c <__cvt>:
 801c21c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c220:	ec55 4b10 	vmov	r4, r5, d0
 801c224:	2d00      	cmp	r5, #0
 801c226:	460e      	mov	r6, r1
 801c228:	4619      	mov	r1, r3
 801c22a:	462b      	mov	r3, r5
 801c22c:	bfbb      	ittet	lt
 801c22e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801c232:	461d      	movlt	r5, r3
 801c234:	2300      	movge	r3, #0
 801c236:	232d      	movlt	r3, #45	; 0x2d
 801c238:	700b      	strb	r3, [r1, #0]
 801c23a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c23c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801c240:	4691      	mov	r9, r2
 801c242:	f023 0820 	bic.w	r8, r3, #32
 801c246:	bfbc      	itt	lt
 801c248:	4622      	movlt	r2, r4
 801c24a:	4614      	movlt	r4, r2
 801c24c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801c250:	d005      	beq.n	801c25e <__cvt+0x42>
 801c252:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801c256:	d100      	bne.n	801c25a <__cvt+0x3e>
 801c258:	3601      	adds	r6, #1
 801c25a:	2102      	movs	r1, #2
 801c25c:	e000      	b.n	801c260 <__cvt+0x44>
 801c25e:	2103      	movs	r1, #3
 801c260:	ab03      	add	r3, sp, #12
 801c262:	9301      	str	r3, [sp, #4]
 801c264:	ab02      	add	r3, sp, #8
 801c266:	9300      	str	r3, [sp, #0]
 801c268:	ec45 4b10 	vmov	d0, r4, r5
 801c26c:	4653      	mov	r3, sl
 801c26e:	4632      	mov	r2, r6
 801c270:	f000 ffa2 	bl	801d1b8 <_dtoa_r>
 801c274:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801c278:	4607      	mov	r7, r0
 801c27a:	d102      	bne.n	801c282 <__cvt+0x66>
 801c27c:	f019 0f01 	tst.w	r9, #1
 801c280:	d022      	beq.n	801c2c8 <__cvt+0xac>
 801c282:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801c286:	eb07 0906 	add.w	r9, r7, r6
 801c28a:	d110      	bne.n	801c2ae <__cvt+0x92>
 801c28c:	783b      	ldrb	r3, [r7, #0]
 801c28e:	2b30      	cmp	r3, #48	; 0x30
 801c290:	d10a      	bne.n	801c2a8 <__cvt+0x8c>
 801c292:	2200      	movs	r2, #0
 801c294:	2300      	movs	r3, #0
 801c296:	4620      	mov	r0, r4
 801c298:	4629      	mov	r1, r5
 801c29a:	f7e4 fc15 	bl	8000ac8 <__aeabi_dcmpeq>
 801c29e:	b918      	cbnz	r0, 801c2a8 <__cvt+0x8c>
 801c2a0:	f1c6 0601 	rsb	r6, r6, #1
 801c2a4:	f8ca 6000 	str.w	r6, [sl]
 801c2a8:	f8da 3000 	ldr.w	r3, [sl]
 801c2ac:	4499      	add	r9, r3
 801c2ae:	2200      	movs	r2, #0
 801c2b0:	2300      	movs	r3, #0
 801c2b2:	4620      	mov	r0, r4
 801c2b4:	4629      	mov	r1, r5
 801c2b6:	f7e4 fc07 	bl	8000ac8 <__aeabi_dcmpeq>
 801c2ba:	b108      	cbz	r0, 801c2c0 <__cvt+0xa4>
 801c2bc:	f8cd 900c 	str.w	r9, [sp, #12]
 801c2c0:	2230      	movs	r2, #48	; 0x30
 801c2c2:	9b03      	ldr	r3, [sp, #12]
 801c2c4:	454b      	cmp	r3, r9
 801c2c6:	d307      	bcc.n	801c2d8 <__cvt+0xbc>
 801c2c8:	9b03      	ldr	r3, [sp, #12]
 801c2ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c2cc:	1bdb      	subs	r3, r3, r7
 801c2ce:	4638      	mov	r0, r7
 801c2d0:	6013      	str	r3, [r2, #0]
 801c2d2:	b004      	add	sp, #16
 801c2d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c2d8:	1c59      	adds	r1, r3, #1
 801c2da:	9103      	str	r1, [sp, #12]
 801c2dc:	701a      	strb	r2, [r3, #0]
 801c2de:	e7f0      	b.n	801c2c2 <__cvt+0xa6>

0801c2e0 <__exponent>:
 801c2e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c2e2:	4603      	mov	r3, r0
 801c2e4:	2900      	cmp	r1, #0
 801c2e6:	bfb8      	it	lt
 801c2e8:	4249      	neglt	r1, r1
 801c2ea:	f803 2b02 	strb.w	r2, [r3], #2
 801c2ee:	bfb4      	ite	lt
 801c2f0:	222d      	movlt	r2, #45	; 0x2d
 801c2f2:	222b      	movge	r2, #43	; 0x2b
 801c2f4:	2909      	cmp	r1, #9
 801c2f6:	7042      	strb	r2, [r0, #1]
 801c2f8:	dd2a      	ble.n	801c350 <__exponent+0x70>
 801c2fa:	f10d 0407 	add.w	r4, sp, #7
 801c2fe:	46a4      	mov	ip, r4
 801c300:	270a      	movs	r7, #10
 801c302:	46a6      	mov	lr, r4
 801c304:	460a      	mov	r2, r1
 801c306:	fb91 f6f7 	sdiv	r6, r1, r7
 801c30a:	fb07 1516 	mls	r5, r7, r6, r1
 801c30e:	3530      	adds	r5, #48	; 0x30
 801c310:	2a63      	cmp	r2, #99	; 0x63
 801c312:	f104 34ff 	add.w	r4, r4, #4294967295
 801c316:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801c31a:	4631      	mov	r1, r6
 801c31c:	dcf1      	bgt.n	801c302 <__exponent+0x22>
 801c31e:	3130      	adds	r1, #48	; 0x30
 801c320:	f1ae 0502 	sub.w	r5, lr, #2
 801c324:	f804 1c01 	strb.w	r1, [r4, #-1]
 801c328:	1c44      	adds	r4, r0, #1
 801c32a:	4629      	mov	r1, r5
 801c32c:	4561      	cmp	r1, ip
 801c32e:	d30a      	bcc.n	801c346 <__exponent+0x66>
 801c330:	f10d 0209 	add.w	r2, sp, #9
 801c334:	eba2 020e 	sub.w	r2, r2, lr
 801c338:	4565      	cmp	r5, ip
 801c33a:	bf88      	it	hi
 801c33c:	2200      	movhi	r2, #0
 801c33e:	4413      	add	r3, r2
 801c340:	1a18      	subs	r0, r3, r0
 801c342:	b003      	add	sp, #12
 801c344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c346:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c34a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801c34e:	e7ed      	b.n	801c32c <__exponent+0x4c>
 801c350:	2330      	movs	r3, #48	; 0x30
 801c352:	3130      	adds	r1, #48	; 0x30
 801c354:	7083      	strb	r3, [r0, #2]
 801c356:	70c1      	strb	r1, [r0, #3]
 801c358:	1d03      	adds	r3, r0, #4
 801c35a:	e7f1      	b.n	801c340 <__exponent+0x60>

0801c35c <_printf_float>:
 801c35c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c360:	ed2d 8b02 	vpush	{d8}
 801c364:	b08d      	sub	sp, #52	; 0x34
 801c366:	460c      	mov	r4, r1
 801c368:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801c36c:	4616      	mov	r6, r2
 801c36e:	461f      	mov	r7, r3
 801c370:	4605      	mov	r5, r0
 801c372:	f001 fdd5 	bl	801df20 <_localeconv_r>
 801c376:	f8d0 a000 	ldr.w	sl, [r0]
 801c37a:	4650      	mov	r0, sl
 801c37c:	f7e3 ff28 	bl	80001d0 <strlen>
 801c380:	2300      	movs	r3, #0
 801c382:	930a      	str	r3, [sp, #40]	; 0x28
 801c384:	6823      	ldr	r3, [r4, #0]
 801c386:	9305      	str	r3, [sp, #20]
 801c388:	f8d8 3000 	ldr.w	r3, [r8]
 801c38c:	f894 b018 	ldrb.w	fp, [r4, #24]
 801c390:	3307      	adds	r3, #7
 801c392:	f023 0307 	bic.w	r3, r3, #7
 801c396:	f103 0208 	add.w	r2, r3, #8
 801c39a:	f8c8 2000 	str.w	r2, [r8]
 801c39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c3a2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801c3a6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801c3aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801c3ae:	9307      	str	r3, [sp, #28]
 801c3b0:	f8cd 8018 	str.w	r8, [sp, #24]
 801c3b4:	ee08 0a10 	vmov	s16, r0
 801c3b8:	4b9f      	ldr	r3, [pc, #636]	; (801c638 <_printf_float+0x2dc>)
 801c3ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c3be:	f04f 32ff 	mov.w	r2, #4294967295
 801c3c2:	f7e4 fbb3 	bl	8000b2c <__aeabi_dcmpun>
 801c3c6:	bb88      	cbnz	r0, 801c42c <_printf_float+0xd0>
 801c3c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c3cc:	4b9a      	ldr	r3, [pc, #616]	; (801c638 <_printf_float+0x2dc>)
 801c3ce:	f04f 32ff 	mov.w	r2, #4294967295
 801c3d2:	f7e4 fb8d 	bl	8000af0 <__aeabi_dcmple>
 801c3d6:	bb48      	cbnz	r0, 801c42c <_printf_float+0xd0>
 801c3d8:	2200      	movs	r2, #0
 801c3da:	2300      	movs	r3, #0
 801c3dc:	4640      	mov	r0, r8
 801c3de:	4649      	mov	r1, r9
 801c3e0:	f7e4 fb7c 	bl	8000adc <__aeabi_dcmplt>
 801c3e4:	b110      	cbz	r0, 801c3ec <_printf_float+0x90>
 801c3e6:	232d      	movs	r3, #45	; 0x2d
 801c3e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c3ec:	4b93      	ldr	r3, [pc, #588]	; (801c63c <_printf_float+0x2e0>)
 801c3ee:	4894      	ldr	r0, [pc, #592]	; (801c640 <_printf_float+0x2e4>)
 801c3f0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801c3f4:	bf94      	ite	ls
 801c3f6:	4698      	movls	r8, r3
 801c3f8:	4680      	movhi	r8, r0
 801c3fa:	2303      	movs	r3, #3
 801c3fc:	6123      	str	r3, [r4, #16]
 801c3fe:	9b05      	ldr	r3, [sp, #20]
 801c400:	f023 0204 	bic.w	r2, r3, #4
 801c404:	6022      	str	r2, [r4, #0]
 801c406:	f04f 0900 	mov.w	r9, #0
 801c40a:	9700      	str	r7, [sp, #0]
 801c40c:	4633      	mov	r3, r6
 801c40e:	aa0b      	add	r2, sp, #44	; 0x2c
 801c410:	4621      	mov	r1, r4
 801c412:	4628      	mov	r0, r5
 801c414:	f000 f9d8 	bl	801c7c8 <_printf_common>
 801c418:	3001      	adds	r0, #1
 801c41a:	f040 8090 	bne.w	801c53e <_printf_float+0x1e2>
 801c41e:	f04f 30ff 	mov.w	r0, #4294967295
 801c422:	b00d      	add	sp, #52	; 0x34
 801c424:	ecbd 8b02 	vpop	{d8}
 801c428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c42c:	4642      	mov	r2, r8
 801c42e:	464b      	mov	r3, r9
 801c430:	4640      	mov	r0, r8
 801c432:	4649      	mov	r1, r9
 801c434:	f7e4 fb7a 	bl	8000b2c <__aeabi_dcmpun>
 801c438:	b140      	cbz	r0, 801c44c <_printf_float+0xf0>
 801c43a:	464b      	mov	r3, r9
 801c43c:	2b00      	cmp	r3, #0
 801c43e:	bfbc      	itt	lt
 801c440:	232d      	movlt	r3, #45	; 0x2d
 801c442:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801c446:	487f      	ldr	r0, [pc, #508]	; (801c644 <_printf_float+0x2e8>)
 801c448:	4b7f      	ldr	r3, [pc, #508]	; (801c648 <_printf_float+0x2ec>)
 801c44a:	e7d1      	b.n	801c3f0 <_printf_float+0x94>
 801c44c:	6863      	ldr	r3, [r4, #4]
 801c44e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801c452:	9206      	str	r2, [sp, #24]
 801c454:	1c5a      	adds	r2, r3, #1
 801c456:	d13f      	bne.n	801c4d8 <_printf_float+0x17c>
 801c458:	2306      	movs	r3, #6
 801c45a:	6063      	str	r3, [r4, #4]
 801c45c:	9b05      	ldr	r3, [sp, #20]
 801c45e:	6861      	ldr	r1, [r4, #4]
 801c460:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801c464:	2300      	movs	r3, #0
 801c466:	9303      	str	r3, [sp, #12]
 801c468:	ab0a      	add	r3, sp, #40	; 0x28
 801c46a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801c46e:	ab09      	add	r3, sp, #36	; 0x24
 801c470:	ec49 8b10 	vmov	d0, r8, r9
 801c474:	9300      	str	r3, [sp, #0]
 801c476:	6022      	str	r2, [r4, #0]
 801c478:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801c47c:	4628      	mov	r0, r5
 801c47e:	f7ff fecd 	bl	801c21c <__cvt>
 801c482:	9b06      	ldr	r3, [sp, #24]
 801c484:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c486:	2b47      	cmp	r3, #71	; 0x47
 801c488:	4680      	mov	r8, r0
 801c48a:	d108      	bne.n	801c49e <_printf_float+0x142>
 801c48c:	1cc8      	adds	r0, r1, #3
 801c48e:	db02      	blt.n	801c496 <_printf_float+0x13a>
 801c490:	6863      	ldr	r3, [r4, #4]
 801c492:	4299      	cmp	r1, r3
 801c494:	dd41      	ble.n	801c51a <_printf_float+0x1be>
 801c496:	f1ab 0b02 	sub.w	fp, fp, #2
 801c49a:	fa5f fb8b 	uxtb.w	fp, fp
 801c49e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801c4a2:	d820      	bhi.n	801c4e6 <_printf_float+0x18a>
 801c4a4:	3901      	subs	r1, #1
 801c4a6:	465a      	mov	r2, fp
 801c4a8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801c4ac:	9109      	str	r1, [sp, #36]	; 0x24
 801c4ae:	f7ff ff17 	bl	801c2e0 <__exponent>
 801c4b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c4b4:	1813      	adds	r3, r2, r0
 801c4b6:	2a01      	cmp	r2, #1
 801c4b8:	4681      	mov	r9, r0
 801c4ba:	6123      	str	r3, [r4, #16]
 801c4bc:	dc02      	bgt.n	801c4c4 <_printf_float+0x168>
 801c4be:	6822      	ldr	r2, [r4, #0]
 801c4c0:	07d2      	lsls	r2, r2, #31
 801c4c2:	d501      	bpl.n	801c4c8 <_printf_float+0x16c>
 801c4c4:	3301      	adds	r3, #1
 801c4c6:	6123      	str	r3, [r4, #16]
 801c4c8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801c4cc:	2b00      	cmp	r3, #0
 801c4ce:	d09c      	beq.n	801c40a <_printf_float+0xae>
 801c4d0:	232d      	movs	r3, #45	; 0x2d
 801c4d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c4d6:	e798      	b.n	801c40a <_printf_float+0xae>
 801c4d8:	9a06      	ldr	r2, [sp, #24]
 801c4da:	2a47      	cmp	r2, #71	; 0x47
 801c4dc:	d1be      	bne.n	801c45c <_printf_float+0x100>
 801c4de:	2b00      	cmp	r3, #0
 801c4e0:	d1bc      	bne.n	801c45c <_printf_float+0x100>
 801c4e2:	2301      	movs	r3, #1
 801c4e4:	e7b9      	b.n	801c45a <_printf_float+0xfe>
 801c4e6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801c4ea:	d118      	bne.n	801c51e <_printf_float+0x1c2>
 801c4ec:	2900      	cmp	r1, #0
 801c4ee:	6863      	ldr	r3, [r4, #4]
 801c4f0:	dd0b      	ble.n	801c50a <_printf_float+0x1ae>
 801c4f2:	6121      	str	r1, [r4, #16]
 801c4f4:	b913      	cbnz	r3, 801c4fc <_printf_float+0x1a0>
 801c4f6:	6822      	ldr	r2, [r4, #0]
 801c4f8:	07d0      	lsls	r0, r2, #31
 801c4fa:	d502      	bpl.n	801c502 <_printf_float+0x1a6>
 801c4fc:	3301      	adds	r3, #1
 801c4fe:	440b      	add	r3, r1
 801c500:	6123      	str	r3, [r4, #16]
 801c502:	65a1      	str	r1, [r4, #88]	; 0x58
 801c504:	f04f 0900 	mov.w	r9, #0
 801c508:	e7de      	b.n	801c4c8 <_printf_float+0x16c>
 801c50a:	b913      	cbnz	r3, 801c512 <_printf_float+0x1b6>
 801c50c:	6822      	ldr	r2, [r4, #0]
 801c50e:	07d2      	lsls	r2, r2, #31
 801c510:	d501      	bpl.n	801c516 <_printf_float+0x1ba>
 801c512:	3302      	adds	r3, #2
 801c514:	e7f4      	b.n	801c500 <_printf_float+0x1a4>
 801c516:	2301      	movs	r3, #1
 801c518:	e7f2      	b.n	801c500 <_printf_float+0x1a4>
 801c51a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801c51e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c520:	4299      	cmp	r1, r3
 801c522:	db05      	blt.n	801c530 <_printf_float+0x1d4>
 801c524:	6823      	ldr	r3, [r4, #0]
 801c526:	6121      	str	r1, [r4, #16]
 801c528:	07d8      	lsls	r0, r3, #31
 801c52a:	d5ea      	bpl.n	801c502 <_printf_float+0x1a6>
 801c52c:	1c4b      	adds	r3, r1, #1
 801c52e:	e7e7      	b.n	801c500 <_printf_float+0x1a4>
 801c530:	2900      	cmp	r1, #0
 801c532:	bfd4      	ite	le
 801c534:	f1c1 0202 	rsble	r2, r1, #2
 801c538:	2201      	movgt	r2, #1
 801c53a:	4413      	add	r3, r2
 801c53c:	e7e0      	b.n	801c500 <_printf_float+0x1a4>
 801c53e:	6823      	ldr	r3, [r4, #0]
 801c540:	055a      	lsls	r2, r3, #21
 801c542:	d407      	bmi.n	801c554 <_printf_float+0x1f8>
 801c544:	6923      	ldr	r3, [r4, #16]
 801c546:	4642      	mov	r2, r8
 801c548:	4631      	mov	r1, r6
 801c54a:	4628      	mov	r0, r5
 801c54c:	47b8      	blx	r7
 801c54e:	3001      	adds	r0, #1
 801c550:	d12c      	bne.n	801c5ac <_printf_float+0x250>
 801c552:	e764      	b.n	801c41e <_printf_float+0xc2>
 801c554:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801c558:	f240 80e0 	bls.w	801c71c <_printf_float+0x3c0>
 801c55c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801c560:	2200      	movs	r2, #0
 801c562:	2300      	movs	r3, #0
 801c564:	f7e4 fab0 	bl	8000ac8 <__aeabi_dcmpeq>
 801c568:	2800      	cmp	r0, #0
 801c56a:	d034      	beq.n	801c5d6 <_printf_float+0x27a>
 801c56c:	4a37      	ldr	r2, [pc, #220]	; (801c64c <_printf_float+0x2f0>)
 801c56e:	2301      	movs	r3, #1
 801c570:	4631      	mov	r1, r6
 801c572:	4628      	mov	r0, r5
 801c574:	47b8      	blx	r7
 801c576:	3001      	adds	r0, #1
 801c578:	f43f af51 	beq.w	801c41e <_printf_float+0xc2>
 801c57c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801c580:	429a      	cmp	r2, r3
 801c582:	db02      	blt.n	801c58a <_printf_float+0x22e>
 801c584:	6823      	ldr	r3, [r4, #0]
 801c586:	07d8      	lsls	r0, r3, #31
 801c588:	d510      	bpl.n	801c5ac <_printf_float+0x250>
 801c58a:	ee18 3a10 	vmov	r3, s16
 801c58e:	4652      	mov	r2, sl
 801c590:	4631      	mov	r1, r6
 801c592:	4628      	mov	r0, r5
 801c594:	47b8      	blx	r7
 801c596:	3001      	adds	r0, #1
 801c598:	f43f af41 	beq.w	801c41e <_printf_float+0xc2>
 801c59c:	f04f 0800 	mov.w	r8, #0
 801c5a0:	f104 091a 	add.w	r9, r4, #26
 801c5a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c5a6:	3b01      	subs	r3, #1
 801c5a8:	4543      	cmp	r3, r8
 801c5aa:	dc09      	bgt.n	801c5c0 <_printf_float+0x264>
 801c5ac:	6823      	ldr	r3, [r4, #0]
 801c5ae:	079b      	lsls	r3, r3, #30
 801c5b0:	f100 8105 	bmi.w	801c7be <_printf_float+0x462>
 801c5b4:	68e0      	ldr	r0, [r4, #12]
 801c5b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c5b8:	4298      	cmp	r0, r3
 801c5ba:	bfb8      	it	lt
 801c5bc:	4618      	movlt	r0, r3
 801c5be:	e730      	b.n	801c422 <_printf_float+0xc6>
 801c5c0:	2301      	movs	r3, #1
 801c5c2:	464a      	mov	r2, r9
 801c5c4:	4631      	mov	r1, r6
 801c5c6:	4628      	mov	r0, r5
 801c5c8:	47b8      	blx	r7
 801c5ca:	3001      	adds	r0, #1
 801c5cc:	f43f af27 	beq.w	801c41e <_printf_float+0xc2>
 801c5d0:	f108 0801 	add.w	r8, r8, #1
 801c5d4:	e7e6      	b.n	801c5a4 <_printf_float+0x248>
 801c5d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c5d8:	2b00      	cmp	r3, #0
 801c5da:	dc39      	bgt.n	801c650 <_printf_float+0x2f4>
 801c5dc:	4a1b      	ldr	r2, [pc, #108]	; (801c64c <_printf_float+0x2f0>)
 801c5de:	2301      	movs	r3, #1
 801c5e0:	4631      	mov	r1, r6
 801c5e2:	4628      	mov	r0, r5
 801c5e4:	47b8      	blx	r7
 801c5e6:	3001      	adds	r0, #1
 801c5e8:	f43f af19 	beq.w	801c41e <_printf_float+0xc2>
 801c5ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801c5f0:	4313      	orrs	r3, r2
 801c5f2:	d102      	bne.n	801c5fa <_printf_float+0x29e>
 801c5f4:	6823      	ldr	r3, [r4, #0]
 801c5f6:	07d9      	lsls	r1, r3, #31
 801c5f8:	d5d8      	bpl.n	801c5ac <_printf_float+0x250>
 801c5fa:	ee18 3a10 	vmov	r3, s16
 801c5fe:	4652      	mov	r2, sl
 801c600:	4631      	mov	r1, r6
 801c602:	4628      	mov	r0, r5
 801c604:	47b8      	blx	r7
 801c606:	3001      	adds	r0, #1
 801c608:	f43f af09 	beq.w	801c41e <_printf_float+0xc2>
 801c60c:	f04f 0900 	mov.w	r9, #0
 801c610:	f104 0a1a 	add.w	sl, r4, #26
 801c614:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c616:	425b      	negs	r3, r3
 801c618:	454b      	cmp	r3, r9
 801c61a:	dc01      	bgt.n	801c620 <_printf_float+0x2c4>
 801c61c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c61e:	e792      	b.n	801c546 <_printf_float+0x1ea>
 801c620:	2301      	movs	r3, #1
 801c622:	4652      	mov	r2, sl
 801c624:	4631      	mov	r1, r6
 801c626:	4628      	mov	r0, r5
 801c628:	47b8      	blx	r7
 801c62a:	3001      	adds	r0, #1
 801c62c:	f43f aef7 	beq.w	801c41e <_printf_float+0xc2>
 801c630:	f109 0901 	add.w	r9, r9, #1
 801c634:	e7ee      	b.n	801c614 <_printf_float+0x2b8>
 801c636:	bf00      	nop
 801c638:	7fefffff 	.word	0x7fefffff
 801c63c:	08022a99 	.word	0x08022a99
 801c640:	08022a9d 	.word	0x08022a9d
 801c644:	08022aa5 	.word	0x08022aa5
 801c648:	08022aa1 	.word	0x08022aa1
 801c64c:	08022aa9 	.word	0x08022aa9
 801c650:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c652:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801c654:	429a      	cmp	r2, r3
 801c656:	bfa8      	it	ge
 801c658:	461a      	movge	r2, r3
 801c65a:	2a00      	cmp	r2, #0
 801c65c:	4691      	mov	r9, r2
 801c65e:	dc37      	bgt.n	801c6d0 <_printf_float+0x374>
 801c660:	f04f 0b00 	mov.w	fp, #0
 801c664:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801c668:	f104 021a 	add.w	r2, r4, #26
 801c66c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801c66e:	9305      	str	r3, [sp, #20]
 801c670:	eba3 0309 	sub.w	r3, r3, r9
 801c674:	455b      	cmp	r3, fp
 801c676:	dc33      	bgt.n	801c6e0 <_printf_float+0x384>
 801c678:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801c67c:	429a      	cmp	r2, r3
 801c67e:	db3b      	blt.n	801c6f8 <_printf_float+0x39c>
 801c680:	6823      	ldr	r3, [r4, #0]
 801c682:	07da      	lsls	r2, r3, #31
 801c684:	d438      	bmi.n	801c6f8 <_printf_float+0x39c>
 801c686:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c688:	9b05      	ldr	r3, [sp, #20]
 801c68a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c68c:	1ad3      	subs	r3, r2, r3
 801c68e:	eba2 0901 	sub.w	r9, r2, r1
 801c692:	4599      	cmp	r9, r3
 801c694:	bfa8      	it	ge
 801c696:	4699      	movge	r9, r3
 801c698:	f1b9 0f00 	cmp.w	r9, #0
 801c69c:	dc35      	bgt.n	801c70a <_printf_float+0x3ae>
 801c69e:	f04f 0800 	mov.w	r8, #0
 801c6a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801c6a6:	f104 0a1a 	add.w	sl, r4, #26
 801c6aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801c6ae:	1a9b      	subs	r3, r3, r2
 801c6b0:	eba3 0309 	sub.w	r3, r3, r9
 801c6b4:	4543      	cmp	r3, r8
 801c6b6:	f77f af79 	ble.w	801c5ac <_printf_float+0x250>
 801c6ba:	2301      	movs	r3, #1
 801c6bc:	4652      	mov	r2, sl
 801c6be:	4631      	mov	r1, r6
 801c6c0:	4628      	mov	r0, r5
 801c6c2:	47b8      	blx	r7
 801c6c4:	3001      	adds	r0, #1
 801c6c6:	f43f aeaa 	beq.w	801c41e <_printf_float+0xc2>
 801c6ca:	f108 0801 	add.w	r8, r8, #1
 801c6ce:	e7ec      	b.n	801c6aa <_printf_float+0x34e>
 801c6d0:	4613      	mov	r3, r2
 801c6d2:	4631      	mov	r1, r6
 801c6d4:	4642      	mov	r2, r8
 801c6d6:	4628      	mov	r0, r5
 801c6d8:	47b8      	blx	r7
 801c6da:	3001      	adds	r0, #1
 801c6dc:	d1c0      	bne.n	801c660 <_printf_float+0x304>
 801c6de:	e69e      	b.n	801c41e <_printf_float+0xc2>
 801c6e0:	2301      	movs	r3, #1
 801c6e2:	4631      	mov	r1, r6
 801c6e4:	4628      	mov	r0, r5
 801c6e6:	9205      	str	r2, [sp, #20]
 801c6e8:	47b8      	blx	r7
 801c6ea:	3001      	adds	r0, #1
 801c6ec:	f43f ae97 	beq.w	801c41e <_printf_float+0xc2>
 801c6f0:	9a05      	ldr	r2, [sp, #20]
 801c6f2:	f10b 0b01 	add.w	fp, fp, #1
 801c6f6:	e7b9      	b.n	801c66c <_printf_float+0x310>
 801c6f8:	ee18 3a10 	vmov	r3, s16
 801c6fc:	4652      	mov	r2, sl
 801c6fe:	4631      	mov	r1, r6
 801c700:	4628      	mov	r0, r5
 801c702:	47b8      	blx	r7
 801c704:	3001      	adds	r0, #1
 801c706:	d1be      	bne.n	801c686 <_printf_float+0x32a>
 801c708:	e689      	b.n	801c41e <_printf_float+0xc2>
 801c70a:	9a05      	ldr	r2, [sp, #20]
 801c70c:	464b      	mov	r3, r9
 801c70e:	4442      	add	r2, r8
 801c710:	4631      	mov	r1, r6
 801c712:	4628      	mov	r0, r5
 801c714:	47b8      	blx	r7
 801c716:	3001      	adds	r0, #1
 801c718:	d1c1      	bne.n	801c69e <_printf_float+0x342>
 801c71a:	e680      	b.n	801c41e <_printf_float+0xc2>
 801c71c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c71e:	2a01      	cmp	r2, #1
 801c720:	dc01      	bgt.n	801c726 <_printf_float+0x3ca>
 801c722:	07db      	lsls	r3, r3, #31
 801c724:	d538      	bpl.n	801c798 <_printf_float+0x43c>
 801c726:	2301      	movs	r3, #1
 801c728:	4642      	mov	r2, r8
 801c72a:	4631      	mov	r1, r6
 801c72c:	4628      	mov	r0, r5
 801c72e:	47b8      	blx	r7
 801c730:	3001      	adds	r0, #1
 801c732:	f43f ae74 	beq.w	801c41e <_printf_float+0xc2>
 801c736:	ee18 3a10 	vmov	r3, s16
 801c73a:	4652      	mov	r2, sl
 801c73c:	4631      	mov	r1, r6
 801c73e:	4628      	mov	r0, r5
 801c740:	47b8      	blx	r7
 801c742:	3001      	adds	r0, #1
 801c744:	f43f ae6b 	beq.w	801c41e <_printf_float+0xc2>
 801c748:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801c74c:	2200      	movs	r2, #0
 801c74e:	2300      	movs	r3, #0
 801c750:	f7e4 f9ba 	bl	8000ac8 <__aeabi_dcmpeq>
 801c754:	b9d8      	cbnz	r0, 801c78e <_printf_float+0x432>
 801c756:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c758:	f108 0201 	add.w	r2, r8, #1
 801c75c:	3b01      	subs	r3, #1
 801c75e:	4631      	mov	r1, r6
 801c760:	4628      	mov	r0, r5
 801c762:	47b8      	blx	r7
 801c764:	3001      	adds	r0, #1
 801c766:	d10e      	bne.n	801c786 <_printf_float+0x42a>
 801c768:	e659      	b.n	801c41e <_printf_float+0xc2>
 801c76a:	2301      	movs	r3, #1
 801c76c:	4652      	mov	r2, sl
 801c76e:	4631      	mov	r1, r6
 801c770:	4628      	mov	r0, r5
 801c772:	47b8      	blx	r7
 801c774:	3001      	adds	r0, #1
 801c776:	f43f ae52 	beq.w	801c41e <_printf_float+0xc2>
 801c77a:	f108 0801 	add.w	r8, r8, #1
 801c77e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c780:	3b01      	subs	r3, #1
 801c782:	4543      	cmp	r3, r8
 801c784:	dcf1      	bgt.n	801c76a <_printf_float+0x40e>
 801c786:	464b      	mov	r3, r9
 801c788:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801c78c:	e6dc      	b.n	801c548 <_printf_float+0x1ec>
 801c78e:	f04f 0800 	mov.w	r8, #0
 801c792:	f104 0a1a 	add.w	sl, r4, #26
 801c796:	e7f2      	b.n	801c77e <_printf_float+0x422>
 801c798:	2301      	movs	r3, #1
 801c79a:	4642      	mov	r2, r8
 801c79c:	e7df      	b.n	801c75e <_printf_float+0x402>
 801c79e:	2301      	movs	r3, #1
 801c7a0:	464a      	mov	r2, r9
 801c7a2:	4631      	mov	r1, r6
 801c7a4:	4628      	mov	r0, r5
 801c7a6:	47b8      	blx	r7
 801c7a8:	3001      	adds	r0, #1
 801c7aa:	f43f ae38 	beq.w	801c41e <_printf_float+0xc2>
 801c7ae:	f108 0801 	add.w	r8, r8, #1
 801c7b2:	68e3      	ldr	r3, [r4, #12]
 801c7b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801c7b6:	1a5b      	subs	r3, r3, r1
 801c7b8:	4543      	cmp	r3, r8
 801c7ba:	dcf0      	bgt.n	801c79e <_printf_float+0x442>
 801c7bc:	e6fa      	b.n	801c5b4 <_printf_float+0x258>
 801c7be:	f04f 0800 	mov.w	r8, #0
 801c7c2:	f104 0919 	add.w	r9, r4, #25
 801c7c6:	e7f4      	b.n	801c7b2 <_printf_float+0x456>

0801c7c8 <_printf_common>:
 801c7c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c7cc:	4616      	mov	r6, r2
 801c7ce:	4699      	mov	r9, r3
 801c7d0:	688a      	ldr	r2, [r1, #8]
 801c7d2:	690b      	ldr	r3, [r1, #16]
 801c7d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801c7d8:	4293      	cmp	r3, r2
 801c7da:	bfb8      	it	lt
 801c7dc:	4613      	movlt	r3, r2
 801c7de:	6033      	str	r3, [r6, #0]
 801c7e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801c7e4:	4607      	mov	r7, r0
 801c7e6:	460c      	mov	r4, r1
 801c7e8:	b10a      	cbz	r2, 801c7ee <_printf_common+0x26>
 801c7ea:	3301      	adds	r3, #1
 801c7ec:	6033      	str	r3, [r6, #0]
 801c7ee:	6823      	ldr	r3, [r4, #0]
 801c7f0:	0699      	lsls	r1, r3, #26
 801c7f2:	bf42      	ittt	mi
 801c7f4:	6833      	ldrmi	r3, [r6, #0]
 801c7f6:	3302      	addmi	r3, #2
 801c7f8:	6033      	strmi	r3, [r6, #0]
 801c7fa:	6825      	ldr	r5, [r4, #0]
 801c7fc:	f015 0506 	ands.w	r5, r5, #6
 801c800:	d106      	bne.n	801c810 <_printf_common+0x48>
 801c802:	f104 0a19 	add.w	sl, r4, #25
 801c806:	68e3      	ldr	r3, [r4, #12]
 801c808:	6832      	ldr	r2, [r6, #0]
 801c80a:	1a9b      	subs	r3, r3, r2
 801c80c:	42ab      	cmp	r3, r5
 801c80e:	dc26      	bgt.n	801c85e <_printf_common+0x96>
 801c810:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801c814:	1e13      	subs	r3, r2, #0
 801c816:	6822      	ldr	r2, [r4, #0]
 801c818:	bf18      	it	ne
 801c81a:	2301      	movne	r3, #1
 801c81c:	0692      	lsls	r2, r2, #26
 801c81e:	d42b      	bmi.n	801c878 <_printf_common+0xb0>
 801c820:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801c824:	4649      	mov	r1, r9
 801c826:	4638      	mov	r0, r7
 801c828:	47c0      	blx	r8
 801c82a:	3001      	adds	r0, #1
 801c82c:	d01e      	beq.n	801c86c <_printf_common+0xa4>
 801c82e:	6823      	ldr	r3, [r4, #0]
 801c830:	68e5      	ldr	r5, [r4, #12]
 801c832:	6832      	ldr	r2, [r6, #0]
 801c834:	f003 0306 	and.w	r3, r3, #6
 801c838:	2b04      	cmp	r3, #4
 801c83a:	bf08      	it	eq
 801c83c:	1aad      	subeq	r5, r5, r2
 801c83e:	68a3      	ldr	r3, [r4, #8]
 801c840:	6922      	ldr	r2, [r4, #16]
 801c842:	bf0c      	ite	eq
 801c844:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c848:	2500      	movne	r5, #0
 801c84a:	4293      	cmp	r3, r2
 801c84c:	bfc4      	itt	gt
 801c84e:	1a9b      	subgt	r3, r3, r2
 801c850:	18ed      	addgt	r5, r5, r3
 801c852:	2600      	movs	r6, #0
 801c854:	341a      	adds	r4, #26
 801c856:	42b5      	cmp	r5, r6
 801c858:	d11a      	bne.n	801c890 <_printf_common+0xc8>
 801c85a:	2000      	movs	r0, #0
 801c85c:	e008      	b.n	801c870 <_printf_common+0xa8>
 801c85e:	2301      	movs	r3, #1
 801c860:	4652      	mov	r2, sl
 801c862:	4649      	mov	r1, r9
 801c864:	4638      	mov	r0, r7
 801c866:	47c0      	blx	r8
 801c868:	3001      	adds	r0, #1
 801c86a:	d103      	bne.n	801c874 <_printf_common+0xac>
 801c86c:	f04f 30ff 	mov.w	r0, #4294967295
 801c870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c874:	3501      	adds	r5, #1
 801c876:	e7c6      	b.n	801c806 <_printf_common+0x3e>
 801c878:	18e1      	adds	r1, r4, r3
 801c87a:	1c5a      	adds	r2, r3, #1
 801c87c:	2030      	movs	r0, #48	; 0x30
 801c87e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801c882:	4422      	add	r2, r4
 801c884:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801c888:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801c88c:	3302      	adds	r3, #2
 801c88e:	e7c7      	b.n	801c820 <_printf_common+0x58>
 801c890:	2301      	movs	r3, #1
 801c892:	4622      	mov	r2, r4
 801c894:	4649      	mov	r1, r9
 801c896:	4638      	mov	r0, r7
 801c898:	47c0      	blx	r8
 801c89a:	3001      	adds	r0, #1
 801c89c:	d0e6      	beq.n	801c86c <_printf_common+0xa4>
 801c89e:	3601      	adds	r6, #1
 801c8a0:	e7d9      	b.n	801c856 <_printf_common+0x8e>
	...

0801c8a4 <_printf_i>:
 801c8a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c8a8:	460c      	mov	r4, r1
 801c8aa:	4691      	mov	r9, r2
 801c8ac:	7e27      	ldrb	r7, [r4, #24]
 801c8ae:	990c      	ldr	r1, [sp, #48]	; 0x30
 801c8b0:	2f78      	cmp	r7, #120	; 0x78
 801c8b2:	4680      	mov	r8, r0
 801c8b4:	469a      	mov	sl, r3
 801c8b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801c8ba:	d807      	bhi.n	801c8cc <_printf_i+0x28>
 801c8bc:	2f62      	cmp	r7, #98	; 0x62
 801c8be:	d80a      	bhi.n	801c8d6 <_printf_i+0x32>
 801c8c0:	2f00      	cmp	r7, #0
 801c8c2:	f000 80d8 	beq.w	801ca76 <_printf_i+0x1d2>
 801c8c6:	2f58      	cmp	r7, #88	; 0x58
 801c8c8:	f000 80a3 	beq.w	801ca12 <_printf_i+0x16e>
 801c8cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801c8d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801c8d4:	e03a      	b.n	801c94c <_printf_i+0xa8>
 801c8d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801c8da:	2b15      	cmp	r3, #21
 801c8dc:	d8f6      	bhi.n	801c8cc <_printf_i+0x28>
 801c8de:	a001      	add	r0, pc, #4	; (adr r0, 801c8e4 <_printf_i+0x40>)
 801c8e0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801c8e4:	0801c93d 	.word	0x0801c93d
 801c8e8:	0801c951 	.word	0x0801c951
 801c8ec:	0801c8cd 	.word	0x0801c8cd
 801c8f0:	0801c8cd 	.word	0x0801c8cd
 801c8f4:	0801c8cd 	.word	0x0801c8cd
 801c8f8:	0801c8cd 	.word	0x0801c8cd
 801c8fc:	0801c951 	.word	0x0801c951
 801c900:	0801c8cd 	.word	0x0801c8cd
 801c904:	0801c8cd 	.word	0x0801c8cd
 801c908:	0801c8cd 	.word	0x0801c8cd
 801c90c:	0801c8cd 	.word	0x0801c8cd
 801c910:	0801ca5d 	.word	0x0801ca5d
 801c914:	0801c981 	.word	0x0801c981
 801c918:	0801ca3f 	.word	0x0801ca3f
 801c91c:	0801c8cd 	.word	0x0801c8cd
 801c920:	0801c8cd 	.word	0x0801c8cd
 801c924:	0801ca7f 	.word	0x0801ca7f
 801c928:	0801c8cd 	.word	0x0801c8cd
 801c92c:	0801c981 	.word	0x0801c981
 801c930:	0801c8cd 	.word	0x0801c8cd
 801c934:	0801c8cd 	.word	0x0801c8cd
 801c938:	0801ca47 	.word	0x0801ca47
 801c93c:	680b      	ldr	r3, [r1, #0]
 801c93e:	1d1a      	adds	r2, r3, #4
 801c940:	681b      	ldr	r3, [r3, #0]
 801c942:	600a      	str	r2, [r1, #0]
 801c944:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801c948:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801c94c:	2301      	movs	r3, #1
 801c94e:	e0a3      	b.n	801ca98 <_printf_i+0x1f4>
 801c950:	6825      	ldr	r5, [r4, #0]
 801c952:	6808      	ldr	r0, [r1, #0]
 801c954:	062e      	lsls	r6, r5, #24
 801c956:	f100 0304 	add.w	r3, r0, #4
 801c95a:	d50a      	bpl.n	801c972 <_printf_i+0xce>
 801c95c:	6805      	ldr	r5, [r0, #0]
 801c95e:	600b      	str	r3, [r1, #0]
 801c960:	2d00      	cmp	r5, #0
 801c962:	da03      	bge.n	801c96c <_printf_i+0xc8>
 801c964:	232d      	movs	r3, #45	; 0x2d
 801c966:	426d      	negs	r5, r5
 801c968:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c96c:	485e      	ldr	r0, [pc, #376]	; (801cae8 <_printf_i+0x244>)
 801c96e:	230a      	movs	r3, #10
 801c970:	e019      	b.n	801c9a6 <_printf_i+0x102>
 801c972:	f015 0f40 	tst.w	r5, #64	; 0x40
 801c976:	6805      	ldr	r5, [r0, #0]
 801c978:	600b      	str	r3, [r1, #0]
 801c97a:	bf18      	it	ne
 801c97c:	b22d      	sxthne	r5, r5
 801c97e:	e7ef      	b.n	801c960 <_printf_i+0xbc>
 801c980:	680b      	ldr	r3, [r1, #0]
 801c982:	6825      	ldr	r5, [r4, #0]
 801c984:	1d18      	adds	r0, r3, #4
 801c986:	6008      	str	r0, [r1, #0]
 801c988:	0628      	lsls	r0, r5, #24
 801c98a:	d501      	bpl.n	801c990 <_printf_i+0xec>
 801c98c:	681d      	ldr	r5, [r3, #0]
 801c98e:	e002      	b.n	801c996 <_printf_i+0xf2>
 801c990:	0669      	lsls	r1, r5, #25
 801c992:	d5fb      	bpl.n	801c98c <_printf_i+0xe8>
 801c994:	881d      	ldrh	r5, [r3, #0]
 801c996:	4854      	ldr	r0, [pc, #336]	; (801cae8 <_printf_i+0x244>)
 801c998:	2f6f      	cmp	r7, #111	; 0x6f
 801c99a:	bf0c      	ite	eq
 801c99c:	2308      	moveq	r3, #8
 801c99e:	230a      	movne	r3, #10
 801c9a0:	2100      	movs	r1, #0
 801c9a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801c9a6:	6866      	ldr	r6, [r4, #4]
 801c9a8:	60a6      	str	r6, [r4, #8]
 801c9aa:	2e00      	cmp	r6, #0
 801c9ac:	bfa2      	ittt	ge
 801c9ae:	6821      	ldrge	r1, [r4, #0]
 801c9b0:	f021 0104 	bicge.w	r1, r1, #4
 801c9b4:	6021      	strge	r1, [r4, #0]
 801c9b6:	b90d      	cbnz	r5, 801c9bc <_printf_i+0x118>
 801c9b8:	2e00      	cmp	r6, #0
 801c9ba:	d04d      	beq.n	801ca58 <_printf_i+0x1b4>
 801c9bc:	4616      	mov	r6, r2
 801c9be:	fbb5 f1f3 	udiv	r1, r5, r3
 801c9c2:	fb03 5711 	mls	r7, r3, r1, r5
 801c9c6:	5dc7      	ldrb	r7, [r0, r7]
 801c9c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801c9cc:	462f      	mov	r7, r5
 801c9ce:	42bb      	cmp	r3, r7
 801c9d0:	460d      	mov	r5, r1
 801c9d2:	d9f4      	bls.n	801c9be <_printf_i+0x11a>
 801c9d4:	2b08      	cmp	r3, #8
 801c9d6:	d10b      	bne.n	801c9f0 <_printf_i+0x14c>
 801c9d8:	6823      	ldr	r3, [r4, #0]
 801c9da:	07df      	lsls	r7, r3, #31
 801c9dc:	d508      	bpl.n	801c9f0 <_printf_i+0x14c>
 801c9de:	6923      	ldr	r3, [r4, #16]
 801c9e0:	6861      	ldr	r1, [r4, #4]
 801c9e2:	4299      	cmp	r1, r3
 801c9e4:	bfde      	ittt	le
 801c9e6:	2330      	movle	r3, #48	; 0x30
 801c9e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 801c9ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 801c9f0:	1b92      	subs	r2, r2, r6
 801c9f2:	6122      	str	r2, [r4, #16]
 801c9f4:	f8cd a000 	str.w	sl, [sp]
 801c9f8:	464b      	mov	r3, r9
 801c9fa:	aa03      	add	r2, sp, #12
 801c9fc:	4621      	mov	r1, r4
 801c9fe:	4640      	mov	r0, r8
 801ca00:	f7ff fee2 	bl	801c7c8 <_printf_common>
 801ca04:	3001      	adds	r0, #1
 801ca06:	d14c      	bne.n	801caa2 <_printf_i+0x1fe>
 801ca08:	f04f 30ff 	mov.w	r0, #4294967295
 801ca0c:	b004      	add	sp, #16
 801ca0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ca12:	4835      	ldr	r0, [pc, #212]	; (801cae8 <_printf_i+0x244>)
 801ca14:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801ca18:	6823      	ldr	r3, [r4, #0]
 801ca1a:	680e      	ldr	r6, [r1, #0]
 801ca1c:	061f      	lsls	r7, r3, #24
 801ca1e:	f856 5b04 	ldr.w	r5, [r6], #4
 801ca22:	600e      	str	r6, [r1, #0]
 801ca24:	d514      	bpl.n	801ca50 <_printf_i+0x1ac>
 801ca26:	07d9      	lsls	r1, r3, #31
 801ca28:	bf44      	itt	mi
 801ca2a:	f043 0320 	orrmi.w	r3, r3, #32
 801ca2e:	6023      	strmi	r3, [r4, #0]
 801ca30:	b91d      	cbnz	r5, 801ca3a <_printf_i+0x196>
 801ca32:	6823      	ldr	r3, [r4, #0]
 801ca34:	f023 0320 	bic.w	r3, r3, #32
 801ca38:	6023      	str	r3, [r4, #0]
 801ca3a:	2310      	movs	r3, #16
 801ca3c:	e7b0      	b.n	801c9a0 <_printf_i+0xfc>
 801ca3e:	6823      	ldr	r3, [r4, #0]
 801ca40:	f043 0320 	orr.w	r3, r3, #32
 801ca44:	6023      	str	r3, [r4, #0]
 801ca46:	2378      	movs	r3, #120	; 0x78
 801ca48:	4828      	ldr	r0, [pc, #160]	; (801caec <_printf_i+0x248>)
 801ca4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801ca4e:	e7e3      	b.n	801ca18 <_printf_i+0x174>
 801ca50:	065e      	lsls	r6, r3, #25
 801ca52:	bf48      	it	mi
 801ca54:	b2ad      	uxthmi	r5, r5
 801ca56:	e7e6      	b.n	801ca26 <_printf_i+0x182>
 801ca58:	4616      	mov	r6, r2
 801ca5a:	e7bb      	b.n	801c9d4 <_printf_i+0x130>
 801ca5c:	680b      	ldr	r3, [r1, #0]
 801ca5e:	6826      	ldr	r6, [r4, #0]
 801ca60:	6960      	ldr	r0, [r4, #20]
 801ca62:	1d1d      	adds	r5, r3, #4
 801ca64:	600d      	str	r5, [r1, #0]
 801ca66:	0635      	lsls	r5, r6, #24
 801ca68:	681b      	ldr	r3, [r3, #0]
 801ca6a:	d501      	bpl.n	801ca70 <_printf_i+0x1cc>
 801ca6c:	6018      	str	r0, [r3, #0]
 801ca6e:	e002      	b.n	801ca76 <_printf_i+0x1d2>
 801ca70:	0671      	lsls	r1, r6, #25
 801ca72:	d5fb      	bpl.n	801ca6c <_printf_i+0x1c8>
 801ca74:	8018      	strh	r0, [r3, #0]
 801ca76:	2300      	movs	r3, #0
 801ca78:	6123      	str	r3, [r4, #16]
 801ca7a:	4616      	mov	r6, r2
 801ca7c:	e7ba      	b.n	801c9f4 <_printf_i+0x150>
 801ca7e:	680b      	ldr	r3, [r1, #0]
 801ca80:	1d1a      	adds	r2, r3, #4
 801ca82:	600a      	str	r2, [r1, #0]
 801ca84:	681e      	ldr	r6, [r3, #0]
 801ca86:	6862      	ldr	r2, [r4, #4]
 801ca88:	2100      	movs	r1, #0
 801ca8a:	4630      	mov	r0, r6
 801ca8c:	f7e3 fba8 	bl	80001e0 <memchr>
 801ca90:	b108      	cbz	r0, 801ca96 <_printf_i+0x1f2>
 801ca92:	1b80      	subs	r0, r0, r6
 801ca94:	6060      	str	r0, [r4, #4]
 801ca96:	6863      	ldr	r3, [r4, #4]
 801ca98:	6123      	str	r3, [r4, #16]
 801ca9a:	2300      	movs	r3, #0
 801ca9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801caa0:	e7a8      	b.n	801c9f4 <_printf_i+0x150>
 801caa2:	6923      	ldr	r3, [r4, #16]
 801caa4:	4632      	mov	r2, r6
 801caa6:	4649      	mov	r1, r9
 801caa8:	4640      	mov	r0, r8
 801caaa:	47d0      	blx	sl
 801caac:	3001      	adds	r0, #1
 801caae:	d0ab      	beq.n	801ca08 <_printf_i+0x164>
 801cab0:	6823      	ldr	r3, [r4, #0]
 801cab2:	079b      	lsls	r3, r3, #30
 801cab4:	d413      	bmi.n	801cade <_printf_i+0x23a>
 801cab6:	68e0      	ldr	r0, [r4, #12]
 801cab8:	9b03      	ldr	r3, [sp, #12]
 801caba:	4298      	cmp	r0, r3
 801cabc:	bfb8      	it	lt
 801cabe:	4618      	movlt	r0, r3
 801cac0:	e7a4      	b.n	801ca0c <_printf_i+0x168>
 801cac2:	2301      	movs	r3, #1
 801cac4:	4632      	mov	r2, r6
 801cac6:	4649      	mov	r1, r9
 801cac8:	4640      	mov	r0, r8
 801caca:	47d0      	blx	sl
 801cacc:	3001      	adds	r0, #1
 801cace:	d09b      	beq.n	801ca08 <_printf_i+0x164>
 801cad0:	3501      	adds	r5, #1
 801cad2:	68e3      	ldr	r3, [r4, #12]
 801cad4:	9903      	ldr	r1, [sp, #12]
 801cad6:	1a5b      	subs	r3, r3, r1
 801cad8:	42ab      	cmp	r3, r5
 801cada:	dcf2      	bgt.n	801cac2 <_printf_i+0x21e>
 801cadc:	e7eb      	b.n	801cab6 <_printf_i+0x212>
 801cade:	2500      	movs	r5, #0
 801cae0:	f104 0619 	add.w	r6, r4, #25
 801cae4:	e7f5      	b.n	801cad2 <_printf_i+0x22e>
 801cae6:	bf00      	nop
 801cae8:	08022aab 	.word	0x08022aab
 801caec:	08022abc 	.word	0x08022abc

0801caf0 <iprintf>:
 801caf0:	b40f      	push	{r0, r1, r2, r3}
 801caf2:	4b0a      	ldr	r3, [pc, #40]	; (801cb1c <iprintf+0x2c>)
 801caf4:	b513      	push	{r0, r1, r4, lr}
 801caf6:	681c      	ldr	r4, [r3, #0]
 801caf8:	b124      	cbz	r4, 801cb04 <iprintf+0x14>
 801cafa:	69a3      	ldr	r3, [r4, #24]
 801cafc:	b913      	cbnz	r3, 801cb04 <iprintf+0x14>
 801cafe:	4620      	mov	r0, r4
 801cb00:	f7ff f862 	bl	801bbc8 <__sinit>
 801cb04:	ab05      	add	r3, sp, #20
 801cb06:	9a04      	ldr	r2, [sp, #16]
 801cb08:	68a1      	ldr	r1, [r4, #8]
 801cb0a:	9301      	str	r3, [sp, #4]
 801cb0c:	4620      	mov	r0, r4
 801cb0e:	f7ff fa55 	bl	801bfbc <_vfiprintf_r>
 801cb12:	b002      	add	sp, #8
 801cb14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cb18:	b004      	add	sp, #16
 801cb1a:	4770      	bx	lr
 801cb1c:	10000134 	.word	0x10000134

0801cb20 <rand>:
 801cb20:	4b17      	ldr	r3, [pc, #92]	; (801cb80 <rand+0x60>)
 801cb22:	b510      	push	{r4, lr}
 801cb24:	681c      	ldr	r4, [r3, #0]
 801cb26:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801cb28:	b9b3      	cbnz	r3, 801cb58 <rand+0x38>
 801cb2a:	2018      	movs	r0, #24
 801cb2c:	f7ff f924 	bl	801bd78 <malloc>
 801cb30:	63a0      	str	r0, [r4, #56]	; 0x38
 801cb32:	b928      	cbnz	r0, 801cb40 <rand+0x20>
 801cb34:	4602      	mov	r2, r0
 801cb36:	4b13      	ldr	r3, [pc, #76]	; (801cb84 <rand+0x64>)
 801cb38:	4813      	ldr	r0, [pc, #76]	; (801cb88 <rand+0x68>)
 801cb3a:	214e      	movs	r1, #78	; 0x4e
 801cb3c:	f7fe ffca 	bl	801bad4 <__assert_func>
 801cb40:	4a12      	ldr	r2, [pc, #72]	; (801cb8c <rand+0x6c>)
 801cb42:	4b13      	ldr	r3, [pc, #76]	; (801cb90 <rand+0x70>)
 801cb44:	e9c0 2300 	strd	r2, r3, [r0]
 801cb48:	4b12      	ldr	r3, [pc, #72]	; (801cb94 <rand+0x74>)
 801cb4a:	6083      	str	r3, [r0, #8]
 801cb4c:	230b      	movs	r3, #11
 801cb4e:	8183      	strh	r3, [r0, #12]
 801cb50:	2201      	movs	r2, #1
 801cb52:	2300      	movs	r3, #0
 801cb54:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801cb58:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801cb5a:	480f      	ldr	r0, [pc, #60]	; (801cb98 <rand+0x78>)
 801cb5c:	690a      	ldr	r2, [r1, #16]
 801cb5e:	694b      	ldr	r3, [r1, #20]
 801cb60:	4c0e      	ldr	r4, [pc, #56]	; (801cb9c <rand+0x7c>)
 801cb62:	4350      	muls	r0, r2
 801cb64:	fb04 0003 	mla	r0, r4, r3, r0
 801cb68:	fba2 3404 	umull	r3, r4, r2, r4
 801cb6c:	1c5a      	adds	r2, r3, #1
 801cb6e:	4404      	add	r4, r0
 801cb70:	f144 0000 	adc.w	r0, r4, #0
 801cb74:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801cb78:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801cb7c:	bd10      	pop	{r4, pc}
 801cb7e:	bf00      	nop
 801cb80:	10000134 	.word	0x10000134
 801cb84:	08022acd 	.word	0x08022acd
 801cb88:	08022ae4 	.word	0x08022ae4
 801cb8c:	abcd330e 	.word	0xabcd330e
 801cb90:	e66d1234 	.word	0xe66d1234
 801cb94:	0005deec 	.word	0x0005deec
 801cb98:	5851f42d 	.word	0x5851f42d
 801cb9c:	4c957f2d 	.word	0x4c957f2d

0801cba0 <realloc>:
 801cba0:	4b02      	ldr	r3, [pc, #8]	; (801cbac <realloc+0xc>)
 801cba2:	460a      	mov	r2, r1
 801cba4:	4601      	mov	r1, r0
 801cba6:	6818      	ldr	r0, [r3, #0]
 801cba8:	f001 bddf 	b.w	801e76a <_realloc_r>
 801cbac:	10000134 	.word	0x10000134

0801cbb0 <cleanup_glue>:
 801cbb0:	b538      	push	{r3, r4, r5, lr}
 801cbb2:	460c      	mov	r4, r1
 801cbb4:	6809      	ldr	r1, [r1, #0]
 801cbb6:	4605      	mov	r5, r0
 801cbb8:	b109      	cbz	r1, 801cbbe <cleanup_glue+0xe>
 801cbba:	f7ff fff9 	bl	801cbb0 <cleanup_glue>
 801cbbe:	4621      	mov	r1, r4
 801cbc0:	4628      	mov	r0, r5
 801cbc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801cbc6:	f7ff b925 	b.w	801be14 <_free_r>
	...

0801cbcc <_reclaim_reent>:
 801cbcc:	4b2c      	ldr	r3, [pc, #176]	; (801cc80 <_reclaim_reent+0xb4>)
 801cbce:	681b      	ldr	r3, [r3, #0]
 801cbd0:	4283      	cmp	r3, r0
 801cbd2:	b570      	push	{r4, r5, r6, lr}
 801cbd4:	4604      	mov	r4, r0
 801cbd6:	d051      	beq.n	801cc7c <_reclaim_reent+0xb0>
 801cbd8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801cbda:	b143      	cbz	r3, 801cbee <_reclaim_reent+0x22>
 801cbdc:	68db      	ldr	r3, [r3, #12]
 801cbde:	2b00      	cmp	r3, #0
 801cbe0:	d14a      	bne.n	801cc78 <_reclaim_reent+0xac>
 801cbe2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801cbe4:	6819      	ldr	r1, [r3, #0]
 801cbe6:	b111      	cbz	r1, 801cbee <_reclaim_reent+0x22>
 801cbe8:	4620      	mov	r0, r4
 801cbea:	f7ff f913 	bl	801be14 <_free_r>
 801cbee:	6961      	ldr	r1, [r4, #20]
 801cbf0:	b111      	cbz	r1, 801cbf8 <_reclaim_reent+0x2c>
 801cbf2:	4620      	mov	r0, r4
 801cbf4:	f7ff f90e 	bl	801be14 <_free_r>
 801cbf8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801cbfa:	b111      	cbz	r1, 801cc02 <_reclaim_reent+0x36>
 801cbfc:	4620      	mov	r0, r4
 801cbfe:	f7ff f909 	bl	801be14 <_free_r>
 801cc02:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801cc04:	b111      	cbz	r1, 801cc0c <_reclaim_reent+0x40>
 801cc06:	4620      	mov	r0, r4
 801cc08:	f7ff f904 	bl	801be14 <_free_r>
 801cc0c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801cc0e:	b111      	cbz	r1, 801cc16 <_reclaim_reent+0x4a>
 801cc10:	4620      	mov	r0, r4
 801cc12:	f7ff f8ff 	bl	801be14 <_free_r>
 801cc16:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801cc18:	b111      	cbz	r1, 801cc20 <_reclaim_reent+0x54>
 801cc1a:	4620      	mov	r0, r4
 801cc1c:	f7ff f8fa 	bl	801be14 <_free_r>
 801cc20:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801cc22:	b111      	cbz	r1, 801cc2a <_reclaim_reent+0x5e>
 801cc24:	4620      	mov	r0, r4
 801cc26:	f7ff f8f5 	bl	801be14 <_free_r>
 801cc2a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801cc2c:	b111      	cbz	r1, 801cc34 <_reclaim_reent+0x68>
 801cc2e:	4620      	mov	r0, r4
 801cc30:	f7ff f8f0 	bl	801be14 <_free_r>
 801cc34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801cc36:	b111      	cbz	r1, 801cc3e <_reclaim_reent+0x72>
 801cc38:	4620      	mov	r0, r4
 801cc3a:	f7ff f8eb 	bl	801be14 <_free_r>
 801cc3e:	69a3      	ldr	r3, [r4, #24]
 801cc40:	b1e3      	cbz	r3, 801cc7c <_reclaim_reent+0xb0>
 801cc42:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801cc44:	4620      	mov	r0, r4
 801cc46:	4798      	blx	r3
 801cc48:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801cc4a:	b1b9      	cbz	r1, 801cc7c <_reclaim_reent+0xb0>
 801cc4c:	4620      	mov	r0, r4
 801cc4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cc52:	f7ff bfad 	b.w	801cbb0 <cleanup_glue>
 801cc56:	5949      	ldr	r1, [r1, r5]
 801cc58:	b941      	cbnz	r1, 801cc6c <_reclaim_reent+0xa0>
 801cc5a:	3504      	adds	r5, #4
 801cc5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801cc5e:	2d80      	cmp	r5, #128	; 0x80
 801cc60:	68d9      	ldr	r1, [r3, #12]
 801cc62:	d1f8      	bne.n	801cc56 <_reclaim_reent+0x8a>
 801cc64:	4620      	mov	r0, r4
 801cc66:	f7ff f8d5 	bl	801be14 <_free_r>
 801cc6a:	e7ba      	b.n	801cbe2 <_reclaim_reent+0x16>
 801cc6c:	680e      	ldr	r6, [r1, #0]
 801cc6e:	4620      	mov	r0, r4
 801cc70:	f7ff f8d0 	bl	801be14 <_free_r>
 801cc74:	4631      	mov	r1, r6
 801cc76:	e7ef      	b.n	801cc58 <_reclaim_reent+0x8c>
 801cc78:	2500      	movs	r5, #0
 801cc7a:	e7ef      	b.n	801cc5c <_reclaim_reent+0x90>
 801cc7c:	bd70      	pop	{r4, r5, r6, pc}
 801cc7e:	bf00      	nop
 801cc80:	10000134 	.word	0x10000134

0801cc84 <_sbrk_r>:
 801cc84:	b538      	push	{r3, r4, r5, lr}
 801cc86:	4d06      	ldr	r5, [pc, #24]	; (801cca0 <_sbrk_r+0x1c>)
 801cc88:	2300      	movs	r3, #0
 801cc8a:	4604      	mov	r4, r0
 801cc8c:	4608      	mov	r0, r1
 801cc8e:	602b      	str	r3, [r5, #0]
 801cc90:	f7e4 fe70 	bl	8001974 <_sbrk>
 801cc94:	1c43      	adds	r3, r0, #1
 801cc96:	d102      	bne.n	801cc9e <_sbrk_r+0x1a>
 801cc98:	682b      	ldr	r3, [r5, #0]
 801cc9a:	b103      	cbz	r3, 801cc9e <_sbrk_r+0x1a>
 801cc9c:	6023      	str	r3, [r4, #0]
 801cc9e:	bd38      	pop	{r3, r4, r5, pc}
 801cca0:	20008334 	.word	0x20008334

0801cca4 <siprintf>:
 801cca4:	b40e      	push	{r1, r2, r3}
 801cca6:	b500      	push	{lr}
 801cca8:	b09c      	sub	sp, #112	; 0x70
 801ccaa:	ab1d      	add	r3, sp, #116	; 0x74
 801ccac:	9002      	str	r0, [sp, #8]
 801ccae:	9006      	str	r0, [sp, #24]
 801ccb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801ccb4:	4809      	ldr	r0, [pc, #36]	; (801ccdc <siprintf+0x38>)
 801ccb6:	9107      	str	r1, [sp, #28]
 801ccb8:	9104      	str	r1, [sp, #16]
 801ccba:	4909      	ldr	r1, [pc, #36]	; (801cce0 <siprintf+0x3c>)
 801ccbc:	f853 2b04 	ldr.w	r2, [r3], #4
 801ccc0:	9105      	str	r1, [sp, #20]
 801ccc2:	6800      	ldr	r0, [r0, #0]
 801ccc4:	9301      	str	r3, [sp, #4]
 801ccc6:	a902      	add	r1, sp, #8
 801ccc8:	f001 fdd0 	bl	801e86c <_svfiprintf_r>
 801cccc:	9b02      	ldr	r3, [sp, #8]
 801ccce:	2200      	movs	r2, #0
 801ccd0:	701a      	strb	r2, [r3, #0]
 801ccd2:	b01c      	add	sp, #112	; 0x70
 801ccd4:	f85d eb04 	ldr.w	lr, [sp], #4
 801ccd8:	b003      	add	sp, #12
 801ccda:	4770      	bx	lr
 801ccdc:	10000134 	.word	0x10000134
 801cce0:	ffff0208 	.word	0xffff0208

0801cce4 <__sread>:
 801cce4:	b510      	push	{r4, lr}
 801cce6:	460c      	mov	r4, r1
 801cce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ccec:	f001 febe 	bl	801ea6c <_read_r>
 801ccf0:	2800      	cmp	r0, #0
 801ccf2:	bfab      	itete	ge
 801ccf4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801ccf6:	89a3      	ldrhlt	r3, [r4, #12]
 801ccf8:	181b      	addge	r3, r3, r0
 801ccfa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801ccfe:	bfac      	ite	ge
 801cd00:	6563      	strge	r3, [r4, #84]	; 0x54
 801cd02:	81a3      	strhlt	r3, [r4, #12]
 801cd04:	bd10      	pop	{r4, pc}

0801cd06 <__swrite>:
 801cd06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cd0a:	461f      	mov	r7, r3
 801cd0c:	898b      	ldrh	r3, [r1, #12]
 801cd0e:	05db      	lsls	r3, r3, #23
 801cd10:	4605      	mov	r5, r0
 801cd12:	460c      	mov	r4, r1
 801cd14:	4616      	mov	r6, r2
 801cd16:	d505      	bpl.n	801cd24 <__swrite+0x1e>
 801cd18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cd1c:	2302      	movs	r3, #2
 801cd1e:	2200      	movs	r2, #0
 801cd20:	f001 f902 	bl	801df28 <_lseek_r>
 801cd24:	89a3      	ldrh	r3, [r4, #12]
 801cd26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801cd2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801cd2e:	81a3      	strh	r3, [r4, #12]
 801cd30:	4632      	mov	r2, r6
 801cd32:	463b      	mov	r3, r7
 801cd34:	4628      	mov	r0, r5
 801cd36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801cd3a:	f000 b917 	b.w	801cf6c <_write_r>

0801cd3e <__sseek>:
 801cd3e:	b510      	push	{r4, lr}
 801cd40:	460c      	mov	r4, r1
 801cd42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cd46:	f001 f8ef 	bl	801df28 <_lseek_r>
 801cd4a:	1c43      	adds	r3, r0, #1
 801cd4c:	89a3      	ldrh	r3, [r4, #12]
 801cd4e:	bf15      	itete	ne
 801cd50:	6560      	strne	r0, [r4, #84]	; 0x54
 801cd52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801cd56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801cd5a:	81a3      	strheq	r3, [r4, #12]
 801cd5c:	bf18      	it	ne
 801cd5e:	81a3      	strhne	r3, [r4, #12]
 801cd60:	bd10      	pop	{r4, pc}

0801cd62 <__sclose>:
 801cd62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cd66:	f000 b989 	b.w	801d07c <_close_r>
	...

0801cd6c <_strtol_l.isra.0>:
 801cd6c:	2b01      	cmp	r3, #1
 801cd6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cd72:	d001      	beq.n	801cd78 <_strtol_l.isra.0+0xc>
 801cd74:	2b24      	cmp	r3, #36	; 0x24
 801cd76:	d906      	bls.n	801cd86 <_strtol_l.isra.0+0x1a>
 801cd78:	f001 f80a 	bl	801dd90 <__errno>
 801cd7c:	2316      	movs	r3, #22
 801cd7e:	6003      	str	r3, [r0, #0]
 801cd80:	2000      	movs	r0, #0
 801cd82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cd86:	4f3a      	ldr	r7, [pc, #232]	; (801ce70 <_strtol_l.isra.0+0x104>)
 801cd88:	468e      	mov	lr, r1
 801cd8a:	4676      	mov	r6, lr
 801cd8c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801cd90:	5de5      	ldrb	r5, [r4, r7]
 801cd92:	f015 0508 	ands.w	r5, r5, #8
 801cd96:	d1f8      	bne.n	801cd8a <_strtol_l.isra.0+0x1e>
 801cd98:	2c2d      	cmp	r4, #45	; 0x2d
 801cd9a:	d134      	bne.n	801ce06 <_strtol_l.isra.0+0x9a>
 801cd9c:	f89e 4000 	ldrb.w	r4, [lr]
 801cda0:	f04f 0801 	mov.w	r8, #1
 801cda4:	f106 0e02 	add.w	lr, r6, #2
 801cda8:	2b00      	cmp	r3, #0
 801cdaa:	d05c      	beq.n	801ce66 <_strtol_l.isra.0+0xfa>
 801cdac:	2b10      	cmp	r3, #16
 801cdae:	d10c      	bne.n	801cdca <_strtol_l.isra.0+0x5e>
 801cdb0:	2c30      	cmp	r4, #48	; 0x30
 801cdb2:	d10a      	bne.n	801cdca <_strtol_l.isra.0+0x5e>
 801cdb4:	f89e 4000 	ldrb.w	r4, [lr]
 801cdb8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801cdbc:	2c58      	cmp	r4, #88	; 0x58
 801cdbe:	d14d      	bne.n	801ce5c <_strtol_l.isra.0+0xf0>
 801cdc0:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801cdc4:	2310      	movs	r3, #16
 801cdc6:	f10e 0e02 	add.w	lr, lr, #2
 801cdca:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801cdce:	f10c 3cff 	add.w	ip, ip, #4294967295
 801cdd2:	2600      	movs	r6, #0
 801cdd4:	fbbc f9f3 	udiv	r9, ip, r3
 801cdd8:	4635      	mov	r5, r6
 801cdda:	fb03 ca19 	mls	sl, r3, r9, ip
 801cdde:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801cde2:	2f09      	cmp	r7, #9
 801cde4:	d818      	bhi.n	801ce18 <_strtol_l.isra.0+0xac>
 801cde6:	463c      	mov	r4, r7
 801cde8:	42a3      	cmp	r3, r4
 801cdea:	dd24      	ble.n	801ce36 <_strtol_l.isra.0+0xca>
 801cdec:	2e00      	cmp	r6, #0
 801cdee:	db1f      	blt.n	801ce30 <_strtol_l.isra.0+0xc4>
 801cdf0:	45a9      	cmp	r9, r5
 801cdf2:	d31d      	bcc.n	801ce30 <_strtol_l.isra.0+0xc4>
 801cdf4:	d101      	bne.n	801cdfa <_strtol_l.isra.0+0x8e>
 801cdf6:	45a2      	cmp	sl, r4
 801cdf8:	db1a      	blt.n	801ce30 <_strtol_l.isra.0+0xc4>
 801cdfa:	fb05 4503 	mla	r5, r5, r3, r4
 801cdfe:	2601      	movs	r6, #1
 801ce00:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801ce04:	e7eb      	b.n	801cdde <_strtol_l.isra.0+0x72>
 801ce06:	2c2b      	cmp	r4, #43	; 0x2b
 801ce08:	bf08      	it	eq
 801ce0a:	f89e 4000 	ldrbeq.w	r4, [lr]
 801ce0e:	46a8      	mov	r8, r5
 801ce10:	bf08      	it	eq
 801ce12:	f106 0e02 	addeq.w	lr, r6, #2
 801ce16:	e7c7      	b.n	801cda8 <_strtol_l.isra.0+0x3c>
 801ce18:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801ce1c:	2f19      	cmp	r7, #25
 801ce1e:	d801      	bhi.n	801ce24 <_strtol_l.isra.0+0xb8>
 801ce20:	3c37      	subs	r4, #55	; 0x37
 801ce22:	e7e1      	b.n	801cde8 <_strtol_l.isra.0+0x7c>
 801ce24:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801ce28:	2f19      	cmp	r7, #25
 801ce2a:	d804      	bhi.n	801ce36 <_strtol_l.isra.0+0xca>
 801ce2c:	3c57      	subs	r4, #87	; 0x57
 801ce2e:	e7db      	b.n	801cde8 <_strtol_l.isra.0+0x7c>
 801ce30:	f04f 36ff 	mov.w	r6, #4294967295
 801ce34:	e7e4      	b.n	801ce00 <_strtol_l.isra.0+0x94>
 801ce36:	2e00      	cmp	r6, #0
 801ce38:	da05      	bge.n	801ce46 <_strtol_l.isra.0+0xda>
 801ce3a:	2322      	movs	r3, #34	; 0x22
 801ce3c:	6003      	str	r3, [r0, #0]
 801ce3e:	4665      	mov	r5, ip
 801ce40:	b942      	cbnz	r2, 801ce54 <_strtol_l.isra.0+0xe8>
 801ce42:	4628      	mov	r0, r5
 801ce44:	e79d      	b.n	801cd82 <_strtol_l.isra.0+0x16>
 801ce46:	f1b8 0f00 	cmp.w	r8, #0
 801ce4a:	d000      	beq.n	801ce4e <_strtol_l.isra.0+0xe2>
 801ce4c:	426d      	negs	r5, r5
 801ce4e:	2a00      	cmp	r2, #0
 801ce50:	d0f7      	beq.n	801ce42 <_strtol_l.isra.0+0xd6>
 801ce52:	b10e      	cbz	r6, 801ce58 <_strtol_l.isra.0+0xec>
 801ce54:	f10e 31ff 	add.w	r1, lr, #4294967295
 801ce58:	6011      	str	r1, [r2, #0]
 801ce5a:	e7f2      	b.n	801ce42 <_strtol_l.isra.0+0xd6>
 801ce5c:	2430      	movs	r4, #48	; 0x30
 801ce5e:	2b00      	cmp	r3, #0
 801ce60:	d1b3      	bne.n	801cdca <_strtol_l.isra.0+0x5e>
 801ce62:	2308      	movs	r3, #8
 801ce64:	e7b1      	b.n	801cdca <_strtol_l.isra.0+0x5e>
 801ce66:	2c30      	cmp	r4, #48	; 0x30
 801ce68:	d0a4      	beq.n	801cdb4 <_strtol_l.isra.0+0x48>
 801ce6a:	230a      	movs	r3, #10
 801ce6c:	e7ad      	b.n	801cdca <_strtol_l.isra.0+0x5e>
 801ce6e:	bf00      	nop
 801ce70:	08022924 	.word	0x08022924

0801ce74 <strtol>:
 801ce74:	4613      	mov	r3, r2
 801ce76:	460a      	mov	r2, r1
 801ce78:	4601      	mov	r1, r0
 801ce7a:	4802      	ldr	r0, [pc, #8]	; (801ce84 <strtol+0x10>)
 801ce7c:	6800      	ldr	r0, [r0, #0]
 801ce7e:	f7ff bf75 	b.w	801cd6c <_strtol_l.isra.0>
 801ce82:	bf00      	nop
 801ce84:	10000134 	.word	0x10000134

0801ce88 <_vsiprintf_r>:
 801ce88:	b500      	push	{lr}
 801ce8a:	b09b      	sub	sp, #108	; 0x6c
 801ce8c:	9100      	str	r1, [sp, #0]
 801ce8e:	9104      	str	r1, [sp, #16]
 801ce90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801ce94:	9105      	str	r1, [sp, #20]
 801ce96:	9102      	str	r1, [sp, #8]
 801ce98:	4905      	ldr	r1, [pc, #20]	; (801ceb0 <_vsiprintf_r+0x28>)
 801ce9a:	9103      	str	r1, [sp, #12]
 801ce9c:	4669      	mov	r1, sp
 801ce9e:	f001 fce5 	bl	801e86c <_svfiprintf_r>
 801cea2:	9b00      	ldr	r3, [sp, #0]
 801cea4:	2200      	movs	r2, #0
 801cea6:	701a      	strb	r2, [r3, #0]
 801cea8:	b01b      	add	sp, #108	; 0x6c
 801ceaa:	f85d fb04 	ldr.w	pc, [sp], #4
 801ceae:	bf00      	nop
 801ceb0:	ffff0208 	.word	0xffff0208

0801ceb4 <vsiprintf>:
 801ceb4:	4613      	mov	r3, r2
 801ceb6:	460a      	mov	r2, r1
 801ceb8:	4601      	mov	r1, r0
 801ceba:	4802      	ldr	r0, [pc, #8]	; (801cec4 <vsiprintf+0x10>)
 801cebc:	6800      	ldr	r0, [r0, #0]
 801cebe:	f7ff bfe3 	b.w	801ce88 <_vsiprintf_r>
 801cec2:	bf00      	nop
 801cec4:	10000134 	.word	0x10000134

0801cec8 <__swbuf_r>:
 801cec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ceca:	460e      	mov	r6, r1
 801cecc:	4614      	mov	r4, r2
 801cece:	4605      	mov	r5, r0
 801ced0:	b118      	cbz	r0, 801ceda <__swbuf_r+0x12>
 801ced2:	6983      	ldr	r3, [r0, #24]
 801ced4:	b90b      	cbnz	r3, 801ceda <__swbuf_r+0x12>
 801ced6:	f7fe fe77 	bl	801bbc8 <__sinit>
 801ceda:	4b21      	ldr	r3, [pc, #132]	; (801cf60 <__swbuf_r+0x98>)
 801cedc:	429c      	cmp	r4, r3
 801cede:	d12b      	bne.n	801cf38 <__swbuf_r+0x70>
 801cee0:	686c      	ldr	r4, [r5, #4]
 801cee2:	69a3      	ldr	r3, [r4, #24]
 801cee4:	60a3      	str	r3, [r4, #8]
 801cee6:	89a3      	ldrh	r3, [r4, #12]
 801cee8:	071a      	lsls	r2, r3, #28
 801ceea:	d52f      	bpl.n	801cf4c <__swbuf_r+0x84>
 801ceec:	6923      	ldr	r3, [r4, #16]
 801ceee:	b36b      	cbz	r3, 801cf4c <__swbuf_r+0x84>
 801cef0:	6923      	ldr	r3, [r4, #16]
 801cef2:	6820      	ldr	r0, [r4, #0]
 801cef4:	1ac0      	subs	r0, r0, r3
 801cef6:	6963      	ldr	r3, [r4, #20]
 801cef8:	b2f6      	uxtb	r6, r6
 801cefa:	4283      	cmp	r3, r0
 801cefc:	4637      	mov	r7, r6
 801cefe:	dc04      	bgt.n	801cf0a <__swbuf_r+0x42>
 801cf00:	4621      	mov	r1, r4
 801cf02:	4628      	mov	r0, r5
 801cf04:	f000 ffd0 	bl	801dea8 <_fflush_r>
 801cf08:	bb30      	cbnz	r0, 801cf58 <__swbuf_r+0x90>
 801cf0a:	68a3      	ldr	r3, [r4, #8]
 801cf0c:	3b01      	subs	r3, #1
 801cf0e:	60a3      	str	r3, [r4, #8]
 801cf10:	6823      	ldr	r3, [r4, #0]
 801cf12:	1c5a      	adds	r2, r3, #1
 801cf14:	6022      	str	r2, [r4, #0]
 801cf16:	701e      	strb	r6, [r3, #0]
 801cf18:	6963      	ldr	r3, [r4, #20]
 801cf1a:	3001      	adds	r0, #1
 801cf1c:	4283      	cmp	r3, r0
 801cf1e:	d004      	beq.n	801cf2a <__swbuf_r+0x62>
 801cf20:	89a3      	ldrh	r3, [r4, #12]
 801cf22:	07db      	lsls	r3, r3, #31
 801cf24:	d506      	bpl.n	801cf34 <__swbuf_r+0x6c>
 801cf26:	2e0a      	cmp	r6, #10
 801cf28:	d104      	bne.n	801cf34 <__swbuf_r+0x6c>
 801cf2a:	4621      	mov	r1, r4
 801cf2c:	4628      	mov	r0, r5
 801cf2e:	f000 ffbb 	bl	801dea8 <_fflush_r>
 801cf32:	b988      	cbnz	r0, 801cf58 <__swbuf_r+0x90>
 801cf34:	4638      	mov	r0, r7
 801cf36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cf38:	4b0a      	ldr	r3, [pc, #40]	; (801cf64 <__swbuf_r+0x9c>)
 801cf3a:	429c      	cmp	r4, r3
 801cf3c:	d101      	bne.n	801cf42 <__swbuf_r+0x7a>
 801cf3e:	68ac      	ldr	r4, [r5, #8]
 801cf40:	e7cf      	b.n	801cee2 <__swbuf_r+0x1a>
 801cf42:	4b09      	ldr	r3, [pc, #36]	; (801cf68 <__swbuf_r+0xa0>)
 801cf44:	429c      	cmp	r4, r3
 801cf46:	bf08      	it	eq
 801cf48:	68ec      	ldreq	r4, [r5, #12]
 801cf4a:	e7ca      	b.n	801cee2 <__swbuf_r+0x1a>
 801cf4c:	4621      	mov	r1, r4
 801cf4e:	4628      	mov	r0, r5
 801cf50:	f000 f81e 	bl	801cf90 <__swsetup_r>
 801cf54:	2800      	cmp	r0, #0
 801cf56:	d0cb      	beq.n	801cef0 <__swbuf_r+0x28>
 801cf58:	f04f 37ff 	mov.w	r7, #4294967295
 801cf5c:	e7ea      	b.n	801cf34 <__swbuf_r+0x6c>
 801cf5e:	bf00      	nop
 801cf60:	08022a44 	.word	0x08022a44
 801cf64:	08022a64 	.word	0x08022a64
 801cf68:	08022a24 	.word	0x08022a24

0801cf6c <_write_r>:
 801cf6c:	b538      	push	{r3, r4, r5, lr}
 801cf6e:	4d07      	ldr	r5, [pc, #28]	; (801cf8c <_write_r+0x20>)
 801cf70:	4604      	mov	r4, r0
 801cf72:	4608      	mov	r0, r1
 801cf74:	4611      	mov	r1, r2
 801cf76:	2200      	movs	r2, #0
 801cf78:	602a      	str	r2, [r5, #0]
 801cf7a:	461a      	mov	r2, r3
 801cf7c:	f7fd ff7a 	bl	801ae74 <_write>
 801cf80:	1c43      	adds	r3, r0, #1
 801cf82:	d102      	bne.n	801cf8a <_write_r+0x1e>
 801cf84:	682b      	ldr	r3, [r5, #0]
 801cf86:	b103      	cbz	r3, 801cf8a <_write_r+0x1e>
 801cf88:	6023      	str	r3, [r4, #0]
 801cf8a:	bd38      	pop	{r3, r4, r5, pc}
 801cf8c:	20008334 	.word	0x20008334

0801cf90 <__swsetup_r>:
 801cf90:	4b32      	ldr	r3, [pc, #200]	; (801d05c <__swsetup_r+0xcc>)
 801cf92:	b570      	push	{r4, r5, r6, lr}
 801cf94:	681d      	ldr	r5, [r3, #0]
 801cf96:	4606      	mov	r6, r0
 801cf98:	460c      	mov	r4, r1
 801cf9a:	b125      	cbz	r5, 801cfa6 <__swsetup_r+0x16>
 801cf9c:	69ab      	ldr	r3, [r5, #24]
 801cf9e:	b913      	cbnz	r3, 801cfa6 <__swsetup_r+0x16>
 801cfa0:	4628      	mov	r0, r5
 801cfa2:	f7fe fe11 	bl	801bbc8 <__sinit>
 801cfa6:	4b2e      	ldr	r3, [pc, #184]	; (801d060 <__swsetup_r+0xd0>)
 801cfa8:	429c      	cmp	r4, r3
 801cfaa:	d10f      	bne.n	801cfcc <__swsetup_r+0x3c>
 801cfac:	686c      	ldr	r4, [r5, #4]
 801cfae:	89a3      	ldrh	r3, [r4, #12]
 801cfb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801cfb4:	0719      	lsls	r1, r3, #28
 801cfb6:	d42c      	bmi.n	801d012 <__swsetup_r+0x82>
 801cfb8:	06dd      	lsls	r5, r3, #27
 801cfba:	d411      	bmi.n	801cfe0 <__swsetup_r+0x50>
 801cfbc:	2309      	movs	r3, #9
 801cfbe:	6033      	str	r3, [r6, #0]
 801cfc0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801cfc4:	81a3      	strh	r3, [r4, #12]
 801cfc6:	f04f 30ff 	mov.w	r0, #4294967295
 801cfca:	e03e      	b.n	801d04a <__swsetup_r+0xba>
 801cfcc:	4b25      	ldr	r3, [pc, #148]	; (801d064 <__swsetup_r+0xd4>)
 801cfce:	429c      	cmp	r4, r3
 801cfd0:	d101      	bne.n	801cfd6 <__swsetup_r+0x46>
 801cfd2:	68ac      	ldr	r4, [r5, #8]
 801cfd4:	e7eb      	b.n	801cfae <__swsetup_r+0x1e>
 801cfd6:	4b24      	ldr	r3, [pc, #144]	; (801d068 <__swsetup_r+0xd8>)
 801cfd8:	429c      	cmp	r4, r3
 801cfda:	bf08      	it	eq
 801cfdc:	68ec      	ldreq	r4, [r5, #12]
 801cfde:	e7e6      	b.n	801cfae <__swsetup_r+0x1e>
 801cfe0:	0758      	lsls	r0, r3, #29
 801cfe2:	d512      	bpl.n	801d00a <__swsetup_r+0x7a>
 801cfe4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801cfe6:	b141      	cbz	r1, 801cffa <__swsetup_r+0x6a>
 801cfe8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801cfec:	4299      	cmp	r1, r3
 801cfee:	d002      	beq.n	801cff6 <__swsetup_r+0x66>
 801cff0:	4630      	mov	r0, r6
 801cff2:	f7fe ff0f 	bl	801be14 <_free_r>
 801cff6:	2300      	movs	r3, #0
 801cff8:	6363      	str	r3, [r4, #52]	; 0x34
 801cffa:	89a3      	ldrh	r3, [r4, #12]
 801cffc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801d000:	81a3      	strh	r3, [r4, #12]
 801d002:	2300      	movs	r3, #0
 801d004:	6063      	str	r3, [r4, #4]
 801d006:	6923      	ldr	r3, [r4, #16]
 801d008:	6023      	str	r3, [r4, #0]
 801d00a:	89a3      	ldrh	r3, [r4, #12]
 801d00c:	f043 0308 	orr.w	r3, r3, #8
 801d010:	81a3      	strh	r3, [r4, #12]
 801d012:	6923      	ldr	r3, [r4, #16]
 801d014:	b94b      	cbnz	r3, 801d02a <__swsetup_r+0x9a>
 801d016:	89a3      	ldrh	r3, [r4, #12]
 801d018:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801d01c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d020:	d003      	beq.n	801d02a <__swsetup_r+0x9a>
 801d022:	4621      	mov	r1, r4
 801d024:	4630      	mov	r0, r6
 801d026:	f000 ffb5 	bl	801df94 <__smakebuf_r>
 801d02a:	89a0      	ldrh	r0, [r4, #12]
 801d02c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d030:	f010 0301 	ands.w	r3, r0, #1
 801d034:	d00a      	beq.n	801d04c <__swsetup_r+0xbc>
 801d036:	2300      	movs	r3, #0
 801d038:	60a3      	str	r3, [r4, #8]
 801d03a:	6963      	ldr	r3, [r4, #20]
 801d03c:	425b      	negs	r3, r3
 801d03e:	61a3      	str	r3, [r4, #24]
 801d040:	6923      	ldr	r3, [r4, #16]
 801d042:	b943      	cbnz	r3, 801d056 <__swsetup_r+0xc6>
 801d044:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801d048:	d1ba      	bne.n	801cfc0 <__swsetup_r+0x30>
 801d04a:	bd70      	pop	{r4, r5, r6, pc}
 801d04c:	0781      	lsls	r1, r0, #30
 801d04e:	bf58      	it	pl
 801d050:	6963      	ldrpl	r3, [r4, #20]
 801d052:	60a3      	str	r3, [r4, #8]
 801d054:	e7f4      	b.n	801d040 <__swsetup_r+0xb0>
 801d056:	2000      	movs	r0, #0
 801d058:	e7f7      	b.n	801d04a <__swsetup_r+0xba>
 801d05a:	bf00      	nop
 801d05c:	10000134 	.word	0x10000134
 801d060:	08022a44 	.word	0x08022a44
 801d064:	08022a64 	.word	0x08022a64
 801d068:	08022a24 	.word	0x08022a24

0801d06c <abort>:
 801d06c:	b508      	push	{r3, lr}
 801d06e:	2006      	movs	r0, #6
 801d070:	f001 fd36 	bl	801eae0 <raise>
 801d074:	2001      	movs	r0, #1
 801d076:	f7e4 fc3f 	bl	80018f8 <_exit>
	...

0801d07c <_close_r>:
 801d07c:	b538      	push	{r3, r4, r5, lr}
 801d07e:	4d06      	ldr	r5, [pc, #24]	; (801d098 <_close_r+0x1c>)
 801d080:	2300      	movs	r3, #0
 801d082:	4604      	mov	r4, r0
 801d084:	4608      	mov	r0, r1
 801d086:	602b      	str	r3, [r5, #0]
 801d088:	f7e4 fc40 	bl	800190c <_close>
 801d08c:	1c43      	adds	r3, r0, #1
 801d08e:	d102      	bne.n	801d096 <_close_r+0x1a>
 801d090:	682b      	ldr	r3, [r5, #0]
 801d092:	b103      	cbz	r3, 801d096 <_close_r+0x1a>
 801d094:	6023      	str	r3, [r4, #0]
 801d096:	bd38      	pop	{r3, r4, r5, pc}
 801d098:	20008334 	.word	0x20008334

0801d09c <quorem>:
 801d09c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0a0:	6903      	ldr	r3, [r0, #16]
 801d0a2:	690c      	ldr	r4, [r1, #16]
 801d0a4:	42a3      	cmp	r3, r4
 801d0a6:	4607      	mov	r7, r0
 801d0a8:	f2c0 8081 	blt.w	801d1ae <quorem+0x112>
 801d0ac:	3c01      	subs	r4, #1
 801d0ae:	f101 0814 	add.w	r8, r1, #20
 801d0b2:	f100 0514 	add.w	r5, r0, #20
 801d0b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d0ba:	9301      	str	r3, [sp, #4]
 801d0bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801d0c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d0c4:	3301      	adds	r3, #1
 801d0c6:	429a      	cmp	r2, r3
 801d0c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801d0cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801d0d0:	fbb2 f6f3 	udiv	r6, r2, r3
 801d0d4:	d331      	bcc.n	801d13a <quorem+0x9e>
 801d0d6:	f04f 0e00 	mov.w	lr, #0
 801d0da:	4640      	mov	r0, r8
 801d0dc:	46ac      	mov	ip, r5
 801d0de:	46f2      	mov	sl, lr
 801d0e0:	f850 2b04 	ldr.w	r2, [r0], #4
 801d0e4:	b293      	uxth	r3, r2
 801d0e6:	fb06 e303 	mla	r3, r6, r3, lr
 801d0ea:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801d0ee:	b29b      	uxth	r3, r3
 801d0f0:	ebaa 0303 	sub.w	r3, sl, r3
 801d0f4:	0c12      	lsrs	r2, r2, #16
 801d0f6:	f8dc a000 	ldr.w	sl, [ip]
 801d0fa:	fb06 e202 	mla	r2, r6, r2, lr
 801d0fe:	fa13 f38a 	uxtah	r3, r3, sl
 801d102:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801d106:	fa1f fa82 	uxth.w	sl, r2
 801d10a:	f8dc 2000 	ldr.w	r2, [ip]
 801d10e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801d112:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801d116:	b29b      	uxth	r3, r3
 801d118:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d11c:	4581      	cmp	r9, r0
 801d11e:	f84c 3b04 	str.w	r3, [ip], #4
 801d122:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801d126:	d2db      	bcs.n	801d0e0 <quorem+0x44>
 801d128:	f855 300b 	ldr.w	r3, [r5, fp]
 801d12c:	b92b      	cbnz	r3, 801d13a <quorem+0x9e>
 801d12e:	9b01      	ldr	r3, [sp, #4]
 801d130:	3b04      	subs	r3, #4
 801d132:	429d      	cmp	r5, r3
 801d134:	461a      	mov	r2, r3
 801d136:	d32e      	bcc.n	801d196 <quorem+0xfa>
 801d138:	613c      	str	r4, [r7, #16]
 801d13a:	4638      	mov	r0, r7
 801d13c:	f001 fa06 	bl	801e54c <__mcmp>
 801d140:	2800      	cmp	r0, #0
 801d142:	db24      	blt.n	801d18e <quorem+0xf2>
 801d144:	3601      	adds	r6, #1
 801d146:	4628      	mov	r0, r5
 801d148:	f04f 0c00 	mov.w	ip, #0
 801d14c:	f858 2b04 	ldr.w	r2, [r8], #4
 801d150:	f8d0 e000 	ldr.w	lr, [r0]
 801d154:	b293      	uxth	r3, r2
 801d156:	ebac 0303 	sub.w	r3, ip, r3
 801d15a:	0c12      	lsrs	r2, r2, #16
 801d15c:	fa13 f38e 	uxtah	r3, r3, lr
 801d160:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801d164:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801d168:	b29b      	uxth	r3, r3
 801d16a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d16e:	45c1      	cmp	r9, r8
 801d170:	f840 3b04 	str.w	r3, [r0], #4
 801d174:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801d178:	d2e8      	bcs.n	801d14c <quorem+0xb0>
 801d17a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d17e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d182:	b922      	cbnz	r2, 801d18e <quorem+0xf2>
 801d184:	3b04      	subs	r3, #4
 801d186:	429d      	cmp	r5, r3
 801d188:	461a      	mov	r2, r3
 801d18a:	d30a      	bcc.n	801d1a2 <quorem+0x106>
 801d18c:	613c      	str	r4, [r7, #16]
 801d18e:	4630      	mov	r0, r6
 801d190:	b003      	add	sp, #12
 801d192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d196:	6812      	ldr	r2, [r2, #0]
 801d198:	3b04      	subs	r3, #4
 801d19a:	2a00      	cmp	r2, #0
 801d19c:	d1cc      	bne.n	801d138 <quorem+0x9c>
 801d19e:	3c01      	subs	r4, #1
 801d1a0:	e7c7      	b.n	801d132 <quorem+0x96>
 801d1a2:	6812      	ldr	r2, [r2, #0]
 801d1a4:	3b04      	subs	r3, #4
 801d1a6:	2a00      	cmp	r2, #0
 801d1a8:	d1f0      	bne.n	801d18c <quorem+0xf0>
 801d1aa:	3c01      	subs	r4, #1
 801d1ac:	e7eb      	b.n	801d186 <quorem+0xea>
 801d1ae:	2000      	movs	r0, #0
 801d1b0:	e7ee      	b.n	801d190 <quorem+0xf4>
 801d1b2:	0000      	movs	r0, r0
 801d1b4:	0000      	movs	r0, r0
	...

0801d1b8 <_dtoa_r>:
 801d1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d1bc:	ed2d 8b02 	vpush	{d8}
 801d1c0:	ec57 6b10 	vmov	r6, r7, d0
 801d1c4:	b095      	sub	sp, #84	; 0x54
 801d1c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801d1c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801d1cc:	9105      	str	r1, [sp, #20]
 801d1ce:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801d1d2:	4604      	mov	r4, r0
 801d1d4:	9209      	str	r2, [sp, #36]	; 0x24
 801d1d6:	930f      	str	r3, [sp, #60]	; 0x3c
 801d1d8:	b975      	cbnz	r5, 801d1f8 <_dtoa_r+0x40>
 801d1da:	2010      	movs	r0, #16
 801d1dc:	f7fe fdcc 	bl	801bd78 <malloc>
 801d1e0:	4602      	mov	r2, r0
 801d1e2:	6260      	str	r0, [r4, #36]	; 0x24
 801d1e4:	b920      	cbnz	r0, 801d1f0 <_dtoa_r+0x38>
 801d1e6:	4bb2      	ldr	r3, [pc, #712]	; (801d4b0 <_dtoa_r+0x2f8>)
 801d1e8:	21ea      	movs	r1, #234	; 0xea
 801d1ea:	48b2      	ldr	r0, [pc, #712]	; (801d4b4 <_dtoa_r+0x2fc>)
 801d1ec:	f7fe fc72 	bl	801bad4 <__assert_func>
 801d1f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801d1f4:	6005      	str	r5, [r0, #0]
 801d1f6:	60c5      	str	r5, [r0, #12]
 801d1f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d1fa:	6819      	ldr	r1, [r3, #0]
 801d1fc:	b151      	cbz	r1, 801d214 <_dtoa_r+0x5c>
 801d1fe:	685a      	ldr	r2, [r3, #4]
 801d200:	604a      	str	r2, [r1, #4]
 801d202:	2301      	movs	r3, #1
 801d204:	4093      	lsls	r3, r2
 801d206:	608b      	str	r3, [r1, #8]
 801d208:	4620      	mov	r0, r4
 801d20a:	f000 ff61 	bl	801e0d0 <_Bfree>
 801d20e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d210:	2200      	movs	r2, #0
 801d212:	601a      	str	r2, [r3, #0]
 801d214:	1e3b      	subs	r3, r7, #0
 801d216:	bfb9      	ittee	lt
 801d218:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801d21c:	9303      	strlt	r3, [sp, #12]
 801d21e:	2300      	movge	r3, #0
 801d220:	f8c8 3000 	strge.w	r3, [r8]
 801d224:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801d228:	4ba3      	ldr	r3, [pc, #652]	; (801d4b8 <_dtoa_r+0x300>)
 801d22a:	bfbc      	itt	lt
 801d22c:	2201      	movlt	r2, #1
 801d22e:	f8c8 2000 	strlt.w	r2, [r8]
 801d232:	ea33 0309 	bics.w	r3, r3, r9
 801d236:	d11b      	bne.n	801d270 <_dtoa_r+0xb8>
 801d238:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d23a:	f242 730f 	movw	r3, #9999	; 0x270f
 801d23e:	6013      	str	r3, [r2, #0]
 801d240:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d244:	4333      	orrs	r3, r6
 801d246:	f000 857a 	beq.w	801dd3e <_dtoa_r+0xb86>
 801d24a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d24c:	b963      	cbnz	r3, 801d268 <_dtoa_r+0xb0>
 801d24e:	4b9b      	ldr	r3, [pc, #620]	; (801d4bc <_dtoa_r+0x304>)
 801d250:	e024      	b.n	801d29c <_dtoa_r+0xe4>
 801d252:	4b9b      	ldr	r3, [pc, #620]	; (801d4c0 <_dtoa_r+0x308>)
 801d254:	9300      	str	r3, [sp, #0]
 801d256:	3308      	adds	r3, #8
 801d258:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801d25a:	6013      	str	r3, [r2, #0]
 801d25c:	9800      	ldr	r0, [sp, #0]
 801d25e:	b015      	add	sp, #84	; 0x54
 801d260:	ecbd 8b02 	vpop	{d8}
 801d264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d268:	4b94      	ldr	r3, [pc, #592]	; (801d4bc <_dtoa_r+0x304>)
 801d26a:	9300      	str	r3, [sp, #0]
 801d26c:	3303      	adds	r3, #3
 801d26e:	e7f3      	b.n	801d258 <_dtoa_r+0xa0>
 801d270:	ed9d 7b02 	vldr	d7, [sp, #8]
 801d274:	2200      	movs	r2, #0
 801d276:	ec51 0b17 	vmov	r0, r1, d7
 801d27a:	2300      	movs	r3, #0
 801d27c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801d280:	f7e3 fc22 	bl	8000ac8 <__aeabi_dcmpeq>
 801d284:	4680      	mov	r8, r0
 801d286:	b158      	cbz	r0, 801d2a0 <_dtoa_r+0xe8>
 801d288:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d28a:	2301      	movs	r3, #1
 801d28c:	6013      	str	r3, [r2, #0]
 801d28e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d290:	2b00      	cmp	r3, #0
 801d292:	f000 8551 	beq.w	801dd38 <_dtoa_r+0xb80>
 801d296:	488b      	ldr	r0, [pc, #556]	; (801d4c4 <_dtoa_r+0x30c>)
 801d298:	6018      	str	r0, [r3, #0]
 801d29a:	1e43      	subs	r3, r0, #1
 801d29c:	9300      	str	r3, [sp, #0]
 801d29e:	e7dd      	b.n	801d25c <_dtoa_r+0xa4>
 801d2a0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801d2a4:	aa12      	add	r2, sp, #72	; 0x48
 801d2a6:	a913      	add	r1, sp, #76	; 0x4c
 801d2a8:	4620      	mov	r0, r4
 801d2aa:	f001 f9f3 	bl	801e694 <__d2b>
 801d2ae:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801d2b2:	4683      	mov	fp, r0
 801d2b4:	2d00      	cmp	r5, #0
 801d2b6:	d07c      	beq.n	801d3b2 <_dtoa_r+0x1fa>
 801d2b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d2ba:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801d2be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d2c2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801d2c6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801d2ca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801d2ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801d2d2:	4b7d      	ldr	r3, [pc, #500]	; (801d4c8 <_dtoa_r+0x310>)
 801d2d4:	2200      	movs	r2, #0
 801d2d6:	4630      	mov	r0, r6
 801d2d8:	4639      	mov	r1, r7
 801d2da:	f7e2 ffd5 	bl	8000288 <__aeabi_dsub>
 801d2de:	a36e      	add	r3, pc, #440	; (adr r3, 801d498 <_dtoa_r+0x2e0>)
 801d2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d2e4:	f7e3 f988 	bl	80005f8 <__aeabi_dmul>
 801d2e8:	a36d      	add	r3, pc, #436	; (adr r3, 801d4a0 <_dtoa_r+0x2e8>)
 801d2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d2ee:	f7e2 ffcd 	bl	800028c <__adddf3>
 801d2f2:	4606      	mov	r6, r0
 801d2f4:	4628      	mov	r0, r5
 801d2f6:	460f      	mov	r7, r1
 801d2f8:	f7e3 f914 	bl	8000524 <__aeabi_i2d>
 801d2fc:	a36a      	add	r3, pc, #424	; (adr r3, 801d4a8 <_dtoa_r+0x2f0>)
 801d2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d302:	f7e3 f979 	bl	80005f8 <__aeabi_dmul>
 801d306:	4602      	mov	r2, r0
 801d308:	460b      	mov	r3, r1
 801d30a:	4630      	mov	r0, r6
 801d30c:	4639      	mov	r1, r7
 801d30e:	f7e2 ffbd 	bl	800028c <__adddf3>
 801d312:	4606      	mov	r6, r0
 801d314:	460f      	mov	r7, r1
 801d316:	f7e3 fc1f 	bl	8000b58 <__aeabi_d2iz>
 801d31a:	2200      	movs	r2, #0
 801d31c:	4682      	mov	sl, r0
 801d31e:	2300      	movs	r3, #0
 801d320:	4630      	mov	r0, r6
 801d322:	4639      	mov	r1, r7
 801d324:	f7e3 fbda 	bl	8000adc <__aeabi_dcmplt>
 801d328:	b148      	cbz	r0, 801d33e <_dtoa_r+0x186>
 801d32a:	4650      	mov	r0, sl
 801d32c:	f7e3 f8fa 	bl	8000524 <__aeabi_i2d>
 801d330:	4632      	mov	r2, r6
 801d332:	463b      	mov	r3, r7
 801d334:	f7e3 fbc8 	bl	8000ac8 <__aeabi_dcmpeq>
 801d338:	b908      	cbnz	r0, 801d33e <_dtoa_r+0x186>
 801d33a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d33e:	f1ba 0f16 	cmp.w	sl, #22
 801d342:	d854      	bhi.n	801d3ee <_dtoa_r+0x236>
 801d344:	4b61      	ldr	r3, [pc, #388]	; (801d4cc <_dtoa_r+0x314>)
 801d346:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801d34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d34e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801d352:	f7e3 fbc3 	bl	8000adc <__aeabi_dcmplt>
 801d356:	2800      	cmp	r0, #0
 801d358:	d04b      	beq.n	801d3f2 <_dtoa_r+0x23a>
 801d35a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d35e:	2300      	movs	r3, #0
 801d360:	930e      	str	r3, [sp, #56]	; 0x38
 801d362:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801d364:	1b5d      	subs	r5, r3, r5
 801d366:	1e6b      	subs	r3, r5, #1
 801d368:	9304      	str	r3, [sp, #16]
 801d36a:	bf43      	ittte	mi
 801d36c:	2300      	movmi	r3, #0
 801d36e:	f1c5 0801 	rsbmi	r8, r5, #1
 801d372:	9304      	strmi	r3, [sp, #16]
 801d374:	f04f 0800 	movpl.w	r8, #0
 801d378:	f1ba 0f00 	cmp.w	sl, #0
 801d37c:	db3b      	blt.n	801d3f6 <_dtoa_r+0x23e>
 801d37e:	9b04      	ldr	r3, [sp, #16]
 801d380:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801d384:	4453      	add	r3, sl
 801d386:	9304      	str	r3, [sp, #16]
 801d388:	2300      	movs	r3, #0
 801d38a:	9306      	str	r3, [sp, #24]
 801d38c:	9b05      	ldr	r3, [sp, #20]
 801d38e:	2b09      	cmp	r3, #9
 801d390:	d869      	bhi.n	801d466 <_dtoa_r+0x2ae>
 801d392:	2b05      	cmp	r3, #5
 801d394:	bfc4      	itt	gt
 801d396:	3b04      	subgt	r3, #4
 801d398:	9305      	strgt	r3, [sp, #20]
 801d39a:	9b05      	ldr	r3, [sp, #20]
 801d39c:	f1a3 0302 	sub.w	r3, r3, #2
 801d3a0:	bfcc      	ite	gt
 801d3a2:	2500      	movgt	r5, #0
 801d3a4:	2501      	movle	r5, #1
 801d3a6:	2b03      	cmp	r3, #3
 801d3a8:	d869      	bhi.n	801d47e <_dtoa_r+0x2c6>
 801d3aa:	e8df f003 	tbb	[pc, r3]
 801d3ae:	4e2c      	.short	0x4e2c
 801d3b0:	5a4c      	.short	0x5a4c
 801d3b2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801d3b6:	441d      	add	r5, r3
 801d3b8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801d3bc:	2b20      	cmp	r3, #32
 801d3be:	bfc1      	itttt	gt
 801d3c0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801d3c4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801d3c8:	fa09 f303 	lslgt.w	r3, r9, r3
 801d3cc:	fa26 f000 	lsrgt.w	r0, r6, r0
 801d3d0:	bfda      	itte	le
 801d3d2:	f1c3 0320 	rsble	r3, r3, #32
 801d3d6:	fa06 f003 	lslle.w	r0, r6, r3
 801d3da:	4318      	orrgt	r0, r3
 801d3dc:	f7e3 f892 	bl	8000504 <__aeabi_ui2d>
 801d3e0:	2301      	movs	r3, #1
 801d3e2:	4606      	mov	r6, r0
 801d3e4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801d3e8:	3d01      	subs	r5, #1
 801d3ea:	9310      	str	r3, [sp, #64]	; 0x40
 801d3ec:	e771      	b.n	801d2d2 <_dtoa_r+0x11a>
 801d3ee:	2301      	movs	r3, #1
 801d3f0:	e7b6      	b.n	801d360 <_dtoa_r+0x1a8>
 801d3f2:	900e      	str	r0, [sp, #56]	; 0x38
 801d3f4:	e7b5      	b.n	801d362 <_dtoa_r+0x1aa>
 801d3f6:	f1ca 0300 	rsb	r3, sl, #0
 801d3fa:	9306      	str	r3, [sp, #24]
 801d3fc:	2300      	movs	r3, #0
 801d3fe:	eba8 080a 	sub.w	r8, r8, sl
 801d402:	930d      	str	r3, [sp, #52]	; 0x34
 801d404:	e7c2      	b.n	801d38c <_dtoa_r+0x1d4>
 801d406:	2300      	movs	r3, #0
 801d408:	9308      	str	r3, [sp, #32]
 801d40a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d40c:	2b00      	cmp	r3, #0
 801d40e:	dc39      	bgt.n	801d484 <_dtoa_r+0x2cc>
 801d410:	f04f 0901 	mov.w	r9, #1
 801d414:	f8cd 9004 	str.w	r9, [sp, #4]
 801d418:	464b      	mov	r3, r9
 801d41a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801d41e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801d420:	2200      	movs	r2, #0
 801d422:	6042      	str	r2, [r0, #4]
 801d424:	2204      	movs	r2, #4
 801d426:	f102 0614 	add.w	r6, r2, #20
 801d42a:	429e      	cmp	r6, r3
 801d42c:	6841      	ldr	r1, [r0, #4]
 801d42e:	d92f      	bls.n	801d490 <_dtoa_r+0x2d8>
 801d430:	4620      	mov	r0, r4
 801d432:	f000 fe0d 	bl	801e050 <_Balloc>
 801d436:	9000      	str	r0, [sp, #0]
 801d438:	2800      	cmp	r0, #0
 801d43a:	d14b      	bne.n	801d4d4 <_dtoa_r+0x31c>
 801d43c:	4b24      	ldr	r3, [pc, #144]	; (801d4d0 <_dtoa_r+0x318>)
 801d43e:	4602      	mov	r2, r0
 801d440:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801d444:	e6d1      	b.n	801d1ea <_dtoa_r+0x32>
 801d446:	2301      	movs	r3, #1
 801d448:	e7de      	b.n	801d408 <_dtoa_r+0x250>
 801d44a:	2300      	movs	r3, #0
 801d44c:	9308      	str	r3, [sp, #32]
 801d44e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d450:	eb0a 0903 	add.w	r9, sl, r3
 801d454:	f109 0301 	add.w	r3, r9, #1
 801d458:	2b01      	cmp	r3, #1
 801d45a:	9301      	str	r3, [sp, #4]
 801d45c:	bfb8      	it	lt
 801d45e:	2301      	movlt	r3, #1
 801d460:	e7dd      	b.n	801d41e <_dtoa_r+0x266>
 801d462:	2301      	movs	r3, #1
 801d464:	e7f2      	b.n	801d44c <_dtoa_r+0x294>
 801d466:	2501      	movs	r5, #1
 801d468:	2300      	movs	r3, #0
 801d46a:	9305      	str	r3, [sp, #20]
 801d46c:	9508      	str	r5, [sp, #32]
 801d46e:	f04f 39ff 	mov.w	r9, #4294967295
 801d472:	2200      	movs	r2, #0
 801d474:	f8cd 9004 	str.w	r9, [sp, #4]
 801d478:	2312      	movs	r3, #18
 801d47a:	9209      	str	r2, [sp, #36]	; 0x24
 801d47c:	e7cf      	b.n	801d41e <_dtoa_r+0x266>
 801d47e:	2301      	movs	r3, #1
 801d480:	9308      	str	r3, [sp, #32]
 801d482:	e7f4      	b.n	801d46e <_dtoa_r+0x2b6>
 801d484:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801d488:	f8cd 9004 	str.w	r9, [sp, #4]
 801d48c:	464b      	mov	r3, r9
 801d48e:	e7c6      	b.n	801d41e <_dtoa_r+0x266>
 801d490:	3101      	adds	r1, #1
 801d492:	6041      	str	r1, [r0, #4]
 801d494:	0052      	lsls	r2, r2, #1
 801d496:	e7c6      	b.n	801d426 <_dtoa_r+0x26e>
 801d498:	636f4361 	.word	0x636f4361
 801d49c:	3fd287a7 	.word	0x3fd287a7
 801d4a0:	8b60c8b3 	.word	0x8b60c8b3
 801d4a4:	3fc68a28 	.word	0x3fc68a28
 801d4a8:	509f79fb 	.word	0x509f79fb
 801d4ac:	3fd34413 	.word	0x3fd34413
 801d4b0:	08022acd 	.word	0x08022acd
 801d4b4:	08022b50 	.word	0x08022b50
 801d4b8:	7ff00000 	.word	0x7ff00000
 801d4bc:	08022b4c 	.word	0x08022b4c
 801d4c0:	08022b43 	.word	0x08022b43
 801d4c4:	08022aaa 	.word	0x08022aaa
 801d4c8:	3ff80000 	.word	0x3ff80000
 801d4cc:	08022c58 	.word	0x08022c58
 801d4d0:	08022baf 	.word	0x08022baf
 801d4d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d4d6:	9a00      	ldr	r2, [sp, #0]
 801d4d8:	601a      	str	r2, [r3, #0]
 801d4da:	9b01      	ldr	r3, [sp, #4]
 801d4dc:	2b0e      	cmp	r3, #14
 801d4de:	f200 80ad 	bhi.w	801d63c <_dtoa_r+0x484>
 801d4e2:	2d00      	cmp	r5, #0
 801d4e4:	f000 80aa 	beq.w	801d63c <_dtoa_r+0x484>
 801d4e8:	f1ba 0f00 	cmp.w	sl, #0
 801d4ec:	dd36      	ble.n	801d55c <_dtoa_r+0x3a4>
 801d4ee:	4ac3      	ldr	r2, [pc, #780]	; (801d7fc <_dtoa_r+0x644>)
 801d4f0:	f00a 030f 	and.w	r3, sl, #15
 801d4f4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801d4f8:	ed93 7b00 	vldr	d7, [r3]
 801d4fc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801d500:	ea4f 172a 	mov.w	r7, sl, asr #4
 801d504:	eeb0 8a47 	vmov.f32	s16, s14
 801d508:	eef0 8a67 	vmov.f32	s17, s15
 801d50c:	d016      	beq.n	801d53c <_dtoa_r+0x384>
 801d50e:	4bbc      	ldr	r3, [pc, #752]	; (801d800 <_dtoa_r+0x648>)
 801d510:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801d514:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801d518:	f7e3 f998 	bl	800084c <__aeabi_ddiv>
 801d51c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d520:	f007 070f 	and.w	r7, r7, #15
 801d524:	2503      	movs	r5, #3
 801d526:	4eb6      	ldr	r6, [pc, #728]	; (801d800 <_dtoa_r+0x648>)
 801d528:	b957      	cbnz	r7, 801d540 <_dtoa_r+0x388>
 801d52a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d52e:	ec53 2b18 	vmov	r2, r3, d8
 801d532:	f7e3 f98b 	bl	800084c <__aeabi_ddiv>
 801d536:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d53a:	e029      	b.n	801d590 <_dtoa_r+0x3d8>
 801d53c:	2502      	movs	r5, #2
 801d53e:	e7f2      	b.n	801d526 <_dtoa_r+0x36e>
 801d540:	07f9      	lsls	r1, r7, #31
 801d542:	d508      	bpl.n	801d556 <_dtoa_r+0x39e>
 801d544:	ec51 0b18 	vmov	r0, r1, d8
 801d548:	e9d6 2300 	ldrd	r2, r3, [r6]
 801d54c:	f7e3 f854 	bl	80005f8 <__aeabi_dmul>
 801d550:	ec41 0b18 	vmov	d8, r0, r1
 801d554:	3501      	adds	r5, #1
 801d556:	107f      	asrs	r7, r7, #1
 801d558:	3608      	adds	r6, #8
 801d55a:	e7e5      	b.n	801d528 <_dtoa_r+0x370>
 801d55c:	f000 80a6 	beq.w	801d6ac <_dtoa_r+0x4f4>
 801d560:	f1ca 0600 	rsb	r6, sl, #0
 801d564:	4ba5      	ldr	r3, [pc, #660]	; (801d7fc <_dtoa_r+0x644>)
 801d566:	4fa6      	ldr	r7, [pc, #664]	; (801d800 <_dtoa_r+0x648>)
 801d568:	f006 020f 	and.w	r2, r6, #15
 801d56c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d570:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d574:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801d578:	f7e3 f83e 	bl	80005f8 <__aeabi_dmul>
 801d57c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d580:	1136      	asrs	r6, r6, #4
 801d582:	2300      	movs	r3, #0
 801d584:	2502      	movs	r5, #2
 801d586:	2e00      	cmp	r6, #0
 801d588:	f040 8085 	bne.w	801d696 <_dtoa_r+0x4de>
 801d58c:	2b00      	cmp	r3, #0
 801d58e:	d1d2      	bne.n	801d536 <_dtoa_r+0x37e>
 801d590:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d592:	2b00      	cmp	r3, #0
 801d594:	f000 808c 	beq.w	801d6b0 <_dtoa_r+0x4f8>
 801d598:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801d59c:	4b99      	ldr	r3, [pc, #612]	; (801d804 <_dtoa_r+0x64c>)
 801d59e:	2200      	movs	r2, #0
 801d5a0:	4630      	mov	r0, r6
 801d5a2:	4639      	mov	r1, r7
 801d5a4:	f7e3 fa9a 	bl	8000adc <__aeabi_dcmplt>
 801d5a8:	2800      	cmp	r0, #0
 801d5aa:	f000 8081 	beq.w	801d6b0 <_dtoa_r+0x4f8>
 801d5ae:	9b01      	ldr	r3, [sp, #4]
 801d5b0:	2b00      	cmp	r3, #0
 801d5b2:	d07d      	beq.n	801d6b0 <_dtoa_r+0x4f8>
 801d5b4:	f1b9 0f00 	cmp.w	r9, #0
 801d5b8:	dd3c      	ble.n	801d634 <_dtoa_r+0x47c>
 801d5ba:	f10a 33ff 	add.w	r3, sl, #4294967295
 801d5be:	9307      	str	r3, [sp, #28]
 801d5c0:	2200      	movs	r2, #0
 801d5c2:	4b91      	ldr	r3, [pc, #580]	; (801d808 <_dtoa_r+0x650>)
 801d5c4:	4630      	mov	r0, r6
 801d5c6:	4639      	mov	r1, r7
 801d5c8:	f7e3 f816 	bl	80005f8 <__aeabi_dmul>
 801d5cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d5d0:	3501      	adds	r5, #1
 801d5d2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801d5d6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801d5da:	4628      	mov	r0, r5
 801d5dc:	f7e2 ffa2 	bl	8000524 <__aeabi_i2d>
 801d5e0:	4632      	mov	r2, r6
 801d5e2:	463b      	mov	r3, r7
 801d5e4:	f7e3 f808 	bl	80005f8 <__aeabi_dmul>
 801d5e8:	4b88      	ldr	r3, [pc, #544]	; (801d80c <_dtoa_r+0x654>)
 801d5ea:	2200      	movs	r2, #0
 801d5ec:	f7e2 fe4e 	bl	800028c <__adddf3>
 801d5f0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801d5f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d5f8:	9303      	str	r3, [sp, #12]
 801d5fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d5fc:	2b00      	cmp	r3, #0
 801d5fe:	d15c      	bne.n	801d6ba <_dtoa_r+0x502>
 801d600:	4b83      	ldr	r3, [pc, #524]	; (801d810 <_dtoa_r+0x658>)
 801d602:	2200      	movs	r2, #0
 801d604:	4630      	mov	r0, r6
 801d606:	4639      	mov	r1, r7
 801d608:	f7e2 fe3e 	bl	8000288 <__aeabi_dsub>
 801d60c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d610:	4606      	mov	r6, r0
 801d612:	460f      	mov	r7, r1
 801d614:	f7e3 fa80 	bl	8000b18 <__aeabi_dcmpgt>
 801d618:	2800      	cmp	r0, #0
 801d61a:	f040 8296 	bne.w	801db4a <_dtoa_r+0x992>
 801d61e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801d622:	4630      	mov	r0, r6
 801d624:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d628:	4639      	mov	r1, r7
 801d62a:	f7e3 fa57 	bl	8000adc <__aeabi_dcmplt>
 801d62e:	2800      	cmp	r0, #0
 801d630:	f040 8288 	bne.w	801db44 <_dtoa_r+0x98c>
 801d634:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801d638:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801d63c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801d63e:	2b00      	cmp	r3, #0
 801d640:	f2c0 8158 	blt.w	801d8f4 <_dtoa_r+0x73c>
 801d644:	f1ba 0f0e 	cmp.w	sl, #14
 801d648:	f300 8154 	bgt.w	801d8f4 <_dtoa_r+0x73c>
 801d64c:	4b6b      	ldr	r3, [pc, #428]	; (801d7fc <_dtoa_r+0x644>)
 801d64e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801d652:	e9d3 8900 	ldrd	r8, r9, [r3]
 801d656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d658:	2b00      	cmp	r3, #0
 801d65a:	f280 80e3 	bge.w	801d824 <_dtoa_r+0x66c>
 801d65e:	9b01      	ldr	r3, [sp, #4]
 801d660:	2b00      	cmp	r3, #0
 801d662:	f300 80df 	bgt.w	801d824 <_dtoa_r+0x66c>
 801d666:	f040 826d 	bne.w	801db44 <_dtoa_r+0x98c>
 801d66a:	4b69      	ldr	r3, [pc, #420]	; (801d810 <_dtoa_r+0x658>)
 801d66c:	2200      	movs	r2, #0
 801d66e:	4640      	mov	r0, r8
 801d670:	4649      	mov	r1, r9
 801d672:	f7e2 ffc1 	bl	80005f8 <__aeabi_dmul>
 801d676:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d67a:	f7e3 fa43 	bl	8000b04 <__aeabi_dcmpge>
 801d67e:	9e01      	ldr	r6, [sp, #4]
 801d680:	4637      	mov	r7, r6
 801d682:	2800      	cmp	r0, #0
 801d684:	f040 8243 	bne.w	801db0e <_dtoa_r+0x956>
 801d688:	9d00      	ldr	r5, [sp, #0]
 801d68a:	2331      	movs	r3, #49	; 0x31
 801d68c:	f805 3b01 	strb.w	r3, [r5], #1
 801d690:	f10a 0a01 	add.w	sl, sl, #1
 801d694:	e23f      	b.n	801db16 <_dtoa_r+0x95e>
 801d696:	07f2      	lsls	r2, r6, #31
 801d698:	d505      	bpl.n	801d6a6 <_dtoa_r+0x4ee>
 801d69a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d69e:	f7e2 ffab 	bl	80005f8 <__aeabi_dmul>
 801d6a2:	3501      	adds	r5, #1
 801d6a4:	2301      	movs	r3, #1
 801d6a6:	1076      	asrs	r6, r6, #1
 801d6a8:	3708      	adds	r7, #8
 801d6aa:	e76c      	b.n	801d586 <_dtoa_r+0x3ce>
 801d6ac:	2502      	movs	r5, #2
 801d6ae:	e76f      	b.n	801d590 <_dtoa_r+0x3d8>
 801d6b0:	9b01      	ldr	r3, [sp, #4]
 801d6b2:	f8cd a01c 	str.w	sl, [sp, #28]
 801d6b6:	930c      	str	r3, [sp, #48]	; 0x30
 801d6b8:	e78d      	b.n	801d5d6 <_dtoa_r+0x41e>
 801d6ba:	9900      	ldr	r1, [sp, #0]
 801d6bc:	980c      	ldr	r0, [sp, #48]	; 0x30
 801d6be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d6c0:	4b4e      	ldr	r3, [pc, #312]	; (801d7fc <_dtoa_r+0x644>)
 801d6c2:	ed9d 7b02 	vldr	d7, [sp, #8]
 801d6c6:	4401      	add	r1, r0
 801d6c8:	9102      	str	r1, [sp, #8]
 801d6ca:	9908      	ldr	r1, [sp, #32]
 801d6cc:	eeb0 8a47 	vmov.f32	s16, s14
 801d6d0:	eef0 8a67 	vmov.f32	s17, s15
 801d6d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d6d8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801d6dc:	2900      	cmp	r1, #0
 801d6de:	d045      	beq.n	801d76c <_dtoa_r+0x5b4>
 801d6e0:	494c      	ldr	r1, [pc, #304]	; (801d814 <_dtoa_r+0x65c>)
 801d6e2:	2000      	movs	r0, #0
 801d6e4:	f7e3 f8b2 	bl	800084c <__aeabi_ddiv>
 801d6e8:	ec53 2b18 	vmov	r2, r3, d8
 801d6ec:	f7e2 fdcc 	bl	8000288 <__aeabi_dsub>
 801d6f0:	9d00      	ldr	r5, [sp, #0]
 801d6f2:	ec41 0b18 	vmov	d8, r0, r1
 801d6f6:	4639      	mov	r1, r7
 801d6f8:	4630      	mov	r0, r6
 801d6fa:	f7e3 fa2d 	bl	8000b58 <__aeabi_d2iz>
 801d6fe:	900c      	str	r0, [sp, #48]	; 0x30
 801d700:	f7e2 ff10 	bl	8000524 <__aeabi_i2d>
 801d704:	4602      	mov	r2, r0
 801d706:	460b      	mov	r3, r1
 801d708:	4630      	mov	r0, r6
 801d70a:	4639      	mov	r1, r7
 801d70c:	f7e2 fdbc 	bl	8000288 <__aeabi_dsub>
 801d710:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d712:	3330      	adds	r3, #48	; 0x30
 801d714:	f805 3b01 	strb.w	r3, [r5], #1
 801d718:	ec53 2b18 	vmov	r2, r3, d8
 801d71c:	4606      	mov	r6, r0
 801d71e:	460f      	mov	r7, r1
 801d720:	f7e3 f9dc 	bl	8000adc <__aeabi_dcmplt>
 801d724:	2800      	cmp	r0, #0
 801d726:	d165      	bne.n	801d7f4 <_dtoa_r+0x63c>
 801d728:	4632      	mov	r2, r6
 801d72a:	463b      	mov	r3, r7
 801d72c:	4935      	ldr	r1, [pc, #212]	; (801d804 <_dtoa_r+0x64c>)
 801d72e:	2000      	movs	r0, #0
 801d730:	f7e2 fdaa 	bl	8000288 <__aeabi_dsub>
 801d734:	ec53 2b18 	vmov	r2, r3, d8
 801d738:	f7e3 f9d0 	bl	8000adc <__aeabi_dcmplt>
 801d73c:	2800      	cmp	r0, #0
 801d73e:	f040 80b9 	bne.w	801d8b4 <_dtoa_r+0x6fc>
 801d742:	9b02      	ldr	r3, [sp, #8]
 801d744:	429d      	cmp	r5, r3
 801d746:	f43f af75 	beq.w	801d634 <_dtoa_r+0x47c>
 801d74a:	4b2f      	ldr	r3, [pc, #188]	; (801d808 <_dtoa_r+0x650>)
 801d74c:	ec51 0b18 	vmov	r0, r1, d8
 801d750:	2200      	movs	r2, #0
 801d752:	f7e2 ff51 	bl	80005f8 <__aeabi_dmul>
 801d756:	4b2c      	ldr	r3, [pc, #176]	; (801d808 <_dtoa_r+0x650>)
 801d758:	ec41 0b18 	vmov	d8, r0, r1
 801d75c:	2200      	movs	r2, #0
 801d75e:	4630      	mov	r0, r6
 801d760:	4639      	mov	r1, r7
 801d762:	f7e2 ff49 	bl	80005f8 <__aeabi_dmul>
 801d766:	4606      	mov	r6, r0
 801d768:	460f      	mov	r7, r1
 801d76a:	e7c4      	b.n	801d6f6 <_dtoa_r+0x53e>
 801d76c:	ec51 0b17 	vmov	r0, r1, d7
 801d770:	f7e2 ff42 	bl	80005f8 <__aeabi_dmul>
 801d774:	9b02      	ldr	r3, [sp, #8]
 801d776:	9d00      	ldr	r5, [sp, #0]
 801d778:	930c      	str	r3, [sp, #48]	; 0x30
 801d77a:	ec41 0b18 	vmov	d8, r0, r1
 801d77e:	4639      	mov	r1, r7
 801d780:	4630      	mov	r0, r6
 801d782:	f7e3 f9e9 	bl	8000b58 <__aeabi_d2iz>
 801d786:	9011      	str	r0, [sp, #68]	; 0x44
 801d788:	f7e2 fecc 	bl	8000524 <__aeabi_i2d>
 801d78c:	4602      	mov	r2, r0
 801d78e:	460b      	mov	r3, r1
 801d790:	4630      	mov	r0, r6
 801d792:	4639      	mov	r1, r7
 801d794:	f7e2 fd78 	bl	8000288 <__aeabi_dsub>
 801d798:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d79a:	3330      	adds	r3, #48	; 0x30
 801d79c:	f805 3b01 	strb.w	r3, [r5], #1
 801d7a0:	9b02      	ldr	r3, [sp, #8]
 801d7a2:	429d      	cmp	r5, r3
 801d7a4:	4606      	mov	r6, r0
 801d7a6:	460f      	mov	r7, r1
 801d7a8:	f04f 0200 	mov.w	r2, #0
 801d7ac:	d134      	bne.n	801d818 <_dtoa_r+0x660>
 801d7ae:	4b19      	ldr	r3, [pc, #100]	; (801d814 <_dtoa_r+0x65c>)
 801d7b0:	ec51 0b18 	vmov	r0, r1, d8
 801d7b4:	f7e2 fd6a 	bl	800028c <__adddf3>
 801d7b8:	4602      	mov	r2, r0
 801d7ba:	460b      	mov	r3, r1
 801d7bc:	4630      	mov	r0, r6
 801d7be:	4639      	mov	r1, r7
 801d7c0:	f7e3 f9aa 	bl	8000b18 <__aeabi_dcmpgt>
 801d7c4:	2800      	cmp	r0, #0
 801d7c6:	d175      	bne.n	801d8b4 <_dtoa_r+0x6fc>
 801d7c8:	ec53 2b18 	vmov	r2, r3, d8
 801d7cc:	4911      	ldr	r1, [pc, #68]	; (801d814 <_dtoa_r+0x65c>)
 801d7ce:	2000      	movs	r0, #0
 801d7d0:	f7e2 fd5a 	bl	8000288 <__aeabi_dsub>
 801d7d4:	4602      	mov	r2, r0
 801d7d6:	460b      	mov	r3, r1
 801d7d8:	4630      	mov	r0, r6
 801d7da:	4639      	mov	r1, r7
 801d7dc:	f7e3 f97e 	bl	8000adc <__aeabi_dcmplt>
 801d7e0:	2800      	cmp	r0, #0
 801d7e2:	f43f af27 	beq.w	801d634 <_dtoa_r+0x47c>
 801d7e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801d7e8:	1e6b      	subs	r3, r5, #1
 801d7ea:	930c      	str	r3, [sp, #48]	; 0x30
 801d7ec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801d7f0:	2b30      	cmp	r3, #48	; 0x30
 801d7f2:	d0f8      	beq.n	801d7e6 <_dtoa_r+0x62e>
 801d7f4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801d7f8:	e04a      	b.n	801d890 <_dtoa_r+0x6d8>
 801d7fa:	bf00      	nop
 801d7fc:	08022c58 	.word	0x08022c58
 801d800:	08022c30 	.word	0x08022c30
 801d804:	3ff00000 	.word	0x3ff00000
 801d808:	40240000 	.word	0x40240000
 801d80c:	401c0000 	.word	0x401c0000
 801d810:	40140000 	.word	0x40140000
 801d814:	3fe00000 	.word	0x3fe00000
 801d818:	4baf      	ldr	r3, [pc, #700]	; (801dad8 <_dtoa_r+0x920>)
 801d81a:	f7e2 feed 	bl	80005f8 <__aeabi_dmul>
 801d81e:	4606      	mov	r6, r0
 801d820:	460f      	mov	r7, r1
 801d822:	e7ac      	b.n	801d77e <_dtoa_r+0x5c6>
 801d824:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801d828:	9d00      	ldr	r5, [sp, #0]
 801d82a:	4642      	mov	r2, r8
 801d82c:	464b      	mov	r3, r9
 801d82e:	4630      	mov	r0, r6
 801d830:	4639      	mov	r1, r7
 801d832:	f7e3 f80b 	bl	800084c <__aeabi_ddiv>
 801d836:	f7e3 f98f 	bl	8000b58 <__aeabi_d2iz>
 801d83a:	9002      	str	r0, [sp, #8]
 801d83c:	f7e2 fe72 	bl	8000524 <__aeabi_i2d>
 801d840:	4642      	mov	r2, r8
 801d842:	464b      	mov	r3, r9
 801d844:	f7e2 fed8 	bl	80005f8 <__aeabi_dmul>
 801d848:	4602      	mov	r2, r0
 801d84a:	460b      	mov	r3, r1
 801d84c:	4630      	mov	r0, r6
 801d84e:	4639      	mov	r1, r7
 801d850:	f7e2 fd1a 	bl	8000288 <__aeabi_dsub>
 801d854:	9e02      	ldr	r6, [sp, #8]
 801d856:	9f01      	ldr	r7, [sp, #4]
 801d858:	3630      	adds	r6, #48	; 0x30
 801d85a:	f805 6b01 	strb.w	r6, [r5], #1
 801d85e:	9e00      	ldr	r6, [sp, #0]
 801d860:	1bae      	subs	r6, r5, r6
 801d862:	42b7      	cmp	r7, r6
 801d864:	4602      	mov	r2, r0
 801d866:	460b      	mov	r3, r1
 801d868:	d137      	bne.n	801d8da <_dtoa_r+0x722>
 801d86a:	f7e2 fd0f 	bl	800028c <__adddf3>
 801d86e:	4642      	mov	r2, r8
 801d870:	464b      	mov	r3, r9
 801d872:	4606      	mov	r6, r0
 801d874:	460f      	mov	r7, r1
 801d876:	f7e3 f94f 	bl	8000b18 <__aeabi_dcmpgt>
 801d87a:	b9c8      	cbnz	r0, 801d8b0 <_dtoa_r+0x6f8>
 801d87c:	4642      	mov	r2, r8
 801d87e:	464b      	mov	r3, r9
 801d880:	4630      	mov	r0, r6
 801d882:	4639      	mov	r1, r7
 801d884:	f7e3 f920 	bl	8000ac8 <__aeabi_dcmpeq>
 801d888:	b110      	cbz	r0, 801d890 <_dtoa_r+0x6d8>
 801d88a:	9b02      	ldr	r3, [sp, #8]
 801d88c:	07d9      	lsls	r1, r3, #31
 801d88e:	d40f      	bmi.n	801d8b0 <_dtoa_r+0x6f8>
 801d890:	4620      	mov	r0, r4
 801d892:	4659      	mov	r1, fp
 801d894:	f000 fc1c 	bl	801e0d0 <_Bfree>
 801d898:	2300      	movs	r3, #0
 801d89a:	702b      	strb	r3, [r5, #0]
 801d89c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d89e:	f10a 0001 	add.w	r0, sl, #1
 801d8a2:	6018      	str	r0, [r3, #0]
 801d8a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d8a6:	2b00      	cmp	r3, #0
 801d8a8:	f43f acd8 	beq.w	801d25c <_dtoa_r+0xa4>
 801d8ac:	601d      	str	r5, [r3, #0]
 801d8ae:	e4d5      	b.n	801d25c <_dtoa_r+0xa4>
 801d8b0:	f8cd a01c 	str.w	sl, [sp, #28]
 801d8b4:	462b      	mov	r3, r5
 801d8b6:	461d      	mov	r5, r3
 801d8b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d8bc:	2a39      	cmp	r2, #57	; 0x39
 801d8be:	d108      	bne.n	801d8d2 <_dtoa_r+0x71a>
 801d8c0:	9a00      	ldr	r2, [sp, #0]
 801d8c2:	429a      	cmp	r2, r3
 801d8c4:	d1f7      	bne.n	801d8b6 <_dtoa_r+0x6fe>
 801d8c6:	9a07      	ldr	r2, [sp, #28]
 801d8c8:	9900      	ldr	r1, [sp, #0]
 801d8ca:	3201      	adds	r2, #1
 801d8cc:	9207      	str	r2, [sp, #28]
 801d8ce:	2230      	movs	r2, #48	; 0x30
 801d8d0:	700a      	strb	r2, [r1, #0]
 801d8d2:	781a      	ldrb	r2, [r3, #0]
 801d8d4:	3201      	adds	r2, #1
 801d8d6:	701a      	strb	r2, [r3, #0]
 801d8d8:	e78c      	b.n	801d7f4 <_dtoa_r+0x63c>
 801d8da:	4b7f      	ldr	r3, [pc, #508]	; (801dad8 <_dtoa_r+0x920>)
 801d8dc:	2200      	movs	r2, #0
 801d8de:	f7e2 fe8b 	bl	80005f8 <__aeabi_dmul>
 801d8e2:	2200      	movs	r2, #0
 801d8e4:	2300      	movs	r3, #0
 801d8e6:	4606      	mov	r6, r0
 801d8e8:	460f      	mov	r7, r1
 801d8ea:	f7e3 f8ed 	bl	8000ac8 <__aeabi_dcmpeq>
 801d8ee:	2800      	cmp	r0, #0
 801d8f0:	d09b      	beq.n	801d82a <_dtoa_r+0x672>
 801d8f2:	e7cd      	b.n	801d890 <_dtoa_r+0x6d8>
 801d8f4:	9a08      	ldr	r2, [sp, #32]
 801d8f6:	2a00      	cmp	r2, #0
 801d8f8:	f000 80c4 	beq.w	801da84 <_dtoa_r+0x8cc>
 801d8fc:	9a05      	ldr	r2, [sp, #20]
 801d8fe:	2a01      	cmp	r2, #1
 801d900:	f300 80a8 	bgt.w	801da54 <_dtoa_r+0x89c>
 801d904:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d906:	2a00      	cmp	r2, #0
 801d908:	f000 80a0 	beq.w	801da4c <_dtoa_r+0x894>
 801d90c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801d910:	9e06      	ldr	r6, [sp, #24]
 801d912:	4645      	mov	r5, r8
 801d914:	9a04      	ldr	r2, [sp, #16]
 801d916:	2101      	movs	r1, #1
 801d918:	441a      	add	r2, r3
 801d91a:	4620      	mov	r0, r4
 801d91c:	4498      	add	r8, r3
 801d91e:	9204      	str	r2, [sp, #16]
 801d920:	f000 fc92 	bl	801e248 <__i2b>
 801d924:	4607      	mov	r7, r0
 801d926:	2d00      	cmp	r5, #0
 801d928:	dd0b      	ble.n	801d942 <_dtoa_r+0x78a>
 801d92a:	9b04      	ldr	r3, [sp, #16]
 801d92c:	2b00      	cmp	r3, #0
 801d92e:	dd08      	ble.n	801d942 <_dtoa_r+0x78a>
 801d930:	42ab      	cmp	r3, r5
 801d932:	9a04      	ldr	r2, [sp, #16]
 801d934:	bfa8      	it	ge
 801d936:	462b      	movge	r3, r5
 801d938:	eba8 0803 	sub.w	r8, r8, r3
 801d93c:	1aed      	subs	r5, r5, r3
 801d93e:	1ad3      	subs	r3, r2, r3
 801d940:	9304      	str	r3, [sp, #16]
 801d942:	9b06      	ldr	r3, [sp, #24]
 801d944:	b1fb      	cbz	r3, 801d986 <_dtoa_r+0x7ce>
 801d946:	9b08      	ldr	r3, [sp, #32]
 801d948:	2b00      	cmp	r3, #0
 801d94a:	f000 809f 	beq.w	801da8c <_dtoa_r+0x8d4>
 801d94e:	2e00      	cmp	r6, #0
 801d950:	dd11      	ble.n	801d976 <_dtoa_r+0x7be>
 801d952:	4639      	mov	r1, r7
 801d954:	4632      	mov	r2, r6
 801d956:	4620      	mov	r0, r4
 801d958:	f000 fd32 	bl	801e3c0 <__pow5mult>
 801d95c:	465a      	mov	r2, fp
 801d95e:	4601      	mov	r1, r0
 801d960:	4607      	mov	r7, r0
 801d962:	4620      	mov	r0, r4
 801d964:	f000 fc86 	bl	801e274 <__multiply>
 801d968:	4659      	mov	r1, fp
 801d96a:	9007      	str	r0, [sp, #28]
 801d96c:	4620      	mov	r0, r4
 801d96e:	f000 fbaf 	bl	801e0d0 <_Bfree>
 801d972:	9b07      	ldr	r3, [sp, #28]
 801d974:	469b      	mov	fp, r3
 801d976:	9b06      	ldr	r3, [sp, #24]
 801d978:	1b9a      	subs	r2, r3, r6
 801d97a:	d004      	beq.n	801d986 <_dtoa_r+0x7ce>
 801d97c:	4659      	mov	r1, fp
 801d97e:	4620      	mov	r0, r4
 801d980:	f000 fd1e 	bl	801e3c0 <__pow5mult>
 801d984:	4683      	mov	fp, r0
 801d986:	2101      	movs	r1, #1
 801d988:	4620      	mov	r0, r4
 801d98a:	f000 fc5d 	bl	801e248 <__i2b>
 801d98e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d990:	2b00      	cmp	r3, #0
 801d992:	4606      	mov	r6, r0
 801d994:	dd7c      	ble.n	801da90 <_dtoa_r+0x8d8>
 801d996:	461a      	mov	r2, r3
 801d998:	4601      	mov	r1, r0
 801d99a:	4620      	mov	r0, r4
 801d99c:	f000 fd10 	bl	801e3c0 <__pow5mult>
 801d9a0:	9b05      	ldr	r3, [sp, #20]
 801d9a2:	2b01      	cmp	r3, #1
 801d9a4:	4606      	mov	r6, r0
 801d9a6:	dd76      	ble.n	801da96 <_dtoa_r+0x8de>
 801d9a8:	2300      	movs	r3, #0
 801d9aa:	9306      	str	r3, [sp, #24]
 801d9ac:	6933      	ldr	r3, [r6, #16]
 801d9ae:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801d9b2:	6918      	ldr	r0, [r3, #16]
 801d9b4:	f000 fbf8 	bl	801e1a8 <__hi0bits>
 801d9b8:	f1c0 0020 	rsb	r0, r0, #32
 801d9bc:	9b04      	ldr	r3, [sp, #16]
 801d9be:	4418      	add	r0, r3
 801d9c0:	f010 001f 	ands.w	r0, r0, #31
 801d9c4:	f000 8086 	beq.w	801dad4 <_dtoa_r+0x91c>
 801d9c8:	f1c0 0320 	rsb	r3, r0, #32
 801d9cc:	2b04      	cmp	r3, #4
 801d9ce:	dd7f      	ble.n	801dad0 <_dtoa_r+0x918>
 801d9d0:	f1c0 001c 	rsb	r0, r0, #28
 801d9d4:	9b04      	ldr	r3, [sp, #16]
 801d9d6:	4403      	add	r3, r0
 801d9d8:	4480      	add	r8, r0
 801d9da:	4405      	add	r5, r0
 801d9dc:	9304      	str	r3, [sp, #16]
 801d9de:	f1b8 0f00 	cmp.w	r8, #0
 801d9e2:	dd05      	ble.n	801d9f0 <_dtoa_r+0x838>
 801d9e4:	4659      	mov	r1, fp
 801d9e6:	4642      	mov	r2, r8
 801d9e8:	4620      	mov	r0, r4
 801d9ea:	f000 fd43 	bl	801e474 <__lshift>
 801d9ee:	4683      	mov	fp, r0
 801d9f0:	9b04      	ldr	r3, [sp, #16]
 801d9f2:	2b00      	cmp	r3, #0
 801d9f4:	dd05      	ble.n	801da02 <_dtoa_r+0x84a>
 801d9f6:	4631      	mov	r1, r6
 801d9f8:	461a      	mov	r2, r3
 801d9fa:	4620      	mov	r0, r4
 801d9fc:	f000 fd3a 	bl	801e474 <__lshift>
 801da00:	4606      	mov	r6, r0
 801da02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801da04:	2b00      	cmp	r3, #0
 801da06:	d069      	beq.n	801dadc <_dtoa_r+0x924>
 801da08:	4631      	mov	r1, r6
 801da0a:	4658      	mov	r0, fp
 801da0c:	f000 fd9e 	bl	801e54c <__mcmp>
 801da10:	2800      	cmp	r0, #0
 801da12:	da63      	bge.n	801dadc <_dtoa_r+0x924>
 801da14:	2300      	movs	r3, #0
 801da16:	4659      	mov	r1, fp
 801da18:	220a      	movs	r2, #10
 801da1a:	4620      	mov	r0, r4
 801da1c:	f000 fb7a 	bl	801e114 <__multadd>
 801da20:	9b08      	ldr	r3, [sp, #32]
 801da22:	f10a 3aff 	add.w	sl, sl, #4294967295
 801da26:	4683      	mov	fp, r0
 801da28:	2b00      	cmp	r3, #0
 801da2a:	f000 818f 	beq.w	801dd4c <_dtoa_r+0xb94>
 801da2e:	4639      	mov	r1, r7
 801da30:	2300      	movs	r3, #0
 801da32:	220a      	movs	r2, #10
 801da34:	4620      	mov	r0, r4
 801da36:	f000 fb6d 	bl	801e114 <__multadd>
 801da3a:	f1b9 0f00 	cmp.w	r9, #0
 801da3e:	4607      	mov	r7, r0
 801da40:	f300 808e 	bgt.w	801db60 <_dtoa_r+0x9a8>
 801da44:	9b05      	ldr	r3, [sp, #20]
 801da46:	2b02      	cmp	r3, #2
 801da48:	dc50      	bgt.n	801daec <_dtoa_r+0x934>
 801da4a:	e089      	b.n	801db60 <_dtoa_r+0x9a8>
 801da4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801da4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801da52:	e75d      	b.n	801d910 <_dtoa_r+0x758>
 801da54:	9b01      	ldr	r3, [sp, #4]
 801da56:	1e5e      	subs	r6, r3, #1
 801da58:	9b06      	ldr	r3, [sp, #24]
 801da5a:	42b3      	cmp	r3, r6
 801da5c:	bfbf      	itttt	lt
 801da5e:	9b06      	ldrlt	r3, [sp, #24]
 801da60:	9606      	strlt	r6, [sp, #24]
 801da62:	1af2      	sublt	r2, r6, r3
 801da64:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801da66:	bfb6      	itet	lt
 801da68:	189b      	addlt	r3, r3, r2
 801da6a:	1b9e      	subge	r6, r3, r6
 801da6c:	930d      	strlt	r3, [sp, #52]	; 0x34
 801da6e:	9b01      	ldr	r3, [sp, #4]
 801da70:	bfb8      	it	lt
 801da72:	2600      	movlt	r6, #0
 801da74:	2b00      	cmp	r3, #0
 801da76:	bfb5      	itete	lt
 801da78:	eba8 0503 	sublt.w	r5, r8, r3
 801da7c:	9b01      	ldrge	r3, [sp, #4]
 801da7e:	2300      	movlt	r3, #0
 801da80:	4645      	movge	r5, r8
 801da82:	e747      	b.n	801d914 <_dtoa_r+0x75c>
 801da84:	9e06      	ldr	r6, [sp, #24]
 801da86:	9f08      	ldr	r7, [sp, #32]
 801da88:	4645      	mov	r5, r8
 801da8a:	e74c      	b.n	801d926 <_dtoa_r+0x76e>
 801da8c:	9a06      	ldr	r2, [sp, #24]
 801da8e:	e775      	b.n	801d97c <_dtoa_r+0x7c4>
 801da90:	9b05      	ldr	r3, [sp, #20]
 801da92:	2b01      	cmp	r3, #1
 801da94:	dc18      	bgt.n	801dac8 <_dtoa_r+0x910>
 801da96:	9b02      	ldr	r3, [sp, #8]
 801da98:	b9b3      	cbnz	r3, 801dac8 <_dtoa_r+0x910>
 801da9a:	9b03      	ldr	r3, [sp, #12]
 801da9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801daa0:	b9a3      	cbnz	r3, 801dacc <_dtoa_r+0x914>
 801daa2:	9b03      	ldr	r3, [sp, #12]
 801daa4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801daa8:	0d1b      	lsrs	r3, r3, #20
 801daaa:	051b      	lsls	r3, r3, #20
 801daac:	b12b      	cbz	r3, 801daba <_dtoa_r+0x902>
 801daae:	9b04      	ldr	r3, [sp, #16]
 801dab0:	3301      	adds	r3, #1
 801dab2:	9304      	str	r3, [sp, #16]
 801dab4:	f108 0801 	add.w	r8, r8, #1
 801dab8:	2301      	movs	r3, #1
 801daba:	9306      	str	r3, [sp, #24]
 801dabc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dabe:	2b00      	cmp	r3, #0
 801dac0:	f47f af74 	bne.w	801d9ac <_dtoa_r+0x7f4>
 801dac4:	2001      	movs	r0, #1
 801dac6:	e779      	b.n	801d9bc <_dtoa_r+0x804>
 801dac8:	2300      	movs	r3, #0
 801daca:	e7f6      	b.n	801daba <_dtoa_r+0x902>
 801dacc:	9b02      	ldr	r3, [sp, #8]
 801dace:	e7f4      	b.n	801daba <_dtoa_r+0x902>
 801dad0:	d085      	beq.n	801d9de <_dtoa_r+0x826>
 801dad2:	4618      	mov	r0, r3
 801dad4:	301c      	adds	r0, #28
 801dad6:	e77d      	b.n	801d9d4 <_dtoa_r+0x81c>
 801dad8:	40240000 	.word	0x40240000
 801dadc:	9b01      	ldr	r3, [sp, #4]
 801dade:	2b00      	cmp	r3, #0
 801dae0:	dc38      	bgt.n	801db54 <_dtoa_r+0x99c>
 801dae2:	9b05      	ldr	r3, [sp, #20]
 801dae4:	2b02      	cmp	r3, #2
 801dae6:	dd35      	ble.n	801db54 <_dtoa_r+0x99c>
 801dae8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801daec:	f1b9 0f00 	cmp.w	r9, #0
 801daf0:	d10d      	bne.n	801db0e <_dtoa_r+0x956>
 801daf2:	4631      	mov	r1, r6
 801daf4:	464b      	mov	r3, r9
 801daf6:	2205      	movs	r2, #5
 801daf8:	4620      	mov	r0, r4
 801dafa:	f000 fb0b 	bl	801e114 <__multadd>
 801dafe:	4601      	mov	r1, r0
 801db00:	4606      	mov	r6, r0
 801db02:	4658      	mov	r0, fp
 801db04:	f000 fd22 	bl	801e54c <__mcmp>
 801db08:	2800      	cmp	r0, #0
 801db0a:	f73f adbd 	bgt.w	801d688 <_dtoa_r+0x4d0>
 801db0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801db10:	9d00      	ldr	r5, [sp, #0]
 801db12:	ea6f 0a03 	mvn.w	sl, r3
 801db16:	f04f 0800 	mov.w	r8, #0
 801db1a:	4631      	mov	r1, r6
 801db1c:	4620      	mov	r0, r4
 801db1e:	f000 fad7 	bl	801e0d0 <_Bfree>
 801db22:	2f00      	cmp	r7, #0
 801db24:	f43f aeb4 	beq.w	801d890 <_dtoa_r+0x6d8>
 801db28:	f1b8 0f00 	cmp.w	r8, #0
 801db2c:	d005      	beq.n	801db3a <_dtoa_r+0x982>
 801db2e:	45b8      	cmp	r8, r7
 801db30:	d003      	beq.n	801db3a <_dtoa_r+0x982>
 801db32:	4641      	mov	r1, r8
 801db34:	4620      	mov	r0, r4
 801db36:	f000 facb 	bl	801e0d0 <_Bfree>
 801db3a:	4639      	mov	r1, r7
 801db3c:	4620      	mov	r0, r4
 801db3e:	f000 fac7 	bl	801e0d0 <_Bfree>
 801db42:	e6a5      	b.n	801d890 <_dtoa_r+0x6d8>
 801db44:	2600      	movs	r6, #0
 801db46:	4637      	mov	r7, r6
 801db48:	e7e1      	b.n	801db0e <_dtoa_r+0x956>
 801db4a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801db4c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801db50:	4637      	mov	r7, r6
 801db52:	e599      	b.n	801d688 <_dtoa_r+0x4d0>
 801db54:	9b08      	ldr	r3, [sp, #32]
 801db56:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801db5a:	2b00      	cmp	r3, #0
 801db5c:	f000 80fd 	beq.w	801dd5a <_dtoa_r+0xba2>
 801db60:	2d00      	cmp	r5, #0
 801db62:	dd05      	ble.n	801db70 <_dtoa_r+0x9b8>
 801db64:	4639      	mov	r1, r7
 801db66:	462a      	mov	r2, r5
 801db68:	4620      	mov	r0, r4
 801db6a:	f000 fc83 	bl	801e474 <__lshift>
 801db6e:	4607      	mov	r7, r0
 801db70:	9b06      	ldr	r3, [sp, #24]
 801db72:	2b00      	cmp	r3, #0
 801db74:	d05c      	beq.n	801dc30 <_dtoa_r+0xa78>
 801db76:	6879      	ldr	r1, [r7, #4]
 801db78:	4620      	mov	r0, r4
 801db7a:	f000 fa69 	bl	801e050 <_Balloc>
 801db7e:	4605      	mov	r5, r0
 801db80:	b928      	cbnz	r0, 801db8e <_dtoa_r+0x9d6>
 801db82:	4b80      	ldr	r3, [pc, #512]	; (801dd84 <_dtoa_r+0xbcc>)
 801db84:	4602      	mov	r2, r0
 801db86:	f240 21ea 	movw	r1, #746	; 0x2ea
 801db8a:	f7ff bb2e 	b.w	801d1ea <_dtoa_r+0x32>
 801db8e:	693a      	ldr	r2, [r7, #16]
 801db90:	3202      	adds	r2, #2
 801db92:	0092      	lsls	r2, r2, #2
 801db94:	f107 010c 	add.w	r1, r7, #12
 801db98:	300c      	adds	r0, #12
 801db9a:	f7fe f90b 	bl	801bdb4 <memcpy>
 801db9e:	2201      	movs	r2, #1
 801dba0:	4629      	mov	r1, r5
 801dba2:	4620      	mov	r0, r4
 801dba4:	f000 fc66 	bl	801e474 <__lshift>
 801dba8:	9b00      	ldr	r3, [sp, #0]
 801dbaa:	3301      	adds	r3, #1
 801dbac:	9301      	str	r3, [sp, #4]
 801dbae:	9b00      	ldr	r3, [sp, #0]
 801dbb0:	444b      	add	r3, r9
 801dbb2:	9307      	str	r3, [sp, #28]
 801dbb4:	9b02      	ldr	r3, [sp, #8]
 801dbb6:	f003 0301 	and.w	r3, r3, #1
 801dbba:	46b8      	mov	r8, r7
 801dbbc:	9306      	str	r3, [sp, #24]
 801dbbe:	4607      	mov	r7, r0
 801dbc0:	9b01      	ldr	r3, [sp, #4]
 801dbc2:	4631      	mov	r1, r6
 801dbc4:	3b01      	subs	r3, #1
 801dbc6:	4658      	mov	r0, fp
 801dbc8:	9302      	str	r3, [sp, #8]
 801dbca:	f7ff fa67 	bl	801d09c <quorem>
 801dbce:	4603      	mov	r3, r0
 801dbd0:	3330      	adds	r3, #48	; 0x30
 801dbd2:	9004      	str	r0, [sp, #16]
 801dbd4:	4641      	mov	r1, r8
 801dbd6:	4658      	mov	r0, fp
 801dbd8:	9308      	str	r3, [sp, #32]
 801dbda:	f000 fcb7 	bl	801e54c <__mcmp>
 801dbde:	463a      	mov	r2, r7
 801dbe0:	4681      	mov	r9, r0
 801dbe2:	4631      	mov	r1, r6
 801dbe4:	4620      	mov	r0, r4
 801dbe6:	f000 fccd 	bl	801e584 <__mdiff>
 801dbea:	68c2      	ldr	r2, [r0, #12]
 801dbec:	9b08      	ldr	r3, [sp, #32]
 801dbee:	4605      	mov	r5, r0
 801dbf0:	bb02      	cbnz	r2, 801dc34 <_dtoa_r+0xa7c>
 801dbf2:	4601      	mov	r1, r0
 801dbf4:	4658      	mov	r0, fp
 801dbf6:	f000 fca9 	bl	801e54c <__mcmp>
 801dbfa:	9b08      	ldr	r3, [sp, #32]
 801dbfc:	4602      	mov	r2, r0
 801dbfe:	4629      	mov	r1, r5
 801dc00:	4620      	mov	r0, r4
 801dc02:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801dc06:	f000 fa63 	bl	801e0d0 <_Bfree>
 801dc0a:	9b05      	ldr	r3, [sp, #20]
 801dc0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801dc0e:	9d01      	ldr	r5, [sp, #4]
 801dc10:	ea43 0102 	orr.w	r1, r3, r2
 801dc14:	9b06      	ldr	r3, [sp, #24]
 801dc16:	430b      	orrs	r3, r1
 801dc18:	9b08      	ldr	r3, [sp, #32]
 801dc1a:	d10d      	bne.n	801dc38 <_dtoa_r+0xa80>
 801dc1c:	2b39      	cmp	r3, #57	; 0x39
 801dc1e:	d029      	beq.n	801dc74 <_dtoa_r+0xabc>
 801dc20:	f1b9 0f00 	cmp.w	r9, #0
 801dc24:	dd01      	ble.n	801dc2a <_dtoa_r+0xa72>
 801dc26:	9b04      	ldr	r3, [sp, #16]
 801dc28:	3331      	adds	r3, #49	; 0x31
 801dc2a:	9a02      	ldr	r2, [sp, #8]
 801dc2c:	7013      	strb	r3, [r2, #0]
 801dc2e:	e774      	b.n	801db1a <_dtoa_r+0x962>
 801dc30:	4638      	mov	r0, r7
 801dc32:	e7b9      	b.n	801dba8 <_dtoa_r+0x9f0>
 801dc34:	2201      	movs	r2, #1
 801dc36:	e7e2      	b.n	801dbfe <_dtoa_r+0xa46>
 801dc38:	f1b9 0f00 	cmp.w	r9, #0
 801dc3c:	db06      	blt.n	801dc4c <_dtoa_r+0xa94>
 801dc3e:	9905      	ldr	r1, [sp, #20]
 801dc40:	ea41 0909 	orr.w	r9, r1, r9
 801dc44:	9906      	ldr	r1, [sp, #24]
 801dc46:	ea59 0101 	orrs.w	r1, r9, r1
 801dc4a:	d120      	bne.n	801dc8e <_dtoa_r+0xad6>
 801dc4c:	2a00      	cmp	r2, #0
 801dc4e:	ddec      	ble.n	801dc2a <_dtoa_r+0xa72>
 801dc50:	4659      	mov	r1, fp
 801dc52:	2201      	movs	r2, #1
 801dc54:	4620      	mov	r0, r4
 801dc56:	9301      	str	r3, [sp, #4]
 801dc58:	f000 fc0c 	bl	801e474 <__lshift>
 801dc5c:	4631      	mov	r1, r6
 801dc5e:	4683      	mov	fp, r0
 801dc60:	f000 fc74 	bl	801e54c <__mcmp>
 801dc64:	2800      	cmp	r0, #0
 801dc66:	9b01      	ldr	r3, [sp, #4]
 801dc68:	dc02      	bgt.n	801dc70 <_dtoa_r+0xab8>
 801dc6a:	d1de      	bne.n	801dc2a <_dtoa_r+0xa72>
 801dc6c:	07da      	lsls	r2, r3, #31
 801dc6e:	d5dc      	bpl.n	801dc2a <_dtoa_r+0xa72>
 801dc70:	2b39      	cmp	r3, #57	; 0x39
 801dc72:	d1d8      	bne.n	801dc26 <_dtoa_r+0xa6e>
 801dc74:	9a02      	ldr	r2, [sp, #8]
 801dc76:	2339      	movs	r3, #57	; 0x39
 801dc78:	7013      	strb	r3, [r2, #0]
 801dc7a:	462b      	mov	r3, r5
 801dc7c:	461d      	mov	r5, r3
 801dc7e:	3b01      	subs	r3, #1
 801dc80:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801dc84:	2a39      	cmp	r2, #57	; 0x39
 801dc86:	d050      	beq.n	801dd2a <_dtoa_r+0xb72>
 801dc88:	3201      	adds	r2, #1
 801dc8a:	701a      	strb	r2, [r3, #0]
 801dc8c:	e745      	b.n	801db1a <_dtoa_r+0x962>
 801dc8e:	2a00      	cmp	r2, #0
 801dc90:	dd03      	ble.n	801dc9a <_dtoa_r+0xae2>
 801dc92:	2b39      	cmp	r3, #57	; 0x39
 801dc94:	d0ee      	beq.n	801dc74 <_dtoa_r+0xabc>
 801dc96:	3301      	adds	r3, #1
 801dc98:	e7c7      	b.n	801dc2a <_dtoa_r+0xa72>
 801dc9a:	9a01      	ldr	r2, [sp, #4]
 801dc9c:	9907      	ldr	r1, [sp, #28]
 801dc9e:	f802 3c01 	strb.w	r3, [r2, #-1]
 801dca2:	428a      	cmp	r2, r1
 801dca4:	d02a      	beq.n	801dcfc <_dtoa_r+0xb44>
 801dca6:	4659      	mov	r1, fp
 801dca8:	2300      	movs	r3, #0
 801dcaa:	220a      	movs	r2, #10
 801dcac:	4620      	mov	r0, r4
 801dcae:	f000 fa31 	bl	801e114 <__multadd>
 801dcb2:	45b8      	cmp	r8, r7
 801dcb4:	4683      	mov	fp, r0
 801dcb6:	f04f 0300 	mov.w	r3, #0
 801dcba:	f04f 020a 	mov.w	r2, #10
 801dcbe:	4641      	mov	r1, r8
 801dcc0:	4620      	mov	r0, r4
 801dcc2:	d107      	bne.n	801dcd4 <_dtoa_r+0xb1c>
 801dcc4:	f000 fa26 	bl	801e114 <__multadd>
 801dcc8:	4680      	mov	r8, r0
 801dcca:	4607      	mov	r7, r0
 801dccc:	9b01      	ldr	r3, [sp, #4]
 801dcce:	3301      	adds	r3, #1
 801dcd0:	9301      	str	r3, [sp, #4]
 801dcd2:	e775      	b.n	801dbc0 <_dtoa_r+0xa08>
 801dcd4:	f000 fa1e 	bl	801e114 <__multadd>
 801dcd8:	4639      	mov	r1, r7
 801dcda:	4680      	mov	r8, r0
 801dcdc:	2300      	movs	r3, #0
 801dcde:	220a      	movs	r2, #10
 801dce0:	4620      	mov	r0, r4
 801dce2:	f000 fa17 	bl	801e114 <__multadd>
 801dce6:	4607      	mov	r7, r0
 801dce8:	e7f0      	b.n	801dccc <_dtoa_r+0xb14>
 801dcea:	f1b9 0f00 	cmp.w	r9, #0
 801dcee:	9a00      	ldr	r2, [sp, #0]
 801dcf0:	bfcc      	ite	gt
 801dcf2:	464d      	movgt	r5, r9
 801dcf4:	2501      	movle	r5, #1
 801dcf6:	4415      	add	r5, r2
 801dcf8:	f04f 0800 	mov.w	r8, #0
 801dcfc:	4659      	mov	r1, fp
 801dcfe:	2201      	movs	r2, #1
 801dd00:	4620      	mov	r0, r4
 801dd02:	9301      	str	r3, [sp, #4]
 801dd04:	f000 fbb6 	bl	801e474 <__lshift>
 801dd08:	4631      	mov	r1, r6
 801dd0a:	4683      	mov	fp, r0
 801dd0c:	f000 fc1e 	bl	801e54c <__mcmp>
 801dd10:	2800      	cmp	r0, #0
 801dd12:	dcb2      	bgt.n	801dc7a <_dtoa_r+0xac2>
 801dd14:	d102      	bne.n	801dd1c <_dtoa_r+0xb64>
 801dd16:	9b01      	ldr	r3, [sp, #4]
 801dd18:	07db      	lsls	r3, r3, #31
 801dd1a:	d4ae      	bmi.n	801dc7a <_dtoa_r+0xac2>
 801dd1c:	462b      	mov	r3, r5
 801dd1e:	461d      	mov	r5, r3
 801dd20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801dd24:	2a30      	cmp	r2, #48	; 0x30
 801dd26:	d0fa      	beq.n	801dd1e <_dtoa_r+0xb66>
 801dd28:	e6f7      	b.n	801db1a <_dtoa_r+0x962>
 801dd2a:	9a00      	ldr	r2, [sp, #0]
 801dd2c:	429a      	cmp	r2, r3
 801dd2e:	d1a5      	bne.n	801dc7c <_dtoa_r+0xac4>
 801dd30:	f10a 0a01 	add.w	sl, sl, #1
 801dd34:	2331      	movs	r3, #49	; 0x31
 801dd36:	e779      	b.n	801dc2c <_dtoa_r+0xa74>
 801dd38:	4b13      	ldr	r3, [pc, #76]	; (801dd88 <_dtoa_r+0xbd0>)
 801dd3a:	f7ff baaf 	b.w	801d29c <_dtoa_r+0xe4>
 801dd3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801dd40:	2b00      	cmp	r3, #0
 801dd42:	f47f aa86 	bne.w	801d252 <_dtoa_r+0x9a>
 801dd46:	4b11      	ldr	r3, [pc, #68]	; (801dd8c <_dtoa_r+0xbd4>)
 801dd48:	f7ff baa8 	b.w	801d29c <_dtoa_r+0xe4>
 801dd4c:	f1b9 0f00 	cmp.w	r9, #0
 801dd50:	dc03      	bgt.n	801dd5a <_dtoa_r+0xba2>
 801dd52:	9b05      	ldr	r3, [sp, #20]
 801dd54:	2b02      	cmp	r3, #2
 801dd56:	f73f aec9 	bgt.w	801daec <_dtoa_r+0x934>
 801dd5a:	9d00      	ldr	r5, [sp, #0]
 801dd5c:	4631      	mov	r1, r6
 801dd5e:	4658      	mov	r0, fp
 801dd60:	f7ff f99c 	bl	801d09c <quorem>
 801dd64:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801dd68:	f805 3b01 	strb.w	r3, [r5], #1
 801dd6c:	9a00      	ldr	r2, [sp, #0]
 801dd6e:	1aaa      	subs	r2, r5, r2
 801dd70:	4591      	cmp	r9, r2
 801dd72:	ddba      	ble.n	801dcea <_dtoa_r+0xb32>
 801dd74:	4659      	mov	r1, fp
 801dd76:	2300      	movs	r3, #0
 801dd78:	220a      	movs	r2, #10
 801dd7a:	4620      	mov	r0, r4
 801dd7c:	f000 f9ca 	bl	801e114 <__multadd>
 801dd80:	4683      	mov	fp, r0
 801dd82:	e7eb      	b.n	801dd5c <_dtoa_r+0xba4>
 801dd84:	08022baf 	.word	0x08022baf
 801dd88:	08022aa9 	.word	0x08022aa9
 801dd8c:	08022b43 	.word	0x08022b43

0801dd90 <__errno>:
 801dd90:	4b01      	ldr	r3, [pc, #4]	; (801dd98 <__errno+0x8>)
 801dd92:	6818      	ldr	r0, [r3, #0]
 801dd94:	4770      	bx	lr
 801dd96:	bf00      	nop
 801dd98:	10000134 	.word	0x10000134

0801dd9c <__sflush_r>:
 801dd9c:	898a      	ldrh	r2, [r1, #12]
 801dd9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dda2:	4605      	mov	r5, r0
 801dda4:	0710      	lsls	r0, r2, #28
 801dda6:	460c      	mov	r4, r1
 801dda8:	d458      	bmi.n	801de5c <__sflush_r+0xc0>
 801ddaa:	684b      	ldr	r3, [r1, #4]
 801ddac:	2b00      	cmp	r3, #0
 801ddae:	dc05      	bgt.n	801ddbc <__sflush_r+0x20>
 801ddb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801ddb2:	2b00      	cmp	r3, #0
 801ddb4:	dc02      	bgt.n	801ddbc <__sflush_r+0x20>
 801ddb6:	2000      	movs	r0, #0
 801ddb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ddbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ddbe:	2e00      	cmp	r6, #0
 801ddc0:	d0f9      	beq.n	801ddb6 <__sflush_r+0x1a>
 801ddc2:	2300      	movs	r3, #0
 801ddc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801ddc8:	682f      	ldr	r7, [r5, #0]
 801ddca:	602b      	str	r3, [r5, #0]
 801ddcc:	d032      	beq.n	801de34 <__sflush_r+0x98>
 801ddce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801ddd0:	89a3      	ldrh	r3, [r4, #12]
 801ddd2:	075a      	lsls	r2, r3, #29
 801ddd4:	d505      	bpl.n	801dde2 <__sflush_r+0x46>
 801ddd6:	6863      	ldr	r3, [r4, #4]
 801ddd8:	1ac0      	subs	r0, r0, r3
 801ddda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801dddc:	b10b      	cbz	r3, 801dde2 <__sflush_r+0x46>
 801ddde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801dde0:	1ac0      	subs	r0, r0, r3
 801dde2:	2300      	movs	r3, #0
 801dde4:	4602      	mov	r2, r0
 801dde6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801dde8:	6a21      	ldr	r1, [r4, #32]
 801ddea:	4628      	mov	r0, r5
 801ddec:	47b0      	blx	r6
 801ddee:	1c43      	adds	r3, r0, #1
 801ddf0:	89a3      	ldrh	r3, [r4, #12]
 801ddf2:	d106      	bne.n	801de02 <__sflush_r+0x66>
 801ddf4:	6829      	ldr	r1, [r5, #0]
 801ddf6:	291d      	cmp	r1, #29
 801ddf8:	d82c      	bhi.n	801de54 <__sflush_r+0xb8>
 801ddfa:	4a2a      	ldr	r2, [pc, #168]	; (801dea4 <__sflush_r+0x108>)
 801ddfc:	40ca      	lsrs	r2, r1
 801ddfe:	07d6      	lsls	r6, r2, #31
 801de00:	d528      	bpl.n	801de54 <__sflush_r+0xb8>
 801de02:	2200      	movs	r2, #0
 801de04:	6062      	str	r2, [r4, #4]
 801de06:	04d9      	lsls	r1, r3, #19
 801de08:	6922      	ldr	r2, [r4, #16]
 801de0a:	6022      	str	r2, [r4, #0]
 801de0c:	d504      	bpl.n	801de18 <__sflush_r+0x7c>
 801de0e:	1c42      	adds	r2, r0, #1
 801de10:	d101      	bne.n	801de16 <__sflush_r+0x7a>
 801de12:	682b      	ldr	r3, [r5, #0]
 801de14:	b903      	cbnz	r3, 801de18 <__sflush_r+0x7c>
 801de16:	6560      	str	r0, [r4, #84]	; 0x54
 801de18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801de1a:	602f      	str	r7, [r5, #0]
 801de1c:	2900      	cmp	r1, #0
 801de1e:	d0ca      	beq.n	801ddb6 <__sflush_r+0x1a>
 801de20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801de24:	4299      	cmp	r1, r3
 801de26:	d002      	beq.n	801de2e <__sflush_r+0x92>
 801de28:	4628      	mov	r0, r5
 801de2a:	f7fd fff3 	bl	801be14 <_free_r>
 801de2e:	2000      	movs	r0, #0
 801de30:	6360      	str	r0, [r4, #52]	; 0x34
 801de32:	e7c1      	b.n	801ddb8 <__sflush_r+0x1c>
 801de34:	6a21      	ldr	r1, [r4, #32]
 801de36:	2301      	movs	r3, #1
 801de38:	4628      	mov	r0, r5
 801de3a:	47b0      	blx	r6
 801de3c:	1c41      	adds	r1, r0, #1
 801de3e:	d1c7      	bne.n	801ddd0 <__sflush_r+0x34>
 801de40:	682b      	ldr	r3, [r5, #0]
 801de42:	2b00      	cmp	r3, #0
 801de44:	d0c4      	beq.n	801ddd0 <__sflush_r+0x34>
 801de46:	2b1d      	cmp	r3, #29
 801de48:	d001      	beq.n	801de4e <__sflush_r+0xb2>
 801de4a:	2b16      	cmp	r3, #22
 801de4c:	d101      	bne.n	801de52 <__sflush_r+0xb6>
 801de4e:	602f      	str	r7, [r5, #0]
 801de50:	e7b1      	b.n	801ddb6 <__sflush_r+0x1a>
 801de52:	89a3      	ldrh	r3, [r4, #12]
 801de54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801de58:	81a3      	strh	r3, [r4, #12]
 801de5a:	e7ad      	b.n	801ddb8 <__sflush_r+0x1c>
 801de5c:	690f      	ldr	r7, [r1, #16]
 801de5e:	2f00      	cmp	r7, #0
 801de60:	d0a9      	beq.n	801ddb6 <__sflush_r+0x1a>
 801de62:	0793      	lsls	r3, r2, #30
 801de64:	680e      	ldr	r6, [r1, #0]
 801de66:	bf08      	it	eq
 801de68:	694b      	ldreq	r3, [r1, #20]
 801de6a:	600f      	str	r7, [r1, #0]
 801de6c:	bf18      	it	ne
 801de6e:	2300      	movne	r3, #0
 801de70:	eba6 0807 	sub.w	r8, r6, r7
 801de74:	608b      	str	r3, [r1, #8]
 801de76:	f1b8 0f00 	cmp.w	r8, #0
 801de7a:	dd9c      	ble.n	801ddb6 <__sflush_r+0x1a>
 801de7c:	6a21      	ldr	r1, [r4, #32]
 801de7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801de80:	4643      	mov	r3, r8
 801de82:	463a      	mov	r2, r7
 801de84:	4628      	mov	r0, r5
 801de86:	47b0      	blx	r6
 801de88:	2800      	cmp	r0, #0
 801de8a:	dc06      	bgt.n	801de9a <__sflush_r+0xfe>
 801de8c:	89a3      	ldrh	r3, [r4, #12]
 801de8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801de92:	81a3      	strh	r3, [r4, #12]
 801de94:	f04f 30ff 	mov.w	r0, #4294967295
 801de98:	e78e      	b.n	801ddb8 <__sflush_r+0x1c>
 801de9a:	4407      	add	r7, r0
 801de9c:	eba8 0800 	sub.w	r8, r8, r0
 801dea0:	e7e9      	b.n	801de76 <__sflush_r+0xda>
 801dea2:	bf00      	nop
 801dea4:	20400001 	.word	0x20400001

0801dea8 <_fflush_r>:
 801dea8:	b538      	push	{r3, r4, r5, lr}
 801deaa:	690b      	ldr	r3, [r1, #16]
 801deac:	4605      	mov	r5, r0
 801deae:	460c      	mov	r4, r1
 801deb0:	b913      	cbnz	r3, 801deb8 <_fflush_r+0x10>
 801deb2:	2500      	movs	r5, #0
 801deb4:	4628      	mov	r0, r5
 801deb6:	bd38      	pop	{r3, r4, r5, pc}
 801deb8:	b118      	cbz	r0, 801dec2 <_fflush_r+0x1a>
 801deba:	6983      	ldr	r3, [r0, #24]
 801debc:	b90b      	cbnz	r3, 801dec2 <_fflush_r+0x1a>
 801debe:	f7fd fe83 	bl	801bbc8 <__sinit>
 801dec2:	4b14      	ldr	r3, [pc, #80]	; (801df14 <_fflush_r+0x6c>)
 801dec4:	429c      	cmp	r4, r3
 801dec6:	d11b      	bne.n	801df00 <_fflush_r+0x58>
 801dec8:	686c      	ldr	r4, [r5, #4]
 801deca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dece:	2b00      	cmp	r3, #0
 801ded0:	d0ef      	beq.n	801deb2 <_fflush_r+0xa>
 801ded2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801ded4:	07d0      	lsls	r0, r2, #31
 801ded6:	d404      	bmi.n	801dee2 <_fflush_r+0x3a>
 801ded8:	0599      	lsls	r1, r3, #22
 801deda:	d402      	bmi.n	801dee2 <_fflush_r+0x3a>
 801dedc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dede:	f7fd ff48 	bl	801bd72 <__retarget_lock_acquire_recursive>
 801dee2:	4628      	mov	r0, r5
 801dee4:	4621      	mov	r1, r4
 801dee6:	f7ff ff59 	bl	801dd9c <__sflush_r>
 801deea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801deec:	07da      	lsls	r2, r3, #31
 801deee:	4605      	mov	r5, r0
 801def0:	d4e0      	bmi.n	801deb4 <_fflush_r+0xc>
 801def2:	89a3      	ldrh	r3, [r4, #12]
 801def4:	059b      	lsls	r3, r3, #22
 801def6:	d4dd      	bmi.n	801deb4 <_fflush_r+0xc>
 801def8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801defa:	f7fd ff3b 	bl	801bd74 <__retarget_lock_release_recursive>
 801defe:	e7d9      	b.n	801deb4 <_fflush_r+0xc>
 801df00:	4b05      	ldr	r3, [pc, #20]	; (801df18 <_fflush_r+0x70>)
 801df02:	429c      	cmp	r4, r3
 801df04:	d101      	bne.n	801df0a <_fflush_r+0x62>
 801df06:	68ac      	ldr	r4, [r5, #8]
 801df08:	e7df      	b.n	801deca <_fflush_r+0x22>
 801df0a:	4b04      	ldr	r3, [pc, #16]	; (801df1c <_fflush_r+0x74>)
 801df0c:	429c      	cmp	r4, r3
 801df0e:	bf08      	it	eq
 801df10:	68ec      	ldreq	r4, [r5, #12]
 801df12:	e7da      	b.n	801deca <_fflush_r+0x22>
 801df14:	08022a44 	.word	0x08022a44
 801df18:	08022a64 	.word	0x08022a64
 801df1c:	08022a24 	.word	0x08022a24

0801df20 <_localeconv_r>:
 801df20:	4800      	ldr	r0, [pc, #0]	; (801df24 <_localeconv_r+0x4>)
 801df22:	4770      	bx	lr
 801df24:	10000288 	.word	0x10000288

0801df28 <_lseek_r>:
 801df28:	b538      	push	{r3, r4, r5, lr}
 801df2a:	4d07      	ldr	r5, [pc, #28]	; (801df48 <_lseek_r+0x20>)
 801df2c:	4604      	mov	r4, r0
 801df2e:	4608      	mov	r0, r1
 801df30:	4611      	mov	r1, r2
 801df32:	2200      	movs	r2, #0
 801df34:	602a      	str	r2, [r5, #0]
 801df36:	461a      	mov	r2, r3
 801df38:	f7e3 fd0f 	bl	800195a <_lseek>
 801df3c:	1c43      	adds	r3, r0, #1
 801df3e:	d102      	bne.n	801df46 <_lseek_r+0x1e>
 801df40:	682b      	ldr	r3, [r5, #0]
 801df42:	b103      	cbz	r3, 801df46 <_lseek_r+0x1e>
 801df44:	6023      	str	r3, [r4, #0]
 801df46:	bd38      	pop	{r3, r4, r5, pc}
 801df48:	20008334 	.word	0x20008334

0801df4c <__swhatbuf_r>:
 801df4c:	b570      	push	{r4, r5, r6, lr}
 801df4e:	460e      	mov	r6, r1
 801df50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801df54:	2900      	cmp	r1, #0
 801df56:	b096      	sub	sp, #88	; 0x58
 801df58:	4614      	mov	r4, r2
 801df5a:	461d      	mov	r5, r3
 801df5c:	da07      	bge.n	801df6e <__swhatbuf_r+0x22>
 801df5e:	2300      	movs	r3, #0
 801df60:	602b      	str	r3, [r5, #0]
 801df62:	89b3      	ldrh	r3, [r6, #12]
 801df64:	061a      	lsls	r2, r3, #24
 801df66:	d410      	bmi.n	801df8a <__swhatbuf_r+0x3e>
 801df68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801df6c:	e00e      	b.n	801df8c <__swhatbuf_r+0x40>
 801df6e:	466a      	mov	r2, sp
 801df70:	f000 fde0 	bl	801eb34 <_fstat_r>
 801df74:	2800      	cmp	r0, #0
 801df76:	dbf2      	blt.n	801df5e <__swhatbuf_r+0x12>
 801df78:	9a01      	ldr	r2, [sp, #4]
 801df7a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801df7e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801df82:	425a      	negs	r2, r3
 801df84:	415a      	adcs	r2, r3
 801df86:	602a      	str	r2, [r5, #0]
 801df88:	e7ee      	b.n	801df68 <__swhatbuf_r+0x1c>
 801df8a:	2340      	movs	r3, #64	; 0x40
 801df8c:	2000      	movs	r0, #0
 801df8e:	6023      	str	r3, [r4, #0]
 801df90:	b016      	add	sp, #88	; 0x58
 801df92:	bd70      	pop	{r4, r5, r6, pc}

0801df94 <__smakebuf_r>:
 801df94:	898b      	ldrh	r3, [r1, #12]
 801df96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801df98:	079d      	lsls	r5, r3, #30
 801df9a:	4606      	mov	r6, r0
 801df9c:	460c      	mov	r4, r1
 801df9e:	d507      	bpl.n	801dfb0 <__smakebuf_r+0x1c>
 801dfa0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801dfa4:	6023      	str	r3, [r4, #0]
 801dfa6:	6123      	str	r3, [r4, #16]
 801dfa8:	2301      	movs	r3, #1
 801dfaa:	6163      	str	r3, [r4, #20]
 801dfac:	b002      	add	sp, #8
 801dfae:	bd70      	pop	{r4, r5, r6, pc}
 801dfb0:	ab01      	add	r3, sp, #4
 801dfb2:	466a      	mov	r2, sp
 801dfb4:	f7ff ffca 	bl	801df4c <__swhatbuf_r>
 801dfb8:	9900      	ldr	r1, [sp, #0]
 801dfba:	4605      	mov	r5, r0
 801dfbc:	4630      	mov	r0, r6
 801dfbe:	f7fd ff79 	bl	801beb4 <_malloc_r>
 801dfc2:	b948      	cbnz	r0, 801dfd8 <__smakebuf_r+0x44>
 801dfc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dfc8:	059a      	lsls	r2, r3, #22
 801dfca:	d4ef      	bmi.n	801dfac <__smakebuf_r+0x18>
 801dfcc:	f023 0303 	bic.w	r3, r3, #3
 801dfd0:	f043 0302 	orr.w	r3, r3, #2
 801dfd4:	81a3      	strh	r3, [r4, #12]
 801dfd6:	e7e3      	b.n	801dfa0 <__smakebuf_r+0xc>
 801dfd8:	4b0d      	ldr	r3, [pc, #52]	; (801e010 <__smakebuf_r+0x7c>)
 801dfda:	62b3      	str	r3, [r6, #40]	; 0x28
 801dfdc:	89a3      	ldrh	r3, [r4, #12]
 801dfde:	6020      	str	r0, [r4, #0]
 801dfe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801dfe4:	81a3      	strh	r3, [r4, #12]
 801dfe6:	9b00      	ldr	r3, [sp, #0]
 801dfe8:	6163      	str	r3, [r4, #20]
 801dfea:	9b01      	ldr	r3, [sp, #4]
 801dfec:	6120      	str	r0, [r4, #16]
 801dfee:	b15b      	cbz	r3, 801e008 <__smakebuf_r+0x74>
 801dff0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801dff4:	4630      	mov	r0, r6
 801dff6:	f000 fdaf 	bl	801eb58 <_isatty_r>
 801dffa:	b128      	cbz	r0, 801e008 <__smakebuf_r+0x74>
 801dffc:	89a3      	ldrh	r3, [r4, #12]
 801dffe:	f023 0303 	bic.w	r3, r3, #3
 801e002:	f043 0301 	orr.w	r3, r3, #1
 801e006:	81a3      	strh	r3, [r4, #12]
 801e008:	89a0      	ldrh	r0, [r4, #12]
 801e00a:	4305      	orrs	r5, r0
 801e00c:	81a5      	strh	r5, [r4, #12]
 801e00e:	e7cd      	b.n	801dfac <__smakebuf_r+0x18>
 801e010:	0801bb61 	.word	0x0801bb61

0801e014 <__ascii_mbtowc>:
 801e014:	b082      	sub	sp, #8
 801e016:	b901      	cbnz	r1, 801e01a <__ascii_mbtowc+0x6>
 801e018:	a901      	add	r1, sp, #4
 801e01a:	b142      	cbz	r2, 801e02e <__ascii_mbtowc+0x1a>
 801e01c:	b14b      	cbz	r3, 801e032 <__ascii_mbtowc+0x1e>
 801e01e:	7813      	ldrb	r3, [r2, #0]
 801e020:	600b      	str	r3, [r1, #0]
 801e022:	7812      	ldrb	r2, [r2, #0]
 801e024:	1e10      	subs	r0, r2, #0
 801e026:	bf18      	it	ne
 801e028:	2001      	movne	r0, #1
 801e02a:	b002      	add	sp, #8
 801e02c:	4770      	bx	lr
 801e02e:	4610      	mov	r0, r2
 801e030:	e7fb      	b.n	801e02a <__ascii_mbtowc+0x16>
 801e032:	f06f 0001 	mvn.w	r0, #1
 801e036:	e7f8      	b.n	801e02a <__ascii_mbtowc+0x16>

0801e038 <__malloc_lock>:
 801e038:	4801      	ldr	r0, [pc, #4]	; (801e040 <__malloc_lock+0x8>)
 801e03a:	f7fd be9a 	b.w	801bd72 <__retarget_lock_acquire_recursive>
 801e03e:	bf00      	nop
 801e040:	2000d5b4 	.word	0x2000d5b4

0801e044 <__malloc_unlock>:
 801e044:	4801      	ldr	r0, [pc, #4]	; (801e04c <__malloc_unlock+0x8>)
 801e046:	f7fd be95 	b.w	801bd74 <__retarget_lock_release_recursive>
 801e04a:	bf00      	nop
 801e04c:	2000d5b4 	.word	0x2000d5b4

0801e050 <_Balloc>:
 801e050:	b570      	push	{r4, r5, r6, lr}
 801e052:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801e054:	4604      	mov	r4, r0
 801e056:	460d      	mov	r5, r1
 801e058:	b976      	cbnz	r6, 801e078 <_Balloc+0x28>
 801e05a:	2010      	movs	r0, #16
 801e05c:	f7fd fe8c 	bl	801bd78 <malloc>
 801e060:	4602      	mov	r2, r0
 801e062:	6260      	str	r0, [r4, #36]	; 0x24
 801e064:	b920      	cbnz	r0, 801e070 <_Balloc+0x20>
 801e066:	4b18      	ldr	r3, [pc, #96]	; (801e0c8 <_Balloc+0x78>)
 801e068:	4818      	ldr	r0, [pc, #96]	; (801e0cc <_Balloc+0x7c>)
 801e06a:	2166      	movs	r1, #102	; 0x66
 801e06c:	f7fd fd32 	bl	801bad4 <__assert_func>
 801e070:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e074:	6006      	str	r6, [r0, #0]
 801e076:	60c6      	str	r6, [r0, #12]
 801e078:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801e07a:	68f3      	ldr	r3, [r6, #12]
 801e07c:	b183      	cbz	r3, 801e0a0 <_Balloc+0x50>
 801e07e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e080:	68db      	ldr	r3, [r3, #12]
 801e082:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801e086:	b9b8      	cbnz	r0, 801e0b8 <_Balloc+0x68>
 801e088:	2101      	movs	r1, #1
 801e08a:	fa01 f605 	lsl.w	r6, r1, r5
 801e08e:	1d72      	adds	r2, r6, #5
 801e090:	0092      	lsls	r2, r2, #2
 801e092:	4620      	mov	r0, r4
 801e094:	f000 fb5a 	bl	801e74c <_calloc_r>
 801e098:	b160      	cbz	r0, 801e0b4 <_Balloc+0x64>
 801e09a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801e09e:	e00e      	b.n	801e0be <_Balloc+0x6e>
 801e0a0:	2221      	movs	r2, #33	; 0x21
 801e0a2:	2104      	movs	r1, #4
 801e0a4:	4620      	mov	r0, r4
 801e0a6:	f000 fb51 	bl	801e74c <_calloc_r>
 801e0aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e0ac:	60f0      	str	r0, [r6, #12]
 801e0ae:	68db      	ldr	r3, [r3, #12]
 801e0b0:	2b00      	cmp	r3, #0
 801e0b2:	d1e4      	bne.n	801e07e <_Balloc+0x2e>
 801e0b4:	2000      	movs	r0, #0
 801e0b6:	bd70      	pop	{r4, r5, r6, pc}
 801e0b8:	6802      	ldr	r2, [r0, #0]
 801e0ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801e0be:	2300      	movs	r3, #0
 801e0c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801e0c4:	e7f7      	b.n	801e0b6 <_Balloc+0x66>
 801e0c6:	bf00      	nop
 801e0c8:	08022acd 	.word	0x08022acd
 801e0cc:	08022bca 	.word	0x08022bca

0801e0d0 <_Bfree>:
 801e0d0:	b570      	push	{r4, r5, r6, lr}
 801e0d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801e0d4:	4605      	mov	r5, r0
 801e0d6:	460c      	mov	r4, r1
 801e0d8:	b976      	cbnz	r6, 801e0f8 <_Bfree+0x28>
 801e0da:	2010      	movs	r0, #16
 801e0dc:	f7fd fe4c 	bl	801bd78 <malloc>
 801e0e0:	4602      	mov	r2, r0
 801e0e2:	6268      	str	r0, [r5, #36]	; 0x24
 801e0e4:	b920      	cbnz	r0, 801e0f0 <_Bfree+0x20>
 801e0e6:	4b09      	ldr	r3, [pc, #36]	; (801e10c <_Bfree+0x3c>)
 801e0e8:	4809      	ldr	r0, [pc, #36]	; (801e110 <_Bfree+0x40>)
 801e0ea:	218a      	movs	r1, #138	; 0x8a
 801e0ec:	f7fd fcf2 	bl	801bad4 <__assert_func>
 801e0f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e0f4:	6006      	str	r6, [r0, #0]
 801e0f6:	60c6      	str	r6, [r0, #12]
 801e0f8:	b13c      	cbz	r4, 801e10a <_Bfree+0x3a>
 801e0fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801e0fc:	6862      	ldr	r2, [r4, #4]
 801e0fe:	68db      	ldr	r3, [r3, #12]
 801e100:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801e104:	6021      	str	r1, [r4, #0]
 801e106:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801e10a:	bd70      	pop	{r4, r5, r6, pc}
 801e10c:	08022acd 	.word	0x08022acd
 801e110:	08022bca 	.word	0x08022bca

0801e114 <__multadd>:
 801e114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e118:	690e      	ldr	r6, [r1, #16]
 801e11a:	4607      	mov	r7, r0
 801e11c:	4698      	mov	r8, r3
 801e11e:	460c      	mov	r4, r1
 801e120:	f101 0014 	add.w	r0, r1, #20
 801e124:	2300      	movs	r3, #0
 801e126:	6805      	ldr	r5, [r0, #0]
 801e128:	b2a9      	uxth	r1, r5
 801e12a:	fb02 8101 	mla	r1, r2, r1, r8
 801e12e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801e132:	0c2d      	lsrs	r5, r5, #16
 801e134:	fb02 c505 	mla	r5, r2, r5, ip
 801e138:	b289      	uxth	r1, r1
 801e13a:	3301      	adds	r3, #1
 801e13c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801e140:	429e      	cmp	r6, r3
 801e142:	f840 1b04 	str.w	r1, [r0], #4
 801e146:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801e14a:	dcec      	bgt.n	801e126 <__multadd+0x12>
 801e14c:	f1b8 0f00 	cmp.w	r8, #0
 801e150:	d022      	beq.n	801e198 <__multadd+0x84>
 801e152:	68a3      	ldr	r3, [r4, #8]
 801e154:	42b3      	cmp	r3, r6
 801e156:	dc19      	bgt.n	801e18c <__multadd+0x78>
 801e158:	6861      	ldr	r1, [r4, #4]
 801e15a:	4638      	mov	r0, r7
 801e15c:	3101      	adds	r1, #1
 801e15e:	f7ff ff77 	bl	801e050 <_Balloc>
 801e162:	4605      	mov	r5, r0
 801e164:	b928      	cbnz	r0, 801e172 <__multadd+0x5e>
 801e166:	4602      	mov	r2, r0
 801e168:	4b0d      	ldr	r3, [pc, #52]	; (801e1a0 <__multadd+0x8c>)
 801e16a:	480e      	ldr	r0, [pc, #56]	; (801e1a4 <__multadd+0x90>)
 801e16c:	21b5      	movs	r1, #181	; 0xb5
 801e16e:	f7fd fcb1 	bl	801bad4 <__assert_func>
 801e172:	6922      	ldr	r2, [r4, #16]
 801e174:	3202      	adds	r2, #2
 801e176:	f104 010c 	add.w	r1, r4, #12
 801e17a:	0092      	lsls	r2, r2, #2
 801e17c:	300c      	adds	r0, #12
 801e17e:	f7fd fe19 	bl	801bdb4 <memcpy>
 801e182:	4621      	mov	r1, r4
 801e184:	4638      	mov	r0, r7
 801e186:	f7ff ffa3 	bl	801e0d0 <_Bfree>
 801e18a:	462c      	mov	r4, r5
 801e18c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801e190:	3601      	adds	r6, #1
 801e192:	f8c3 8014 	str.w	r8, [r3, #20]
 801e196:	6126      	str	r6, [r4, #16]
 801e198:	4620      	mov	r0, r4
 801e19a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e19e:	bf00      	nop
 801e1a0:	08022baf 	.word	0x08022baf
 801e1a4:	08022bca 	.word	0x08022bca

0801e1a8 <__hi0bits>:
 801e1a8:	0c03      	lsrs	r3, r0, #16
 801e1aa:	041b      	lsls	r3, r3, #16
 801e1ac:	b9d3      	cbnz	r3, 801e1e4 <__hi0bits+0x3c>
 801e1ae:	0400      	lsls	r0, r0, #16
 801e1b0:	2310      	movs	r3, #16
 801e1b2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801e1b6:	bf04      	itt	eq
 801e1b8:	0200      	lsleq	r0, r0, #8
 801e1ba:	3308      	addeq	r3, #8
 801e1bc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801e1c0:	bf04      	itt	eq
 801e1c2:	0100      	lsleq	r0, r0, #4
 801e1c4:	3304      	addeq	r3, #4
 801e1c6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801e1ca:	bf04      	itt	eq
 801e1cc:	0080      	lsleq	r0, r0, #2
 801e1ce:	3302      	addeq	r3, #2
 801e1d0:	2800      	cmp	r0, #0
 801e1d2:	db05      	blt.n	801e1e0 <__hi0bits+0x38>
 801e1d4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801e1d8:	f103 0301 	add.w	r3, r3, #1
 801e1dc:	bf08      	it	eq
 801e1de:	2320      	moveq	r3, #32
 801e1e0:	4618      	mov	r0, r3
 801e1e2:	4770      	bx	lr
 801e1e4:	2300      	movs	r3, #0
 801e1e6:	e7e4      	b.n	801e1b2 <__hi0bits+0xa>

0801e1e8 <__lo0bits>:
 801e1e8:	6803      	ldr	r3, [r0, #0]
 801e1ea:	f013 0207 	ands.w	r2, r3, #7
 801e1ee:	4601      	mov	r1, r0
 801e1f0:	d00b      	beq.n	801e20a <__lo0bits+0x22>
 801e1f2:	07da      	lsls	r2, r3, #31
 801e1f4:	d424      	bmi.n	801e240 <__lo0bits+0x58>
 801e1f6:	0798      	lsls	r0, r3, #30
 801e1f8:	bf49      	itett	mi
 801e1fa:	085b      	lsrmi	r3, r3, #1
 801e1fc:	089b      	lsrpl	r3, r3, #2
 801e1fe:	2001      	movmi	r0, #1
 801e200:	600b      	strmi	r3, [r1, #0]
 801e202:	bf5c      	itt	pl
 801e204:	600b      	strpl	r3, [r1, #0]
 801e206:	2002      	movpl	r0, #2
 801e208:	4770      	bx	lr
 801e20a:	b298      	uxth	r0, r3
 801e20c:	b9b0      	cbnz	r0, 801e23c <__lo0bits+0x54>
 801e20e:	0c1b      	lsrs	r3, r3, #16
 801e210:	2010      	movs	r0, #16
 801e212:	f013 0fff 	tst.w	r3, #255	; 0xff
 801e216:	bf04      	itt	eq
 801e218:	0a1b      	lsreq	r3, r3, #8
 801e21a:	3008      	addeq	r0, #8
 801e21c:	071a      	lsls	r2, r3, #28
 801e21e:	bf04      	itt	eq
 801e220:	091b      	lsreq	r3, r3, #4
 801e222:	3004      	addeq	r0, #4
 801e224:	079a      	lsls	r2, r3, #30
 801e226:	bf04      	itt	eq
 801e228:	089b      	lsreq	r3, r3, #2
 801e22a:	3002      	addeq	r0, #2
 801e22c:	07da      	lsls	r2, r3, #31
 801e22e:	d403      	bmi.n	801e238 <__lo0bits+0x50>
 801e230:	085b      	lsrs	r3, r3, #1
 801e232:	f100 0001 	add.w	r0, r0, #1
 801e236:	d005      	beq.n	801e244 <__lo0bits+0x5c>
 801e238:	600b      	str	r3, [r1, #0]
 801e23a:	4770      	bx	lr
 801e23c:	4610      	mov	r0, r2
 801e23e:	e7e8      	b.n	801e212 <__lo0bits+0x2a>
 801e240:	2000      	movs	r0, #0
 801e242:	4770      	bx	lr
 801e244:	2020      	movs	r0, #32
 801e246:	4770      	bx	lr

0801e248 <__i2b>:
 801e248:	b510      	push	{r4, lr}
 801e24a:	460c      	mov	r4, r1
 801e24c:	2101      	movs	r1, #1
 801e24e:	f7ff feff 	bl	801e050 <_Balloc>
 801e252:	4602      	mov	r2, r0
 801e254:	b928      	cbnz	r0, 801e262 <__i2b+0x1a>
 801e256:	4b05      	ldr	r3, [pc, #20]	; (801e26c <__i2b+0x24>)
 801e258:	4805      	ldr	r0, [pc, #20]	; (801e270 <__i2b+0x28>)
 801e25a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801e25e:	f7fd fc39 	bl	801bad4 <__assert_func>
 801e262:	2301      	movs	r3, #1
 801e264:	6144      	str	r4, [r0, #20]
 801e266:	6103      	str	r3, [r0, #16]
 801e268:	bd10      	pop	{r4, pc}
 801e26a:	bf00      	nop
 801e26c:	08022baf 	.word	0x08022baf
 801e270:	08022bca 	.word	0x08022bca

0801e274 <__multiply>:
 801e274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e278:	4614      	mov	r4, r2
 801e27a:	690a      	ldr	r2, [r1, #16]
 801e27c:	6923      	ldr	r3, [r4, #16]
 801e27e:	429a      	cmp	r2, r3
 801e280:	bfb8      	it	lt
 801e282:	460b      	movlt	r3, r1
 801e284:	460d      	mov	r5, r1
 801e286:	bfbc      	itt	lt
 801e288:	4625      	movlt	r5, r4
 801e28a:	461c      	movlt	r4, r3
 801e28c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801e290:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801e294:	68ab      	ldr	r3, [r5, #8]
 801e296:	6869      	ldr	r1, [r5, #4]
 801e298:	eb0a 0709 	add.w	r7, sl, r9
 801e29c:	42bb      	cmp	r3, r7
 801e29e:	b085      	sub	sp, #20
 801e2a0:	bfb8      	it	lt
 801e2a2:	3101      	addlt	r1, #1
 801e2a4:	f7ff fed4 	bl	801e050 <_Balloc>
 801e2a8:	b930      	cbnz	r0, 801e2b8 <__multiply+0x44>
 801e2aa:	4602      	mov	r2, r0
 801e2ac:	4b42      	ldr	r3, [pc, #264]	; (801e3b8 <__multiply+0x144>)
 801e2ae:	4843      	ldr	r0, [pc, #268]	; (801e3bc <__multiply+0x148>)
 801e2b0:	f240 115d 	movw	r1, #349	; 0x15d
 801e2b4:	f7fd fc0e 	bl	801bad4 <__assert_func>
 801e2b8:	f100 0614 	add.w	r6, r0, #20
 801e2bc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801e2c0:	4633      	mov	r3, r6
 801e2c2:	2200      	movs	r2, #0
 801e2c4:	4543      	cmp	r3, r8
 801e2c6:	d31e      	bcc.n	801e306 <__multiply+0x92>
 801e2c8:	f105 0c14 	add.w	ip, r5, #20
 801e2cc:	f104 0314 	add.w	r3, r4, #20
 801e2d0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801e2d4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801e2d8:	9202      	str	r2, [sp, #8]
 801e2da:	ebac 0205 	sub.w	r2, ip, r5
 801e2de:	3a15      	subs	r2, #21
 801e2e0:	f022 0203 	bic.w	r2, r2, #3
 801e2e4:	3204      	adds	r2, #4
 801e2e6:	f105 0115 	add.w	r1, r5, #21
 801e2ea:	458c      	cmp	ip, r1
 801e2ec:	bf38      	it	cc
 801e2ee:	2204      	movcc	r2, #4
 801e2f0:	9201      	str	r2, [sp, #4]
 801e2f2:	9a02      	ldr	r2, [sp, #8]
 801e2f4:	9303      	str	r3, [sp, #12]
 801e2f6:	429a      	cmp	r2, r3
 801e2f8:	d808      	bhi.n	801e30c <__multiply+0x98>
 801e2fa:	2f00      	cmp	r7, #0
 801e2fc:	dc55      	bgt.n	801e3aa <__multiply+0x136>
 801e2fe:	6107      	str	r7, [r0, #16]
 801e300:	b005      	add	sp, #20
 801e302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e306:	f843 2b04 	str.w	r2, [r3], #4
 801e30a:	e7db      	b.n	801e2c4 <__multiply+0x50>
 801e30c:	f8b3 a000 	ldrh.w	sl, [r3]
 801e310:	f1ba 0f00 	cmp.w	sl, #0
 801e314:	d020      	beq.n	801e358 <__multiply+0xe4>
 801e316:	f105 0e14 	add.w	lr, r5, #20
 801e31a:	46b1      	mov	r9, r6
 801e31c:	2200      	movs	r2, #0
 801e31e:	f85e 4b04 	ldr.w	r4, [lr], #4
 801e322:	f8d9 b000 	ldr.w	fp, [r9]
 801e326:	b2a1      	uxth	r1, r4
 801e328:	fa1f fb8b 	uxth.w	fp, fp
 801e32c:	fb0a b101 	mla	r1, sl, r1, fp
 801e330:	4411      	add	r1, r2
 801e332:	f8d9 2000 	ldr.w	r2, [r9]
 801e336:	0c24      	lsrs	r4, r4, #16
 801e338:	0c12      	lsrs	r2, r2, #16
 801e33a:	fb0a 2404 	mla	r4, sl, r4, r2
 801e33e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801e342:	b289      	uxth	r1, r1
 801e344:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801e348:	45f4      	cmp	ip, lr
 801e34a:	f849 1b04 	str.w	r1, [r9], #4
 801e34e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801e352:	d8e4      	bhi.n	801e31e <__multiply+0xaa>
 801e354:	9901      	ldr	r1, [sp, #4]
 801e356:	5072      	str	r2, [r6, r1]
 801e358:	9a03      	ldr	r2, [sp, #12]
 801e35a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801e35e:	3304      	adds	r3, #4
 801e360:	f1b9 0f00 	cmp.w	r9, #0
 801e364:	d01f      	beq.n	801e3a6 <__multiply+0x132>
 801e366:	6834      	ldr	r4, [r6, #0]
 801e368:	f105 0114 	add.w	r1, r5, #20
 801e36c:	46b6      	mov	lr, r6
 801e36e:	f04f 0a00 	mov.w	sl, #0
 801e372:	880a      	ldrh	r2, [r1, #0]
 801e374:	f8be b002 	ldrh.w	fp, [lr, #2]
 801e378:	fb09 b202 	mla	r2, r9, r2, fp
 801e37c:	4492      	add	sl, r2
 801e37e:	b2a4      	uxth	r4, r4
 801e380:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801e384:	f84e 4b04 	str.w	r4, [lr], #4
 801e388:	f851 4b04 	ldr.w	r4, [r1], #4
 801e38c:	f8be 2000 	ldrh.w	r2, [lr]
 801e390:	0c24      	lsrs	r4, r4, #16
 801e392:	fb09 2404 	mla	r4, r9, r4, r2
 801e396:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801e39a:	458c      	cmp	ip, r1
 801e39c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801e3a0:	d8e7      	bhi.n	801e372 <__multiply+0xfe>
 801e3a2:	9a01      	ldr	r2, [sp, #4]
 801e3a4:	50b4      	str	r4, [r6, r2]
 801e3a6:	3604      	adds	r6, #4
 801e3a8:	e7a3      	b.n	801e2f2 <__multiply+0x7e>
 801e3aa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801e3ae:	2b00      	cmp	r3, #0
 801e3b0:	d1a5      	bne.n	801e2fe <__multiply+0x8a>
 801e3b2:	3f01      	subs	r7, #1
 801e3b4:	e7a1      	b.n	801e2fa <__multiply+0x86>
 801e3b6:	bf00      	nop
 801e3b8:	08022baf 	.word	0x08022baf
 801e3bc:	08022bca 	.word	0x08022bca

0801e3c0 <__pow5mult>:
 801e3c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e3c4:	4615      	mov	r5, r2
 801e3c6:	f012 0203 	ands.w	r2, r2, #3
 801e3ca:	4606      	mov	r6, r0
 801e3cc:	460f      	mov	r7, r1
 801e3ce:	d007      	beq.n	801e3e0 <__pow5mult+0x20>
 801e3d0:	4c25      	ldr	r4, [pc, #148]	; (801e468 <__pow5mult+0xa8>)
 801e3d2:	3a01      	subs	r2, #1
 801e3d4:	2300      	movs	r3, #0
 801e3d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801e3da:	f7ff fe9b 	bl	801e114 <__multadd>
 801e3de:	4607      	mov	r7, r0
 801e3e0:	10ad      	asrs	r5, r5, #2
 801e3e2:	d03d      	beq.n	801e460 <__pow5mult+0xa0>
 801e3e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801e3e6:	b97c      	cbnz	r4, 801e408 <__pow5mult+0x48>
 801e3e8:	2010      	movs	r0, #16
 801e3ea:	f7fd fcc5 	bl	801bd78 <malloc>
 801e3ee:	4602      	mov	r2, r0
 801e3f0:	6270      	str	r0, [r6, #36]	; 0x24
 801e3f2:	b928      	cbnz	r0, 801e400 <__pow5mult+0x40>
 801e3f4:	4b1d      	ldr	r3, [pc, #116]	; (801e46c <__pow5mult+0xac>)
 801e3f6:	481e      	ldr	r0, [pc, #120]	; (801e470 <__pow5mult+0xb0>)
 801e3f8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801e3fc:	f7fd fb6a 	bl	801bad4 <__assert_func>
 801e400:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801e404:	6004      	str	r4, [r0, #0]
 801e406:	60c4      	str	r4, [r0, #12]
 801e408:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801e40c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801e410:	b94c      	cbnz	r4, 801e426 <__pow5mult+0x66>
 801e412:	f240 2171 	movw	r1, #625	; 0x271
 801e416:	4630      	mov	r0, r6
 801e418:	f7ff ff16 	bl	801e248 <__i2b>
 801e41c:	2300      	movs	r3, #0
 801e41e:	f8c8 0008 	str.w	r0, [r8, #8]
 801e422:	4604      	mov	r4, r0
 801e424:	6003      	str	r3, [r0, #0]
 801e426:	f04f 0900 	mov.w	r9, #0
 801e42a:	07eb      	lsls	r3, r5, #31
 801e42c:	d50a      	bpl.n	801e444 <__pow5mult+0x84>
 801e42e:	4639      	mov	r1, r7
 801e430:	4622      	mov	r2, r4
 801e432:	4630      	mov	r0, r6
 801e434:	f7ff ff1e 	bl	801e274 <__multiply>
 801e438:	4639      	mov	r1, r7
 801e43a:	4680      	mov	r8, r0
 801e43c:	4630      	mov	r0, r6
 801e43e:	f7ff fe47 	bl	801e0d0 <_Bfree>
 801e442:	4647      	mov	r7, r8
 801e444:	106d      	asrs	r5, r5, #1
 801e446:	d00b      	beq.n	801e460 <__pow5mult+0xa0>
 801e448:	6820      	ldr	r0, [r4, #0]
 801e44a:	b938      	cbnz	r0, 801e45c <__pow5mult+0x9c>
 801e44c:	4622      	mov	r2, r4
 801e44e:	4621      	mov	r1, r4
 801e450:	4630      	mov	r0, r6
 801e452:	f7ff ff0f 	bl	801e274 <__multiply>
 801e456:	6020      	str	r0, [r4, #0]
 801e458:	f8c0 9000 	str.w	r9, [r0]
 801e45c:	4604      	mov	r4, r0
 801e45e:	e7e4      	b.n	801e42a <__pow5mult+0x6a>
 801e460:	4638      	mov	r0, r7
 801e462:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e466:	bf00      	nop
 801e468:	08022d20 	.word	0x08022d20
 801e46c:	08022acd 	.word	0x08022acd
 801e470:	08022bca 	.word	0x08022bca

0801e474 <__lshift>:
 801e474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e478:	460c      	mov	r4, r1
 801e47a:	6849      	ldr	r1, [r1, #4]
 801e47c:	6923      	ldr	r3, [r4, #16]
 801e47e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801e482:	68a3      	ldr	r3, [r4, #8]
 801e484:	4607      	mov	r7, r0
 801e486:	4691      	mov	r9, r2
 801e488:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801e48c:	f108 0601 	add.w	r6, r8, #1
 801e490:	42b3      	cmp	r3, r6
 801e492:	db0b      	blt.n	801e4ac <__lshift+0x38>
 801e494:	4638      	mov	r0, r7
 801e496:	f7ff fddb 	bl	801e050 <_Balloc>
 801e49a:	4605      	mov	r5, r0
 801e49c:	b948      	cbnz	r0, 801e4b2 <__lshift+0x3e>
 801e49e:	4602      	mov	r2, r0
 801e4a0:	4b28      	ldr	r3, [pc, #160]	; (801e544 <__lshift+0xd0>)
 801e4a2:	4829      	ldr	r0, [pc, #164]	; (801e548 <__lshift+0xd4>)
 801e4a4:	f240 11d9 	movw	r1, #473	; 0x1d9
 801e4a8:	f7fd fb14 	bl	801bad4 <__assert_func>
 801e4ac:	3101      	adds	r1, #1
 801e4ae:	005b      	lsls	r3, r3, #1
 801e4b0:	e7ee      	b.n	801e490 <__lshift+0x1c>
 801e4b2:	2300      	movs	r3, #0
 801e4b4:	f100 0114 	add.w	r1, r0, #20
 801e4b8:	f100 0210 	add.w	r2, r0, #16
 801e4bc:	4618      	mov	r0, r3
 801e4be:	4553      	cmp	r3, sl
 801e4c0:	db33      	blt.n	801e52a <__lshift+0xb6>
 801e4c2:	6920      	ldr	r0, [r4, #16]
 801e4c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801e4c8:	f104 0314 	add.w	r3, r4, #20
 801e4cc:	f019 091f 	ands.w	r9, r9, #31
 801e4d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801e4d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801e4d8:	d02b      	beq.n	801e532 <__lshift+0xbe>
 801e4da:	f1c9 0e20 	rsb	lr, r9, #32
 801e4de:	468a      	mov	sl, r1
 801e4e0:	2200      	movs	r2, #0
 801e4e2:	6818      	ldr	r0, [r3, #0]
 801e4e4:	fa00 f009 	lsl.w	r0, r0, r9
 801e4e8:	4302      	orrs	r2, r0
 801e4ea:	f84a 2b04 	str.w	r2, [sl], #4
 801e4ee:	f853 2b04 	ldr.w	r2, [r3], #4
 801e4f2:	459c      	cmp	ip, r3
 801e4f4:	fa22 f20e 	lsr.w	r2, r2, lr
 801e4f8:	d8f3      	bhi.n	801e4e2 <__lshift+0x6e>
 801e4fa:	ebac 0304 	sub.w	r3, ip, r4
 801e4fe:	3b15      	subs	r3, #21
 801e500:	f023 0303 	bic.w	r3, r3, #3
 801e504:	3304      	adds	r3, #4
 801e506:	f104 0015 	add.w	r0, r4, #21
 801e50a:	4584      	cmp	ip, r0
 801e50c:	bf38      	it	cc
 801e50e:	2304      	movcc	r3, #4
 801e510:	50ca      	str	r2, [r1, r3]
 801e512:	b10a      	cbz	r2, 801e518 <__lshift+0xa4>
 801e514:	f108 0602 	add.w	r6, r8, #2
 801e518:	3e01      	subs	r6, #1
 801e51a:	4638      	mov	r0, r7
 801e51c:	612e      	str	r6, [r5, #16]
 801e51e:	4621      	mov	r1, r4
 801e520:	f7ff fdd6 	bl	801e0d0 <_Bfree>
 801e524:	4628      	mov	r0, r5
 801e526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e52a:	f842 0f04 	str.w	r0, [r2, #4]!
 801e52e:	3301      	adds	r3, #1
 801e530:	e7c5      	b.n	801e4be <__lshift+0x4a>
 801e532:	3904      	subs	r1, #4
 801e534:	f853 2b04 	ldr.w	r2, [r3], #4
 801e538:	f841 2f04 	str.w	r2, [r1, #4]!
 801e53c:	459c      	cmp	ip, r3
 801e53e:	d8f9      	bhi.n	801e534 <__lshift+0xc0>
 801e540:	e7ea      	b.n	801e518 <__lshift+0xa4>
 801e542:	bf00      	nop
 801e544:	08022baf 	.word	0x08022baf
 801e548:	08022bca 	.word	0x08022bca

0801e54c <__mcmp>:
 801e54c:	b530      	push	{r4, r5, lr}
 801e54e:	6902      	ldr	r2, [r0, #16]
 801e550:	690c      	ldr	r4, [r1, #16]
 801e552:	1b12      	subs	r2, r2, r4
 801e554:	d10e      	bne.n	801e574 <__mcmp+0x28>
 801e556:	f100 0314 	add.w	r3, r0, #20
 801e55a:	3114      	adds	r1, #20
 801e55c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801e560:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801e564:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801e568:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801e56c:	42a5      	cmp	r5, r4
 801e56e:	d003      	beq.n	801e578 <__mcmp+0x2c>
 801e570:	d305      	bcc.n	801e57e <__mcmp+0x32>
 801e572:	2201      	movs	r2, #1
 801e574:	4610      	mov	r0, r2
 801e576:	bd30      	pop	{r4, r5, pc}
 801e578:	4283      	cmp	r3, r0
 801e57a:	d3f3      	bcc.n	801e564 <__mcmp+0x18>
 801e57c:	e7fa      	b.n	801e574 <__mcmp+0x28>
 801e57e:	f04f 32ff 	mov.w	r2, #4294967295
 801e582:	e7f7      	b.n	801e574 <__mcmp+0x28>

0801e584 <__mdiff>:
 801e584:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e588:	460c      	mov	r4, r1
 801e58a:	4606      	mov	r6, r0
 801e58c:	4611      	mov	r1, r2
 801e58e:	4620      	mov	r0, r4
 801e590:	4617      	mov	r7, r2
 801e592:	f7ff ffdb 	bl	801e54c <__mcmp>
 801e596:	1e05      	subs	r5, r0, #0
 801e598:	d110      	bne.n	801e5bc <__mdiff+0x38>
 801e59a:	4629      	mov	r1, r5
 801e59c:	4630      	mov	r0, r6
 801e59e:	f7ff fd57 	bl	801e050 <_Balloc>
 801e5a2:	b930      	cbnz	r0, 801e5b2 <__mdiff+0x2e>
 801e5a4:	4b39      	ldr	r3, [pc, #228]	; (801e68c <__mdiff+0x108>)
 801e5a6:	4602      	mov	r2, r0
 801e5a8:	f240 2132 	movw	r1, #562	; 0x232
 801e5ac:	4838      	ldr	r0, [pc, #224]	; (801e690 <__mdiff+0x10c>)
 801e5ae:	f7fd fa91 	bl	801bad4 <__assert_func>
 801e5b2:	2301      	movs	r3, #1
 801e5b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801e5b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e5bc:	bfa4      	itt	ge
 801e5be:	463b      	movge	r3, r7
 801e5c0:	4627      	movge	r7, r4
 801e5c2:	4630      	mov	r0, r6
 801e5c4:	6879      	ldr	r1, [r7, #4]
 801e5c6:	bfa6      	itte	ge
 801e5c8:	461c      	movge	r4, r3
 801e5ca:	2500      	movge	r5, #0
 801e5cc:	2501      	movlt	r5, #1
 801e5ce:	f7ff fd3f 	bl	801e050 <_Balloc>
 801e5d2:	b920      	cbnz	r0, 801e5de <__mdiff+0x5a>
 801e5d4:	4b2d      	ldr	r3, [pc, #180]	; (801e68c <__mdiff+0x108>)
 801e5d6:	4602      	mov	r2, r0
 801e5d8:	f44f 7110 	mov.w	r1, #576	; 0x240
 801e5dc:	e7e6      	b.n	801e5ac <__mdiff+0x28>
 801e5de:	693e      	ldr	r6, [r7, #16]
 801e5e0:	60c5      	str	r5, [r0, #12]
 801e5e2:	6925      	ldr	r5, [r4, #16]
 801e5e4:	f107 0114 	add.w	r1, r7, #20
 801e5e8:	f104 0914 	add.w	r9, r4, #20
 801e5ec:	f100 0e14 	add.w	lr, r0, #20
 801e5f0:	f107 0210 	add.w	r2, r7, #16
 801e5f4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801e5f8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801e5fc:	46f2      	mov	sl, lr
 801e5fe:	2700      	movs	r7, #0
 801e600:	f859 3b04 	ldr.w	r3, [r9], #4
 801e604:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801e608:	fa1f f883 	uxth.w	r8, r3
 801e60c:	fa17 f78b 	uxtah	r7, r7, fp
 801e610:	0c1b      	lsrs	r3, r3, #16
 801e612:	eba7 0808 	sub.w	r8, r7, r8
 801e616:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801e61a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801e61e:	fa1f f888 	uxth.w	r8, r8
 801e622:	141f      	asrs	r7, r3, #16
 801e624:	454d      	cmp	r5, r9
 801e626:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801e62a:	f84a 3b04 	str.w	r3, [sl], #4
 801e62e:	d8e7      	bhi.n	801e600 <__mdiff+0x7c>
 801e630:	1b2b      	subs	r3, r5, r4
 801e632:	3b15      	subs	r3, #21
 801e634:	f023 0303 	bic.w	r3, r3, #3
 801e638:	3304      	adds	r3, #4
 801e63a:	3415      	adds	r4, #21
 801e63c:	42a5      	cmp	r5, r4
 801e63e:	bf38      	it	cc
 801e640:	2304      	movcc	r3, #4
 801e642:	4419      	add	r1, r3
 801e644:	4473      	add	r3, lr
 801e646:	469e      	mov	lr, r3
 801e648:	460d      	mov	r5, r1
 801e64a:	4565      	cmp	r5, ip
 801e64c:	d30e      	bcc.n	801e66c <__mdiff+0xe8>
 801e64e:	f10c 0203 	add.w	r2, ip, #3
 801e652:	1a52      	subs	r2, r2, r1
 801e654:	f022 0203 	bic.w	r2, r2, #3
 801e658:	3903      	subs	r1, #3
 801e65a:	458c      	cmp	ip, r1
 801e65c:	bf38      	it	cc
 801e65e:	2200      	movcc	r2, #0
 801e660:	441a      	add	r2, r3
 801e662:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801e666:	b17b      	cbz	r3, 801e688 <__mdiff+0x104>
 801e668:	6106      	str	r6, [r0, #16]
 801e66a:	e7a5      	b.n	801e5b8 <__mdiff+0x34>
 801e66c:	f855 8b04 	ldr.w	r8, [r5], #4
 801e670:	fa17 f488 	uxtah	r4, r7, r8
 801e674:	1422      	asrs	r2, r4, #16
 801e676:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801e67a:	b2a4      	uxth	r4, r4
 801e67c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801e680:	f84e 4b04 	str.w	r4, [lr], #4
 801e684:	1417      	asrs	r7, r2, #16
 801e686:	e7e0      	b.n	801e64a <__mdiff+0xc6>
 801e688:	3e01      	subs	r6, #1
 801e68a:	e7ea      	b.n	801e662 <__mdiff+0xde>
 801e68c:	08022baf 	.word	0x08022baf
 801e690:	08022bca 	.word	0x08022bca

0801e694 <__d2b>:
 801e694:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801e698:	4689      	mov	r9, r1
 801e69a:	2101      	movs	r1, #1
 801e69c:	ec57 6b10 	vmov	r6, r7, d0
 801e6a0:	4690      	mov	r8, r2
 801e6a2:	f7ff fcd5 	bl	801e050 <_Balloc>
 801e6a6:	4604      	mov	r4, r0
 801e6a8:	b930      	cbnz	r0, 801e6b8 <__d2b+0x24>
 801e6aa:	4602      	mov	r2, r0
 801e6ac:	4b25      	ldr	r3, [pc, #148]	; (801e744 <__d2b+0xb0>)
 801e6ae:	4826      	ldr	r0, [pc, #152]	; (801e748 <__d2b+0xb4>)
 801e6b0:	f240 310a 	movw	r1, #778	; 0x30a
 801e6b4:	f7fd fa0e 	bl	801bad4 <__assert_func>
 801e6b8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801e6bc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801e6c0:	bb35      	cbnz	r5, 801e710 <__d2b+0x7c>
 801e6c2:	2e00      	cmp	r6, #0
 801e6c4:	9301      	str	r3, [sp, #4]
 801e6c6:	d028      	beq.n	801e71a <__d2b+0x86>
 801e6c8:	4668      	mov	r0, sp
 801e6ca:	9600      	str	r6, [sp, #0]
 801e6cc:	f7ff fd8c 	bl	801e1e8 <__lo0bits>
 801e6d0:	9900      	ldr	r1, [sp, #0]
 801e6d2:	b300      	cbz	r0, 801e716 <__d2b+0x82>
 801e6d4:	9a01      	ldr	r2, [sp, #4]
 801e6d6:	f1c0 0320 	rsb	r3, r0, #32
 801e6da:	fa02 f303 	lsl.w	r3, r2, r3
 801e6de:	430b      	orrs	r3, r1
 801e6e0:	40c2      	lsrs	r2, r0
 801e6e2:	6163      	str	r3, [r4, #20]
 801e6e4:	9201      	str	r2, [sp, #4]
 801e6e6:	9b01      	ldr	r3, [sp, #4]
 801e6e8:	61a3      	str	r3, [r4, #24]
 801e6ea:	2b00      	cmp	r3, #0
 801e6ec:	bf14      	ite	ne
 801e6ee:	2202      	movne	r2, #2
 801e6f0:	2201      	moveq	r2, #1
 801e6f2:	6122      	str	r2, [r4, #16]
 801e6f4:	b1d5      	cbz	r5, 801e72c <__d2b+0x98>
 801e6f6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801e6fa:	4405      	add	r5, r0
 801e6fc:	f8c9 5000 	str.w	r5, [r9]
 801e700:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801e704:	f8c8 0000 	str.w	r0, [r8]
 801e708:	4620      	mov	r0, r4
 801e70a:	b003      	add	sp, #12
 801e70c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e710:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801e714:	e7d5      	b.n	801e6c2 <__d2b+0x2e>
 801e716:	6161      	str	r1, [r4, #20]
 801e718:	e7e5      	b.n	801e6e6 <__d2b+0x52>
 801e71a:	a801      	add	r0, sp, #4
 801e71c:	f7ff fd64 	bl	801e1e8 <__lo0bits>
 801e720:	9b01      	ldr	r3, [sp, #4]
 801e722:	6163      	str	r3, [r4, #20]
 801e724:	2201      	movs	r2, #1
 801e726:	6122      	str	r2, [r4, #16]
 801e728:	3020      	adds	r0, #32
 801e72a:	e7e3      	b.n	801e6f4 <__d2b+0x60>
 801e72c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801e730:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801e734:	f8c9 0000 	str.w	r0, [r9]
 801e738:	6918      	ldr	r0, [r3, #16]
 801e73a:	f7ff fd35 	bl	801e1a8 <__hi0bits>
 801e73e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801e742:	e7df      	b.n	801e704 <__d2b+0x70>
 801e744:	08022baf 	.word	0x08022baf
 801e748:	08022bca 	.word	0x08022bca

0801e74c <_calloc_r>:
 801e74c:	b513      	push	{r0, r1, r4, lr}
 801e74e:	434a      	muls	r2, r1
 801e750:	4611      	mov	r1, r2
 801e752:	9201      	str	r2, [sp, #4]
 801e754:	f7fd fbae 	bl	801beb4 <_malloc_r>
 801e758:	4604      	mov	r4, r0
 801e75a:	b118      	cbz	r0, 801e764 <_calloc_r+0x18>
 801e75c:	9a01      	ldr	r2, [sp, #4]
 801e75e:	2100      	movs	r1, #0
 801e760:	f7fd fb50 	bl	801be04 <memset>
 801e764:	4620      	mov	r0, r4
 801e766:	b002      	add	sp, #8
 801e768:	bd10      	pop	{r4, pc}

0801e76a <_realloc_r>:
 801e76a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e76c:	4607      	mov	r7, r0
 801e76e:	4614      	mov	r4, r2
 801e770:	460e      	mov	r6, r1
 801e772:	b921      	cbnz	r1, 801e77e <_realloc_r+0x14>
 801e774:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801e778:	4611      	mov	r1, r2
 801e77a:	f7fd bb9b 	b.w	801beb4 <_malloc_r>
 801e77e:	b922      	cbnz	r2, 801e78a <_realloc_r+0x20>
 801e780:	f7fd fb48 	bl	801be14 <_free_r>
 801e784:	4625      	mov	r5, r4
 801e786:	4628      	mov	r0, r5
 801e788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e78a:	f000 f9f5 	bl	801eb78 <_malloc_usable_size_r>
 801e78e:	42a0      	cmp	r0, r4
 801e790:	d20f      	bcs.n	801e7b2 <_realloc_r+0x48>
 801e792:	4621      	mov	r1, r4
 801e794:	4638      	mov	r0, r7
 801e796:	f7fd fb8d 	bl	801beb4 <_malloc_r>
 801e79a:	4605      	mov	r5, r0
 801e79c:	2800      	cmp	r0, #0
 801e79e:	d0f2      	beq.n	801e786 <_realloc_r+0x1c>
 801e7a0:	4631      	mov	r1, r6
 801e7a2:	4622      	mov	r2, r4
 801e7a4:	f7fd fb06 	bl	801bdb4 <memcpy>
 801e7a8:	4631      	mov	r1, r6
 801e7aa:	4638      	mov	r0, r7
 801e7ac:	f7fd fb32 	bl	801be14 <_free_r>
 801e7b0:	e7e9      	b.n	801e786 <_realloc_r+0x1c>
 801e7b2:	4635      	mov	r5, r6
 801e7b4:	e7e7      	b.n	801e786 <_realloc_r+0x1c>

0801e7b6 <__ssputs_r>:
 801e7b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e7ba:	688e      	ldr	r6, [r1, #8]
 801e7bc:	429e      	cmp	r6, r3
 801e7be:	4682      	mov	sl, r0
 801e7c0:	460c      	mov	r4, r1
 801e7c2:	4690      	mov	r8, r2
 801e7c4:	461f      	mov	r7, r3
 801e7c6:	d838      	bhi.n	801e83a <__ssputs_r+0x84>
 801e7c8:	898a      	ldrh	r2, [r1, #12]
 801e7ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801e7ce:	d032      	beq.n	801e836 <__ssputs_r+0x80>
 801e7d0:	6825      	ldr	r5, [r4, #0]
 801e7d2:	6909      	ldr	r1, [r1, #16]
 801e7d4:	eba5 0901 	sub.w	r9, r5, r1
 801e7d8:	6965      	ldr	r5, [r4, #20]
 801e7da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e7de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801e7e2:	3301      	adds	r3, #1
 801e7e4:	444b      	add	r3, r9
 801e7e6:	106d      	asrs	r5, r5, #1
 801e7e8:	429d      	cmp	r5, r3
 801e7ea:	bf38      	it	cc
 801e7ec:	461d      	movcc	r5, r3
 801e7ee:	0553      	lsls	r3, r2, #21
 801e7f0:	d531      	bpl.n	801e856 <__ssputs_r+0xa0>
 801e7f2:	4629      	mov	r1, r5
 801e7f4:	f7fd fb5e 	bl	801beb4 <_malloc_r>
 801e7f8:	4606      	mov	r6, r0
 801e7fa:	b950      	cbnz	r0, 801e812 <__ssputs_r+0x5c>
 801e7fc:	230c      	movs	r3, #12
 801e7fe:	f8ca 3000 	str.w	r3, [sl]
 801e802:	89a3      	ldrh	r3, [r4, #12]
 801e804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e808:	81a3      	strh	r3, [r4, #12]
 801e80a:	f04f 30ff 	mov.w	r0, #4294967295
 801e80e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e812:	6921      	ldr	r1, [r4, #16]
 801e814:	464a      	mov	r2, r9
 801e816:	f7fd facd 	bl	801bdb4 <memcpy>
 801e81a:	89a3      	ldrh	r3, [r4, #12]
 801e81c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801e820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e824:	81a3      	strh	r3, [r4, #12]
 801e826:	6126      	str	r6, [r4, #16]
 801e828:	6165      	str	r5, [r4, #20]
 801e82a:	444e      	add	r6, r9
 801e82c:	eba5 0509 	sub.w	r5, r5, r9
 801e830:	6026      	str	r6, [r4, #0]
 801e832:	60a5      	str	r5, [r4, #8]
 801e834:	463e      	mov	r6, r7
 801e836:	42be      	cmp	r6, r7
 801e838:	d900      	bls.n	801e83c <__ssputs_r+0x86>
 801e83a:	463e      	mov	r6, r7
 801e83c:	4632      	mov	r2, r6
 801e83e:	6820      	ldr	r0, [r4, #0]
 801e840:	4641      	mov	r1, r8
 801e842:	f7fd fac5 	bl	801bdd0 <memmove>
 801e846:	68a3      	ldr	r3, [r4, #8]
 801e848:	6822      	ldr	r2, [r4, #0]
 801e84a:	1b9b      	subs	r3, r3, r6
 801e84c:	4432      	add	r2, r6
 801e84e:	60a3      	str	r3, [r4, #8]
 801e850:	6022      	str	r2, [r4, #0]
 801e852:	2000      	movs	r0, #0
 801e854:	e7db      	b.n	801e80e <__ssputs_r+0x58>
 801e856:	462a      	mov	r2, r5
 801e858:	f7ff ff87 	bl	801e76a <_realloc_r>
 801e85c:	4606      	mov	r6, r0
 801e85e:	2800      	cmp	r0, #0
 801e860:	d1e1      	bne.n	801e826 <__ssputs_r+0x70>
 801e862:	6921      	ldr	r1, [r4, #16]
 801e864:	4650      	mov	r0, sl
 801e866:	f7fd fad5 	bl	801be14 <_free_r>
 801e86a:	e7c7      	b.n	801e7fc <__ssputs_r+0x46>

0801e86c <_svfiprintf_r>:
 801e86c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e870:	4698      	mov	r8, r3
 801e872:	898b      	ldrh	r3, [r1, #12]
 801e874:	061b      	lsls	r3, r3, #24
 801e876:	b09d      	sub	sp, #116	; 0x74
 801e878:	4607      	mov	r7, r0
 801e87a:	460d      	mov	r5, r1
 801e87c:	4614      	mov	r4, r2
 801e87e:	d50e      	bpl.n	801e89e <_svfiprintf_r+0x32>
 801e880:	690b      	ldr	r3, [r1, #16]
 801e882:	b963      	cbnz	r3, 801e89e <_svfiprintf_r+0x32>
 801e884:	2140      	movs	r1, #64	; 0x40
 801e886:	f7fd fb15 	bl	801beb4 <_malloc_r>
 801e88a:	6028      	str	r0, [r5, #0]
 801e88c:	6128      	str	r0, [r5, #16]
 801e88e:	b920      	cbnz	r0, 801e89a <_svfiprintf_r+0x2e>
 801e890:	230c      	movs	r3, #12
 801e892:	603b      	str	r3, [r7, #0]
 801e894:	f04f 30ff 	mov.w	r0, #4294967295
 801e898:	e0d1      	b.n	801ea3e <_svfiprintf_r+0x1d2>
 801e89a:	2340      	movs	r3, #64	; 0x40
 801e89c:	616b      	str	r3, [r5, #20]
 801e89e:	2300      	movs	r3, #0
 801e8a0:	9309      	str	r3, [sp, #36]	; 0x24
 801e8a2:	2320      	movs	r3, #32
 801e8a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e8a8:	f8cd 800c 	str.w	r8, [sp, #12]
 801e8ac:	2330      	movs	r3, #48	; 0x30
 801e8ae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801ea58 <_svfiprintf_r+0x1ec>
 801e8b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e8b6:	f04f 0901 	mov.w	r9, #1
 801e8ba:	4623      	mov	r3, r4
 801e8bc:	469a      	mov	sl, r3
 801e8be:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e8c2:	b10a      	cbz	r2, 801e8c8 <_svfiprintf_r+0x5c>
 801e8c4:	2a25      	cmp	r2, #37	; 0x25
 801e8c6:	d1f9      	bne.n	801e8bc <_svfiprintf_r+0x50>
 801e8c8:	ebba 0b04 	subs.w	fp, sl, r4
 801e8cc:	d00b      	beq.n	801e8e6 <_svfiprintf_r+0x7a>
 801e8ce:	465b      	mov	r3, fp
 801e8d0:	4622      	mov	r2, r4
 801e8d2:	4629      	mov	r1, r5
 801e8d4:	4638      	mov	r0, r7
 801e8d6:	f7ff ff6e 	bl	801e7b6 <__ssputs_r>
 801e8da:	3001      	adds	r0, #1
 801e8dc:	f000 80aa 	beq.w	801ea34 <_svfiprintf_r+0x1c8>
 801e8e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e8e2:	445a      	add	r2, fp
 801e8e4:	9209      	str	r2, [sp, #36]	; 0x24
 801e8e6:	f89a 3000 	ldrb.w	r3, [sl]
 801e8ea:	2b00      	cmp	r3, #0
 801e8ec:	f000 80a2 	beq.w	801ea34 <_svfiprintf_r+0x1c8>
 801e8f0:	2300      	movs	r3, #0
 801e8f2:	f04f 32ff 	mov.w	r2, #4294967295
 801e8f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e8fa:	f10a 0a01 	add.w	sl, sl, #1
 801e8fe:	9304      	str	r3, [sp, #16]
 801e900:	9307      	str	r3, [sp, #28]
 801e902:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e906:	931a      	str	r3, [sp, #104]	; 0x68
 801e908:	4654      	mov	r4, sl
 801e90a:	2205      	movs	r2, #5
 801e90c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e910:	4851      	ldr	r0, [pc, #324]	; (801ea58 <_svfiprintf_r+0x1ec>)
 801e912:	f7e1 fc65 	bl	80001e0 <memchr>
 801e916:	9a04      	ldr	r2, [sp, #16]
 801e918:	b9d8      	cbnz	r0, 801e952 <_svfiprintf_r+0xe6>
 801e91a:	06d0      	lsls	r0, r2, #27
 801e91c:	bf44      	itt	mi
 801e91e:	2320      	movmi	r3, #32
 801e920:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e924:	0711      	lsls	r1, r2, #28
 801e926:	bf44      	itt	mi
 801e928:	232b      	movmi	r3, #43	; 0x2b
 801e92a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e92e:	f89a 3000 	ldrb.w	r3, [sl]
 801e932:	2b2a      	cmp	r3, #42	; 0x2a
 801e934:	d015      	beq.n	801e962 <_svfiprintf_r+0xf6>
 801e936:	9a07      	ldr	r2, [sp, #28]
 801e938:	4654      	mov	r4, sl
 801e93a:	2000      	movs	r0, #0
 801e93c:	f04f 0c0a 	mov.w	ip, #10
 801e940:	4621      	mov	r1, r4
 801e942:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e946:	3b30      	subs	r3, #48	; 0x30
 801e948:	2b09      	cmp	r3, #9
 801e94a:	d94e      	bls.n	801e9ea <_svfiprintf_r+0x17e>
 801e94c:	b1b0      	cbz	r0, 801e97c <_svfiprintf_r+0x110>
 801e94e:	9207      	str	r2, [sp, #28]
 801e950:	e014      	b.n	801e97c <_svfiprintf_r+0x110>
 801e952:	eba0 0308 	sub.w	r3, r0, r8
 801e956:	fa09 f303 	lsl.w	r3, r9, r3
 801e95a:	4313      	orrs	r3, r2
 801e95c:	9304      	str	r3, [sp, #16]
 801e95e:	46a2      	mov	sl, r4
 801e960:	e7d2      	b.n	801e908 <_svfiprintf_r+0x9c>
 801e962:	9b03      	ldr	r3, [sp, #12]
 801e964:	1d19      	adds	r1, r3, #4
 801e966:	681b      	ldr	r3, [r3, #0]
 801e968:	9103      	str	r1, [sp, #12]
 801e96a:	2b00      	cmp	r3, #0
 801e96c:	bfbb      	ittet	lt
 801e96e:	425b      	neglt	r3, r3
 801e970:	f042 0202 	orrlt.w	r2, r2, #2
 801e974:	9307      	strge	r3, [sp, #28]
 801e976:	9307      	strlt	r3, [sp, #28]
 801e978:	bfb8      	it	lt
 801e97a:	9204      	strlt	r2, [sp, #16]
 801e97c:	7823      	ldrb	r3, [r4, #0]
 801e97e:	2b2e      	cmp	r3, #46	; 0x2e
 801e980:	d10c      	bne.n	801e99c <_svfiprintf_r+0x130>
 801e982:	7863      	ldrb	r3, [r4, #1]
 801e984:	2b2a      	cmp	r3, #42	; 0x2a
 801e986:	d135      	bne.n	801e9f4 <_svfiprintf_r+0x188>
 801e988:	9b03      	ldr	r3, [sp, #12]
 801e98a:	1d1a      	adds	r2, r3, #4
 801e98c:	681b      	ldr	r3, [r3, #0]
 801e98e:	9203      	str	r2, [sp, #12]
 801e990:	2b00      	cmp	r3, #0
 801e992:	bfb8      	it	lt
 801e994:	f04f 33ff 	movlt.w	r3, #4294967295
 801e998:	3402      	adds	r4, #2
 801e99a:	9305      	str	r3, [sp, #20]
 801e99c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801ea68 <_svfiprintf_r+0x1fc>
 801e9a0:	7821      	ldrb	r1, [r4, #0]
 801e9a2:	2203      	movs	r2, #3
 801e9a4:	4650      	mov	r0, sl
 801e9a6:	f7e1 fc1b 	bl	80001e0 <memchr>
 801e9aa:	b140      	cbz	r0, 801e9be <_svfiprintf_r+0x152>
 801e9ac:	2340      	movs	r3, #64	; 0x40
 801e9ae:	eba0 000a 	sub.w	r0, r0, sl
 801e9b2:	fa03 f000 	lsl.w	r0, r3, r0
 801e9b6:	9b04      	ldr	r3, [sp, #16]
 801e9b8:	4303      	orrs	r3, r0
 801e9ba:	3401      	adds	r4, #1
 801e9bc:	9304      	str	r3, [sp, #16]
 801e9be:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e9c2:	4826      	ldr	r0, [pc, #152]	; (801ea5c <_svfiprintf_r+0x1f0>)
 801e9c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e9c8:	2206      	movs	r2, #6
 801e9ca:	f7e1 fc09 	bl	80001e0 <memchr>
 801e9ce:	2800      	cmp	r0, #0
 801e9d0:	d038      	beq.n	801ea44 <_svfiprintf_r+0x1d8>
 801e9d2:	4b23      	ldr	r3, [pc, #140]	; (801ea60 <_svfiprintf_r+0x1f4>)
 801e9d4:	bb1b      	cbnz	r3, 801ea1e <_svfiprintf_r+0x1b2>
 801e9d6:	9b03      	ldr	r3, [sp, #12]
 801e9d8:	3307      	adds	r3, #7
 801e9da:	f023 0307 	bic.w	r3, r3, #7
 801e9de:	3308      	adds	r3, #8
 801e9e0:	9303      	str	r3, [sp, #12]
 801e9e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e9e4:	4433      	add	r3, r6
 801e9e6:	9309      	str	r3, [sp, #36]	; 0x24
 801e9e8:	e767      	b.n	801e8ba <_svfiprintf_r+0x4e>
 801e9ea:	fb0c 3202 	mla	r2, ip, r2, r3
 801e9ee:	460c      	mov	r4, r1
 801e9f0:	2001      	movs	r0, #1
 801e9f2:	e7a5      	b.n	801e940 <_svfiprintf_r+0xd4>
 801e9f4:	2300      	movs	r3, #0
 801e9f6:	3401      	adds	r4, #1
 801e9f8:	9305      	str	r3, [sp, #20]
 801e9fa:	4619      	mov	r1, r3
 801e9fc:	f04f 0c0a 	mov.w	ip, #10
 801ea00:	4620      	mov	r0, r4
 801ea02:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ea06:	3a30      	subs	r2, #48	; 0x30
 801ea08:	2a09      	cmp	r2, #9
 801ea0a:	d903      	bls.n	801ea14 <_svfiprintf_r+0x1a8>
 801ea0c:	2b00      	cmp	r3, #0
 801ea0e:	d0c5      	beq.n	801e99c <_svfiprintf_r+0x130>
 801ea10:	9105      	str	r1, [sp, #20]
 801ea12:	e7c3      	b.n	801e99c <_svfiprintf_r+0x130>
 801ea14:	fb0c 2101 	mla	r1, ip, r1, r2
 801ea18:	4604      	mov	r4, r0
 801ea1a:	2301      	movs	r3, #1
 801ea1c:	e7f0      	b.n	801ea00 <_svfiprintf_r+0x194>
 801ea1e:	ab03      	add	r3, sp, #12
 801ea20:	9300      	str	r3, [sp, #0]
 801ea22:	462a      	mov	r2, r5
 801ea24:	4b0f      	ldr	r3, [pc, #60]	; (801ea64 <_svfiprintf_r+0x1f8>)
 801ea26:	a904      	add	r1, sp, #16
 801ea28:	4638      	mov	r0, r7
 801ea2a:	f7fd fc97 	bl	801c35c <_printf_float>
 801ea2e:	1c42      	adds	r2, r0, #1
 801ea30:	4606      	mov	r6, r0
 801ea32:	d1d6      	bne.n	801e9e2 <_svfiprintf_r+0x176>
 801ea34:	89ab      	ldrh	r3, [r5, #12]
 801ea36:	065b      	lsls	r3, r3, #25
 801ea38:	f53f af2c 	bmi.w	801e894 <_svfiprintf_r+0x28>
 801ea3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ea3e:	b01d      	add	sp, #116	; 0x74
 801ea40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea44:	ab03      	add	r3, sp, #12
 801ea46:	9300      	str	r3, [sp, #0]
 801ea48:	462a      	mov	r2, r5
 801ea4a:	4b06      	ldr	r3, [pc, #24]	; (801ea64 <_svfiprintf_r+0x1f8>)
 801ea4c:	a904      	add	r1, sp, #16
 801ea4e:	4638      	mov	r0, r7
 801ea50:	f7fd ff28 	bl	801c8a4 <_printf_i>
 801ea54:	e7eb      	b.n	801ea2e <_svfiprintf_r+0x1c2>
 801ea56:	bf00      	nop
 801ea58:	08022a88 	.word	0x08022a88
 801ea5c:	08022a92 	.word	0x08022a92
 801ea60:	0801c35d 	.word	0x0801c35d
 801ea64:	0801e7b7 	.word	0x0801e7b7
 801ea68:	08022a8e 	.word	0x08022a8e

0801ea6c <_read_r>:
 801ea6c:	b538      	push	{r3, r4, r5, lr}
 801ea6e:	4d07      	ldr	r5, [pc, #28]	; (801ea8c <_read_r+0x20>)
 801ea70:	4604      	mov	r4, r0
 801ea72:	4608      	mov	r0, r1
 801ea74:	4611      	mov	r1, r2
 801ea76:	2200      	movs	r2, #0
 801ea78:	602a      	str	r2, [r5, #0]
 801ea7a:	461a      	mov	r2, r3
 801ea7c:	f7fc f9de 	bl	801ae3c <_read>
 801ea80:	1c43      	adds	r3, r0, #1
 801ea82:	d102      	bne.n	801ea8a <_read_r+0x1e>
 801ea84:	682b      	ldr	r3, [r5, #0]
 801ea86:	b103      	cbz	r3, 801ea8a <_read_r+0x1e>
 801ea88:	6023      	str	r3, [r4, #0]
 801ea8a:	bd38      	pop	{r3, r4, r5, pc}
 801ea8c:	20008334 	.word	0x20008334

0801ea90 <_raise_r>:
 801ea90:	291f      	cmp	r1, #31
 801ea92:	b538      	push	{r3, r4, r5, lr}
 801ea94:	4604      	mov	r4, r0
 801ea96:	460d      	mov	r5, r1
 801ea98:	d904      	bls.n	801eaa4 <_raise_r+0x14>
 801ea9a:	2316      	movs	r3, #22
 801ea9c:	6003      	str	r3, [r0, #0]
 801ea9e:	f04f 30ff 	mov.w	r0, #4294967295
 801eaa2:	bd38      	pop	{r3, r4, r5, pc}
 801eaa4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801eaa6:	b112      	cbz	r2, 801eaae <_raise_r+0x1e>
 801eaa8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801eaac:	b94b      	cbnz	r3, 801eac2 <_raise_r+0x32>
 801eaae:	4620      	mov	r0, r4
 801eab0:	f000 f830 	bl	801eb14 <_getpid_r>
 801eab4:	462a      	mov	r2, r5
 801eab6:	4601      	mov	r1, r0
 801eab8:	4620      	mov	r0, r4
 801eaba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801eabe:	f000 b817 	b.w	801eaf0 <_kill_r>
 801eac2:	2b01      	cmp	r3, #1
 801eac4:	d00a      	beq.n	801eadc <_raise_r+0x4c>
 801eac6:	1c59      	adds	r1, r3, #1
 801eac8:	d103      	bne.n	801ead2 <_raise_r+0x42>
 801eaca:	2316      	movs	r3, #22
 801eacc:	6003      	str	r3, [r0, #0]
 801eace:	2001      	movs	r0, #1
 801ead0:	e7e7      	b.n	801eaa2 <_raise_r+0x12>
 801ead2:	2400      	movs	r4, #0
 801ead4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801ead8:	4628      	mov	r0, r5
 801eada:	4798      	blx	r3
 801eadc:	2000      	movs	r0, #0
 801eade:	e7e0      	b.n	801eaa2 <_raise_r+0x12>

0801eae0 <raise>:
 801eae0:	4b02      	ldr	r3, [pc, #8]	; (801eaec <raise+0xc>)
 801eae2:	4601      	mov	r1, r0
 801eae4:	6818      	ldr	r0, [r3, #0]
 801eae6:	f7ff bfd3 	b.w	801ea90 <_raise_r>
 801eaea:	bf00      	nop
 801eaec:	10000134 	.word	0x10000134

0801eaf0 <_kill_r>:
 801eaf0:	b538      	push	{r3, r4, r5, lr}
 801eaf2:	4d07      	ldr	r5, [pc, #28]	; (801eb10 <_kill_r+0x20>)
 801eaf4:	2300      	movs	r3, #0
 801eaf6:	4604      	mov	r4, r0
 801eaf8:	4608      	mov	r0, r1
 801eafa:	4611      	mov	r1, r2
 801eafc:	602b      	str	r3, [r5, #0]
 801eafe:	f7e2 fee9 	bl	80018d4 <_kill>
 801eb02:	1c43      	adds	r3, r0, #1
 801eb04:	d102      	bne.n	801eb0c <_kill_r+0x1c>
 801eb06:	682b      	ldr	r3, [r5, #0]
 801eb08:	b103      	cbz	r3, 801eb0c <_kill_r+0x1c>
 801eb0a:	6023      	str	r3, [r4, #0]
 801eb0c:	bd38      	pop	{r3, r4, r5, pc}
 801eb0e:	bf00      	nop
 801eb10:	20008334 	.word	0x20008334

0801eb14 <_getpid_r>:
 801eb14:	f7e2 bed6 	b.w	80018c4 <_getpid>

0801eb18 <__ascii_wctomb>:
 801eb18:	b149      	cbz	r1, 801eb2e <__ascii_wctomb+0x16>
 801eb1a:	2aff      	cmp	r2, #255	; 0xff
 801eb1c:	bf85      	ittet	hi
 801eb1e:	238a      	movhi	r3, #138	; 0x8a
 801eb20:	6003      	strhi	r3, [r0, #0]
 801eb22:	700a      	strbls	r2, [r1, #0]
 801eb24:	f04f 30ff 	movhi.w	r0, #4294967295
 801eb28:	bf98      	it	ls
 801eb2a:	2001      	movls	r0, #1
 801eb2c:	4770      	bx	lr
 801eb2e:	4608      	mov	r0, r1
 801eb30:	4770      	bx	lr
	...

0801eb34 <_fstat_r>:
 801eb34:	b538      	push	{r3, r4, r5, lr}
 801eb36:	4d07      	ldr	r5, [pc, #28]	; (801eb54 <_fstat_r+0x20>)
 801eb38:	2300      	movs	r3, #0
 801eb3a:	4604      	mov	r4, r0
 801eb3c:	4608      	mov	r0, r1
 801eb3e:	4611      	mov	r1, r2
 801eb40:	602b      	str	r3, [r5, #0]
 801eb42:	f7e2 feef 	bl	8001924 <_fstat>
 801eb46:	1c43      	adds	r3, r0, #1
 801eb48:	d102      	bne.n	801eb50 <_fstat_r+0x1c>
 801eb4a:	682b      	ldr	r3, [r5, #0]
 801eb4c:	b103      	cbz	r3, 801eb50 <_fstat_r+0x1c>
 801eb4e:	6023      	str	r3, [r4, #0]
 801eb50:	bd38      	pop	{r3, r4, r5, pc}
 801eb52:	bf00      	nop
 801eb54:	20008334 	.word	0x20008334

0801eb58 <_isatty_r>:
 801eb58:	b538      	push	{r3, r4, r5, lr}
 801eb5a:	4d06      	ldr	r5, [pc, #24]	; (801eb74 <_isatty_r+0x1c>)
 801eb5c:	2300      	movs	r3, #0
 801eb5e:	4604      	mov	r4, r0
 801eb60:	4608      	mov	r0, r1
 801eb62:	602b      	str	r3, [r5, #0]
 801eb64:	f7e2 feee 	bl	8001944 <_isatty>
 801eb68:	1c43      	adds	r3, r0, #1
 801eb6a:	d102      	bne.n	801eb72 <_isatty_r+0x1a>
 801eb6c:	682b      	ldr	r3, [r5, #0]
 801eb6e:	b103      	cbz	r3, 801eb72 <_isatty_r+0x1a>
 801eb70:	6023      	str	r3, [r4, #0]
 801eb72:	bd38      	pop	{r3, r4, r5, pc}
 801eb74:	20008334 	.word	0x20008334

0801eb78 <_malloc_usable_size_r>:
 801eb78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801eb7c:	1f18      	subs	r0, r3, #4
 801eb7e:	2b00      	cmp	r3, #0
 801eb80:	bfbc      	itt	lt
 801eb82:	580b      	ldrlt	r3, [r1, r0]
 801eb84:	18c0      	addlt	r0, r0, r3
 801eb86:	4770      	bx	lr

0801eb88 <_init>:
 801eb88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eb8a:	bf00      	nop
 801eb8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801eb8e:	bc08      	pop	{r3}
 801eb90:	469e      	mov	lr, r3
 801eb92:	4770      	bx	lr

0801eb94 <_fini>:
 801eb94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eb96:	bf00      	nop
 801eb98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801eb9a:	bc08      	pop	{r3}
 801eb9c:	469e      	mov	lr, r3
 801eb9e:	4770      	bx	lr
